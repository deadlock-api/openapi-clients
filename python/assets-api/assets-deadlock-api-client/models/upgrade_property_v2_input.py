# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from assets-deadlock-api-client.models.m_estatsusageflags import MEstatsusageflags
from assets-deadlock-api-client.models.m_strvalue import MStrvalue
from assets-deadlock-api-client.models.raw_ability_section_type_v2 import RawAbilitySectionTypeV2
from assets-deadlock-api-client.models.raw_item_property_scale_function_subclass_v2_input import RawItemPropertyScaleFunctionSubclassV2Input
from typing import Optional, Set
from typing_extensions import Self

class UpgradePropertyV2Input(BaseModel):
    """
    UpgradePropertyV2Input
    """ # noqa: E501
    m_str_value: Optional[MStrvalue] = Field(default=None, alias="m_strValue")
    m_b_can_set_token_override: Optional[StrictBool] = Field(default=None, alias="m_bCanSetTokenOverride")
    m_e_provided_property_type: Optional[StrictStr] = Field(default=None, alias="m_eProvidedPropertyType")
    m_str_css_class: Optional[StrictStr] = Field(default=None, alias="m_strCSSClass")
    m_e_stats_usage_flags: Optional[MEstatsusageflags] = Field(default=None, alias="m_eStatsUsageFlags")
    m_b_is_negative_attribute: Optional[StrictBool] = Field(default=None, alias="m_bIsNegativeAttribute")
    m_str_disable_value: Optional[StrictStr] = Field(default=None, alias="m_strDisableValue")
    m_str_loc_token_override: Optional[StrictStr] = Field(default=None, alias="m_strLocTokenOverride")
    m_e_display_units: Optional[StrictStr] = Field(default=None, alias="m_eDisplayUnits")
    scale_function: Optional[RawItemPropertyScaleFunctionSubclassV2Input] = None
    prefix: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    postfix: Optional[StrictStr] = None
    postvalue_label: Optional[StrictStr] = None
    conditional: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    tooltip_section: Optional[RawAbilitySectionTypeV2] = None
    tooltip_is_elevated: Optional[StrictBool] = None
    tooltip_is_important: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["m_strValue", "m_bCanSetTokenOverride", "m_eProvidedPropertyType", "m_strCSSClass", "m_eStatsUsageFlags", "m_bIsNegativeAttribute", "m_strDisableValue", "m_strLocTokenOverride", "m_eDisplayUnits", "scale_function", "prefix", "label", "postfix", "postvalue_label", "conditional", "icon", "tooltip_section", "tooltip_is_elevated", "tooltip_is_important"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradePropertyV2Input from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of m_str_value
        if self.m_str_value:
            _dict['m_strValue'] = self.m_str_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m_e_stats_usage_flags
        if self.m_e_stats_usage_flags:
            _dict['m_eStatsUsageFlags'] = self.m_e_stats_usage_flags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_function
        if self.scale_function:
            _dict['scale_function'] = self.scale_function.to_dict()
        # set to None if m_str_value (nullable) is None
        # and model_fields_set contains the field
        if self.m_str_value is None and "m_str_value" in self.model_fields_set:
            _dict['m_strValue'] = None

        # set to None if m_b_can_set_token_override (nullable) is None
        # and model_fields_set contains the field
        if self.m_b_can_set_token_override is None and "m_b_can_set_token_override" in self.model_fields_set:
            _dict['m_bCanSetTokenOverride'] = None

        # set to None if m_e_provided_property_type (nullable) is None
        # and model_fields_set contains the field
        if self.m_e_provided_property_type is None and "m_e_provided_property_type" in self.model_fields_set:
            _dict['m_eProvidedPropertyType'] = None

        # set to None if m_str_css_class (nullable) is None
        # and model_fields_set contains the field
        if self.m_str_css_class is None and "m_str_css_class" in self.model_fields_set:
            _dict['m_strCSSClass'] = None

        # set to None if m_e_stats_usage_flags (nullable) is None
        # and model_fields_set contains the field
        if self.m_e_stats_usage_flags is None and "m_e_stats_usage_flags" in self.model_fields_set:
            _dict['m_eStatsUsageFlags'] = None

        # set to None if m_b_is_negative_attribute (nullable) is None
        # and model_fields_set contains the field
        if self.m_b_is_negative_attribute is None and "m_b_is_negative_attribute" in self.model_fields_set:
            _dict['m_bIsNegativeAttribute'] = None

        # set to None if m_str_disable_value (nullable) is None
        # and model_fields_set contains the field
        if self.m_str_disable_value is None and "m_str_disable_value" in self.model_fields_set:
            _dict['m_strDisableValue'] = None

        # set to None if m_str_loc_token_override (nullable) is None
        # and model_fields_set contains the field
        if self.m_str_loc_token_override is None and "m_str_loc_token_override" in self.model_fields_set:
            _dict['m_strLocTokenOverride'] = None

        # set to None if m_e_display_units (nullable) is None
        # and model_fields_set contains the field
        if self.m_e_display_units is None and "m_e_display_units" in self.model_fields_set:
            _dict['m_eDisplayUnits'] = None

        # set to None if scale_function (nullable) is None
        # and model_fields_set contains the field
        if self.scale_function is None and "scale_function" in self.model_fields_set:
            _dict['scale_function'] = None

        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict['prefix'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if postfix (nullable) is None
        # and model_fields_set contains the field
        if self.postfix is None and "postfix" in self.model_fields_set:
            _dict['postfix'] = None

        # set to None if postvalue_label (nullable) is None
        # and model_fields_set contains the field
        if self.postvalue_label is None and "postvalue_label" in self.model_fields_set:
            _dict['postvalue_label'] = None

        # set to None if conditional (nullable) is None
        # and model_fields_set contains the field
        if self.conditional is None and "conditional" in self.model_fields_set:
            _dict['conditional'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if tooltip_section (nullable) is None
        # and model_fields_set contains the field
        if self.tooltip_section is None and "tooltip_section" in self.model_fields_set:
            _dict['tooltip_section'] = None

        # set to None if tooltip_is_elevated (nullable) is None
        # and model_fields_set contains the field
        if self.tooltip_is_elevated is None and "tooltip_is_elevated" in self.model_fields_set:
            _dict['tooltip_is_elevated'] = None

        # set to None if tooltip_is_important (nullable) is None
        # and model_fields_set contains the field
        if self.tooltip_is_important is None and "tooltip_is_important" in self.model_fields_set:
            _dict['tooltip_is_important'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradePropertyV2Input from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "m_strValue": MStrvalue.from_dict(obj["m_strValue"]) if obj.get("m_strValue") is not None else None,
            "m_bCanSetTokenOverride": obj.get("m_bCanSetTokenOverride"),
            "m_eProvidedPropertyType": obj.get("m_eProvidedPropertyType"),
            "m_strCSSClass": obj.get("m_strCSSClass"),
            "m_eStatsUsageFlags": MEstatsusageflags.from_dict(obj["m_eStatsUsageFlags"]) if obj.get("m_eStatsUsageFlags") is not None else None,
            "m_bIsNegativeAttribute": obj.get("m_bIsNegativeAttribute"),
            "m_strDisableValue": obj.get("m_strDisableValue"),
            "m_strLocTokenOverride": obj.get("m_strLocTokenOverride"),
            "m_eDisplayUnits": obj.get("m_eDisplayUnits"),
            "scale_function": RawItemPropertyScaleFunctionSubclassV2Input.from_dict(obj["scale_function"]) if obj.get("scale_function") is not None else None,
            "prefix": obj.get("prefix"),
            "label": obj.get("label"),
            "postfix": obj.get("postfix"),
            "postvalue_label": obj.get("postvalue_label"),
            "conditional": obj.get("conditional"),
            "icon": obj.get("icon"),
            "tooltip_section": obj.get("tooltip_section"),
            "tooltip_is_elevated": obj.get("tooltip_is_elevated"),
            "tooltip_is_important": obj.get("tooltip_is_important")
        })
        return _obj


