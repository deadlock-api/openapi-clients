# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from assets-deadlock-api-client.models.aiming_shot_spread_penalty import AimingShotSpreadPenalty
from assets-deadlock-api-client.models.raw_item_weapon_info_bullet_speed_curve_v2 import RawItemWeaponInfoBulletSpeedCurveV2
from assets-deadlock-api-client.models.raw_weapon_info_horizontal_recoil_v2 import RawWeaponInfoHorizontalRecoilV2
from assets-deadlock-api-client.models.raw_weapon_info_vertical_recoil_v2 import RawWeaponInfoVerticalRecoilV2
from assets-deadlock-api-client.models.standing_shot_spread_penalty import StandingShotSpreadPenalty
from typing import Optional, Set
from typing_extensions import Self

class RawWeaponInfoV2(BaseModel):
    """
    RawWeaponInfoV2
    """ # noqa: E501
    can_zoom: Optional[StrictBool] = None
    bullet_damage: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_gravity_scale: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_inherit_shooter_velocity_scale: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_lifetime: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_radius: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_radius_vs_world: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_reflect_amount: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_reflect_scale: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_whiz_distance: Optional[Union[StrictFloat, StrictInt]] = None
    burst_shot_cooldown: Optional[Union[StrictFloat, StrictInt]] = None
    crit_bonus_against_npcs: Optional[Union[StrictFloat, StrictInt]] = None
    crit_bonus_end: Optional[Union[StrictFloat, StrictInt]] = None
    crit_bonus_end_range: Optional[Union[StrictFloat, StrictInt]] = None
    crit_bonus_start: Optional[Union[StrictFloat, StrictInt]] = None
    crit_bonus_start_range: Optional[Union[StrictFloat, StrictInt]] = None
    cycle_time: Optional[Union[StrictFloat, StrictInt]] = None
    intra_burst_cycle_time: Optional[Union[StrictFloat, StrictInt]] = None
    max_spin_cycle_time: Optional[Union[StrictFloat, StrictInt]] = None
    damage_falloff_bias: Optional[Union[StrictFloat, StrictInt]] = None
    damage_falloff_end_range: Optional[Union[StrictFloat, StrictInt]] = None
    damage_falloff_end_scale: Optional[Union[StrictFloat, StrictInt]] = None
    damage_falloff_start_range: Optional[Union[StrictFloat, StrictInt]] = None
    damage_falloff_start_scale: Optional[Union[StrictFloat, StrictInt]] = None
    horizontal_punch: Optional[Union[StrictFloat, StrictInt]] = None
    range: Optional[Union[StrictFloat, StrictInt]] = None
    recoil_recovery_delay_factor: Optional[Union[StrictFloat, StrictInt]] = None
    recoil_recovery_speed: Optional[Union[StrictFloat, StrictInt]] = None
    recoil_shot_index_recovery_time_factor: Optional[Union[StrictFloat, StrictInt]] = None
    recoil_speed: Optional[Union[StrictFloat, StrictInt]] = None
    reload_move_speed: Optional[Union[StrictFloat, StrictInt]] = None
    scatter_yaw_scale: Optional[Union[StrictFloat, StrictInt]] = None
    aiming_shot_spread_penalty: Optional[AimingShotSpreadPenalty] = None
    standing_shot_spread_penalty: Optional[StandingShotSpreadPenalty] = None
    shoot_move_speed_percent: Optional[Union[StrictFloat, StrictInt]] = None
    shoot_spread_penalty_decay: Optional[Union[StrictFloat, StrictInt]] = None
    shoot_spread_penalty_decay_delay: Optional[Union[StrictFloat, StrictInt]] = None
    shoot_spread_penalty_per_shot: Optional[Union[StrictFloat, StrictInt]] = None
    shooting_up_spread_penalty: Optional[Union[StrictFloat, StrictInt]] = None
    vertical_punch: Optional[Union[StrictFloat, StrictInt]] = None
    zoom_fov: Optional[Union[StrictFloat, StrictInt]] = None
    zoom_move_speed_percent: Optional[Union[StrictFloat, StrictInt]] = None
    bullets: Optional[StrictInt] = None
    burst_shot_count: Optional[StrictInt] = None
    clip_size: Optional[StrictInt] = None
    spread: Optional[Union[StrictFloat, StrictInt]] = None
    standing_spread: Optional[Union[StrictFloat, StrictInt]] = None
    low_ammo_indicator_threshold: Optional[Union[StrictFloat, StrictInt]] = None
    recoil_seed: Optional[Union[StrictFloat, StrictInt]] = None
    reload_duration: Optional[Union[StrictFloat, StrictInt]] = None
    bullet_speed_curve: Optional[RawItemWeaponInfoBulletSpeedCurveV2] = None
    horizontal_recoil: Optional[RawWeaponInfoHorizontalRecoilV2] = None
    vertical_recoil: Optional[RawWeaponInfoVerticalRecoilV2] = None
    __properties: ClassVar[List[str]] = ["can_zoom", "bullet_damage", "bullet_gravity_scale", "bullet_inherit_shooter_velocity_scale", "bullet_lifetime", "bullet_radius", "bullet_radius_vs_world", "bullet_reflect_amount", "bullet_reflect_scale", "bullet_whiz_distance", "burst_shot_cooldown", "crit_bonus_against_npcs", "crit_bonus_end", "crit_bonus_end_range", "crit_bonus_start", "crit_bonus_start_range", "cycle_time", "intra_burst_cycle_time", "max_spin_cycle_time", "damage_falloff_bias", "damage_falloff_end_range", "damage_falloff_end_scale", "damage_falloff_start_range", "damage_falloff_start_scale", "horizontal_punch", "range", "recoil_recovery_delay_factor", "recoil_recovery_speed", "recoil_shot_index_recovery_time_factor", "recoil_speed", "reload_move_speed", "scatter_yaw_scale", "aiming_shot_spread_penalty", "standing_shot_spread_penalty", "shoot_move_speed_percent", "shoot_spread_penalty_decay", "shoot_spread_penalty_decay_delay", "shoot_spread_penalty_per_shot", "shooting_up_spread_penalty", "vertical_punch", "zoom_fov", "zoom_move_speed_percent", "bullets", "burst_shot_count", "clip_size", "spread", "standing_spread", "low_ammo_indicator_threshold", "recoil_seed", "reload_duration", "bullet_speed_curve", "horizontal_recoil", "vertical_recoil"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawWeaponInfoV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aiming_shot_spread_penalty
        if self.aiming_shot_spread_penalty:
            _dict['aiming_shot_spread_penalty'] = self.aiming_shot_spread_penalty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standing_shot_spread_penalty
        if self.standing_shot_spread_penalty:
            _dict['standing_shot_spread_penalty'] = self.standing_shot_spread_penalty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bullet_speed_curve
        if self.bullet_speed_curve:
            _dict['bullet_speed_curve'] = self.bullet_speed_curve.to_dict()
        # override the default output from pydantic by calling `to_dict()` of horizontal_recoil
        if self.horizontal_recoil:
            _dict['horizontal_recoil'] = self.horizontal_recoil.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vertical_recoil
        if self.vertical_recoil:
            _dict['vertical_recoil'] = self.vertical_recoil.to_dict()
        # set to None if can_zoom (nullable) is None
        # and model_fields_set contains the field
        if self.can_zoom is None and "can_zoom" in self.model_fields_set:
            _dict['can_zoom'] = None

        # set to None if bullet_damage (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_damage is None and "bullet_damage" in self.model_fields_set:
            _dict['bullet_damage'] = None

        # set to None if bullet_gravity_scale (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_gravity_scale is None and "bullet_gravity_scale" in self.model_fields_set:
            _dict['bullet_gravity_scale'] = None

        # set to None if bullet_inherit_shooter_velocity_scale (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_inherit_shooter_velocity_scale is None and "bullet_inherit_shooter_velocity_scale" in self.model_fields_set:
            _dict['bullet_inherit_shooter_velocity_scale'] = None

        # set to None if bullet_lifetime (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_lifetime is None and "bullet_lifetime" in self.model_fields_set:
            _dict['bullet_lifetime'] = None

        # set to None if bullet_radius (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_radius is None and "bullet_radius" in self.model_fields_set:
            _dict['bullet_radius'] = None

        # set to None if bullet_radius_vs_world (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_radius_vs_world is None and "bullet_radius_vs_world" in self.model_fields_set:
            _dict['bullet_radius_vs_world'] = None

        # set to None if bullet_reflect_amount (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_reflect_amount is None and "bullet_reflect_amount" in self.model_fields_set:
            _dict['bullet_reflect_amount'] = None

        # set to None if bullet_reflect_scale (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_reflect_scale is None and "bullet_reflect_scale" in self.model_fields_set:
            _dict['bullet_reflect_scale'] = None

        # set to None if bullet_whiz_distance (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_whiz_distance is None and "bullet_whiz_distance" in self.model_fields_set:
            _dict['bullet_whiz_distance'] = None

        # set to None if burst_shot_cooldown (nullable) is None
        # and model_fields_set contains the field
        if self.burst_shot_cooldown is None and "burst_shot_cooldown" in self.model_fields_set:
            _dict['burst_shot_cooldown'] = None

        # set to None if crit_bonus_against_npcs (nullable) is None
        # and model_fields_set contains the field
        if self.crit_bonus_against_npcs is None and "crit_bonus_against_npcs" in self.model_fields_set:
            _dict['crit_bonus_against_npcs'] = None

        # set to None if crit_bonus_end (nullable) is None
        # and model_fields_set contains the field
        if self.crit_bonus_end is None and "crit_bonus_end" in self.model_fields_set:
            _dict['crit_bonus_end'] = None

        # set to None if crit_bonus_end_range (nullable) is None
        # and model_fields_set contains the field
        if self.crit_bonus_end_range is None and "crit_bonus_end_range" in self.model_fields_set:
            _dict['crit_bonus_end_range'] = None

        # set to None if crit_bonus_start (nullable) is None
        # and model_fields_set contains the field
        if self.crit_bonus_start is None and "crit_bonus_start" in self.model_fields_set:
            _dict['crit_bonus_start'] = None

        # set to None if crit_bonus_start_range (nullable) is None
        # and model_fields_set contains the field
        if self.crit_bonus_start_range is None and "crit_bonus_start_range" in self.model_fields_set:
            _dict['crit_bonus_start_range'] = None

        # set to None if cycle_time (nullable) is None
        # and model_fields_set contains the field
        if self.cycle_time is None and "cycle_time" in self.model_fields_set:
            _dict['cycle_time'] = None

        # set to None if intra_burst_cycle_time (nullable) is None
        # and model_fields_set contains the field
        if self.intra_burst_cycle_time is None and "intra_burst_cycle_time" in self.model_fields_set:
            _dict['intra_burst_cycle_time'] = None

        # set to None if max_spin_cycle_time (nullable) is None
        # and model_fields_set contains the field
        if self.max_spin_cycle_time is None and "max_spin_cycle_time" in self.model_fields_set:
            _dict['max_spin_cycle_time'] = None

        # set to None if damage_falloff_bias (nullable) is None
        # and model_fields_set contains the field
        if self.damage_falloff_bias is None and "damage_falloff_bias" in self.model_fields_set:
            _dict['damage_falloff_bias'] = None

        # set to None if damage_falloff_end_range (nullable) is None
        # and model_fields_set contains the field
        if self.damage_falloff_end_range is None and "damage_falloff_end_range" in self.model_fields_set:
            _dict['damage_falloff_end_range'] = None

        # set to None if damage_falloff_end_scale (nullable) is None
        # and model_fields_set contains the field
        if self.damage_falloff_end_scale is None and "damage_falloff_end_scale" in self.model_fields_set:
            _dict['damage_falloff_end_scale'] = None

        # set to None if damage_falloff_start_range (nullable) is None
        # and model_fields_set contains the field
        if self.damage_falloff_start_range is None and "damage_falloff_start_range" in self.model_fields_set:
            _dict['damage_falloff_start_range'] = None

        # set to None if damage_falloff_start_scale (nullable) is None
        # and model_fields_set contains the field
        if self.damage_falloff_start_scale is None and "damage_falloff_start_scale" in self.model_fields_set:
            _dict['damage_falloff_start_scale'] = None

        # set to None if horizontal_punch (nullable) is None
        # and model_fields_set contains the field
        if self.horizontal_punch is None and "horizontal_punch" in self.model_fields_set:
            _dict['horizontal_punch'] = None

        # set to None if range (nullable) is None
        # and model_fields_set contains the field
        if self.range is None and "range" in self.model_fields_set:
            _dict['range'] = None

        # set to None if recoil_recovery_delay_factor (nullable) is None
        # and model_fields_set contains the field
        if self.recoil_recovery_delay_factor is None and "recoil_recovery_delay_factor" in self.model_fields_set:
            _dict['recoil_recovery_delay_factor'] = None

        # set to None if recoil_recovery_speed (nullable) is None
        # and model_fields_set contains the field
        if self.recoil_recovery_speed is None and "recoil_recovery_speed" in self.model_fields_set:
            _dict['recoil_recovery_speed'] = None

        # set to None if recoil_shot_index_recovery_time_factor (nullable) is None
        # and model_fields_set contains the field
        if self.recoil_shot_index_recovery_time_factor is None and "recoil_shot_index_recovery_time_factor" in self.model_fields_set:
            _dict['recoil_shot_index_recovery_time_factor'] = None

        # set to None if recoil_speed (nullable) is None
        # and model_fields_set contains the field
        if self.recoil_speed is None and "recoil_speed" in self.model_fields_set:
            _dict['recoil_speed'] = None

        # set to None if reload_move_speed (nullable) is None
        # and model_fields_set contains the field
        if self.reload_move_speed is None and "reload_move_speed" in self.model_fields_set:
            _dict['reload_move_speed'] = None

        # set to None if scatter_yaw_scale (nullable) is None
        # and model_fields_set contains the field
        if self.scatter_yaw_scale is None and "scatter_yaw_scale" in self.model_fields_set:
            _dict['scatter_yaw_scale'] = None

        # set to None if aiming_shot_spread_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.aiming_shot_spread_penalty is None and "aiming_shot_spread_penalty" in self.model_fields_set:
            _dict['aiming_shot_spread_penalty'] = None

        # set to None if standing_shot_spread_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.standing_shot_spread_penalty is None and "standing_shot_spread_penalty" in self.model_fields_set:
            _dict['standing_shot_spread_penalty'] = None

        # set to None if shoot_move_speed_percent (nullable) is None
        # and model_fields_set contains the field
        if self.shoot_move_speed_percent is None and "shoot_move_speed_percent" in self.model_fields_set:
            _dict['shoot_move_speed_percent'] = None

        # set to None if shoot_spread_penalty_decay (nullable) is None
        # and model_fields_set contains the field
        if self.shoot_spread_penalty_decay is None and "shoot_spread_penalty_decay" in self.model_fields_set:
            _dict['shoot_spread_penalty_decay'] = None

        # set to None if shoot_spread_penalty_decay_delay (nullable) is None
        # and model_fields_set contains the field
        if self.shoot_spread_penalty_decay_delay is None and "shoot_spread_penalty_decay_delay" in self.model_fields_set:
            _dict['shoot_spread_penalty_decay_delay'] = None

        # set to None if shoot_spread_penalty_per_shot (nullable) is None
        # and model_fields_set contains the field
        if self.shoot_spread_penalty_per_shot is None and "shoot_spread_penalty_per_shot" in self.model_fields_set:
            _dict['shoot_spread_penalty_per_shot'] = None

        # set to None if shooting_up_spread_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.shooting_up_spread_penalty is None and "shooting_up_spread_penalty" in self.model_fields_set:
            _dict['shooting_up_spread_penalty'] = None

        # set to None if vertical_punch (nullable) is None
        # and model_fields_set contains the field
        if self.vertical_punch is None and "vertical_punch" in self.model_fields_set:
            _dict['vertical_punch'] = None

        # set to None if zoom_fov (nullable) is None
        # and model_fields_set contains the field
        if self.zoom_fov is None and "zoom_fov" in self.model_fields_set:
            _dict['zoom_fov'] = None

        # set to None if zoom_move_speed_percent (nullable) is None
        # and model_fields_set contains the field
        if self.zoom_move_speed_percent is None and "zoom_move_speed_percent" in self.model_fields_set:
            _dict['zoom_move_speed_percent'] = None

        # set to None if bullets (nullable) is None
        # and model_fields_set contains the field
        if self.bullets is None and "bullets" in self.model_fields_set:
            _dict['bullets'] = None

        # set to None if burst_shot_count (nullable) is None
        # and model_fields_set contains the field
        if self.burst_shot_count is None and "burst_shot_count" in self.model_fields_set:
            _dict['burst_shot_count'] = None

        # set to None if clip_size (nullable) is None
        # and model_fields_set contains the field
        if self.clip_size is None and "clip_size" in self.model_fields_set:
            _dict['clip_size'] = None

        # set to None if spread (nullable) is None
        # and model_fields_set contains the field
        if self.spread is None and "spread" in self.model_fields_set:
            _dict['spread'] = None

        # set to None if standing_spread (nullable) is None
        # and model_fields_set contains the field
        if self.standing_spread is None and "standing_spread" in self.model_fields_set:
            _dict['standing_spread'] = None

        # set to None if low_ammo_indicator_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.low_ammo_indicator_threshold is None and "low_ammo_indicator_threshold" in self.model_fields_set:
            _dict['low_ammo_indicator_threshold'] = None

        # set to None if recoil_seed (nullable) is None
        # and model_fields_set contains the field
        if self.recoil_seed is None and "recoil_seed" in self.model_fields_set:
            _dict['recoil_seed'] = None

        # set to None if reload_duration (nullable) is None
        # and model_fields_set contains the field
        if self.reload_duration is None and "reload_duration" in self.model_fields_set:
            _dict['reload_duration'] = None

        # set to None if bullet_speed_curve (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_speed_curve is None and "bullet_speed_curve" in self.model_fields_set:
            _dict['bullet_speed_curve'] = None

        # set to None if horizontal_recoil (nullable) is None
        # and model_fields_set contains the field
        if self.horizontal_recoil is None and "horizontal_recoil" in self.model_fields_set:
            _dict['horizontal_recoil'] = None

        # set to None if vertical_recoil (nullable) is None
        # and model_fields_set contains the field
        if self.vertical_recoil is None and "vertical_recoil" in self.model_fields_set:
            _dict['vertical_recoil'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawWeaponInfoV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_zoom": obj.get("can_zoom"),
            "bullet_damage": obj.get("bullet_damage"),
            "bullet_gravity_scale": obj.get("bullet_gravity_scale"),
            "bullet_inherit_shooter_velocity_scale": obj.get("bullet_inherit_shooter_velocity_scale"),
            "bullet_lifetime": obj.get("bullet_lifetime"),
            "bullet_radius": obj.get("bullet_radius"),
            "bullet_radius_vs_world": obj.get("bullet_radius_vs_world"),
            "bullet_reflect_amount": obj.get("bullet_reflect_amount"),
            "bullet_reflect_scale": obj.get("bullet_reflect_scale"),
            "bullet_whiz_distance": obj.get("bullet_whiz_distance"),
            "burst_shot_cooldown": obj.get("burst_shot_cooldown"),
            "crit_bonus_against_npcs": obj.get("crit_bonus_against_npcs"),
            "crit_bonus_end": obj.get("crit_bonus_end"),
            "crit_bonus_end_range": obj.get("crit_bonus_end_range"),
            "crit_bonus_start": obj.get("crit_bonus_start"),
            "crit_bonus_start_range": obj.get("crit_bonus_start_range"),
            "cycle_time": obj.get("cycle_time"),
            "intra_burst_cycle_time": obj.get("intra_burst_cycle_time"),
            "max_spin_cycle_time": obj.get("max_spin_cycle_time"),
            "damage_falloff_bias": obj.get("damage_falloff_bias"),
            "damage_falloff_end_range": obj.get("damage_falloff_end_range"),
            "damage_falloff_end_scale": obj.get("damage_falloff_end_scale"),
            "damage_falloff_start_range": obj.get("damage_falloff_start_range"),
            "damage_falloff_start_scale": obj.get("damage_falloff_start_scale"),
            "horizontal_punch": obj.get("horizontal_punch"),
            "range": obj.get("range"),
            "recoil_recovery_delay_factor": obj.get("recoil_recovery_delay_factor"),
            "recoil_recovery_speed": obj.get("recoil_recovery_speed"),
            "recoil_shot_index_recovery_time_factor": obj.get("recoil_shot_index_recovery_time_factor"),
            "recoil_speed": obj.get("recoil_speed"),
            "reload_move_speed": obj.get("reload_move_speed"),
            "scatter_yaw_scale": obj.get("scatter_yaw_scale"),
            "aiming_shot_spread_penalty": AimingShotSpreadPenalty.from_dict(obj["aiming_shot_spread_penalty"]) if obj.get("aiming_shot_spread_penalty") is not None else None,
            "standing_shot_spread_penalty": StandingShotSpreadPenalty.from_dict(obj["standing_shot_spread_penalty"]) if obj.get("standing_shot_spread_penalty") is not None else None,
            "shoot_move_speed_percent": obj.get("shoot_move_speed_percent"),
            "shoot_spread_penalty_decay": obj.get("shoot_spread_penalty_decay"),
            "shoot_spread_penalty_decay_delay": obj.get("shoot_spread_penalty_decay_delay"),
            "shoot_spread_penalty_per_shot": obj.get("shoot_spread_penalty_per_shot"),
            "shooting_up_spread_penalty": obj.get("shooting_up_spread_penalty"),
            "vertical_punch": obj.get("vertical_punch"),
            "zoom_fov": obj.get("zoom_fov"),
            "zoom_move_speed_percent": obj.get("zoom_move_speed_percent"),
            "bullets": obj.get("bullets"),
            "burst_shot_count": obj.get("burst_shot_count"),
            "clip_size": obj.get("clip_size"),
            "spread": obj.get("spread"),
            "standing_spread": obj.get("standing_spread"),
            "low_ammo_indicator_threshold": obj.get("low_ammo_indicator_threshold"),
            "recoil_seed": obj.get("recoil_seed"),
            "reload_duration": obj.get("reload_duration"),
            "bullet_speed_curve": RawItemWeaponInfoBulletSpeedCurveV2.from_dict(obj["bullet_speed_curve"]) if obj.get("bullet_speed_curve") is not None else None,
            "horizontal_recoil": RawWeaponInfoHorizontalRecoilV2.from_dict(obj["horizontal_recoil"]) if obj.get("horizontal_recoil") is not None else None,
            "vertical_recoil": RawWeaponInfoVerticalRecoilV2.from_dict(obj["vertical_recoil"]) if obj.get("vertical_recoil") is not None else None
        })
        return _obj


