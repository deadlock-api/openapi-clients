# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from assets-deadlock-api-client.models.ability_v2_output import AbilityV2Output
from assets-deadlock-api-client.models.upgrade_v2_output import UpgradeV2Output
from assets-deadlock-api-client.models.weapon_v2_output import WeaponV2Output
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

RESPONSEGETITEMV2ITEMSIDORCLASSNAMEGET_ONE_OF_SCHEMAS = ["AbilityV2Output", "UpgradeV2Output", "WeaponV2Output"]

class ResponseGetItemV2ItemsIdOrClassNameGet(BaseModel):
    """
    ResponseGetItemV2ItemsIdOrClassNameGet
    """
    # data type: AbilityV2Output
    oneof_schema_1_validator: Optional[AbilityV2Output] = None
    # data type: WeaponV2Output
    oneof_schema_2_validator: Optional[WeaponV2Output] = None
    # data type: UpgradeV2Output
    oneof_schema_3_validator: Optional[UpgradeV2Output] = None
    actual_instance: Optional[Union[AbilityV2Output, UpgradeV2Output, WeaponV2Output]] = None
    one_of_schemas: Set[str] = { "AbilityV2Output", "UpgradeV2Output", "WeaponV2Output" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ResponseGetItemV2ItemsIdOrClassNameGet.model_construct()
        error_messages = []
        match = 0
        # validate data type: AbilityV2Output
        if not isinstance(v, AbilityV2Output):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AbilityV2Output`")
        else:
            match += 1
        # validate data type: WeaponV2Output
        if not isinstance(v, WeaponV2Output):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WeaponV2Output`")
        else:
            match += 1
        # validate data type: UpgradeV2Output
        if not isinstance(v, UpgradeV2Output):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpgradeV2Output`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ResponseGetItemV2ItemsIdOrClassNameGet with oneOf schemas: AbilityV2Output, UpgradeV2Output, WeaponV2Output. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ResponseGetItemV2ItemsIdOrClassNameGet with oneOf schemas: AbilityV2Output, UpgradeV2Output, WeaponV2Output. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AbilityV2Output
        try:
            instance.actual_instance = AbilityV2Output.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WeaponV2Output
        try:
            instance.actual_instance = WeaponV2Output.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpgradeV2Output
        try:
            instance.actual_instance = UpgradeV2Output.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ResponseGetItemV2ItemsIdOrClassNameGet with oneOf schemas: AbilityV2Output, UpgradeV2Output, WeaponV2Output. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ResponseGetItemV2ItemsIdOrClassNameGet with oneOf schemas: AbilityV2Output, UpgradeV2Output, WeaponV2Output. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AbilityV2Output, UpgradeV2Output, WeaponV2Output]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


