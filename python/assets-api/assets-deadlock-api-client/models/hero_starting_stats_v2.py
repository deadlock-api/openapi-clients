# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from assets-deadlock-api-client.models.hero_starting_stat_v2 import HeroStartingStatV2
from typing import Optional, Set
from typing_extensions import Self

class HeroStartingStatsV2(BaseModel):
    """
    HeroStartingStatsV2
    """ # noqa: E501
    max_move_speed: HeroStartingStatV2
    sprint_speed: HeroStartingStatV2
    crouch_speed: HeroStartingStatV2
    move_acceleration: HeroStartingStatV2
    light_melee_damage: HeroStartingStatV2
    heavy_melee_damage: HeroStartingStatV2
    max_health: HeroStartingStatV2
    weapon_power: HeroStartingStatV2
    reload_speed: HeroStartingStatV2
    weapon_power_scale: HeroStartingStatV2
    proc_build_up_rate_scale: HeroStartingStatV2
    stamina: HeroStartingStatV2
    base_health_regen: HeroStartingStatV2
    stamina_regen_per_second: HeroStartingStatV2
    ability_resource_max: HeroStartingStatV2
    ability_resource_regen_per_second: HeroStartingStatV2
    crit_damage_received_scale: HeroStartingStatV2
    tech_duration: HeroStartingStatV2
    tech_armor_damage_reduction: Optional[HeroStartingStatV2] = None
    tech_range: HeroStartingStatV2
    bullet_armor_damage_reduction: Optional[HeroStartingStatV2] = None
    __properties: ClassVar[List[str]] = ["max_move_speed", "sprint_speed", "crouch_speed", "move_acceleration", "light_melee_damage", "heavy_melee_damage", "max_health", "weapon_power", "reload_speed", "weapon_power_scale", "proc_build_up_rate_scale", "stamina", "base_health_regen", "stamina_regen_per_second", "ability_resource_max", "ability_resource_regen_per_second", "crit_damage_received_scale", "tech_duration", "tech_armor_damage_reduction", "tech_range", "bullet_armor_damage_reduction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeroStartingStatsV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_move_speed
        if self.max_move_speed:
            _dict['max_move_speed'] = self.max_move_speed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sprint_speed
        if self.sprint_speed:
            _dict['sprint_speed'] = self.sprint_speed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crouch_speed
        if self.crouch_speed:
            _dict['crouch_speed'] = self.crouch_speed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of move_acceleration
        if self.move_acceleration:
            _dict['move_acceleration'] = self.move_acceleration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of light_melee_damage
        if self.light_melee_damage:
            _dict['light_melee_damage'] = self.light_melee_damage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of heavy_melee_damage
        if self.heavy_melee_damage:
            _dict['heavy_melee_damage'] = self.heavy_melee_damage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_health
        if self.max_health:
            _dict['max_health'] = self.max_health.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weapon_power
        if self.weapon_power:
            _dict['weapon_power'] = self.weapon_power.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reload_speed
        if self.reload_speed:
            _dict['reload_speed'] = self.reload_speed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weapon_power_scale
        if self.weapon_power_scale:
            _dict['weapon_power_scale'] = self.weapon_power_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proc_build_up_rate_scale
        if self.proc_build_up_rate_scale:
            _dict['proc_build_up_rate_scale'] = self.proc_build_up_rate_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stamina
        if self.stamina:
            _dict['stamina'] = self.stamina.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_health_regen
        if self.base_health_regen:
            _dict['base_health_regen'] = self.base_health_regen.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stamina_regen_per_second
        if self.stamina_regen_per_second:
            _dict['stamina_regen_per_second'] = self.stamina_regen_per_second.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ability_resource_max
        if self.ability_resource_max:
            _dict['ability_resource_max'] = self.ability_resource_max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ability_resource_regen_per_second
        if self.ability_resource_regen_per_second:
            _dict['ability_resource_regen_per_second'] = self.ability_resource_regen_per_second.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crit_damage_received_scale
        if self.crit_damage_received_scale:
            _dict['crit_damage_received_scale'] = self.crit_damage_received_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tech_duration
        if self.tech_duration:
            _dict['tech_duration'] = self.tech_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tech_armor_damage_reduction
        if self.tech_armor_damage_reduction:
            _dict['tech_armor_damage_reduction'] = self.tech_armor_damage_reduction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tech_range
        if self.tech_range:
            _dict['tech_range'] = self.tech_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bullet_armor_damage_reduction
        if self.bullet_armor_damage_reduction:
            _dict['bullet_armor_damage_reduction'] = self.bullet_armor_damage_reduction.to_dict()
        # set to None if tech_armor_damage_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.tech_armor_damage_reduction is None and "tech_armor_damage_reduction" in self.model_fields_set:
            _dict['tech_armor_damage_reduction'] = None

        # set to None if bullet_armor_damage_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.bullet_armor_damage_reduction is None and "bullet_armor_damage_reduction" in self.model_fields_set:
            _dict['bullet_armor_damage_reduction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeroStartingStatsV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_move_speed": HeroStartingStatV2.from_dict(obj["max_move_speed"]) if obj.get("max_move_speed") is not None else None,
            "sprint_speed": HeroStartingStatV2.from_dict(obj["sprint_speed"]) if obj.get("sprint_speed") is not None else None,
            "crouch_speed": HeroStartingStatV2.from_dict(obj["crouch_speed"]) if obj.get("crouch_speed") is not None else None,
            "move_acceleration": HeroStartingStatV2.from_dict(obj["move_acceleration"]) if obj.get("move_acceleration") is not None else None,
            "light_melee_damage": HeroStartingStatV2.from_dict(obj["light_melee_damage"]) if obj.get("light_melee_damage") is not None else None,
            "heavy_melee_damage": HeroStartingStatV2.from_dict(obj["heavy_melee_damage"]) if obj.get("heavy_melee_damage") is not None else None,
            "max_health": HeroStartingStatV2.from_dict(obj["max_health"]) if obj.get("max_health") is not None else None,
            "weapon_power": HeroStartingStatV2.from_dict(obj["weapon_power"]) if obj.get("weapon_power") is not None else None,
            "reload_speed": HeroStartingStatV2.from_dict(obj["reload_speed"]) if obj.get("reload_speed") is not None else None,
            "weapon_power_scale": HeroStartingStatV2.from_dict(obj["weapon_power_scale"]) if obj.get("weapon_power_scale") is not None else None,
            "proc_build_up_rate_scale": HeroStartingStatV2.from_dict(obj["proc_build_up_rate_scale"]) if obj.get("proc_build_up_rate_scale") is not None else None,
            "stamina": HeroStartingStatV2.from_dict(obj["stamina"]) if obj.get("stamina") is not None else None,
            "base_health_regen": HeroStartingStatV2.from_dict(obj["base_health_regen"]) if obj.get("base_health_regen") is not None else None,
            "stamina_regen_per_second": HeroStartingStatV2.from_dict(obj["stamina_regen_per_second"]) if obj.get("stamina_regen_per_second") is not None else None,
            "ability_resource_max": HeroStartingStatV2.from_dict(obj["ability_resource_max"]) if obj.get("ability_resource_max") is not None else None,
            "ability_resource_regen_per_second": HeroStartingStatV2.from_dict(obj["ability_resource_regen_per_second"]) if obj.get("ability_resource_regen_per_second") is not None else None,
            "crit_damage_received_scale": HeroStartingStatV2.from_dict(obj["crit_damage_received_scale"]) if obj.get("crit_damage_received_scale") is not None else None,
            "tech_duration": HeroStartingStatV2.from_dict(obj["tech_duration"]) if obj.get("tech_duration") is not None else None,
            "tech_armor_damage_reduction": HeroStartingStatV2.from_dict(obj["tech_armor_damage_reduction"]) if obj.get("tech_armor_damage_reduction") is not None else None,
            "tech_range": HeroStartingStatV2.from_dict(obj["tech_range"]) if obj.get("tech_range") is not None else None,
            "bullet_armor_damage_reduction": HeroStartingStatV2.from_dict(obj["bullet_armor_damage_reduction"]) if obj.get("bullet_armor_damage_reduction") is not None else None
        })
        return _obj


