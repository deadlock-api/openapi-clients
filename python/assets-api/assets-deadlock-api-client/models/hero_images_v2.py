# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HeroImagesV2(BaseModel):
    """
    HeroImagesV2
    """ # noqa: E501
    icon_hero_card: Optional[StrictStr] = None
    icon_hero_card_webp: Optional[StrictStr] = None
    icon_image_small: Optional[StrictStr] = None
    icon_image_small_webp: Optional[StrictStr] = None
    minimap_image: Optional[StrictStr] = None
    minimap_image_webp: Optional[StrictStr] = None
    selection_image: Optional[StrictStr] = None
    selection_image_webp: Optional[StrictStr] = None
    top_bar_image: Optional[StrictStr] = None
    top_bar_image_webp: Optional[StrictStr] = None
    top_bar_vertical_image: Optional[StrictStr] = None
    top_bar_vertical_image_webp: Optional[StrictStr] = None
    weapon_image: Optional[StrictStr] = None
    weapon_image_webp: Optional[StrictStr] = None
    background_image: Optional[StrictStr] = None
    background_image_webp: Optional[StrictStr] = None
    name_image: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["icon_hero_card", "icon_hero_card_webp", "icon_image_small", "icon_image_small_webp", "minimap_image", "minimap_image_webp", "selection_image", "selection_image_webp", "top_bar_image", "top_bar_image_webp", "top_bar_vertical_image", "top_bar_vertical_image_webp", "weapon_image", "weapon_image_webp", "background_image", "background_image_webp", "name_image"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeroImagesV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if icon_hero_card (nullable) is None
        # and model_fields_set contains the field
        if self.icon_hero_card is None and "icon_hero_card" in self.model_fields_set:
            _dict['icon_hero_card'] = None

        # set to None if icon_hero_card_webp (nullable) is None
        # and model_fields_set contains the field
        if self.icon_hero_card_webp is None and "icon_hero_card_webp" in self.model_fields_set:
            _dict['icon_hero_card_webp'] = None

        # set to None if icon_image_small (nullable) is None
        # and model_fields_set contains the field
        if self.icon_image_small is None and "icon_image_small" in self.model_fields_set:
            _dict['icon_image_small'] = None

        # set to None if icon_image_small_webp (nullable) is None
        # and model_fields_set contains the field
        if self.icon_image_small_webp is None and "icon_image_small_webp" in self.model_fields_set:
            _dict['icon_image_small_webp'] = None

        # set to None if minimap_image (nullable) is None
        # and model_fields_set contains the field
        if self.minimap_image is None and "minimap_image" in self.model_fields_set:
            _dict['minimap_image'] = None

        # set to None if minimap_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.minimap_image_webp is None and "minimap_image_webp" in self.model_fields_set:
            _dict['minimap_image_webp'] = None

        # set to None if selection_image (nullable) is None
        # and model_fields_set contains the field
        if self.selection_image is None and "selection_image" in self.model_fields_set:
            _dict['selection_image'] = None

        # set to None if selection_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.selection_image_webp is None and "selection_image_webp" in self.model_fields_set:
            _dict['selection_image_webp'] = None

        # set to None if top_bar_image (nullable) is None
        # and model_fields_set contains the field
        if self.top_bar_image is None and "top_bar_image" in self.model_fields_set:
            _dict['top_bar_image'] = None

        # set to None if top_bar_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.top_bar_image_webp is None and "top_bar_image_webp" in self.model_fields_set:
            _dict['top_bar_image_webp'] = None

        # set to None if top_bar_vertical_image (nullable) is None
        # and model_fields_set contains the field
        if self.top_bar_vertical_image is None and "top_bar_vertical_image" in self.model_fields_set:
            _dict['top_bar_vertical_image'] = None

        # set to None if top_bar_vertical_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.top_bar_vertical_image_webp is None and "top_bar_vertical_image_webp" in self.model_fields_set:
            _dict['top_bar_vertical_image_webp'] = None

        # set to None if weapon_image (nullable) is None
        # and model_fields_set contains the field
        if self.weapon_image is None and "weapon_image" in self.model_fields_set:
            _dict['weapon_image'] = None

        # set to None if weapon_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.weapon_image_webp is None and "weapon_image_webp" in self.model_fields_set:
            _dict['weapon_image_webp'] = None

        # set to None if background_image (nullable) is None
        # and model_fields_set contains the field
        if self.background_image is None and "background_image" in self.model_fields_set:
            _dict['background_image'] = None

        # set to None if background_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.background_image_webp is None and "background_image_webp" in self.model_fields_set:
            _dict['background_image_webp'] = None

        # set to None if name_image (nullable) is None
        # and model_fields_set contains the field
        if self.name_image is None and "name_image" in self.model_fields_set:
            _dict['name_image'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeroImagesV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "icon_hero_card": obj.get("icon_hero_card"),
            "icon_hero_card_webp": obj.get("icon_hero_card_webp"),
            "icon_image_small": obj.get("icon_image_small"),
            "icon_image_small_webp": obj.get("icon_image_small_webp"),
            "minimap_image": obj.get("minimap_image"),
            "minimap_image_webp": obj.get("minimap_image_webp"),
            "selection_image": obj.get("selection_image"),
            "selection_image_webp": obj.get("selection_image_webp"),
            "top_bar_image": obj.get("top_bar_image"),
            "top_bar_image_webp": obj.get("top_bar_image_webp"),
            "top_bar_vertical_image": obj.get("top_bar_vertical_image"),
            "top_bar_vertical_image_webp": obj.get("top_bar_vertical_image_webp"),
            "weapon_image": obj.get("weapon_image"),
            "weapon_image_webp": obj.get("weapon_image_webp"),
            "background_image": obj.get("background_image"),
            "background_image_webp": obj.get("background_image_webp"),
            "name_image": obj.get("name_image")
        })
        return _obj


