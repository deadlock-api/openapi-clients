# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from assets-deadlock-api-client.models.m_aimingshootspreadpenalty import MAimingshootspreadpenalty
from assets-deadlock-api-client.models.m_standingshootspreadpenalty import MStandingshootspreadpenalty
from assets-deadlock-api-client.models.raw_item_weapon_info_bullet_speed_curve_v2_input import RawItemWeaponInfoBulletSpeedCurveV2Input
from assets-deadlock-api-client.models.raw_weapon_info_horizontal_recoil_v2_input import RawWeaponInfoHorizontalRecoilV2Input
from assets-deadlock-api-client.models.raw_weapon_info_vertical_recoil_v2_input import RawWeaponInfoVerticalRecoilV2Input
from typing import Optional, Set
from typing_extensions import Self

class RawWeaponInfoV2Input(BaseModel):
    """
    RawWeaponInfoV2Input
    """ # noqa: E501
    m_b_can_zoom: Optional[StrictBool] = Field(default=None, alias="m_bCanZoom")
    m_fl_bullet_damage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletDamage")
    m_fl_bullet_gravity_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletGravityScale")
    m_fl_bullet_inherit_shooter_velocity_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletInheritShooterVelocityScale")
    m_fl_bullet_lifetime: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletLifetime")
    m_fl_bullet_radius: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletRadius")
    m_fl_bullet_radius_vs_world: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletRadiusVsWorld")
    m_fl_bullet_reflect_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletReflectAmount")
    m_fl_bullet_reflect_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletReflectScale")
    m_fl_bullet_whiz_distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBulletWhizDistance")
    m_fl_burst_shot_cooldown: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flBurstShotCooldown")
    m_fl_crit_bonus_against_npcs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flCritBonusAgainstNpcs")
    m_fl_crit_bonus_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flCritBonusEnd")
    m_fl_crit_bonus_end_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flCritBonusEndRange")
    m_fl_crit_bonus_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flCritBonusStart")
    m_fl_crit_bonus_start_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flCritBonusStartRange")
    m_fl_cycle_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flCycleTime")
    m_fl_intra_burst_cycle_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flIntraBurstCycleTime")
    m_fl_max_spin_cycle_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flMaxSpinCycleTime")
    m_fl_damage_falloff_bias: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flDamageFalloffBias")
    m_fl_damage_falloff_end_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flDamageFalloffEndRange")
    m_fl_damage_falloff_end_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flDamageFalloffEndScale")
    m_fl_damage_falloff_start_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flDamageFalloffStartRange")
    m_fl_damage_falloff_start_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flDamageFalloffStartScale")
    m_fl_horizontal_punch: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flHorizontalPunch")
    m_fl_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flRange")
    m_fl_recoil_recovery_delay_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flRecoilRecoveryDelayFactor")
    m_fl_recoil_recovery_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flRecoilRecoverySpeed")
    m_fl_recoil_shot_index_recovery_time_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flRecoilShotIndexRecoveryTimeFactor")
    m_fl_recoil_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flRecoilSpeed")
    m_fl_reload_move_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flReloadMoveSpeed")
    m_fl_scatter_yaw_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flScatterYawScale")
    m_aiming_shoot_spread_penalty: Optional[MAimingshootspreadpenalty] = Field(default=None, alias="m_AimingShootSpreadPenalty")
    m_standing_shoot_spread_penalty: Optional[MStandingshootspreadpenalty] = Field(default=None, alias="m_StandingShootSpreadPenalty")
    m_fl_shoot_move_speed_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flShootMoveSpeedPercent")
    m_fl_shoot_spread_penalty_decay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flShootSpreadPenaltyDecay")
    m_fl_shoot_spread_penalty_decay_delay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flShootSpreadPenaltyDecayDelay")
    m_fl_shoot_spread_penalty_per_shot: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flShootSpreadPenaltyPerShot")
    m_fl_shooting_up_spread_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flShootingUpSpreadPenalty")
    m_fl_vertical_punch: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flVerticalPunch")
    m_fl_zoom_fov: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flZoomFov")
    m_fl_zoom_move_speed_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flZoomMoveSpeedPercent")
    m_i_bullets: Optional[StrictInt] = Field(default=None, alias="m_iBullets")
    m_i_burst_shot_count: Optional[StrictInt] = Field(default=None, alias="m_iBurstShotCount")
    m_i_clip_size: Optional[StrictInt] = Field(default=None, alias="m_iClipSize")
    m_fl_spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flSpread")
    m_fl_standing_spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flStandingSpread")
    m_fl_low_ammo_indicator_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flLowAmmoIndicatorThreshold")
    m_fl_recoil_seed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flRecoilSeed")
    m_fl_reload_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="m_flReloadDuration")
    m_bullet_speed_curve: Optional[RawItemWeaponInfoBulletSpeedCurveV2Input] = Field(default=None, alias="m_BulletSpeedCurve")
    m_horizontal_recoil: Optional[RawWeaponInfoHorizontalRecoilV2Input] = Field(default=None, alias="m_HorizontalRecoil")
    m_vertical_recoil: Optional[RawWeaponInfoVerticalRecoilV2Input] = Field(default=None, alias="m_VerticalRecoil")
    __properties: ClassVar[List[str]] = ["m_bCanZoom", "m_flBulletDamage", "m_flBulletGravityScale", "m_flBulletInheritShooterVelocityScale", "m_flBulletLifetime", "m_flBulletRadius", "m_flBulletRadiusVsWorld", "m_flBulletReflectAmount", "m_flBulletReflectScale", "m_flBulletWhizDistance", "m_flBurstShotCooldown", "m_flCritBonusAgainstNpcs", "m_flCritBonusEnd", "m_flCritBonusEndRange", "m_flCritBonusStart", "m_flCritBonusStartRange", "m_flCycleTime", "m_flIntraBurstCycleTime", "m_flMaxSpinCycleTime", "m_flDamageFalloffBias", "m_flDamageFalloffEndRange", "m_flDamageFalloffEndScale", "m_flDamageFalloffStartRange", "m_flDamageFalloffStartScale", "m_flHorizontalPunch", "m_flRange", "m_flRecoilRecoveryDelayFactor", "m_flRecoilRecoverySpeed", "m_flRecoilShotIndexRecoveryTimeFactor", "m_flRecoilSpeed", "m_flReloadMoveSpeed", "m_flScatterYawScale", "m_AimingShootSpreadPenalty", "m_StandingShootSpreadPenalty", "m_flShootMoveSpeedPercent", "m_flShootSpreadPenaltyDecay", "m_flShootSpreadPenaltyDecayDelay", "m_flShootSpreadPenaltyPerShot", "m_flShootingUpSpreadPenalty", "m_flVerticalPunch", "m_flZoomFov", "m_flZoomMoveSpeedPercent", "m_iBullets", "m_iBurstShotCount", "m_iClipSize", "m_flSpread", "m_flStandingSpread", "m_flLowAmmoIndicatorThreshold", "m_flRecoilSeed", "m_flReloadDuration", "m_BulletSpeedCurve", "m_HorizontalRecoil", "m_VerticalRecoil"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawWeaponInfoV2Input from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of m_aiming_shoot_spread_penalty
        if self.m_aiming_shoot_spread_penalty:
            _dict['m_AimingShootSpreadPenalty'] = self.m_aiming_shoot_spread_penalty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m_standing_shoot_spread_penalty
        if self.m_standing_shoot_spread_penalty:
            _dict['m_StandingShootSpreadPenalty'] = self.m_standing_shoot_spread_penalty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m_bullet_speed_curve
        if self.m_bullet_speed_curve:
            _dict['m_BulletSpeedCurve'] = self.m_bullet_speed_curve.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m_horizontal_recoil
        if self.m_horizontal_recoil:
            _dict['m_HorizontalRecoil'] = self.m_horizontal_recoil.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m_vertical_recoil
        if self.m_vertical_recoil:
            _dict['m_VerticalRecoil'] = self.m_vertical_recoil.to_dict()
        # set to None if m_b_can_zoom (nullable) is None
        # and model_fields_set contains the field
        if self.m_b_can_zoom is None and "m_b_can_zoom" in self.model_fields_set:
            _dict['m_bCanZoom'] = None

        # set to None if m_fl_bullet_damage (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_damage is None and "m_fl_bullet_damage" in self.model_fields_set:
            _dict['m_flBulletDamage'] = None

        # set to None if m_fl_bullet_gravity_scale (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_gravity_scale is None and "m_fl_bullet_gravity_scale" in self.model_fields_set:
            _dict['m_flBulletGravityScale'] = None

        # set to None if m_fl_bullet_inherit_shooter_velocity_scale (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_inherit_shooter_velocity_scale is None and "m_fl_bullet_inherit_shooter_velocity_scale" in self.model_fields_set:
            _dict['m_flBulletInheritShooterVelocityScale'] = None

        # set to None if m_fl_bullet_lifetime (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_lifetime is None and "m_fl_bullet_lifetime" in self.model_fields_set:
            _dict['m_flBulletLifetime'] = None

        # set to None if m_fl_bullet_radius (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_radius is None and "m_fl_bullet_radius" in self.model_fields_set:
            _dict['m_flBulletRadius'] = None

        # set to None if m_fl_bullet_radius_vs_world (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_radius_vs_world is None and "m_fl_bullet_radius_vs_world" in self.model_fields_set:
            _dict['m_flBulletRadiusVsWorld'] = None

        # set to None if m_fl_bullet_reflect_amount (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_reflect_amount is None and "m_fl_bullet_reflect_amount" in self.model_fields_set:
            _dict['m_flBulletReflectAmount'] = None

        # set to None if m_fl_bullet_reflect_scale (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_reflect_scale is None and "m_fl_bullet_reflect_scale" in self.model_fields_set:
            _dict['m_flBulletReflectScale'] = None

        # set to None if m_fl_bullet_whiz_distance (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_bullet_whiz_distance is None and "m_fl_bullet_whiz_distance" in self.model_fields_set:
            _dict['m_flBulletWhizDistance'] = None

        # set to None if m_fl_burst_shot_cooldown (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_burst_shot_cooldown is None and "m_fl_burst_shot_cooldown" in self.model_fields_set:
            _dict['m_flBurstShotCooldown'] = None

        # set to None if m_fl_crit_bonus_against_npcs (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_crit_bonus_against_npcs is None and "m_fl_crit_bonus_against_npcs" in self.model_fields_set:
            _dict['m_flCritBonusAgainstNpcs'] = None

        # set to None if m_fl_crit_bonus_end (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_crit_bonus_end is None and "m_fl_crit_bonus_end" in self.model_fields_set:
            _dict['m_flCritBonusEnd'] = None

        # set to None if m_fl_crit_bonus_end_range (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_crit_bonus_end_range is None and "m_fl_crit_bonus_end_range" in self.model_fields_set:
            _dict['m_flCritBonusEndRange'] = None

        # set to None if m_fl_crit_bonus_start (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_crit_bonus_start is None and "m_fl_crit_bonus_start" in self.model_fields_set:
            _dict['m_flCritBonusStart'] = None

        # set to None if m_fl_crit_bonus_start_range (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_crit_bonus_start_range is None and "m_fl_crit_bonus_start_range" in self.model_fields_set:
            _dict['m_flCritBonusStartRange'] = None

        # set to None if m_fl_cycle_time (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_cycle_time is None and "m_fl_cycle_time" in self.model_fields_set:
            _dict['m_flCycleTime'] = None

        # set to None if m_fl_intra_burst_cycle_time (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_intra_burst_cycle_time is None and "m_fl_intra_burst_cycle_time" in self.model_fields_set:
            _dict['m_flIntraBurstCycleTime'] = None

        # set to None if m_fl_max_spin_cycle_time (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_max_spin_cycle_time is None and "m_fl_max_spin_cycle_time" in self.model_fields_set:
            _dict['m_flMaxSpinCycleTime'] = None

        # set to None if m_fl_damage_falloff_bias (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_damage_falloff_bias is None and "m_fl_damage_falloff_bias" in self.model_fields_set:
            _dict['m_flDamageFalloffBias'] = None

        # set to None if m_fl_damage_falloff_end_range (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_damage_falloff_end_range is None and "m_fl_damage_falloff_end_range" in self.model_fields_set:
            _dict['m_flDamageFalloffEndRange'] = None

        # set to None if m_fl_damage_falloff_end_scale (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_damage_falloff_end_scale is None and "m_fl_damage_falloff_end_scale" in self.model_fields_set:
            _dict['m_flDamageFalloffEndScale'] = None

        # set to None if m_fl_damage_falloff_start_range (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_damage_falloff_start_range is None and "m_fl_damage_falloff_start_range" in self.model_fields_set:
            _dict['m_flDamageFalloffStartRange'] = None

        # set to None if m_fl_damage_falloff_start_scale (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_damage_falloff_start_scale is None and "m_fl_damage_falloff_start_scale" in self.model_fields_set:
            _dict['m_flDamageFalloffStartScale'] = None

        # set to None if m_fl_horizontal_punch (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_horizontal_punch is None and "m_fl_horizontal_punch" in self.model_fields_set:
            _dict['m_flHorizontalPunch'] = None

        # set to None if m_fl_range (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_range is None and "m_fl_range" in self.model_fields_set:
            _dict['m_flRange'] = None

        # set to None if m_fl_recoil_recovery_delay_factor (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_recoil_recovery_delay_factor is None and "m_fl_recoil_recovery_delay_factor" in self.model_fields_set:
            _dict['m_flRecoilRecoveryDelayFactor'] = None

        # set to None if m_fl_recoil_recovery_speed (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_recoil_recovery_speed is None and "m_fl_recoil_recovery_speed" in self.model_fields_set:
            _dict['m_flRecoilRecoverySpeed'] = None

        # set to None if m_fl_recoil_shot_index_recovery_time_factor (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_recoil_shot_index_recovery_time_factor is None and "m_fl_recoil_shot_index_recovery_time_factor" in self.model_fields_set:
            _dict['m_flRecoilShotIndexRecoveryTimeFactor'] = None

        # set to None if m_fl_recoil_speed (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_recoil_speed is None and "m_fl_recoil_speed" in self.model_fields_set:
            _dict['m_flRecoilSpeed'] = None

        # set to None if m_fl_reload_move_speed (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_reload_move_speed is None and "m_fl_reload_move_speed" in self.model_fields_set:
            _dict['m_flReloadMoveSpeed'] = None

        # set to None if m_fl_scatter_yaw_scale (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_scatter_yaw_scale is None and "m_fl_scatter_yaw_scale" in self.model_fields_set:
            _dict['m_flScatterYawScale'] = None

        # set to None if m_aiming_shoot_spread_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.m_aiming_shoot_spread_penalty is None and "m_aiming_shoot_spread_penalty" in self.model_fields_set:
            _dict['m_AimingShootSpreadPenalty'] = None

        # set to None if m_standing_shoot_spread_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.m_standing_shoot_spread_penalty is None and "m_standing_shoot_spread_penalty" in self.model_fields_set:
            _dict['m_StandingShootSpreadPenalty'] = None

        # set to None if m_fl_shoot_move_speed_percent (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_shoot_move_speed_percent is None and "m_fl_shoot_move_speed_percent" in self.model_fields_set:
            _dict['m_flShootMoveSpeedPercent'] = None

        # set to None if m_fl_shoot_spread_penalty_decay (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_shoot_spread_penalty_decay is None and "m_fl_shoot_spread_penalty_decay" in self.model_fields_set:
            _dict['m_flShootSpreadPenaltyDecay'] = None

        # set to None if m_fl_shoot_spread_penalty_decay_delay (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_shoot_spread_penalty_decay_delay is None and "m_fl_shoot_spread_penalty_decay_delay" in self.model_fields_set:
            _dict['m_flShootSpreadPenaltyDecayDelay'] = None

        # set to None if m_fl_shoot_spread_penalty_per_shot (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_shoot_spread_penalty_per_shot is None and "m_fl_shoot_spread_penalty_per_shot" in self.model_fields_set:
            _dict['m_flShootSpreadPenaltyPerShot'] = None

        # set to None if m_fl_shooting_up_spread_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_shooting_up_spread_penalty is None and "m_fl_shooting_up_spread_penalty" in self.model_fields_set:
            _dict['m_flShootingUpSpreadPenalty'] = None

        # set to None if m_fl_vertical_punch (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_vertical_punch is None and "m_fl_vertical_punch" in self.model_fields_set:
            _dict['m_flVerticalPunch'] = None

        # set to None if m_fl_zoom_fov (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_zoom_fov is None and "m_fl_zoom_fov" in self.model_fields_set:
            _dict['m_flZoomFov'] = None

        # set to None if m_fl_zoom_move_speed_percent (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_zoom_move_speed_percent is None and "m_fl_zoom_move_speed_percent" in self.model_fields_set:
            _dict['m_flZoomMoveSpeedPercent'] = None

        # set to None if m_i_bullets (nullable) is None
        # and model_fields_set contains the field
        if self.m_i_bullets is None and "m_i_bullets" in self.model_fields_set:
            _dict['m_iBullets'] = None

        # set to None if m_i_burst_shot_count (nullable) is None
        # and model_fields_set contains the field
        if self.m_i_burst_shot_count is None and "m_i_burst_shot_count" in self.model_fields_set:
            _dict['m_iBurstShotCount'] = None

        # set to None if m_i_clip_size (nullable) is None
        # and model_fields_set contains the field
        if self.m_i_clip_size is None and "m_i_clip_size" in self.model_fields_set:
            _dict['m_iClipSize'] = None

        # set to None if m_fl_spread (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_spread is None and "m_fl_spread" in self.model_fields_set:
            _dict['m_flSpread'] = None

        # set to None if m_fl_standing_spread (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_standing_spread is None and "m_fl_standing_spread" in self.model_fields_set:
            _dict['m_flStandingSpread'] = None

        # set to None if m_fl_low_ammo_indicator_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_low_ammo_indicator_threshold is None and "m_fl_low_ammo_indicator_threshold" in self.model_fields_set:
            _dict['m_flLowAmmoIndicatorThreshold'] = None

        # set to None if m_fl_recoil_seed (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_recoil_seed is None and "m_fl_recoil_seed" in self.model_fields_set:
            _dict['m_flRecoilSeed'] = None

        # set to None if m_fl_reload_duration (nullable) is None
        # and model_fields_set contains the field
        if self.m_fl_reload_duration is None and "m_fl_reload_duration" in self.model_fields_set:
            _dict['m_flReloadDuration'] = None

        # set to None if m_bullet_speed_curve (nullable) is None
        # and model_fields_set contains the field
        if self.m_bullet_speed_curve is None and "m_bullet_speed_curve" in self.model_fields_set:
            _dict['m_BulletSpeedCurve'] = None

        # set to None if m_horizontal_recoil (nullable) is None
        # and model_fields_set contains the field
        if self.m_horizontal_recoil is None and "m_horizontal_recoil" in self.model_fields_set:
            _dict['m_HorizontalRecoil'] = None

        # set to None if m_vertical_recoil (nullable) is None
        # and model_fields_set contains the field
        if self.m_vertical_recoil is None and "m_vertical_recoil" in self.model_fields_set:
            _dict['m_VerticalRecoil'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawWeaponInfoV2Input from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "m_bCanZoom": obj.get("m_bCanZoom"),
            "m_flBulletDamage": obj.get("m_flBulletDamage"),
            "m_flBulletGravityScale": obj.get("m_flBulletGravityScale"),
            "m_flBulletInheritShooterVelocityScale": obj.get("m_flBulletInheritShooterVelocityScale"),
            "m_flBulletLifetime": obj.get("m_flBulletLifetime"),
            "m_flBulletRadius": obj.get("m_flBulletRadius"),
            "m_flBulletRadiusVsWorld": obj.get("m_flBulletRadiusVsWorld"),
            "m_flBulletReflectAmount": obj.get("m_flBulletReflectAmount"),
            "m_flBulletReflectScale": obj.get("m_flBulletReflectScale"),
            "m_flBulletWhizDistance": obj.get("m_flBulletWhizDistance"),
            "m_flBurstShotCooldown": obj.get("m_flBurstShotCooldown"),
            "m_flCritBonusAgainstNpcs": obj.get("m_flCritBonusAgainstNpcs"),
            "m_flCritBonusEnd": obj.get("m_flCritBonusEnd"),
            "m_flCritBonusEndRange": obj.get("m_flCritBonusEndRange"),
            "m_flCritBonusStart": obj.get("m_flCritBonusStart"),
            "m_flCritBonusStartRange": obj.get("m_flCritBonusStartRange"),
            "m_flCycleTime": obj.get("m_flCycleTime"),
            "m_flIntraBurstCycleTime": obj.get("m_flIntraBurstCycleTime"),
            "m_flMaxSpinCycleTime": obj.get("m_flMaxSpinCycleTime"),
            "m_flDamageFalloffBias": obj.get("m_flDamageFalloffBias"),
            "m_flDamageFalloffEndRange": obj.get("m_flDamageFalloffEndRange"),
            "m_flDamageFalloffEndScale": obj.get("m_flDamageFalloffEndScale"),
            "m_flDamageFalloffStartRange": obj.get("m_flDamageFalloffStartRange"),
            "m_flDamageFalloffStartScale": obj.get("m_flDamageFalloffStartScale"),
            "m_flHorizontalPunch": obj.get("m_flHorizontalPunch"),
            "m_flRange": obj.get("m_flRange"),
            "m_flRecoilRecoveryDelayFactor": obj.get("m_flRecoilRecoveryDelayFactor"),
            "m_flRecoilRecoverySpeed": obj.get("m_flRecoilRecoverySpeed"),
            "m_flRecoilShotIndexRecoveryTimeFactor": obj.get("m_flRecoilShotIndexRecoveryTimeFactor"),
            "m_flRecoilSpeed": obj.get("m_flRecoilSpeed"),
            "m_flReloadMoveSpeed": obj.get("m_flReloadMoveSpeed"),
            "m_flScatterYawScale": obj.get("m_flScatterYawScale"),
            "m_AimingShootSpreadPenalty": MAimingshootspreadpenalty.from_dict(obj["m_AimingShootSpreadPenalty"]) if obj.get("m_AimingShootSpreadPenalty") is not None else None,
            "m_StandingShootSpreadPenalty": MStandingshootspreadpenalty.from_dict(obj["m_StandingShootSpreadPenalty"]) if obj.get("m_StandingShootSpreadPenalty") is not None else None,
            "m_flShootMoveSpeedPercent": obj.get("m_flShootMoveSpeedPercent"),
            "m_flShootSpreadPenaltyDecay": obj.get("m_flShootSpreadPenaltyDecay"),
            "m_flShootSpreadPenaltyDecayDelay": obj.get("m_flShootSpreadPenaltyDecayDelay"),
            "m_flShootSpreadPenaltyPerShot": obj.get("m_flShootSpreadPenaltyPerShot"),
            "m_flShootingUpSpreadPenalty": obj.get("m_flShootingUpSpreadPenalty"),
            "m_flVerticalPunch": obj.get("m_flVerticalPunch"),
            "m_flZoomFov": obj.get("m_flZoomFov"),
            "m_flZoomMoveSpeedPercent": obj.get("m_flZoomMoveSpeedPercent"),
            "m_iBullets": obj.get("m_iBullets"),
            "m_iBurstShotCount": obj.get("m_iBurstShotCount"),
            "m_iClipSize": obj.get("m_iClipSize"),
            "m_flSpread": obj.get("m_flSpread"),
            "m_flStandingSpread": obj.get("m_flStandingSpread"),
            "m_flLowAmmoIndicatorThreshold": obj.get("m_flLowAmmoIndicatorThreshold"),
            "m_flRecoilSeed": obj.get("m_flRecoilSeed"),
            "m_flReloadDuration": obj.get("m_flReloadDuration"),
            "m_BulletSpeedCurve": RawItemWeaponInfoBulletSpeedCurveV2Input.from_dict(obj["m_BulletSpeedCurve"]) if obj.get("m_BulletSpeedCurve") is not None else None,
            "m_HorizontalRecoil": RawWeaponInfoHorizontalRecoilV2Input.from_dict(obj["m_HorizontalRecoil"]) if obj.get("m_HorizontalRecoil") is not None else None,
            "m_VerticalRecoil": RawWeaponInfoVerticalRecoilV2Input.from_dict(obj["m_VerticalRecoil"]) if obj.get("m_VerticalRecoil") is not None else None
        })
        return _obj


