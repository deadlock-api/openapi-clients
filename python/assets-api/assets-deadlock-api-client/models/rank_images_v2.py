# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RankImagesV2(BaseModel):
    """
    RankImagesV2
    """ # noqa: E501
    large: Optional[StrictStr] = None
    large_webp: Optional[StrictStr] = None
    large_subrank1: Optional[StrictStr] = None
    large_subrank1_webp: Optional[StrictStr] = None
    large_subrank2: Optional[StrictStr] = None
    large_subrank2_webp: Optional[StrictStr] = None
    large_subrank3: Optional[StrictStr] = None
    large_subrank3_webp: Optional[StrictStr] = None
    large_subrank4: Optional[StrictStr] = None
    large_subrank4_webp: Optional[StrictStr] = None
    large_subrank5: Optional[StrictStr] = None
    large_subrank5_webp: Optional[StrictStr] = None
    large_subrank6: Optional[StrictStr] = None
    large_subrank6_webp: Optional[StrictStr] = None
    small: Optional[StrictStr] = None
    small_webp: Optional[StrictStr] = None
    small_subrank1: Optional[StrictStr] = None
    small_subrank1_webp: Optional[StrictStr] = None
    small_subrank2: Optional[StrictStr] = None
    small_subrank2_webp: Optional[StrictStr] = None
    small_subrank3: Optional[StrictStr] = None
    small_subrank3_webp: Optional[StrictStr] = None
    small_subrank4: Optional[StrictStr] = None
    small_subrank4_webp: Optional[StrictStr] = None
    small_subrank5: Optional[StrictStr] = None
    small_subrank5_webp: Optional[StrictStr] = None
    small_subrank6: Optional[StrictStr] = None
    small_subrank6_webp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["large", "large_webp", "large_subrank1", "large_subrank1_webp", "large_subrank2", "large_subrank2_webp", "large_subrank3", "large_subrank3_webp", "large_subrank4", "large_subrank4_webp", "large_subrank5", "large_subrank5_webp", "large_subrank6", "large_subrank6_webp", "small", "small_webp", "small_subrank1", "small_subrank1_webp", "small_subrank2", "small_subrank2_webp", "small_subrank3", "small_subrank3_webp", "small_subrank4", "small_subrank4_webp", "small_subrank5", "small_subrank5_webp", "small_subrank6", "small_subrank6_webp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RankImagesV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if large (nullable) is None
        # and model_fields_set contains the field
        if self.large is None and "large" in self.model_fields_set:
            _dict['large'] = None

        # set to None if large_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_webp is None and "large_webp" in self.model_fields_set:
            _dict['large_webp'] = None

        # set to None if large_subrank1 (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank1 is None and "large_subrank1" in self.model_fields_set:
            _dict['large_subrank1'] = None

        # set to None if large_subrank1_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank1_webp is None and "large_subrank1_webp" in self.model_fields_set:
            _dict['large_subrank1_webp'] = None

        # set to None if large_subrank2 (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank2 is None and "large_subrank2" in self.model_fields_set:
            _dict['large_subrank2'] = None

        # set to None if large_subrank2_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank2_webp is None and "large_subrank2_webp" in self.model_fields_set:
            _dict['large_subrank2_webp'] = None

        # set to None if large_subrank3 (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank3 is None and "large_subrank3" in self.model_fields_set:
            _dict['large_subrank3'] = None

        # set to None if large_subrank3_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank3_webp is None and "large_subrank3_webp" in self.model_fields_set:
            _dict['large_subrank3_webp'] = None

        # set to None if large_subrank4 (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank4 is None and "large_subrank4" in self.model_fields_set:
            _dict['large_subrank4'] = None

        # set to None if large_subrank4_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank4_webp is None and "large_subrank4_webp" in self.model_fields_set:
            _dict['large_subrank4_webp'] = None

        # set to None if large_subrank5 (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank5 is None and "large_subrank5" in self.model_fields_set:
            _dict['large_subrank5'] = None

        # set to None if large_subrank5_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank5_webp is None and "large_subrank5_webp" in self.model_fields_set:
            _dict['large_subrank5_webp'] = None

        # set to None if large_subrank6 (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank6 is None and "large_subrank6" in self.model_fields_set:
            _dict['large_subrank6'] = None

        # set to None if large_subrank6_webp (nullable) is None
        # and model_fields_set contains the field
        if self.large_subrank6_webp is None and "large_subrank6_webp" in self.model_fields_set:
            _dict['large_subrank6_webp'] = None

        # set to None if small (nullable) is None
        # and model_fields_set contains the field
        if self.small is None and "small" in self.model_fields_set:
            _dict['small'] = None

        # set to None if small_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_webp is None and "small_webp" in self.model_fields_set:
            _dict['small_webp'] = None

        # set to None if small_subrank1 (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank1 is None and "small_subrank1" in self.model_fields_set:
            _dict['small_subrank1'] = None

        # set to None if small_subrank1_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank1_webp is None and "small_subrank1_webp" in self.model_fields_set:
            _dict['small_subrank1_webp'] = None

        # set to None if small_subrank2 (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank2 is None and "small_subrank2" in self.model_fields_set:
            _dict['small_subrank2'] = None

        # set to None if small_subrank2_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank2_webp is None and "small_subrank2_webp" in self.model_fields_set:
            _dict['small_subrank2_webp'] = None

        # set to None if small_subrank3 (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank3 is None and "small_subrank3" in self.model_fields_set:
            _dict['small_subrank3'] = None

        # set to None if small_subrank3_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank3_webp is None and "small_subrank3_webp" in self.model_fields_set:
            _dict['small_subrank3_webp'] = None

        # set to None if small_subrank4 (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank4 is None and "small_subrank4" in self.model_fields_set:
            _dict['small_subrank4'] = None

        # set to None if small_subrank4_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank4_webp is None and "small_subrank4_webp" in self.model_fields_set:
            _dict['small_subrank4_webp'] = None

        # set to None if small_subrank5 (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank5 is None and "small_subrank5" in self.model_fields_set:
            _dict['small_subrank5'] = None

        # set to None if small_subrank5_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank5_webp is None and "small_subrank5_webp" in self.model_fields_set:
            _dict['small_subrank5_webp'] = None

        # set to None if small_subrank6 (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank6 is None and "small_subrank6" in self.model_fields_set:
            _dict['small_subrank6'] = None

        # set to None if small_subrank6_webp (nullable) is None
        # and model_fields_set contains the field
        if self.small_subrank6_webp is None and "small_subrank6_webp" in self.model_fields_set:
            _dict['small_subrank6_webp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RankImagesV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "large": obj.get("large"),
            "large_webp": obj.get("large_webp"),
            "large_subrank1": obj.get("large_subrank1"),
            "large_subrank1_webp": obj.get("large_subrank1_webp"),
            "large_subrank2": obj.get("large_subrank2"),
            "large_subrank2_webp": obj.get("large_subrank2_webp"),
            "large_subrank3": obj.get("large_subrank3"),
            "large_subrank3_webp": obj.get("large_subrank3_webp"),
            "large_subrank4": obj.get("large_subrank4"),
            "large_subrank4_webp": obj.get("large_subrank4_webp"),
            "large_subrank5": obj.get("large_subrank5"),
            "large_subrank5_webp": obj.get("large_subrank5_webp"),
            "large_subrank6": obj.get("large_subrank6"),
            "large_subrank6_webp": obj.get("large_subrank6_webp"),
            "small": obj.get("small"),
            "small_webp": obj.get("small_webp"),
            "small_subrank1": obj.get("small_subrank1"),
            "small_subrank1_webp": obj.get("small_subrank1_webp"),
            "small_subrank2": obj.get("small_subrank2"),
            "small_subrank2_webp": obj.get("small_subrank2_webp"),
            "small_subrank3": obj.get("small_subrank3"),
            "small_subrank3_webp": obj.get("small_subrank3_webp"),
            "small_subrank4": obj.get("small_subrank4"),
            "small_subrank4_webp": obj.get("small_subrank4_webp"),
            "small_subrank5": obj.get("small_subrank5"),
            "small_subrank5_webp": obj.get("small_subrank5_webp"),
            "small_subrank6": obj.get("small_subrank6"),
            "small_subrank6_webp": obj.get("small_subrank6_webp")
        })
        return _obj


