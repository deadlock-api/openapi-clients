# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assets-deadlock-api-client.models.item_slot_type_v2 import ItemSlotTypeV2
from assets-deadlock-api-client.models.item_tier_v2 import ItemTierV2
from assets-deadlock-api-client.models.raw_ability_activation_v2 import RawAbilityActivationV2
from assets-deadlock-api-client.models.raw_ability_imbue_v2 import RawAbilityImbueV2
from assets-deadlock-api-client.models.raw_item_weapon_info_v2 import RawItemWeaponInfoV2
from assets-deadlock-api-client.models.upgrade_description_v2 import UpgradeDescriptionV2
from assets-deadlock-api-client.models.upgrade_property_v2 import UpgradePropertyV2
from assets-deadlock-api-client.models.upgrade_tooltip_section_v2 import UpgradeTooltipSectionV2
from typing import Optional, Set
from typing_extensions import Self

class UpgradeV2(BaseModel):
    """
    UpgradeV2
    """ # noqa: E501
    id: StrictInt
    class_name: StrictStr
    name: StrictStr
    start_trained: Optional[StrictBool] = None
    image: Optional[StrictStr] = None
    image_webp: Optional[StrictStr] = None
    hero: Optional[StrictInt] = None
    heroes: Optional[List[StrictInt]] = None
    update_time: Optional[StrictInt] = None
    properties: Optional[Dict[str, UpgradePropertyV2]] = None
    weapon_info: Optional[RawItemWeaponInfoV2] = None
    type: Optional[StrictStr] = 'upgrade'
    shop_image: Optional[StrictStr] = None
    shop_image_webp: Optional[StrictStr] = None
    shop_image_small: Optional[StrictStr] = None
    shop_image_small_webp: Optional[StrictStr] = None
    item_slot_type: ItemSlotTypeV2
    item_tier: ItemTierV2
    disabled: Optional[StrictBool] = None
    description: Optional[UpgradeDescriptionV2] = None
    activation: RawAbilityActivationV2
    imbue: Optional[RawAbilityImbueV2] = None
    component_items: Optional[List[StrictStr]] = None
    tooltip_sections: Optional[List[UpgradeTooltipSectionV2]] = None
    is_active_item: StrictBool
    shopable: StrictBool
    cost: Optional[StrictInt]
    __properties: ClassVar[List[str]] = ["id", "class_name", "name", "start_trained", "image", "image_webp", "hero", "heroes", "update_time", "properties", "weapon_info", "type", "shop_image", "shop_image_webp", "shop_image_small", "shop_image_small_webp", "item_slot_type", "item_tier", "disabled", "description", "activation", "imbue", "component_items", "tooltip_sections", "is_active_item", "shopable", "cost"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['upgrade']):
            raise ValueError("must be one of enum values ('upgrade')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_active_item",
            "shopable",
            "cost",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key_properties in self.properties:
                if self.properties[_key_properties]:
                    _field_dict[_key_properties] = self.properties[_key_properties].to_dict()
            _dict['properties'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of weapon_info
        if self.weapon_info:
            _dict['weapon_info'] = self.weapon_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tooltip_sections (list)
        _items = []
        if self.tooltip_sections:
            for _item_tooltip_sections in self.tooltip_sections:
                if _item_tooltip_sections:
                    _items.append(_item_tooltip_sections.to_dict())
            _dict['tooltip_sections'] = _items
        # set to None if start_trained (nullable) is None
        # and model_fields_set contains the field
        if self.start_trained is None and "start_trained" in self.model_fields_set:
            _dict['start_trained'] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.image_webp is None and "image_webp" in self.model_fields_set:
            _dict['image_webp'] = None

        # set to None if hero (nullable) is None
        # and model_fields_set contains the field
        if self.hero is None and "hero" in self.model_fields_set:
            _dict['hero'] = None

        # set to None if heroes (nullable) is None
        # and model_fields_set contains the field
        if self.heroes is None and "heroes" in self.model_fields_set:
            _dict['heroes'] = None

        # set to None if update_time (nullable) is None
        # and model_fields_set contains the field
        if self.update_time is None and "update_time" in self.model_fields_set:
            _dict['update_time'] = None

        # set to None if properties (nullable) is None
        # and model_fields_set contains the field
        if self.properties is None and "properties" in self.model_fields_set:
            _dict['properties'] = None

        # set to None if weapon_info (nullable) is None
        # and model_fields_set contains the field
        if self.weapon_info is None and "weapon_info" in self.model_fields_set:
            _dict['weapon_info'] = None

        # set to None if shop_image (nullable) is None
        # and model_fields_set contains the field
        if self.shop_image is None and "shop_image" in self.model_fields_set:
            _dict['shop_image'] = None

        # set to None if shop_image_webp (nullable) is None
        # and model_fields_set contains the field
        if self.shop_image_webp is None and "shop_image_webp" in self.model_fields_set:
            _dict['shop_image_webp'] = None

        # set to None if shop_image_small (nullable) is None
        # and model_fields_set contains the field
        if self.shop_image_small is None and "shop_image_small" in self.model_fields_set:
            _dict['shop_image_small'] = None

        # set to None if shop_image_small_webp (nullable) is None
        # and model_fields_set contains the field
        if self.shop_image_small_webp is None and "shop_image_small_webp" in self.model_fields_set:
            _dict['shop_image_small_webp'] = None

        # set to None if disabled (nullable) is None
        # and model_fields_set contains the field
        if self.disabled is None and "disabled" in self.model_fields_set:
            _dict['disabled'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if imbue (nullable) is None
        # and model_fields_set contains the field
        if self.imbue is None and "imbue" in self.model_fields_set:
            _dict['imbue'] = None

        # set to None if component_items (nullable) is None
        # and model_fields_set contains the field
        if self.component_items is None and "component_items" in self.model_fields_set:
            _dict['component_items'] = None

        # set to None if tooltip_sections (nullable) is None
        # and model_fields_set contains the field
        if self.tooltip_sections is None and "tooltip_sections" in self.model_fields_set:
            _dict['tooltip_sections'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "class_name": obj.get("class_name"),
            "name": obj.get("name"),
            "start_trained": obj.get("start_trained"),
            "image": obj.get("image"),
            "image_webp": obj.get("image_webp"),
            "hero": obj.get("hero"),
            "heroes": obj.get("heroes"),
            "update_time": obj.get("update_time"),
            "properties": dict(
                (_k, UpgradePropertyV2.from_dict(_v))
                for _k, _v in obj["properties"].items()
            )
            if obj.get("properties") is not None
            else None,
            "weapon_info": RawItemWeaponInfoV2.from_dict(obj["weapon_info"]) if obj.get("weapon_info") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'upgrade',
            "shop_image": obj.get("shop_image"),
            "shop_image_webp": obj.get("shop_image_webp"),
            "shop_image_small": obj.get("shop_image_small"),
            "shop_image_small_webp": obj.get("shop_image_small_webp"),
            "item_slot_type": obj.get("item_slot_type"),
            "item_tier": obj.get("item_tier"),
            "disabled": obj.get("disabled"),
            "description": UpgradeDescriptionV2.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "activation": obj.get("activation"),
            "imbue": obj.get("imbue"),
            "component_items": obj.get("component_items"),
            "tooltip_sections": [UpgradeTooltipSectionV2.from_dict(_item) for _item in obj["tooltip_sections"]] if obj.get("tooltip_sections") is not None else None,
            "is_active_item": obj.get("is_active_item"),
            "shopable": obj.get("shopable"),
            "cost": obj.get("cost")
        })
        return _obj


