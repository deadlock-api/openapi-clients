# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from assets-deadlock-api-client.models.raw_item_property_scale_function_subclass_v2 import RawItemPropertyScaleFunctionSubclassV2
from assets-deadlock-api-client.models.usage_flags import UsageFlags
from assets-deadlock-api-client.models.value1 import Value1
from typing import Optional, Set
from typing_extensions import Self

class ItemPropertyV2(BaseModel):
    """
    ItemPropertyV2
    """ # noqa: E501
    value: Optional[Value1] = None
    can_set_token_override: Optional[StrictBool] = None
    provided_property_type: Optional[StrictStr] = None
    css_class: Optional[StrictStr] = None
    usage_flags: Optional[UsageFlags] = None
    negative_attribute: Optional[StrictBool] = None
    disable_value: Optional[StrictStr] = None
    loc_token_override: Optional[StrictStr] = None
    display_units: Optional[StrictStr] = None
    icon_path: Optional[StrictStr] = None
    scale_function: Optional[RawItemPropertyScaleFunctionSubclassV2] = None
    prefix: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    postfix: Optional[StrictStr] = None
    postvalue_label: Optional[StrictStr] = None
    conditional: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["value", "can_set_token_override", "provided_property_type", "css_class", "usage_flags", "negative_attribute", "disable_value", "loc_token_override", "display_units", "icon_path", "scale_function", "prefix", "label", "postfix", "postvalue_label", "conditional", "icon"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemPropertyV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_flags
        if self.usage_flags:
            _dict['usage_flags'] = self.usage_flags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_function
        if self.scale_function:
            _dict['scale_function'] = self.scale_function.to_dict()
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if can_set_token_override (nullable) is None
        # and model_fields_set contains the field
        if self.can_set_token_override is None and "can_set_token_override" in self.model_fields_set:
            _dict['can_set_token_override'] = None

        # set to None if provided_property_type (nullable) is None
        # and model_fields_set contains the field
        if self.provided_property_type is None and "provided_property_type" in self.model_fields_set:
            _dict['provided_property_type'] = None

        # set to None if css_class (nullable) is None
        # and model_fields_set contains the field
        if self.css_class is None and "css_class" in self.model_fields_set:
            _dict['css_class'] = None

        # set to None if usage_flags (nullable) is None
        # and model_fields_set contains the field
        if self.usage_flags is None and "usage_flags" in self.model_fields_set:
            _dict['usage_flags'] = None

        # set to None if negative_attribute (nullable) is None
        # and model_fields_set contains the field
        if self.negative_attribute is None and "negative_attribute" in self.model_fields_set:
            _dict['negative_attribute'] = None

        # set to None if disable_value (nullable) is None
        # and model_fields_set contains the field
        if self.disable_value is None and "disable_value" in self.model_fields_set:
            _dict['disable_value'] = None

        # set to None if loc_token_override (nullable) is None
        # and model_fields_set contains the field
        if self.loc_token_override is None and "loc_token_override" in self.model_fields_set:
            _dict['loc_token_override'] = None

        # set to None if display_units (nullable) is None
        # and model_fields_set contains the field
        if self.display_units is None and "display_units" in self.model_fields_set:
            _dict['display_units'] = None

        # set to None if icon_path (nullable) is None
        # and model_fields_set contains the field
        if self.icon_path is None and "icon_path" in self.model_fields_set:
            _dict['icon_path'] = None

        # set to None if scale_function (nullable) is None
        # and model_fields_set contains the field
        if self.scale_function is None and "scale_function" in self.model_fields_set:
            _dict['scale_function'] = None

        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict['prefix'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if postfix (nullable) is None
        # and model_fields_set contains the field
        if self.postfix is None and "postfix" in self.model_fields_set:
            _dict['postfix'] = None

        # set to None if postvalue_label (nullable) is None
        # and model_fields_set contains the field
        if self.postvalue_label is None and "postvalue_label" in self.model_fields_set:
            _dict['postvalue_label'] = None

        # set to None if conditional (nullable) is None
        # and model_fields_set contains the field
        if self.conditional is None and "conditional" in self.model_fields_set:
            _dict['conditional'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemPropertyV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "value": Value1.from_dict(obj["value"]) if obj.get("value") is not None else None,
            "can_set_token_override": obj.get("can_set_token_override"),
            "provided_property_type": obj.get("provided_property_type"),
            "css_class": obj.get("css_class"),
            "usage_flags": UsageFlags.from_dict(obj["usage_flags"]) if obj.get("usage_flags") is not None else None,
            "negative_attribute": obj.get("negative_attribute"),
            "disable_value": obj.get("disable_value"),
            "loc_token_override": obj.get("loc_token_override"),
            "display_units": obj.get("display_units"),
            "icon_path": obj.get("icon_path"),
            "scale_function": RawItemPropertyScaleFunctionSubclassV2.from_dict(obj["scale_function"]) if obj.get("scale_function") is not None else None,
            "prefix": obj.get("prefix"),
            "label": obj.get("label"),
            "postfix": obj.get("postfix"),
            "postvalue_label": obj.get("postvalue_label"),
            "conditional": obj.get("conditional"),
            "icon": obj.get("icon")
        })
        return _obj


