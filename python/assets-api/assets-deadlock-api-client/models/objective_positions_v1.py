# coding: utf-8

"""
    Assets - Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from assets-deadlock-api-client.models.objective_position_v1 import ObjectivePositionV1
from typing import Optional, Set
from typing_extensions import Self

class ObjectivePositionsV1(BaseModel):
    """
    ObjectivePositionsV1
    """ # noqa: E501
    team0_core: ObjectivePositionV1
    team1_core: ObjectivePositionV1
    team0_titan: ObjectivePositionV1
    team1_titan: ObjectivePositionV1
    team0_tier2_1: ObjectivePositionV1
    team0_tier2_2: Optional[ObjectivePositionV1] = None
    team0_tier2_3: ObjectivePositionV1
    team0_tier2_4: ObjectivePositionV1
    team1_tier2_1: ObjectivePositionV1
    team1_tier2_2: Optional[ObjectivePositionV1] = None
    team1_tier2_3: ObjectivePositionV1
    team1_tier2_4: ObjectivePositionV1
    team0_tier1_1: ObjectivePositionV1
    team0_tier1_2: Optional[ObjectivePositionV1] = None
    team0_tier1_3: ObjectivePositionV1
    team0_tier1_4: ObjectivePositionV1
    team1_tier1_1: ObjectivePositionV1
    team1_tier1_2: Optional[ObjectivePositionV1] = None
    team1_tier1_3: ObjectivePositionV1
    team1_tier1_4: ObjectivePositionV1
    __properties: ClassVar[List[str]] = ["team0_core", "team1_core", "team0_titan", "team1_titan", "team0_tier2_1", "team0_tier2_2", "team0_tier2_3", "team0_tier2_4", "team1_tier2_1", "team1_tier2_2", "team1_tier2_3", "team1_tier2_4", "team0_tier1_1", "team0_tier1_2", "team0_tier1_3", "team0_tier1_4", "team1_tier1_1", "team1_tier1_2", "team1_tier1_3", "team1_tier1_4"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectivePositionsV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team0_core
        if self.team0_core:
            _dict['team0_core'] = self.team0_core.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_core
        if self.team1_core:
            _dict['team1_core'] = self.team1_core.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_titan
        if self.team0_titan:
            _dict['team0_titan'] = self.team0_titan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_titan
        if self.team1_titan:
            _dict['team1_titan'] = self.team1_titan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier2_1
        if self.team0_tier2_1:
            _dict['team0_tier2_1'] = self.team0_tier2_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier2_2
        if self.team0_tier2_2:
            _dict['team0_tier2_2'] = self.team0_tier2_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier2_3
        if self.team0_tier2_3:
            _dict['team0_tier2_3'] = self.team0_tier2_3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier2_4
        if self.team0_tier2_4:
            _dict['team0_tier2_4'] = self.team0_tier2_4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier2_1
        if self.team1_tier2_1:
            _dict['team1_tier2_1'] = self.team1_tier2_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier2_2
        if self.team1_tier2_2:
            _dict['team1_tier2_2'] = self.team1_tier2_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier2_3
        if self.team1_tier2_3:
            _dict['team1_tier2_3'] = self.team1_tier2_3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier2_4
        if self.team1_tier2_4:
            _dict['team1_tier2_4'] = self.team1_tier2_4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier1_1
        if self.team0_tier1_1:
            _dict['team0_tier1_1'] = self.team0_tier1_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier1_2
        if self.team0_tier1_2:
            _dict['team0_tier1_2'] = self.team0_tier1_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier1_3
        if self.team0_tier1_3:
            _dict['team0_tier1_3'] = self.team0_tier1_3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team0_tier1_4
        if self.team0_tier1_4:
            _dict['team0_tier1_4'] = self.team0_tier1_4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier1_1
        if self.team1_tier1_1:
            _dict['team1_tier1_1'] = self.team1_tier1_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier1_2
        if self.team1_tier1_2:
            _dict['team1_tier1_2'] = self.team1_tier1_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier1_3
        if self.team1_tier1_3:
            _dict['team1_tier1_3'] = self.team1_tier1_3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team1_tier1_4
        if self.team1_tier1_4:
            _dict['team1_tier1_4'] = self.team1_tier1_4.to_dict()
        # set to None if team0_tier2_2 (nullable) is None
        # and model_fields_set contains the field
        if self.team0_tier2_2 is None and "team0_tier2_2" in self.model_fields_set:
            _dict['team0_tier2_2'] = None

        # set to None if team1_tier2_2 (nullable) is None
        # and model_fields_set contains the field
        if self.team1_tier2_2 is None and "team1_tier2_2" in self.model_fields_set:
            _dict['team1_tier2_2'] = None

        # set to None if team0_tier1_2 (nullable) is None
        # and model_fields_set contains the field
        if self.team0_tier1_2 is None and "team0_tier1_2" in self.model_fields_set:
            _dict['team0_tier1_2'] = None

        # set to None if team1_tier1_2 (nullable) is None
        # and model_fields_set contains the field
        if self.team1_tier1_2 is None and "team1_tier1_2" in self.model_fields_set:
            _dict['team1_tier1_2'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectivePositionsV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "team0_core": ObjectivePositionV1.from_dict(obj["team0_core"]) if obj.get("team0_core") is not None else None,
            "team1_core": ObjectivePositionV1.from_dict(obj["team1_core"]) if obj.get("team1_core") is not None else None,
            "team0_titan": ObjectivePositionV1.from_dict(obj["team0_titan"]) if obj.get("team0_titan") is not None else None,
            "team1_titan": ObjectivePositionV1.from_dict(obj["team1_titan"]) if obj.get("team1_titan") is not None else None,
            "team0_tier2_1": ObjectivePositionV1.from_dict(obj["team0_tier2_1"]) if obj.get("team0_tier2_1") is not None else None,
            "team0_tier2_2": ObjectivePositionV1.from_dict(obj["team0_tier2_2"]) if obj.get("team0_tier2_2") is not None else None,
            "team0_tier2_3": ObjectivePositionV1.from_dict(obj["team0_tier2_3"]) if obj.get("team0_tier2_3") is not None else None,
            "team0_tier2_4": ObjectivePositionV1.from_dict(obj["team0_tier2_4"]) if obj.get("team0_tier2_4") is not None else None,
            "team1_tier2_1": ObjectivePositionV1.from_dict(obj["team1_tier2_1"]) if obj.get("team1_tier2_1") is not None else None,
            "team1_tier2_2": ObjectivePositionV1.from_dict(obj["team1_tier2_2"]) if obj.get("team1_tier2_2") is not None else None,
            "team1_tier2_3": ObjectivePositionV1.from_dict(obj["team1_tier2_3"]) if obj.get("team1_tier2_3") is not None else None,
            "team1_tier2_4": ObjectivePositionV1.from_dict(obj["team1_tier2_4"]) if obj.get("team1_tier2_4") is not None else None,
            "team0_tier1_1": ObjectivePositionV1.from_dict(obj["team0_tier1_1"]) if obj.get("team0_tier1_1") is not None else None,
            "team0_tier1_2": ObjectivePositionV1.from_dict(obj["team0_tier1_2"]) if obj.get("team0_tier1_2") is not None else None,
            "team0_tier1_3": ObjectivePositionV1.from_dict(obj["team0_tier1_3"]) if obj.get("team0_tier1_3") is not None else None,
            "team0_tier1_4": ObjectivePositionV1.from_dict(obj["team0_tier1_4"]) if obj.get("team0_tier1_4") is not None else None,
            "team1_tier1_1": ObjectivePositionV1.from_dict(obj["team1_tier1_1"]) if obj.get("team1_tier1_1") is not None else None,
            "team1_tier1_2": ObjectivePositionV1.from_dict(obj["team1_tier1_2"]) if obj.get("team1_tier1_2") is not None else None,
            "team1_tier1_3": ObjectivePositionV1.from_dict(obj["team1_tier1_3"]) if obj.get("team1_tier1_3") is not None else None,
            "team1_tier1_4": ObjectivePositionV1.from_dict(obj["team1_tier1_4"]) if obj.get("team1_tier1_4") is not None else None
        })
        return _obj


