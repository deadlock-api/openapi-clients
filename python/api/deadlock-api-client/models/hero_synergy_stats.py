# coding: utf-8

"""
    Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HeroSynergyStats(BaseModel):
    """
    HeroSynergyStats
    """ # noqa: E501
    assists1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of assists by `hero_id1` when playing with `hero_id2`.")
    assists2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of assists by `hero_id2` when playing with `hero_id1`.")
    creeps1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of creeps killed by `hero_id1` when playing with `hero_id2`.")
    creeps2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of creeps killed by `hero_id2` when playing with `hero_id1`.")
    deaths1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of deaths by `hero_id1` when playing with `hero_id2`.")
    deaths2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of deaths by `hero_id2` when playing with `hero_id1`.")
    denies1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of denies by `hero_id1` when playing with `hero_id2`.")
    denies2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of denies by `hero_id2` when playing with `hero_id1`.")
    hero_id1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The ID of the first hero in the pair.")
    hero_id2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The ID of the second hero in the pair.")
    kills1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of kills by `hero_id1` when playing with `hero_id2`.")
    kills2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of kills by `hero_id2` when playing with `hero_id1`.")
    last_hits1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of last hits by `hero_id1` when playing with `hero_id2`.")
    last_hits2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of last hits by `hero_id2` when playing with `hero_id1`.")
    matches_played: Annotated[int, Field(strict=True, ge=0)] = Field(description="The total number of matches played where `hero_id1` and `hero_id2` were on the same team, meeting the filter criteria.")
    networth1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The net worth of `hero_id1` when playing with `hero_id2`.")
    networth2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The net worth of `hero_id2` when playing with `hero_id1`.")
    obj_damage1: Annotated[int, Field(strict=True, ge=0)] = Field(description="The amount of objective damage dealt by `hero_id1` when playing with `hero_id2`.")
    obj_damage2: Annotated[int, Field(strict=True, ge=0)] = Field(description="The amount of objective damage dealt by `hero_id2` when playing with `hero_id1`.")
    wins: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of times the team won when both `hero_id1` and `hero_id2` were on the same team.")
    __properties: ClassVar[List[str]] = ["assists1", "assists2", "creeps1", "creeps2", "deaths1", "deaths2", "denies1", "denies2", "hero_id1", "hero_id2", "kills1", "kills2", "last_hits1", "last_hits2", "matches_played", "networth1", "networth2", "obj_damage1", "obj_damage2", "wins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeroSynergyStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeroSynergyStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assists1": obj.get("assists1"),
            "assists2": obj.get("assists2"),
            "creeps1": obj.get("creeps1"),
            "creeps2": obj.get("creeps2"),
            "deaths1": obj.get("deaths1"),
            "deaths2": obj.get("deaths2"),
            "denies1": obj.get("denies1"),
            "denies2": obj.get("denies2"),
            "hero_id1": obj.get("hero_id1"),
            "hero_id2": obj.get("hero_id2"),
            "kills1": obj.get("kills1"),
            "kills2": obj.get("kills2"),
            "last_hits1": obj.get("last_hits1"),
            "last_hits2": obj.get("last_hits2"),
            "matches_played": obj.get("matches_played"),
            "networth1": obj.get("networth1"),
            "networth2": obj.get("networth2"),
            "obj_damage1": obj.get("obj_damage1"),
            "obj_damage2": obj.get("obj_damage2"),
            "wins": obj.get("wins")
        })
        return _obj


