# coding: utf-8

"""
    Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from deadlock-api-client.models.active_match_game_mode import ActiveMatchGameMode
from deadlock-api-client.models.active_match_mode import ActiveMatchMode
from deadlock-api-client.models.active_match_player import ActiveMatchPlayer
from deadlock-api-client.models.active_match_region_mode import ActiveMatchRegionMode
from deadlock-api-client.models.active_match_team import ActiveMatchTeam
from typing import Optional, Set
from typing_extensions import Self

class ActiveMatch(BaseModel):
    """
    ActiveMatch
    """ # noqa: E501
    compat_version: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    duration_s: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    game_mode: Optional[StrictInt] = None
    game_mode_parsed: Optional[ActiveMatchGameMode] = None
    game_mode_version: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    lobby_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    match_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    match_mode: Optional[StrictInt] = None
    match_mode_parsed: Optional[ActiveMatchMode] = None
    match_score: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    net_worth_team_0: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    net_worth_team_1: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    objectives_mask_team0: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    objectives_mask_team1: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    open_spectator_slots: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    players: List[ActiveMatchPlayer]
    region_mode: Optional[StrictInt] = None
    region_mode_parsed: Optional[ActiveMatchRegionMode] = None
    spectators: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    start_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    winning_team: Optional[StrictInt] = None
    winning_team_parsed: Optional[ActiveMatchTeam] = None
    __properties: ClassVar[List[str]] = ["compat_version", "duration_s", "game_mode", "game_mode_parsed", "game_mode_version", "lobby_id", "match_id", "match_mode", "match_mode_parsed", "match_score", "net_worth_team_0", "net_worth_team_1", "objectives_mask_team0", "objectives_mask_team1", "open_spectator_slots", "players", "region_mode", "region_mode_parsed", "spectators", "start_time", "winning_team", "winning_team_parsed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActiveMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item_players in self.players:
                if _item_players:
                    _items.append(_item_players.to_dict())
            _dict['players'] = _items
        # set to None if compat_version (nullable) is None
        # and model_fields_set contains the field
        if self.compat_version is None and "compat_version" in self.model_fields_set:
            _dict['compat_version'] = None

        # set to None if duration_s (nullable) is None
        # and model_fields_set contains the field
        if self.duration_s is None and "duration_s" in self.model_fields_set:
            _dict['duration_s'] = None

        # set to None if game_mode (nullable) is None
        # and model_fields_set contains the field
        if self.game_mode is None and "game_mode" in self.model_fields_set:
            _dict['game_mode'] = None

        # set to None if game_mode_parsed (nullable) is None
        # and model_fields_set contains the field
        if self.game_mode_parsed is None and "game_mode_parsed" in self.model_fields_set:
            _dict['game_mode_parsed'] = None

        # set to None if game_mode_version (nullable) is None
        # and model_fields_set contains the field
        if self.game_mode_version is None and "game_mode_version" in self.model_fields_set:
            _dict['game_mode_version'] = None

        # set to None if lobby_id (nullable) is None
        # and model_fields_set contains the field
        if self.lobby_id is None and "lobby_id" in self.model_fields_set:
            _dict['lobby_id'] = None

        # set to None if match_id (nullable) is None
        # and model_fields_set contains the field
        if self.match_id is None and "match_id" in self.model_fields_set:
            _dict['match_id'] = None

        # set to None if match_mode (nullable) is None
        # and model_fields_set contains the field
        if self.match_mode is None and "match_mode" in self.model_fields_set:
            _dict['match_mode'] = None

        # set to None if match_mode_parsed (nullable) is None
        # and model_fields_set contains the field
        if self.match_mode_parsed is None and "match_mode_parsed" in self.model_fields_set:
            _dict['match_mode_parsed'] = None

        # set to None if match_score (nullable) is None
        # and model_fields_set contains the field
        if self.match_score is None and "match_score" in self.model_fields_set:
            _dict['match_score'] = None

        # set to None if net_worth_team_0 (nullable) is None
        # and model_fields_set contains the field
        if self.net_worth_team_0 is None and "net_worth_team_0" in self.model_fields_set:
            _dict['net_worth_team_0'] = None

        # set to None if net_worth_team_1 (nullable) is None
        # and model_fields_set contains the field
        if self.net_worth_team_1 is None and "net_worth_team_1" in self.model_fields_set:
            _dict['net_worth_team_1'] = None

        # set to None if objectives_mask_team0 (nullable) is None
        # and model_fields_set contains the field
        if self.objectives_mask_team0 is None and "objectives_mask_team0" in self.model_fields_set:
            _dict['objectives_mask_team0'] = None

        # set to None if objectives_mask_team1 (nullable) is None
        # and model_fields_set contains the field
        if self.objectives_mask_team1 is None and "objectives_mask_team1" in self.model_fields_set:
            _dict['objectives_mask_team1'] = None

        # set to None if open_spectator_slots (nullable) is None
        # and model_fields_set contains the field
        if self.open_spectator_slots is None and "open_spectator_slots" in self.model_fields_set:
            _dict['open_spectator_slots'] = None

        # set to None if region_mode (nullable) is None
        # and model_fields_set contains the field
        if self.region_mode is None and "region_mode" in self.model_fields_set:
            _dict['region_mode'] = None

        # set to None if region_mode_parsed (nullable) is None
        # and model_fields_set contains the field
        if self.region_mode_parsed is None and "region_mode_parsed" in self.model_fields_set:
            _dict['region_mode_parsed'] = None

        # set to None if spectators (nullable) is None
        # and model_fields_set contains the field
        if self.spectators is None and "spectators" in self.model_fields_set:
            _dict['spectators'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if winning_team (nullable) is None
        # and model_fields_set contains the field
        if self.winning_team is None and "winning_team" in self.model_fields_set:
            _dict['winning_team'] = None

        # set to None if winning_team_parsed (nullable) is None
        # and model_fields_set contains the field
        if self.winning_team_parsed is None and "winning_team_parsed" in self.model_fields_set:
            _dict['winning_team_parsed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActiveMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compat_version": obj.get("compat_version"),
            "duration_s": obj.get("duration_s"),
            "game_mode": obj.get("game_mode"),
            "game_mode_parsed": obj.get("game_mode_parsed"),
            "game_mode_version": obj.get("game_mode_version"),
            "lobby_id": obj.get("lobby_id"),
            "match_id": obj.get("match_id"),
            "match_mode": obj.get("match_mode"),
            "match_mode_parsed": obj.get("match_mode_parsed"),
            "match_score": obj.get("match_score"),
            "net_worth_team_0": obj.get("net_worth_team_0"),
            "net_worth_team_1": obj.get("net_worth_team_1"),
            "objectives_mask_team0": obj.get("objectives_mask_team0"),
            "objectives_mask_team1": obj.get("objectives_mask_team1"),
            "open_spectator_slots": obj.get("open_spectator_slots"),
            "players": [ActiveMatchPlayer.from_dict(_item) for _item in obj["players"]] if obj.get("players") is not None else None,
            "region_mode": obj.get("region_mode"),
            "region_mode_parsed": obj.get("region_mode_parsed"),
            "spectators": obj.get("spectators"),
            "start_time": obj.get("start_time"),
            "winning_team": obj.get("winning_team"),
            "winning_team_parsed": obj.get("winning_team_parsed")
        })
        return _obj


