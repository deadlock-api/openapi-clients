# coding: utf-8

"""
    Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from deadlock-api-client.api.matches_api import MatchesApi


class TestMatchesApi(unittest.TestCase):
    """MatchesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = MatchesApi()

    def tearDown(self) -> None:
        pass

    def test_active_matches(self) -> None:
        """Test case for active_matches

        Active
        """
        pass

    def test_active_matches_raw(self) -> None:
        """Test case for active_matches_raw

        Active as Protobuf
        """
        pass

    def test_badge_distribution(self) -> None:
        """Test case for badge_distribution

        Badge Distribution
        """
        pass

    def test_bulk_metadata(self) -> None:
        """Test case for bulk_metadata

        Bulk Metadata
        """
        pass

    def test_metadata(self) -> None:
        """Test case for metadata

        Metadata
        """
        pass

    def test_metadata_raw(self) -> None:
        """Test case for metadata_raw

        Metadata as Protobuf
        """
        pass

    def test_recently_fetched(self) -> None:
        """Test case for recently_fetched

        Recently Fetched
        """
        pass

    def test_salts(self) -> None:
        """Test case for salts

        Salts
        """
        pass

    def test_url(self) -> None:
        """Test case for url

        Live Broadcast URL
        """
        pass


if __name__ == '__main__':
    unittest.main()
