# coding: utf-8

"""
    Deadlock API

     ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.build import Build

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BuildsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_builds(
        self,
        min_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their `last_updated` time (Unix timestamp).")] = None,
        max_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their `last_updated` time (Unix timestamp).")] = None,
        min_published_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their published time (Unix timestamp).")] = None,
        max_published_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their published time (Unix timestamp).")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field to sort the builds by.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The index of the first build to return.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of builds to return.")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort the builds in.")] = None,
        search_name: Annotated[Optional[StrictStr], Field(description="Search for builds with a name containing this string.")] = None,
        search_description: Annotated[Optional[StrictStr], Field(description="Search for builds with a description containing this string.")] = None,
        only_latest: Annotated[Optional[StrictBool], Field(description="Only return the latest version of each build.")] = None,
        language: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by language.")] = None,
        build_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by ID.")] = None,
        version: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by version.")] = None,
        hero_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>")] = None,
        tag: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by tag.")] = None,
        rollup_category: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by rollup category.")] = None,
        author_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The author's `SteamID3`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Build]:
        """Search

         Search for builds based on various criteria.  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     

        :param min_unix_timestamp: Filter builds based on their `last_updated` time (Unix timestamp).
        :type min_unix_timestamp: int
        :param max_unix_timestamp: Filter builds based on their `last_updated` time (Unix timestamp).
        :type max_unix_timestamp: int
        :param min_published_unix_timestamp: Filter builds based on their published time (Unix timestamp).
        :type min_published_unix_timestamp: int
        :param max_published_unix_timestamp: Filter builds based on their published time (Unix timestamp).
        :type max_published_unix_timestamp: int
        :param sort_by: The field to sort the builds by.
        :type sort_by: str
        :param start: The index of the first build to return.
        :type start: int
        :param limit: The maximum number of builds to return.
        :type limit: int
        :param sort_direction: The direction to sort the builds in.
        :type sort_direction: str
        :param search_name: Search for builds with a name containing this string.
        :type search_name: str
        :param search_description: Search for builds with a description containing this string.
        :type search_description: str
        :param only_latest: Only return the latest version of each build.
        :type only_latest: bool
        :param language: Filter builds by language.
        :type language: int
        :param build_id: Filter builds by ID.
        :type build_id: int
        :param version: Filter builds by version.
        :type version: int
        :param hero_id: Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
        :type hero_id: int
        :param tag: Filter builds by tag.
        :type tag: int
        :param rollup_category: Filter builds by rollup category.
        :type rollup_category: int
        :param author_id: The author's `SteamID3`
        :type author_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_builds_serialize(
            min_unix_timestamp=min_unix_timestamp,
            max_unix_timestamp=max_unix_timestamp,
            min_published_unix_timestamp=min_published_unix_timestamp,
            max_published_unix_timestamp=max_published_unix_timestamp,
            sort_by=sort_by,
            start=start,
            limit=limit,
            sort_direction=sort_direction,
            search_name=search_name,
            search_description=search_description,
            only_latest=only_latest,
            language=language,
            build_id=build_id,
            version=version,
            hero_id=hero_id,
            tag=tag,
            rollup_category=rollup_category,
            author_id=author_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Build]",
            '400': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_builds_with_http_info(
        self,
        min_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their `last_updated` time (Unix timestamp).")] = None,
        max_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their `last_updated` time (Unix timestamp).")] = None,
        min_published_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their published time (Unix timestamp).")] = None,
        max_published_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their published time (Unix timestamp).")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field to sort the builds by.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The index of the first build to return.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of builds to return.")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort the builds in.")] = None,
        search_name: Annotated[Optional[StrictStr], Field(description="Search for builds with a name containing this string.")] = None,
        search_description: Annotated[Optional[StrictStr], Field(description="Search for builds with a description containing this string.")] = None,
        only_latest: Annotated[Optional[StrictBool], Field(description="Only return the latest version of each build.")] = None,
        language: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by language.")] = None,
        build_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by ID.")] = None,
        version: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by version.")] = None,
        hero_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>")] = None,
        tag: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by tag.")] = None,
        rollup_category: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by rollup category.")] = None,
        author_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The author's `SteamID3`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Build]]:
        """Search

         Search for builds based on various criteria.  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     

        :param min_unix_timestamp: Filter builds based on their `last_updated` time (Unix timestamp).
        :type min_unix_timestamp: int
        :param max_unix_timestamp: Filter builds based on their `last_updated` time (Unix timestamp).
        :type max_unix_timestamp: int
        :param min_published_unix_timestamp: Filter builds based on their published time (Unix timestamp).
        :type min_published_unix_timestamp: int
        :param max_published_unix_timestamp: Filter builds based on their published time (Unix timestamp).
        :type max_published_unix_timestamp: int
        :param sort_by: The field to sort the builds by.
        :type sort_by: str
        :param start: The index of the first build to return.
        :type start: int
        :param limit: The maximum number of builds to return.
        :type limit: int
        :param sort_direction: The direction to sort the builds in.
        :type sort_direction: str
        :param search_name: Search for builds with a name containing this string.
        :type search_name: str
        :param search_description: Search for builds with a description containing this string.
        :type search_description: str
        :param only_latest: Only return the latest version of each build.
        :type only_latest: bool
        :param language: Filter builds by language.
        :type language: int
        :param build_id: Filter builds by ID.
        :type build_id: int
        :param version: Filter builds by version.
        :type version: int
        :param hero_id: Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
        :type hero_id: int
        :param tag: Filter builds by tag.
        :type tag: int
        :param rollup_category: Filter builds by rollup category.
        :type rollup_category: int
        :param author_id: The author's `SteamID3`
        :type author_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_builds_serialize(
            min_unix_timestamp=min_unix_timestamp,
            max_unix_timestamp=max_unix_timestamp,
            min_published_unix_timestamp=min_published_unix_timestamp,
            max_published_unix_timestamp=max_published_unix_timestamp,
            sort_by=sort_by,
            start=start,
            limit=limit,
            sort_direction=sort_direction,
            search_name=search_name,
            search_description=search_description,
            only_latest=only_latest,
            language=language,
            build_id=build_id,
            version=version,
            hero_id=hero_id,
            tag=tag,
            rollup_category=rollup_category,
            author_id=author_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Build]",
            '400': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_builds_without_preload_content(
        self,
        min_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their `last_updated` time (Unix timestamp).")] = None,
        max_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their `last_updated` time (Unix timestamp).")] = None,
        min_published_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their published time (Unix timestamp).")] = None,
        max_published_unix_timestamp: Annotated[Optional[StrictInt], Field(description="Filter builds based on their published time (Unix timestamp).")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="The field to sort the builds by.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The index of the first build to return.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of builds to return.")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort the builds in.")] = None,
        search_name: Annotated[Optional[StrictStr], Field(description="Search for builds with a name containing this string.")] = None,
        search_description: Annotated[Optional[StrictStr], Field(description="Search for builds with a description containing this string.")] = None,
        only_latest: Annotated[Optional[StrictBool], Field(description="Only return the latest version of each build.")] = None,
        language: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by language.")] = None,
        build_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by ID.")] = None,
        version: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by version.")] = None,
        hero_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>")] = None,
        tag: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by tag.")] = None,
        rollup_category: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter builds by rollup category.")] = None,
        author_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The author's `SteamID3`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search

         Search for builds based on various criteria.  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     

        :param min_unix_timestamp: Filter builds based on their `last_updated` time (Unix timestamp).
        :type min_unix_timestamp: int
        :param max_unix_timestamp: Filter builds based on their `last_updated` time (Unix timestamp).
        :type max_unix_timestamp: int
        :param min_published_unix_timestamp: Filter builds based on their published time (Unix timestamp).
        :type min_published_unix_timestamp: int
        :param max_published_unix_timestamp: Filter builds based on their published time (Unix timestamp).
        :type max_published_unix_timestamp: int
        :param sort_by: The field to sort the builds by.
        :type sort_by: str
        :param start: The index of the first build to return.
        :type start: int
        :param limit: The maximum number of builds to return.
        :type limit: int
        :param sort_direction: The direction to sort the builds in.
        :type sort_direction: str
        :param search_name: Search for builds with a name containing this string.
        :type search_name: str
        :param search_description: Search for builds with a description containing this string.
        :type search_description: str
        :param only_latest: Only return the latest version of each build.
        :type only_latest: bool
        :param language: Filter builds by language.
        :type language: int
        :param build_id: Filter builds by ID.
        :type build_id: int
        :param version: Filter builds by version.
        :type version: int
        :param hero_id: Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
        :type hero_id: int
        :param tag: Filter builds by tag.
        :type tag: int
        :param rollup_category: Filter builds by rollup category.
        :type rollup_category: int
        :param author_id: The author's `SteamID3`
        :type author_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_builds_serialize(
            min_unix_timestamp=min_unix_timestamp,
            max_unix_timestamp=max_unix_timestamp,
            min_published_unix_timestamp=min_published_unix_timestamp,
            max_published_unix_timestamp=max_published_unix_timestamp,
            sort_by=sort_by,
            start=start,
            limit=limit,
            sort_direction=sort_direction,
            search_name=search_name,
            search_description=search_description,
            only_latest=only_latest,
            language=language,
            build_id=build_id,
            version=version,
            hero_id=hero_id,
            tag=tag,
            rollup_category=rollup_category,
            author_id=author_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Build]",
            '400': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_builds_serialize(
        self,
        min_unix_timestamp,
        max_unix_timestamp,
        min_published_unix_timestamp,
        max_published_unix_timestamp,
        sort_by,
        start,
        limit,
        sort_direction,
        search_name,
        search_description,
        only_latest,
        language,
        build_id,
        version,
        hero_id,
        tag,
        rollup_category,
        author_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if min_unix_timestamp is not None:
            
            _query_params.append(('min_unix_timestamp', min_unix_timestamp))
            
        if max_unix_timestamp is not None:
            
            _query_params.append(('max_unix_timestamp', max_unix_timestamp))
            
        if min_published_unix_timestamp is not None:
            
            _query_params.append(('min_published_unix_timestamp', min_published_unix_timestamp))
            
        if max_published_unix_timestamp is not None:
            
            _query_params.append(('max_published_unix_timestamp', max_published_unix_timestamp))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        if search_name is not None:
            
            _query_params.append(('search_name', search_name))
            
        if search_description is not None:
            
            _query_params.append(('search_description', search_description))
            
        if only_latest is not None:
            
            _query_params.append(('only_latest', only_latest))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if build_id is not None:
            
            _query_params.append(('build_id', build_id))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        if hero_id is not None:
            
            _query_params.append(('hero_id', hero_id))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if rollup_category is not None:
            
            _query_params.append(('rollup_category', rollup_category))
            
        if author_id is not None:
            
            _query_params.append(('author_id', author_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/builds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


