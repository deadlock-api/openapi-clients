/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { MetadataQueryResponse, MetadataPathParams, Metadata400, Metadata404, Metadata429, Metadata500 } from "../types/Metadata.ts";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";

function getMetadataUrl(match_id: MetadataPathParams["match_id"]) {
  const res = { method: 'GET', url: `/v1/matches/${match_id}/metadata` as const }
return res
}

/**
 * @description This endpoint returns the match metadata for the given `match_id` parsed into JSON.Protobuf definitions can be found here: [https://github.com/SteamDatabase/Protobufs](https://github.com/SteamDatabase/Protobufs)Relevant Protobuf Messages:- CMsgMatchMetaData- CMsgMatchMetaDataContents### Rate Limits:| Type | Limit || ---- | ----- || IP | From Cache: 100req/s<br>From S3: 100req/10s<br>From Steam: 10req/30mins || Key | From Cache: 100req/s<br>From S3: 100req/s<br>From Steam: 10req/min || Global | From Cache: 100req/s<br>From S3: 700req/s<br>From Steam: 10req/10s |
 * @summary Metadata
 * {@link /v1/matches/:match_id/metadata}
 */
export async function metadata(match_id: MetadataPathParams["match_id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<MetadataQueryResponse, ResponseErrorConfig<Metadata400 | Metadata404 | Metadata429 | Metadata500>, unknown>({ method : "GET", url : getMetadataUrl(match_id).url.toString(), ... requestConfig })
return res.data
}