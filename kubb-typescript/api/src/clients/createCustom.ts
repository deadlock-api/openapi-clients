/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateCustomMutationRequest, CreateCustomMutationResponse, CreateCustom400, CreateCustom429, CreateCustom500 } from '../types/CreateCustom.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'

function getCreateCustomUrl() {
  const res = { method: 'POST', url: `/v1/matches/custom/create` as const }
  return res
}

/**
 * @description This endpoint creates a custom match using a bot account.**Process:**1. A party is created with your provided settings.2. The system waits for the party code to be generated.3. The party code is returned in the response.4. The bot switches to spectator mode.5. The bot marks itself as ready.6. You and other players join, ready up, and start the match.**Callbacks:**If a callback URL is provided, POST requests will be sent to it:- **settings:** When lobby settings change, a POST is sent to `{callback_url}/settings` with the `CsoCitadelParty` protobuf message as JSON.- **match start:** When the match starts, a POST is sent to `{callback_url}` with the match ID._Protobuf definitions: [https://github.com/SteamDatabase/Protobufs](https://github.com/SteamDatabase/Protobufs)_**Note:**The bot will leave the match 15 minutes after creation, regardless of match state.### Rate Limits:| Type | Limit || ---- | ----- || IP | API-Key ONLY || Key | 100req/30min || Global | 1000req/h |
 * @summary Create Match
 * {@link /v1/matches/custom/create}
 */
export async function createCustom(
  data?: CreateCustomMutationRequest,
  config: Partial<RequestConfig<CreateCustomMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    CreateCustomMutationResponse,
    ResponseErrorConfig<CreateCustom400 | CreateCustom429 | CreateCustom500>,
    CreateCustomMutationRequest
  >({ method: 'POST', url: getCreateCustomUrl().url.toString(), data: requestData, ...requestConfig })
  return res.data
}