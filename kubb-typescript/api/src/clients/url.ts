/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { UrlQueryResponse, UrlPathParams, Url400, Url429, Url500 } from "../types/Url.ts";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";

function getUrlUrl(match_id: UrlPathParams["match_id"]) {
  const res = { method: 'GET', url: `/v1/matches/${match_id}/live/url` as const }
return res
}

/**
 * @description This endpoints spectates a match and returns the live URL to be used in any demofile broadcast parser.Example Parsers:- [Demofile-Net](https://github.com/saul/demofile-net)- [Haste](https://github.com/blukai/haste/)### Rate Limits:| Type | Limit || ---- | ----- || IP | 10req/30mins || Key | 60req/min || Global | 100req/10s |
 * @summary Live Broadcast URL
 * {@link /v1/matches/:match_id/live/url}
 */
export async function url(match_id: UrlPathParams["match_id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<UrlQueryResponse, ResponseErrorConfig<Url400 | Url429 | Url500>, unknown>({ method : "GET", url : getUrlUrl(match_id).url.toString(), ... requestConfig })
return res.data
}