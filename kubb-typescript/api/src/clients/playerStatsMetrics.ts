/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { PlayerStatsMetricsQueryResponse, PlayerStatsMetricsQueryParams, PlayerStatsMetrics400, PlayerStatsMetrics500 } from "../types/PlayerStatsMetrics.ts";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";

function getPlayerStatsMetricsUrl() {
  const res = { method: 'GET', url: `/v1/analytics/player-stats/metrics` as const }
return res
}

/**
 * @description Returns comprehensive statistical analysis of player performance.Results are cached for **1 hour** based on the unique combination of query parameters provided. Subsequent identical requests within this timeframe will receive the cached response.> Note: Quantiles are calculated using the [DDSketch](https://www.vldb.org/pvldb/vol12/p2195-masson.pdf) algorithm, so they are not exact but have a maximum relative error of 0.01.### Rate Limits:| Type | Limit || ---- | ----- || IP | 100req/s || Key | - || Global | - |
 * @summary Player Stats Metrics
 * {@link /v1/analytics/player-stats/metrics}
 */
export async function playerStatsMetrics(params?: PlayerStatsMetricsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<PlayerStatsMetricsQueryResponse, ResponseErrorConfig<PlayerStatsMetrics400 | PlayerStatsMetrics500>, unknown>({ method : "GET", url : getPlayerStatsMetricsUrl().url.toString(), params, ... requestConfig })
return res.data
}