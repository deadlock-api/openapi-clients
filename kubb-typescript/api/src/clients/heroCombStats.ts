/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { HeroCombStatsQueryResponse, HeroCombStatsQueryParams, HeroCombStats400, HeroCombStats500 } from '../types/HeroCombStats.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'

function getHeroCombStatsUrl() {
  const res = { method: 'GET', url: `/v1/analytics/hero-comb-stats` as const }
  return res
}

/**
 * @description Retrieves overall statistics for each hero combination.Results are cached for **1 hour**. The cache key is determined by the specific combination of filter parameters used in the query. Subsequent requests using the exact same filters within this timeframe will receive the cached response.### Rate Limits:| Type | Limit || ---- | ----- || IP | 100req/s || Key | - || Global | - |
 * @summary Hero Comb Stats
 * {@link /v1/analytics/hero-comb-stats}
 */
export async function heroCombStats(params?: HeroCombStatsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<HeroCombStatsQueryResponse, ResponseErrorConfig<HeroCombStats400 | HeroCombStats500>, unknown>({
    method: 'GET',
    url: getHeroCombStatsUrl().url.toString(),
    params,
    ...requestConfig,
  })
  return res.data
}