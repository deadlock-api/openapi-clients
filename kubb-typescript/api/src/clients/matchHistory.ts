/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  MatchHistoryQueryResponse,
  MatchHistoryPathParams,
  MatchHistoryQueryParams,
  MatchHistory400,
  MatchHistory429,
  MatchHistory500,
} from '../types/MatchHistory.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'

function getMatchHistoryUrl(account_id: MatchHistoryPathParams['account_id']) {
  const res = { method: 'GET', url: `/v1/players/${account_id}/match-history` as const }
  return res
}

/**
 * @description This endpoint returns the player match history for the given `account_id`.The player match history is a combination of the data from **Steam** and **ClickHouse**, so you always get the most up-to-date data and full history.Protobuf definitions can be found here: [https://github.com/SteamDatabase/Protobufs](https://github.com/SteamDatabase/Protobufs)Relevant Protobuf Messages:- CMsgClientToGcGetMatchHistory- CMsgClientToGcGetMatchHistoryResponse### Rate Limits:| Type | Limit || ---- | ----- || IP | 5req/min<br>With `only_stored_history=true`: 100req/s<br>With `force_refetch=true`: 5req/h || Key | 50req/min & 1000req/h<br>With `only_stored_history=true`: -<br>With `force_refetch=true`: 5req/h || Global | 2000req/h<br>With `only_stored_history=true`: -<br>With `force_refetch=true`: 10req/h |
 * @summary Match History
 * {@link /v1/players/:account_id/match-history}
 */
export async function matchHistory(
  account_id: MatchHistoryPathParams['account_id'],
  params?: MatchHistoryQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<MatchHistoryQueryResponse, ResponseErrorConfig<MatchHistory400 | MatchHistory429 | MatchHistory500>, unknown>({
    method: 'GET',
    url: getMatchHistoryUrl(account_id).url.toString(),
    params,
    ...requestConfig,
  })
  return res.data
}