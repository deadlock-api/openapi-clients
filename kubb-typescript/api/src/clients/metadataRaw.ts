/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { MetadataRawQueryResponse, MetadataRawPathParams, MetadataRaw400, MetadataRaw404, MetadataRaw429, MetadataRaw500 } from '../types/MetadataRaw.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'

function getMetadataRawUrl(match_id: MetadataRawPathParams['match_id']) {
  const res = { method: 'GET', url: `/v1/matches/${match_id}/metadata/raw` as const }
  return res
}

/**
 * @description This endpoints returns the raw .meta.bz2 file for the given `match_id`.You have to decompress it and decode the protobuf message.Protobuf definitions can be found here: [https://github.com/SteamDatabase/Protobufs](https://github.com/SteamDatabase/Protobufs)Relevant Protobuf Messages:- CMsgMatchMetaData- CMsgMatchMetaDataContents### Rate Limits:| Type | Limit || ---- | ----- || IP | From Cache: 100req/s<br>From S3: 100req/10s<br>From Steam: 10req/30mins || Key | From Cache: 100req/s<br>From S3: 100req/s<br>From Steam: 10req/min || Global | From Cache: 100req/s<br>From S3: 700req/s<br>From Steam: 10req/10s |
 * @summary Metadata as Protobuf
 * {@link /v1/matches/:match_id/metadata/raw}
 */
export async function metadataRaw(match_id: MetadataRawPathParams['match_id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<MetadataRawQueryResponse, ResponseErrorConfig<MetadataRaw400 | MetadataRaw404 | MetadataRaw429 | MetadataRaw500>, unknown>({
    method: 'GET',
    url: getMetadataRawUrl(match_id).url.toString(),
    ...requestConfig,
  })
  return res.data
}