/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { HeroSynergiesStatsQueryResponse, HeroSynergiesStatsQueryParams, HeroSynergiesStats400, HeroSynergiesStats500 } from "../types/HeroSynergiesStats.ts";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";

function getHeroSynergiesStatsUrl() {
  const res = { method: 'GET', url: `/v1/analytics/hero-synergy-stats` as const }
return res
}

/**
 * @description Retrieves hero pair synergy statistics based on historical match data.This endpoint analyzes completed matches to calculate how often a specific pair of heroes (`hero_id1` and `hero_id2`) won when playing *together on the same team*, and the total number of times they have played together under the specified filter conditions.Results are cached for **1 hour** based on the combination of query parameters provided. Subsequent identical requests within this timeframe will receive the cached response.### Rate Limits:| Type | Limit || ---- | ----- || IP | 100req/s || Key | - || Global | - |
 * @summary Hero Synergy Stats
 * {@link /v1/analytics/hero-synergy-stats}
 */
export async function heroSynergiesStats(params?: HeroSynergiesStatsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<HeroSynergiesStatsQueryResponse, ResponseErrorConfig<HeroSynergiesStats400 | HeroSynergiesStats500>, unknown>({ method : "GET", url : getHeroSynergiesStatsUrl().url.toString(), params, ... requestConfig })
return res.data
}