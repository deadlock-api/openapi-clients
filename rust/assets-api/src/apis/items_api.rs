/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`get_item_v2_items_id_or_class_name_get`]
#[derive(Clone, Debug)]
pub struct GetItemV2ItemsIdOrClassNameGetParams {
    pub id_or_class_name: String,
    pub language: Option<models::Language>,
    pub client_version: Option<models::DeadlockAssetsApiRoutesV2ValidClientVersions>
}

/// struct for passing parameters to the method [`get_items_by_hero_id_v2_items_by_hero_id_id_get`]
#[derive(Clone, Debug)]
pub struct GetItemsByHeroIdV2ItemsByHeroIdIdGetParams {
    pub id: i32,
    pub language: Option<models::Language>,
    pub client_version: Option<models::DeadlockAssetsApiRoutesV2ValidClientVersions>
}

/// struct for passing parameters to the method [`get_items_by_slot_type_v2_items_by_slot_type_slot_type_get`]
#[derive(Clone, Debug)]
pub struct GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetParams {
    pub slot_type: models::ItemSlotTypeV2,
    pub language: Option<models::Language>,
    pub client_version: Option<models::DeadlockAssetsApiRoutesV2ValidClientVersions>
}

/// struct for passing parameters to the method [`get_items_by_type_v2_items_by_type_type_get`]
#[derive(Clone, Debug)]
pub struct GetItemsByTypeV2ItemsByTypeTypeGetParams {
    pub r#type: models::ItemTypeV2,
    pub language: Option<models::Language>,
    pub client_version: Option<models::DeadlockAssetsApiRoutesV2ValidClientVersions>
}

/// struct for passing parameters to the method [`get_items_v2_items_get`]
#[derive(Clone, Debug)]
pub struct GetItemsV2ItemsGetParams {
    pub language: Option<models::Language>,
    pub client_version: Option<models::DeadlockAssetsApiRoutesV2ValidClientVersions>
}


/// struct for typed errors of method [`get_item_v2_items_id_or_class_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemV2ItemsIdOrClassNameGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_items_by_hero_id_v2_items_by_hero_id_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemsByHeroIdV2ItemsByHeroIdIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_items_by_slot_type_v2_items_by_slot_type_slot_type_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_items_by_type_v2_items_by_type_type_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemsByTypeV2ItemsByTypeTypeGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_items_v2_items_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemsV2ItemsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


pub async fn get_item_v2_items_id_or_class_name_get(configuration: &configuration::Configuration, params: GetItemV2ItemsIdOrClassNameGetParams) -> Result<models::ResponseGetItemV2ItemsIdOrClassNameGet, Error<GetItemV2ItemsIdOrClassNameGetError>> {

    let uri_str = format!("{}/v2/items/{id_or_class_name}", configuration.base_path, id_or_class_name=crate::apis::urlencode(params.id_or_class_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.client_version {
        req_builder = req_builder.query(&[("client_version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ResponseGetItemV2ItemsIdOrClassNameGet`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ResponseGetItemV2ItemsIdOrClassNameGet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetItemV2ItemsIdOrClassNameGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_items_by_hero_id_v2_items_by_hero_id_id_get(configuration: &configuration::Configuration, params: GetItemsByHeroIdV2ItemsByHeroIdIdGetParams) -> Result<Vec<models::GetItemsV2ItemsGet200ResponseInner>, Error<GetItemsByHeroIdV2ItemsByHeroIdIdGetError>> {

    let uri_str = format!("{}/v2/items/by-hero-id/{id}", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.client_version {
        req_builder = req_builder.query(&[("client_version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetItemsByHeroIdV2ItemsByHeroIdIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_items_by_slot_type_v2_items_by_slot_type_slot_type_get(configuration: &configuration::Configuration, params: GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetParams) -> Result<Vec<models::GetItemsV2ItemsGet200ResponseInner>, Error<GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetError>> {

    let uri_str = format!("{}/v2/items/by-slot-type/{slot_type}", configuration.base_path, slot_type=params.slot_type.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.client_version {
        req_builder = req_builder.query(&[("client_version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_items_by_type_v2_items_by_type_type_get(configuration: &configuration::Configuration, params: GetItemsByTypeV2ItemsByTypeTypeGetParams) -> Result<Vec<models::GetItemsV2ItemsGet200ResponseInner>, Error<GetItemsByTypeV2ItemsByTypeTypeGetError>> {

    let uri_str = format!("{}/v2/items/by-type/{type}", configuration.base_path, type=params.r#type.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.client_version {
        req_builder = req_builder.query(&[("client_version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetItemsByTypeV2ItemsByTypeTypeGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_items_v2_items_get(configuration: &configuration::Configuration, params: GetItemsV2ItemsGetParams) -> Result<Vec<models::GetItemsV2ItemsGet200ResponseInner>, Error<GetItemsV2ItemsGetError>> {

    let uri_str = format!("{}/v2/items", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.client_version {
        req_builder = req_builder.query(&[("client_version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetItemsV2ItemsGet200ResponseInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetItemsV2ItemsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

