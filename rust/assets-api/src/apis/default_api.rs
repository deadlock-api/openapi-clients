/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_build_tags_v2_build_tags_get`]
#[derive(Clone, Debug)]
pub struct GetBuildTagsV2BuildTagsGetParams {
    pub language: Option<models::Language>,
    pub client_version: Option<models::ValidClientVersions>
}

/// struct for passing parameters to the method [`get_colors_v1_colors_get`]
#[derive(Clone, Debug)]
pub struct GetColorsV1ColorsGetParams {
    pub client_version: Option<models::ValidClientVersions>
}

/// struct for passing parameters to the method [`get_icons_v1_icons_get`]
#[derive(Clone, Debug)]
pub struct GetIconsV1IconsGetParams {
    pub client_version: Option<models::ValidClientVersions>
}

/// struct for passing parameters to the method [`get_map_v1_map_get`]
#[derive(Clone, Debug)]
pub struct GetMapV1MapGetParams {
    pub client_version: Option<models::ValidClientVersions>
}

/// struct for passing parameters to the method [`get_ranks_v2_ranks_get`]
#[derive(Clone, Debug)]
pub struct GetRanksV2RanksGetParams {
    pub language: Option<models::Language>,
    pub client_version: Option<models::ValidClientVersions>
}

/// struct for passing parameters to the method [`get_sounds_v1_sounds_get`]
#[derive(Clone, Debug)]
pub struct GetSoundsV1SoundsGetParams {
    pub client_version: Option<models::ValidClientVersions>
}

/// struct for passing parameters to the method [`get_steam_info_v1_steam_info_get`]
#[derive(Clone, Debug)]
pub struct GetSteamInfoV1SteamInfoGetParams {
    pub client_version: Option<models::ValidClientVersions>
}


/// struct for typed errors of method [`get_build_tags_v2_build_tags_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTagsV2BuildTagsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_client_versions_v2_client_versions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClientVersionsV2ClientVersionsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_colors_v1_colors_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetColorsV1ColorsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_icons_v1_icons_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIconsV1IconsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_map_v1_map_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMapV1MapGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_ranks_v2_ranks_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRanksV2RanksGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_sounds_v1_sounds_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSoundsV1SoundsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_steam_info_v1_steam_info_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSteamInfoV1SteamInfoGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


pub async fn get_build_tags_v2_build_tags_get(configuration: &configuration::Configuration, params: GetBuildTagsV2BuildTagsGetParams) -> Result<Vec<models::BuildTagV2>, Error<GetBuildTagsV2BuildTagsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let language = params.language;
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/build-tags", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTagsV2BuildTagsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_client_versions_v2_client_versions_get(configuration: &configuration::Configuration) -> Result<Vec<i32>, Error<GetClientVersionsV2ClientVersionsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/client-versions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetClientVersionsV2ClientVersionsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_colors_v1_colors_get(configuration: &configuration::Configuration, params: GetColorsV1ColorsGetParams) -> Result<std::collections::HashMap<String, models::ColorV1>, Error<GetColorsV1ColorsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/colors", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetColorsV1ColorsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_icons_v1_icons_get(configuration: &configuration::Configuration, params: GetIconsV1IconsGetParams) -> Result<std::collections::HashMap<String, String>, Error<GetIconsV1IconsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/icons", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetIconsV1IconsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_map_v1_map_get(configuration: &configuration::Configuration, params: GetMapV1MapGetParams) -> Result<models::MapV1, Error<GetMapV1MapGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/map", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMapV1MapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_ranks_v2_ranks_get(configuration: &configuration::Configuration, params: GetRanksV2RanksGetParams) -> Result<Vec<models::RankV2>, Error<GetRanksV2RanksGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let language = params.language;
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/ranks", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRanksV2RanksGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_sounds_v1_sounds_get(configuration: &configuration::Configuration, params: GetSoundsV1SoundsGetParams) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<GetSoundsV1SoundsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/sounds", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSoundsV1SoundsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_steam_info_v1_steam_info_get(configuration: &configuration::Configuration, params: GetSteamInfoV1SteamInfoGetParams) -> Result<serde_json::Value, Error<GetSteamInfoV1SteamInfoGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let client_version = params.client_version;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/steam-info", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_version {
        local_var_req_builder = local_var_req_builder.query(&[("client_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSteamInfoV1SteamInfoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

