/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RawWeaponInfoV2Output {
    #[serde(rename = "can_zoom", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub can_zoom: Option<Option<bool>>,
    #[serde(rename = "bullet_damage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_damage: Option<Option<f64>>,
    #[serde(rename = "bullet_gravity_scale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_gravity_scale: Option<Option<f64>>,
    #[serde(rename = "bullet_inherit_shooter_velocity_scale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_inherit_shooter_velocity_scale: Option<Option<f64>>,
    #[serde(rename = "bullet_lifetime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_lifetime: Option<Option<f64>>,
    #[serde(rename = "bullet_radius", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_radius: Option<Option<f64>>,
    #[serde(rename = "bullet_radius_vs_world", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_radius_vs_world: Option<Option<f64>>,
    #[serde(rename = "bullet_reflect_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_reflect_amount: Option<Option<f64>>,
    #[serde(rename = "bullet_reflect_scale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_reflect_scale: Option<Option<f64>>,
    #[serde(rename = "bullet_whiz_distance", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_whiz_distance: Option<Option<f64>>,
    #[serde(rename = "burst_shot_cooldown", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub burst_shot_cooldown: Option<Option<f64>>,
    #[serde(rename = "crit_bonus_against_npcs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub crit_bonus_against_npcs: Option<Option<f64>>,
    #[serde(rename = "crit_bonus_end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub crit_bonus_end: Option<Option<f64>>,
    #[serde(rename = "crit_bonus_end_range", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub crit_bonus_end_range: Option<Option<f64>>,
    #[serde(rename = "crit_bonus_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub crit_bonus_start: Option<Option<f64>>,
    #[serde(rename = "crit_bonus_start_range", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub crit_bonus_start_range: Option<Option<f64>>,
    #[serde(rename = "cycle_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cycle_time: Option<Option<f64>>,
    #[serde(rename = "intra_burst_cycle_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub intra_burst_cycle_time: Option<Option<f64>>,
    #[serde(rename = "max_spin_cycle_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_spin_cycle_time: Option<Option<f64>>,
    #[serde(rename = "damage_falloff_bias", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub damage_falloff_bias: Option<Option<f64>>,
    #[serde(rename = "damage_falloff_end_range", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub damage_falloff_end_range: Option<Option<f64>>,
    #[serde(rename = "damage_falloff_end_scale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub damage_falloff_end_scale: Option<Option<f64>>,
    #[serde(rename = "damage_falloff_start_range", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub damage_falloff_start_range: Option<Option<f64>>,
    #[serde(rename = "damage_falloff_start_scale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub damage_falloff_start_scale: Option<Option<f64>>,
    #[serde(rename = "horizontal_punch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub horizontal_punch: Option<Option<f64>>,
    #[serde(rename = "range", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub range: Option<Option<f64>>,
    #[serde(rename = "recoil_recovery_delay_factor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recoil_recovery_delay_factor: Option<Option<f64>>,
    #[serde(rename = "recoil_recovery_speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recoil_recovery_speed: Option<Option<f64>>,
    #[serde(rename = "recoil_shot_index_recovery_time_factor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recoil_shot_index_recovery_time_factor: Option<Option<f64>>,
    #[serde(rename = "recoil_speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recoil_speed: Option<Option<f64>>,
    #[serde(rename = "reload_move_speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reload_move_speed: Option<Option<f64>>,
    #[serde(rename = "scatter_yaw_scale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scatter_yaw_scale: Option<Option<f64>>,
    #[serde(rename = "aiming_shot_spread_penalty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub aiming_shot_spread_penalty: Option<Option<Box<models::AimingShotSpreadPenalty>>>,
    #[serde(rename = "standing_shot_spread_penalty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub standing_shot_spread_penalty: Option<Option<Box<models::StandingShotSpreadPenalty>>>,
    #[serde(rename = "shoot_move_speed_percent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shoot_move_speed_percent: Option<Option<f64>>,
    #[serde(rename = "shoot_spread_penalty_decay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shoot_spread_penalty_decay: Option<Option<f64>>,
    #[serde(rename = "shoot_spread_penalty_decay_delay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shoot_spread_penalty_decay_delay: Option<Option<f64>>,
    #[serde(rename = "shoot_spread_penalty_per_shot", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shoot_spread_penalty_per_shot: Option<Option<f64>>,
    #[serde(rename = "shooting_up_spread_penalty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shooting_up_spread_penalty: Option<Option<f64>>,
    #[serde(rename = "vertical_punch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vertical_punch: Option<Option<f64>>,
    #[serde(rename = "zoom_fov", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zoom_fov: Option<Option<f64>>,
    #[serde(rename = "zoom_move_speed_percent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zoom_move_speed_percent: Option<Option<f64>>,
    #[serde(rename = "bullets", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullets: Option<Option<i32>>,
    #[serde(rename = "burst_shot_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub burst_shot_count: Option<Option<i32>>,
    #[serde(rename = "clip_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clip_size: Option<Option<i32>>,
    #[serde(rename = "spread", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub spread: Option<Option<f64>>,
    #[serde(rename = "standing_spread", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub standing_spread: Option<Option<f64>>,
    #[serde(rename = "low_ammo_indicator_threshold", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub low_ammo_indicator_threshold: Option<Option<f64>>,
    #[serde(rename = "recoil_seed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recoil_seed: Option<Option<f64>>,
    #[serde(rename = "reload_duration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reload_duration: Option<Option<f64>>,
    #[serde(rename = "bullet_speed_curve", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_speed_curve: Option<Option<Box<models::RawItemWeaponInfoBulletSpeedCurveV2Output>>>,
    #[serde(rename = "horizontal_recoil", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub horizontal_recoil: Option<Option<Box<models::RawWeaponInfoHorizontalRecoilV2Output>>>,
    #[serde(rename = "vertical_recoil", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vertical_recoil: Option<Option<Box<models::RawWeaponInfoVerticalRecoilV2Output>>>,
}

impl RawWeaponInfoV2Output {
    pub fn new() -> RawWeaponInfoV2Output {
        RawWeaponInfoV2Output {
            can_zoom: None,
            bullet_damage: None,
            bullet_gravity_scale: None,
            bullet_inherit_shooter_velocity_scale: None,
            bullet_lifetime: None,
            bullet_radius: None,
            bullet_radius_vs_world: None,
            bullet_reflect_amount: None,
            bullet_reflect_scale: None,
            bullet_whiz_distance: None,
            burst_shot_cooldown: None,
            crit_bonus_against_npcs: None,
            crit_bonus_end: None,
            crit_bonus_end_range: None,
            crit_bonus_start: None,
            crit_bonus_start_range: None,
            cycle_time: None,
            intra_burst_cycle_time: None,
            max_spin_cycle_time: None,
            damage_falloff_bias: None,
            damage_falloff_end_range: None,
            damage_falloff_end_scale: None,
            damage_falloff_start_range: None,
            damage_falloff_start_scale: None,
            horizontal_punch: None,
            range: None,
            recoil_recovery_delay_factor: None,
            recoil_recovery_speed: None,
            recoil_shot_index_recovery_time_factor: None,
            recoil_speed: None,
            reload_move_speed: None,
            scatter_yaw_scale: None,
            aiming_shot_spread_penalty: None,
            standing_shot_spread_penalty: None,
            shoot_move_speed_percent: None,
            shoot_spread_penalty_decay: None,
            shoot_spread_penalty_decay_delay: None,
            shoot_spread_penalty_per_shot: None,
            shooting_up_spread_penalty: None,
            vertical_punch: None,
            zoom_fov: None,
            zoom_move_speed_percent: None,
            bullets: None,
            burst_shot_count: None,
            clip_size: None,
            spread: None,
            standing_spread: None,
            low_ammo_indicator_threshold: None,
            recoil_seed: None,
            reload_duration: None,
            bullet_speed_curve: None,
            horizontal_recoil: None,
            vertical_recoil: None,
        }
    }
}

