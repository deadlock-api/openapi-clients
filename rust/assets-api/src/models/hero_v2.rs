/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HeroV2 {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "class_name")]
    pub class_name: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description")]
    pub description: Box<models::HeroDescriptionV2>,
    #[serde(rename = "recommended_upgrades", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recommended_upgrades: Option<Option<Vec<String>>>,
    #[serde(rename = "recommended_ability_order", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recommended_ability_order: Option<Option<Vec<String>>>,
    #[serde(rename = "player_selectable")]
    pub player_selectable: bool,
    #[serde(rename = "disabled")]
    pub disabled: bool,
    #[serde(rename = "in_development")]
    pub in_development: bool,
    #[serde(rename = "needs_testing")]
    pub needs_testing: bool,
    #[serde(rename = "assigned_players_only")]
    pub assigned_players_only: bool,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    #[serde(rename = "gun_tag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gun_tag: Option<Option<String>>,
    #[serde(rename = "hideout_rich_presence", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hideout_rich_presence: Option<Option<String>>,
    #[serde(rename = "hero_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hero_type: Option<Option<models::HeroTypeV2>>,
    #[serde(rename = "prerelease_only", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prerelease_only: Option<Option<bool>>,
    #[serde(rename = "limited_testing")]
    pub limited_testing: bool,
    #[serde(rename = "complexity")]
    pub complexity: i32,
    #[serde(rename = "skin")]
    pub skin: i32,
    #[serde(rename = "images")]
    pub images: Box<models::HeroImagesV2>,
    #[serde(rename = "items")]
    pub items: std::collections::HashMap<String, String>,
    #[serde(rename = "starting_stats")]
    pub starting_stats: Box<models::HeroStartingStatsV2>,
    #[serde(rename = "item_slot_info")]
    pub item_slot_info: std::collections::HashMap<String, models::RawHeroItemSlotInfoValueV2>,
    #[serde(rename = "physics")]
    pub physics: Box<models::HeroPhysicsV2>,
    #[serde(rename = "colors")]
    pub colors: Box<models::HeroColorsV2>,
    #[serde(rename = "shop_stat_display")]
    pub shop_stat_display: Box<models::HeroShopStatDisplayV2>,
    #[serde(rename = "cost_bonuses", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cost_bonuses: Option<Option<std::collections::HashMap<String, Vec<models::RawHeroMapModCostBonusesV2>>>>,
    #[serde(rename = "stats_display")]
    pub stats_display: Box<models::RawHeroStatsDisplayV2>,
    #[serde(rename = "hero_stats_ui")]
    pub hero_stats_ui: Box<models::RawHeroStatsUiv2>,
    #[serde(rename = "level_info")]
    pub level_info: std::collections::HashMap<String, models::HeroLevelInfoV2>,
    #[serde(rename = "scaling_stats")]
    pub scaling_stats: std::collections::HashMap<String, models::RawHeroScalingStatV2>,
    #[serde(rename = "purchase_bonuses")]
    pub purchase_bonuses: std::collections::HashMap<String, Vec<models::RawHeroPurchaseBonusV2>>,
    #[serde(rename = "standard_level_up_upgrades")]
    pub standard_level_up_upgrades: std::collections::HashMap<String, f64>,
}

impl HeroV2 {
    pub fn new(id: i32, class_name: String, name: String, description: models::HeroDescriptionV2, player_selectable: bool, disabled: bool, in_development: bool, needs_testing: bool, assigned_players_only: bool, limited_testing: bool, complexity: i32, skin: i32, images: models::HeroImagesV2, items: std::collections::HashMap<String, String>, starting_stats: models::HeroStartingStatsV2, item_slot_info: std::collections::HashMap<String, models::RawHeroItemSlotInfoValueV2>, physics: models::HeroPhysicsV2, colors: models::HeroColorsV2, shop_stat_display: models::HeroShopStatDisplayV2, stats_display: models::RawHeroStatsDisplayV2, hero_stats_ui: models::RawHeroStatsUiv2, level_info: std::collections::HashMap<String, models::HeroLevelInfoV2>, scaling_stats: std::collections::HashMap<String, models::RawHeroScalingStatV2>, purchase_bonuses: std::collections::HashMap<String, Vec<models::RawHeroPurchaseBonusV2>>, standard_level_up_upgrades: std::collections::HashMap<String, f64>) -> HeroV2 {
        HeroV2 {
            id,
            class_name,
            name,
            description: Box::new(description),
            recommended_upgrades: None,
            recommended_ability_order: None,
            player_selectable,
            disabled,
            in_development,
            needs_testing,
            assigned_players_only,
            tags: None,
            gun_tag: None,
            hideout_rich_presence: None,
            hero_type: None,
            prerelease_only: None,
            limited_testing,
            complexity,
            skin,
            images: Box::new(images),
            items,
            starting_stats: Box::new(starting_stats),
            item_slot_info,
            physics: Box::new(physics),
            colors: Box::new(colors),
            shop_stat_display: Box::new(shop_stat_display),
            cost_bonuses: None,
            stats_display: Box::new(stats_display),
            hero_stats_ui: Box::new(hero_stats_ui),
            level_info,
            scaling_stats,
            purchase_bonuses,
            standard_level_up_upgrades,
        }
    }
}

