/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItemPropertyV2Input {
    #[serde(rename = "m_strValue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_str_value: Option<Option<Box<models::MStrvalue>>>,
    #[serde(rename = "m_bCanSetTokenOverride", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_b_can_set_token_override: Option<Option<bool>>,
    #[serde(rename = "m_eProvidedPropertyType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_e_provided_property_type: Option<Option<String>>,
    #[serde(rename = "m_strCSSClass", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_str_css_class: Option<Option<String>>,
    #[serde(rename = "m_eStatsUsageFlags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_e_stats_usage_flags: Option<Option<Box<models::MEstatsusageflags>>>,
    #[serde(rename = "m_bIsNegativeAttribute", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_b_is_negative_attribute: Option<Option<bool>>,
    #[serde(rename = "m_strDisableValue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_str_disable_value: Option<Option<String>>,
    #[serde(rename = "m_strLocTokenOverride", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_str_loc_token_override: Option<Option<String>>,
    #[serde(rename = "m_eDisplayUnits", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_e_display_units: Option<Option<String>>,
    #[serde(rename = "scale_function", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scale_function: Option<Option<Box<models::RawItemPropertyScaleFunctionSubclassV2Input>>>,
    #[serde(rename = "prefix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<Option<String>>,
    #[serde(rename = "label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub label: Option<Option<String>>,
    #[serde(rename = "postfix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postfix: Option<Option<String>>,
    #[serde(rename = "postvalue_label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postvalue_label: Option<Option<String>>,
    #[serde(rename = "conditional", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conditional: Option<Option<String>>,
    #[serde(rename = "icon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Option<String>>,
}

impl ItemPropertyV2Input {
    pub fn new() -> ItemPropertyV2Input {
        ItemPropertyV2Input {
            m_str_value: None,
            m_b_can_set_token_override: None,
            m_e_provided_property_type: None,
            m_str_css_class: None,
            m_e_stats_usage_flags: None,
            m_b_is_negative_attribute: None,
            m_str_disable_value: None,
            m_str_loc_token_override: None,
            m_e_display_units: None,
            scale_function: None,
            prefix: None,
            label: None,
            postfix: None,
            postvalue_label: None,
            conditional: None,
            icon: None,
        }
    }
}

