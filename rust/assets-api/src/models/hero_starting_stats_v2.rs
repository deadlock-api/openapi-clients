/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HeroStartingStatsV2 {
    #[serde(rename = "max_move_speed")]
    pub max_move_speed: Box<models::HeroStartingStatV2>,
    #[serde(rename = "sprint_speed")]
    pub sprint_speed: Box<models::HeroStartingStatV2>,
    #[serde(rename = "crouch_speed")]
    pub crouch_speed: Box<models::HeroStartingStatV2>,
    #[serde(rename = "move_acceleration")]
    pub move_acceleration: Box<models::HeroStartingStatV2>,
    #[serde(rename = "light_melee_damage")]
    pub light_melee_damage: Box<models::HeroStartingStatV2>,
    #[serde(rename = "heavy_melee_damage")]
    pub heavy_melee_damage: Box<models::HeroStartingStatV2>,
    #[serde(rename = "max_health")]
    pub max_health: Box<models::HeroStartingStatV2>,
    #[serde(rename = "weapon_power")]
    pub weapon_power: Box<models::HeroStartingStatV2>,
    #[serde(rename = "reload_speed")]
    pub reload_speed: Box<models::HeroStartingStatV2>,
    #[serde(rename = "weapon_power_scale")]
    pub weapon_power_scale: Box<models::HeroStartingStatV2>,
    #[serde(rename = "proc_build_up_rate_scale")]
    pub proc_build_up_rate_scale: Box<models::HeroStartingStatV2>,
    #[serde(rename = "stamina")]
    pub stamina: Box<models::HeroStartingStatV2>,
    #[serde(rename = "base_health_regen")]
    pub base_health_regen: Box<models::HeroStartingStatV2>,
    #[serde(rename = "stamina_regen_per_second")]
    pub stamina_regen_per_second: Box<models::HeroStartingStatV2>,
    #[serde(rename = "ability_resource_max")]
    pub ability_resource_max: Box<models::HeroStartingStatV2>,
    #[serde(rename = "ability_resource_regen_per_second")]
    pub ability_resource_regen_per_second: Box<models::HeroStartingStatV2>,
    #[serde(rename = "crit_damage_received_scale")]
    pub crit_damage_received_scale: Box<models::HeroStartingStatV2>,
    #[serde(rename = "tech_duration")]
    pub tech_duration: Box<models::HeroStartingStatV2>,
    #[serde(rename = "tech_armor_damage_reduction", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tech_armor_damage_reduction: Option<Option<Box<models::HeroStartingStatV2>>>,
    #[serde(rename = "tech_range")]
    pub tech_range: Box<models::HeroStartingStatV2>,
    #[serde(rename = "bullet_armor_damage_reduction", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bullet_armor_damage_reduction: Option<Option<Box<models::HeroStartingStatV2>>>,
}

impl HeroStartingStatsV2 {
    pub fn new(max_move_speed: models::HeroStartingStatV2, sprint_speed: models::HeroStartingStatV2, crouch_speed: models::HeroStartingStatV2, move_acceleration: models::HeroStartingStatV2, light_melee_damage: models::HeroStartingStatV2, heavy_melee_damage: models::HeroStartingStatV2, max_health: models::HeroStartingStatV2, weapon_power: models::HeroStartingStatV2, reload_speed: models::HeroStartingStatV2, weapon_power_scale: models::HeroStartingStatV2, proc_build_up_rate_scale: models::HeroStartingStatV2, stamina: models::HeroStartingStatV2, base_health_regen: models::HeroStartingStatV2, stamina_regen_per_second: models::HeroStartingStatV2, ability_resource_max: models::HeroStartingStatV2, ability_resource_regen_per_second: models::HeroStartingStatV2, crit_damage_received_scale: models::HeroStartingStatV2, tech_duration: models::HeroStartingStatV2, tech_range: models::HeroStartingStatV2) -> HeroStartingStatsV2 {
        HeroStartingStatsV2 {
            max_move_speed: Box::new(max_move_speed),
            sprint_speed: Box::new(sprint_speed),
            crouch_speed: Box::new(crouch_speed),
            move_acceleration: Box::new(move_acceleration),
            light_melee_damage: Box::new(light_melee_damage),
            heavy_melee_damage: Box::new(heavy_melee_damage),
            max_health: Box::new(max_health),
            weapon_power: Box::new(weapon_power),
            reload_speed: Box::new(reload_speed),
            weapon_power_scale: Box::new(weapon_power_scale),
            proc_build_up_rate_scale: Box::new(proc_build_up_rate_scale),
            stamina: Box::new(stamina),
            base_health_regen: Box::new(base_health_regen),
            stamina_regen_per_second: Box::new(stamina_regen_per_second),
            ability_resource_max: Box::new(ability_resource_max),
            ability_resource_regen_per_second: Box::new(ability_resource_regen_per_second),
            crit_damage_received_scale: Box::new(crit_damage_received_scale),
            tech_duration: Box::new(tech_duration),
            tech_armor_damage_reduction: None,
            tech_range: Box::new(tech_range),
            bullet_armor_damage_reduction: None,
        }
    }
}

