/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RankImagesV2 {
    #[serde(rename = "large", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large: Option<Option<String>>,
    #[serde(rename = "large_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_webp: Option<Option<String>>,
    #[serde(rename = "large_subrank1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank1: Option<Option<String>>,
    #[serde(rename = "large_subrank1_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank1_webp: Option<Option<String>>,
    #[serde(rename = "large_subrank2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank2: Option<Option<String>>,
    #[serde(rename = "large_subrank2_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank2_webp: Option<Option<String>>,
    #[serde(rename = "large_subrank3", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank3: Option<Option<String>>,
    #[serde(rename = "large_subrank3_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank3_webp: Option<Option<String>>,
    #[serde(rename = "large_subrank4", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank4: Option<Option<String>>,
    #[serde(rename = "large_subrank4_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank4_webp: Option<Option<String>>,
    #[serde(rename = "large_subrank5", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank5: Option<Option<String>>,
    #[serde(rename = "large_subrank5_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank5_webp: Option<Option<String>>,
    #[serde(rename = "large_subrank6", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank6: Option<Option<String>>,
    #[serde(rename = "large_subrank6_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub large_subrank6_webp: Option<Option<String>>,
    #[serde(rename = "small", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small: Option<Option<String>>,
    #[serde(rename = "small_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_webp: Option<Option<String>>,
    #[serde(rename = "small_subrank1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank1: Option<Option<String>>,
    #[serde(rename = "small_subrank1_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank1_webp: Option<Option<String>>,
    #[serde(rename = "small_subrank2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank2: Option<Option<String>>,
    #[serde(rename = "small_subrank2_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank2_webp: Option<Option<String>>,
    #[serde(rename = "small_subrank3", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank3: Option<Option<String>>,
    #[serde(rename = "small_subrank3_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank3_webp: Option<Option<String>>,
    #[serde(rename = "small_subrank4", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank4: Option<Option<String>>,
    #[serde(rename = "small_subrank4_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank4_webp: Option<Option<String>>,
    #[serde(rename = "small_subrank5", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank5: Option<Option<String>>,
    #[serde(rename = "small_subrank5_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank5_webp: Option<Option<String>>,
    #[serde(rename = "small_subrank6", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank6: Option<Option<String>>,
    #[serde(rename = "small_subrank6_webp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub small_subrank6_webp: Option<Option<String>>,
}

impl RankImagesV2 {
    pub fn new() -> RankImagesV2 {
        RankImagesV2 {
            large: None,
            large_webp: None,
            large_subrank1: None,
            large_subrank1_webp: None,
            large_subrank2: None,
            large_subrank2_webp: None,
            large_subrank3: None,
            large_subrank3_webp: None,
            large_subrank4: None,
            large_subrank4_webp: None,
            large_subrank5: None,
            large_subrank5_webp: None,
            large_subrank6: None,
            large_subrank6_webp: None,
            small: None,
            small_webp: None,
            small_subrank1: None,
            small_subrank1_webp: None,
            small_subrank2: None,
            small_subrank2_webp: None,
            small_subrank3: None,
            small_subrank3_webp: None,
            small_subrank4: None,
            small_subrank4_webp: None,
            small_subrank5: None,
            small_subrank5_webp: None,
            small_subrank6: None,
            small_subrank6_webp: None,
        }
    }
}

