/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RawWeaponInfoV2Input {
    #[serde(rename = "m_bCanZoom", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_b_can_zoom: Option<Option<bool>>,
    #[serde(rename = "m_flBulletDamage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_damage: Option<Option<f64>>,
    #[serde(rename = "m_flBulletGravityScale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_gravity_scale: Option<Option<f64>>,
    #[serde(rename = "m_flBulletInheritShooterVelocityScale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_inherit_shooter_velocity_scale: Option<Option<f64>>,
    #[serde(rename = "m_flBulletLifetime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_lifetime: Option<Option<f64>>,
    #[serde(rename = "m_flBulletRadius", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_radius: Option<Option<f64>>,
    #[serde(rename = "m_flBulletRadiusVsWorld", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_radius_vs_world: Option<Option<f64>>,
    #[serde(rename = "m_flBulletReflectAmount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_reflect_amount: Option<Option<f64>>,
    #[serde(rename = "m_flBulletReflectScale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_reflect_scale: Option<Option<f64>>,
    #[serde(rename = "m_flBulletWhizDistance", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_bullet_whiz_distance: Option<Option<f64>>,
    #[serde(rename = "m_flBurstShotCooldown", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_burst_shot_cooldown: Option<Option<f64>>,
    #[serde(rename = "m_flCritBonusAgainstNpcs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_crit_bonus_against_npcs: Option<Option<f64>>,
    #[serde(rename = "m_flCritBonusEnd", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_crit_bonus_end: Option<Option<f64>>,
    #[serde(rename = "m_flCritBonusEndRange", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_crit_bonus_end_range: Option<Option<f64>>,
    #[serde(rename = "m_flCritBonusStart", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_crit_bonus_start: Option<Option<f64>>,
    #[serde(rename = "m_flCritBonusStartRange", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_crit_bonus_start_range: Option<Option<f64>>,
    #[serde(rename = "m_flCycleTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_cycle_time: Option<Option<f64>>,
    #[serde(rename = "m_flIntraBurstCycleTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_intra_burst_cycle_time: Option<Option<f64>>,
    #[serde(rename = "m_flMaxSpinCycleTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_max_spin_cycle_time: Option<Option<f64>>,
    #[serde(rename = "m_flDamageFalloffBias", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_damage_falloff_bias: Option<Option<f64>>,
    #[serde(rename = "m_flDamageFalloffEndRange", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_damage_falloff_end_range: Option<Option<f64>>,
    #[serde(rename = "m_flDamageFalloffEndScale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_damage_falloff_end_scale: Option<Option<f64>>,
    #[serde(rename = "m_flDamageFalloffStartRange", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_damage_falloff_start_range: Option<Option<f64>>,
    #[serde(rename = "m_flDamageFalloffStartScale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_damage_falloff_start_scale: Option<Option<f64>>,
    #[serde(rename = "m_flHorizontalPunch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_horizontal_punch: Option<Option<f64>>,
    #[serde(rename = "m_flRange", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_range: Option<Option<f64>>,
    #[serde(rename = "m_flRecoilRecoveryDelayFactor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_recoil_recovery_delay_factor: Option<Option<f64>>,
    #[serde(rename = "m_flRecoilRecoverySpeed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_recoil_recovery_speed: Option<Option<f64>>,
    #[serde(rename = "m_flRecoilShotIndexRecoveryTimeFactor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_recoil_shot_index_recovery_time_factor: Option<Option<f64>>,
    #[serde(rename = "m_flRecoilSpeed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_recoil_speed: Option<Option<f64>>,
    #[serde(rename = "m_flReloadMoveSpeed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_reload_move_speed: Option<Option<f64>>,
    #[serde(rename = "m_flScatterYawScale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_scatter_yaw_scale: Option<Option<f64>>,
    #[serde(rename = "m_AimingShootSpreadPenalty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_aiming_shoot_spread_penalty: Option<Option<Box<models::MAimingshootspreadpenalty>>>,
    #[serde(rename = "m_StandingShootSpreadPenalty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_standing_shoot_spread_penalty: Option<Option<Box<models::MStandingshootspreadpenalty>>>,
    #[serde(rename = "m_flShootMoveSpeedPercent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_shoot_move_speed_percent: Option<Option<f64>>,
    #[serde(rename = "m_flShootSpreadPenaltyDecay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_shoot_spread_penalty_decay: Option<Option<f64>>,
    #[serde(rename = "m_flShootSpreadPenaltyDecayDelay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_shoot_spread_penalty_decay_delay: Option<Option<f64>>,
    #[serde(rename = "m_flShootSpreadPenaltyPerShot", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_shoot_spread_penalty_per_shot: Option<Option<f64>>,
    #[serde(rename = "m_flShootingUpSpreadPenalty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_shooting_up_spread_penalty: Option<Option<f64>>,
    #[serde(rename = "m_flVerticalPunch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_vertical_punch: Option<Option<f64>>,
    #[serde(rename = "m_flZoomFov", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_zoom_fov: Option<Option<f64>>,
    #[serde(rename = "m_flZoomMoveSpeedPercent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_zoom_move_speed_percent: Option<Option<f64>>,
    #[serde(rename = "m_iBullets", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_i_bullets: Option<Option<i32>>,
    #[serde(rename = "m_iBurstShotCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_i_burst_shot_count: Option<Option<i32>>,
    #[serde(rename = "m_iClipSize", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_i_clip_size: Option<Option<i32>>,
    #[serde(rename = "m_flSpread", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_spread: Option<Option<f64>>,
    #[serde(rename = "m_flStandingSpread", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_standing_spread: Option<Option<f64>>,
    #[serde(rename = "m_flLowAmmoIndicatorThreshold", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_low_ammo_indicator_threshold: Option<Option<f64>>,
    #[serde(rename = "m_flRecoilSeed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_recoil_seed: Option<Option<f64>>,
    #[serde(rename = "m_flReloadDuration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_fl_reload_duration: Option<Option<f64>>,
    #[serde(rename = "m_BulletSpeedCurve", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_bullet_speed_curve: Option<Option<Box<models::RawItemWeaponInfoBulletSpeedCurveV2Input>>>,
    #[serde(rename = "m_HorizontalRecoil", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_horizontal_recoil: Option<Option<Box<models::RawWeaponInfoHorizontalRecoilV2Input>>>,
    #[serde(rename = "m_VerticalRecoil", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub m_vertical_recoil: Option<Option<Box<models::RawWeaponInfoVerticalRecoilV2Input>>>,
}

impl RawWeaponInfoV2Input {
    pub fn new() -> RawWeaponInfoV2Input {
        RawWeaponInfoV2Input {
            m_b_can_zoom: None,
            m_fl_bullet_damage: None,
            m_fl_bullet_gravity_scale: None,
            m_fl_bullet_inherit_shooter_velocity_scale: None,
            m_fl_bullet_lifetime: None,
            m_fl_bullet_radius: None,
            m_fl_bullet_radius_vs_world: None,
            m_fl_bullet_reflect_amount: None,
            m_fl_bullet_reflect_scale: None,
            m_fl_bullet_whiz_distance: None,
            m_fl_burst_shot_cooldown: None,
            m_fl_crit_bonus_against_npcs: None,
            m_fl_crit_bonus_end: None,
            m_fl_crit_bonus_end_range: None,
            m_fl_crit_bonus_start: None,
            m_fl_crit_bonus_start_range: None,
            m_fl_cycle_time: None,
            m_fl_intra_burst_cycle_time: None,
            m_fl_max_spin_cycle_time: None,
            m_fl_damage_falloff_bias: None,
            m_fl_damage_falloff_end_range: None,
            m_fl_damage_falloff_end_scale: None,
            m_fl_damage_falloff_start_range: None,
            m_fl_damage_falloff_start_scale: None,
            m_fl_horizontal_punch: None,
            m_fl_range: None,
            m_fl_recoil_recovery_delay_factor: None,
            m_fl_recoil_recovery_speed: None,
            m_fl_recoil_shot_index_recovery_time_factor: None,
            m_fl_recoil_speed: None,
            m_fl_reload_move_speed: None,
            m_fl_scatter_yaw_scale: None,
            m_aiming_shoot_spread_penalty: None,
            m_standing_shoot_spread_penalty: None,
            m_fl_shoot_move_speed_percent: None,
            m_fl_shoot_spread_penalty_decay: None,
            m_fl_shoot_spread_penalty_decay_delay: None,
            m_fl_shoot_spread_penalty_per_shot: None,
            m_fl_shooting_up_spread_penalty: None,
            m_fl_vertical_punch: None,
            m_fl_zoom_fov: None,
            m_fl_zoom_move_speed_percent: None,
            m_i_bullets: None,
            m_i_burst_shot_count: None,
            m_i_clip_size: None,
            m_fl_spread: None,
            m_fl_standing_spread: None,
            m_fl_low_ammo_indicator_threshold: None,
            m_fl_recoil_seed: None,
            m_fl_reload_duration: None,
            m_bullet_speed_curve: None,
            m_horizontal_recoil: None,
            m_vertical_recoil: None,
        }
    }
}

