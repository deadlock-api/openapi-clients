/*
 * Assets - Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpgradePropertyV2Output {
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<Box<models::Value1>>>,
    #[serde(rename = "can_set_token_override", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub can_set_token_override: Option<Option<bool>>,
    #[serde(rename = "provided_property_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provided_property_type: Option<Option<String>>,
    #[serde(rename = "css_class", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub css_class: Option<Option<String>>,
    #[serde(rename = "usage_flags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub usage_flags: Option<Option<Box<models::UsageFlags>>>,
    #[serde(rename = "negative_attribute", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub negative_attribute: Option<Option<bool>>,
    #[serde(rename = "disable_value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub disable_value: Option<Option<String>>,
    #[serde(rename = "loc_token_override", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub loc_token_override: Option<Option<String>>,
    #[serde(rename = "display_units", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub display_units: Option<Option<String>>,
    #[serde(rename = "icon_path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon_path: Option<Option<String>>,
    #[serde(rename = "scale_function", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scale_function: Option<Option<Box<models::RawItemPropertyScaleFunctionSubclassV2Output>>>,
    #[serde(rename = "prefix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<Option<String>>,
    #[serde(rename = "label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub label: Option<Option<String>>,
    #[serde(rename = "postfix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postfix: Option<Option<String>>,
    #[serde(rename = "postvalue_label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postvalue_label: Option<Option<String>>,
    #[serde(rename = "conditional", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conditional: Option<Option<String>>,
    #[serde(rename = "icon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Option<String>>,
    #[serde(rename = "tooltip_section", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tooltip_section: Option<Option<models::RawAbilitySectionTypeV2>>,
    #[serde(rename = "tooltip_is_elevated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tooltip_is_elevated: Option<Option<bool>>,
    #[serde(rename = "tooltip_is_important", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tooltip_is_important: Option<Option<bool>>,
}

impl UpgradePropertyV2Output {
    pub fn new() -> UpgradePropertyV2Output {
        UpgradePropertyV2Output {
            value: None,
            can_set_token_override: None,
            provided_property_type: None,
            css_class: None,
            usage_flags: None,
            negative_attribute: None,
            disable_value: None,
            loc_token_override: None,
            display_units: None,
            icon_path: None,
            scale_function: None,
            prefix: None,
            label: None,
            postfix: None,
            postvalue_label: None,
            conditional: None,
            icon: None,
            tooltip_section: None,
            tooltip_is_elevated: None,
            tooltip_is_important: None,
        }
    }
}

