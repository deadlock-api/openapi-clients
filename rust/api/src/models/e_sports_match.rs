/*
 * Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ESportsMatch {
    /// Valve's match id of the match.
    #[serde(rename = "match_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub match_id: Option<Option<i64>>,
    /// The provider of the match data. Some string that identifies the source of the data.
    #[serde(rename = "provider")]
    pub provider: String,
    /// The scheduled date of the match.
    #[serde(rename = "scheduled_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scheduled_date: Option<Option<String>>,
    /// The status of the match, e.g. live, completed, scheduled, cancelled.
    #[serde(rename = "status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<models::ESportsMatchStatus>>,
    /// The name of the first team.
    #[serde(rename = "team0_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub team0_name: Option<Option<String>>,
    /// The name of the second team.
    #[serde(rename = "team1_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub team1_name: Option<Option<String>>,
    /// The name of the tournament.
    #[serde(rename = "tournament_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tournament_name: Option<Option<String>>,
    /// The stage of the tournament.
    #[serde(rename = "tournament_stage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tournament_stage: Option<Option<String>>,
    /// If you want to update an existing match, you can provide an update id.
    #[serde(rename = "update_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub update_id: Option<Option<uuid::Uuid>>,
}

impl ESportsMatch {
    pub fn new(provider: String) -> ESportsMatch {
        ESportsMatch {
            match_id: None,
            provider,
            scheduled_date: None,
            status: None,
            team0_name: None,
            team1_name: None,
            tournament_name: None,
            tournament_stage: None,
            update_id: None,
        }
    }
}

