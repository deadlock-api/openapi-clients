/*
 * Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`request_deletion`]
#[derive(Clone, Debug)]
pub struct RequestDeletionParams {
    pub data_privacy_request: models::DataPrivacyRequest
}

/// struct for passing parameters to the method [`request_tracking`]
#[derive(Clone, Debug)]
pub struct RequestTrackingParams {
    pub data_privacy_request: models::DataPrivacyRequest
}


/// struct for typed errors of method [`request_deletion`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RequestDeletionError {
    Status500(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`request_tracking`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RequestTrackingError {
    Status500(String),
    UnknownValue(serde_json::Value),
}


///  Endpoint to request deletion of personal data.     
pub async fn request_deletion(configuration: &configuration::Configuration, params: RequestDeletionParams) -> Result<(), Error<RequestDeletionError>> {

    let uri_str = format!("{}/v1/data-privacy/request-deletion", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.data_privacy_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<RequestDeletionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

///  Endpoint to request tracking of personal data.  Use this to opt back into data tracking after previously requesting deletion.     
pub async fn request_tracking(configuration: &configuration::Configuration, params: RequestTrackingParams) -> Result<(), Error<RequestTrackingError>> {

    let uri_str = format!("{}/v1/data-privacy/request-tracking", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.data_privacy_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<RequestTrackingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

