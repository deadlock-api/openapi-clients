/*
 * Deadlock API
 *
 *  ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`search_builds`]
#[derive(Clone, Debug)]
pub struct SearchBuildsParams {
    /// Filter builds based on their `last_updated` time (Unix timestamp).
    pub min_unix_timestamp: Option<i64>,
    /// Filter builds based on their `last_updated` time (Unix timestamp).
    pub max_unix_timestamp: Option<i64>,
    /// Filter builds based on their published time (Unix timestamp).
    pub min_published_unix_timestamp: Option<i64>,
    /// Filter builds based on their published time (Unix timestamp).
    pub max_published_unix_timestamp: Option<i64>,
    /// The field to sort the builds by.
    pub sort_by: Option<String>,
    /// The index of the first build to return.
    pub start: Option<u32>,
    /// The maximum number of builds to return.
    pub limit: Option<u32>,
    /// The direction to sort the builds in.
    pub sort_direction: Option<String>,
    /// Search for builds with a name containing this string.
    pub search_name: Option<String>,
    /// Search for builds with a description containing this string.
    pub search_description: Option<String>,
    /// Only return the latest version of each build.
    pub only_latest: Option<bool>,
    /// Filter builds by language.
    pub language: Option<u32>,
    /// Filter builds by ID.
    pub build_id: Option<u32>,
    /// Filter builds by version.
    pub version: Option<u32>,
    /// Filter builds by hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
    pub hero_id: Option<u32>,
    /// Filter builds by tag.
    pub tag: Option<u32>,
    /// Filter builds by rollup category.
    pub rollup_category: Option<u32>,
    /// The author's `SteamID3`
    pub author_id: Option<u32>
}


/// struct for typed errors of method [`search_builds`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchBuildsError {
    Status400(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}


///  Search for builds based on various criteria.  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     
pub async fn search_builds(configuration: &configuration::Configuration, params: SearchBuildsParams) -> Result<Vec<models::Build>, Error<SearchBuildsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let min_unix_timestamp = params.min_unix_timestamp;
    let max_unix_timestamp = params.max_unix_timestamp;
    let min_published_unix_timestamp = params.min_published_unix_timestamp;
    let max_published_unix_timestamp = params.max_published_unix_timestamp;
    let sort_by = params.sort_by;
    let start = params.start;
    let limit = params.limit;
    let sort_direction = params.sort_direction;
    let search_name = params.search_name;
    let search_description = params.search_description;
    let only_latest = params.only_latest;
    let language = params.language;
    let build_id = params.build_id;
    let version = params.version;
    let hero_id = params.hero_id;
    let tag = params.tag;
    let rollup_category = params.rollup_category;
    let author_id = params.author_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/builds", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = min_unix_timestamp {
        local_var_req_builder = local_var_req_builder.query(&[("min_unix_timestamp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_unix_timestamp {
        local_var_req_builder = local_var_req_builder.query(&[("max_unix_timestamp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_published_unix_timestamp {
        local_var_req_builder = local_var_req_builder.query(&[("min_published_unix_timestamp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_published_unix_timestamp {
        local_var_req_builder = local_var_req_builder.query(&[("max_published_unix_timestamp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start {
        local_var_req_builder = local_var_req_builder.query(&[("start", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_direction {
        local_var_req_builder = local_var_req_builder.query(&[("sort_direction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_name {
        local_var_req_builder = local_var_req_builder.query(&[("search_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_description {
        local_var_req_builder = local_var_req_builder.query(&[("search_description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_latest {
        local_var_req_builder = local_var_req_builder.query(&[("only_latest", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = build_id {
        local_var_req_builder = local_var_req_builder.query(&[("build_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = version {
        local_var_req_builder = local_var_req_builder.query(&[("version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rollup_category {
        local_var_req_builder = local_var_req_builder.query(&[("rollup_category", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = author_id {
        local_var_req_builder = local_var_req_builder.query(&[("author_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SearchBuildsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

