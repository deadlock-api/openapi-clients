/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawAbilityUpgradePropertyUpgradeV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawAbilityUpgradePropertyUpgradeV2Output{}

// RawAbilityUpgradePropertyUpgradeV2Output struct for RawAbilityUpgradePropertyUpgradeV2Output
type RawAbilityUpgradePropertyUpgradeV2Output struct {
	Name string `json:"name"`
	Bonus Bonus `json:"bonus"`
	ScaleStatFilter NullableString `json:"scale_stat_filter,omitempty"`
	UpgradeType NullableString `json:"upgrade_type,omitempty"`
}

type _RawAbilityUpgradePropertyUpgradeV2Output RawAbilityUpgradePropertyUpgradeV2Output

// NewRawAbilityUpgradePropertyUpgradeV2Output instantiates a new RawAbilityUpgradePropertyUpgradeV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawAbilityUpgradePropertyUpgradeV2Output(name string, bonus Bonus) *RawAbilityUpgradePropertyUpgradeV2Output {
	this := RawAbilityUpgradePropertyUpgradeV2Output{}
	this.Name = name
	this.Bonus = bonus
	return &this
}

// NewRawAbilityUpgradePropertyUpgradeV2OutputWithDefaults instantiates a new RawAbilityUpgradePropertyUpgradeV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawAbilityUpgradePropertyUpgradeV2OutputWithDefaults() *RawAbilityUpgradePropertyUpgradeV2Output {
	this := RawAbilityUpgradePropertyUpgradeV2Output{}
	return &this
}

// GetName returns the Name field value
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RawAbilityUpgradePropertyUpgradeV2Output) SetName(v string) {
	o.Name = v
}

// GetBonus returns the Bonus field value
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetBonus() Bonus {
	if o == nil {
		var ret Bonus
		return ret
	}

	return o.Bonus
}

// GetBonusOk returns a tuple with the Bonus field value
// and a boolean to check if the value has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetBonusOk() (*Bonus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bonus, true
}

// SetBonus sets field value
func (o *RawAbilityUpgradePropertyUpgradeV2Output) SetBonus(v Bonus) {
	o.Bonus = v
}

// GetScaleStatFilter returns the ScaleStatFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetScaleStatFilter() string {
	if o == nil || IsNil(o.ScaleStatFilter.Get()) {
		var ret string
		return ret
	}
	return *o.ScaleStatFilter.Get()
}

// GetScaleStatFilterOk returns a tuple with the ScaleStatFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetScaleStatFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaleStatFilter.Get(), o.ScaleStatFilter.IsSet()
}

// HasScaleStatFilter returns a boolean if a field has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Output) HasScaleStatFilter() bool {
	if o != nil && o.ScaleStatFilter.IsSet() {
		return true
	}

	return false
}

// SetScaleStatFilter gets a reference to the given NullableString and assigns it to the ScaleStatFilter field.
func (o *RawAbilityUpgradePropertyUpgradeV2Output) SetScaleStatFilter(v string) {
	o.ScaleStatFilter.Set(&v)
}
// SetScaleStatFilterNil sets the value for ScaleStatFilter to be an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Output) SetScaleStatFilterNil() {
	o.ScaleStatFilter.Set(nil)
}

// UnsetScaleStatFilter ensures that no value is present for ScaleStatFilter, not even an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Output) UnsetScaleStatFilter() {
	o.ScaleStatFilter.Unset()
}

// GetUpgradeType returns the UpgradeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetUpgradeType() string {
	if o == nil || IsNil(o.UpgradeType.Get()) {
		var ret string
		return ret
	}
	return *o.UpgradeType.Get()
}

// GetUpgradeTypeOk returns a tuple with the UpgradeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawAbilityUpgradePropertyUpgradeV2Output) GetUpgradeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpgradeType.Get(), o.UpgradeType.IsSet()
}

// HasUpgradeType returns a boolean if a field has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Output) HasUpgradeType() bool {
	if o != nil && o.UpgradeType.IsSet() {
		return true
	}

	return false
}

// SetUpgradeType gets a reference to the given NullableString and assigns it to the UpgradeType field.
func (o *RawAbilityUpgradePropertyUpgradeV2Output) SetUpgradeType(v string) {
	o.UpgradeType.Set(&v)
}
// SetUpgradeTypeNil sets the value for UpgradeType to be an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Output) SetUpgradeTypeNil() {
	o.UpgradeType.Set(nil)
}

// UnsetUpgradeType ensures that no value is present for UpgradeType, not even an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Output) UnsetUpgradeType() {
	o.UpgradeType.Unset()
}

func (o RawAbilityUpgradePropertyUpgradeV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawAbilityUpgradePropertyUpgradeV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["bonus"] = o.Bonus
	if o.ScaleStatFilter.IsSet() {
		toSerialize["scale_stat_filter"] = o.ScaleStatFilter.Get()
	}
	if o.UpgradeType.IsSet() {
		toSerialize["upgrade_type"] = o.UpgradeType.Get()
	}
	return toSerialize, nil
}

func (o *RawAbilityUpgradePropertyUpgradeV2Output) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"bonus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawAbilityUpgradePropertyUpgradeV2Output := _RawAbilityUpgradePropertyUpgradeV2Output{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawAbilityUpgradePropertyUpgradeV2Output)

	if err != nil {
		return err
	}

	*o = RawAbilityUpgradePropertyUpgradeV2Output(varRawAbilityUpgradePropertyUpgradeV2Output)

	return err
}

type NullableRawAbilityUpgradePropertyUpgradeV2Output struct {
	value *RawAbilityUpgradePropertyUpgradeV2Output
	isSet bool
}

func (v NullableRawAbilityUpgradePropertyUpgradeV2Output) Get() *RawAbilityUpgradePropertyUpgradeV2Output {
	return v.value
}

func (v *NullableRawAbilityUpgradePropertyUpgradeV2Output) Set(val *RawAbilityUpgradePropertyUpgradeV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableRawAbilityUpgradePropertyUpgradeV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableRawAbilityUpgradePropertyUpgradeV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawAbilityUpgradePropertyUpgradeV2Output(val *RawAbilityUpgradePropertyUpgradeV2Output) *NullableRawAbilityUpgradePropertyUpgradeV2Output {
	return &NullableRawAbilityUpgradePropertyUpgradeV2Output{value: val, isSet: true}
}

func (v NullableRawAbilityUpgradePropertyUpgradeV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawAbilityUpgradePropertyUpgradeV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


