/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawHeroMapModCostBonusesV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawHeroMapModCostBonusesV2Input{}

// RawHeroMapModCostBonusesV2Input struct for RawHeroMapModCostBonusesV2Input
type RawHeroMapModCostBonusesV2Input struct {
	NGoldThreshold int32 `json:"nGoldThreshold"`
	FlBonus float32 `json:"flBonus"`
	FlPercentOnGraph float32 `json:"flPercentOnGraph"`
}

type _RawHeroMapModCostBonusesV2Input RawHeroMapModCostBonusesV2Input

// NewRawHeroMapModCostBonusesV2Input instantiates a new RawHeroMapModCostBonusesV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawHeroMapModCostBonusesV2Input(nGoldThreshold int32, flBonus float32, flPercentOnGraph float32) *RawHeroMapModCostBonusesV2Input {
	this := RawHeroMapModCostBonusesV2Input{}
	this.NGoldThreshold = nGoldThreshold
	this.FlBonus = flBonus
	this.FlPercentOnGraph = flPercentOnGraph
	return &this
}

// NewRawHeroMapModCostBonusesV2InputWithDefaults instantiates a new RawHeroMapModCostBonusesV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawHeroMapModCostBonusesV2InputWithDefaults() *RawHeroMapModCostBonusesV2Input {
	this := RawHeroMapModCostBonusesV2Input{}
	return &this
}

// GetNGoldThreshold returns the NGoldThreshold field value
func (o *RawHeroMapModCostBonusesV2Input) GetNGoldThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NGoldThreshold
}

// GetNGoldThresholdOk returns a tuple with the NGoldThreshold field value
// and a boolean to check if the value has been set.
func (o *RawHeroMapModCostBonusesV2Input) GetNGoldThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NGoldThreshold, true
}

// SetNGoldThreshold sets field value
func (o *RawHeroMapModCostBonusesV2Input) SetNGoldThreshold(v int32) {
	o.NGoldThreshold = v
}

// GetFlBonus returns the FlBonus field value
func (o *RawHeroMapModCostBonusesV2Input) GetFlBonus() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FlBonus
}

// GetFlBonusOk returns a tuple with the FlBonus field value
// and a boolean to check if the value has been set.
func (o *RawHeroMapModCostBonusesV2Input) GetFlBonusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlBonus, true
}

// SetFlBonus sets field value
func (o *RawHeroMapModCostBonusesV2Input) SetFlBonus(v float32) {
	o.FlBonus = v
}

// GetFlPercentOnGraph returns the FlPercentOnGraph field value
func (o *RawHeroMapModCostBonusesV2Input) GetFlPercentOnGraph() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FlPercentOnGraph
}

// GetFlPercentOnGraphOk returns a tuple with the FlPercentOnGraph field value
// and a boolean to check if the value has been set.
func (o *RawHeroMapModCostBonusesV2Input) GetFlPercentOnGraphOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlPercentOnGraph, true
}

// SetFlPercentOnGraph sets field value
func (o *RawHeroMapModCostBonusesV2Input) SetFlPercentOnGraph(v float32) {
	o.FlPercentOnGraph = v
}

func (o RawHeroMapModCostBonusesV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawHeroMapModCostBonusesV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nGoldThreshold"] = o.NGoldThreshold
	toSerialize["flBonus"] = o.FlBonus
	toSerialize["flPercentOnGraph"] = o.FlPercentOnGraph
	return toSerialize, nil
}

func (o *RawHeroMapModCostBonusesV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nGoldThreshold",
		"flBonus",
		"flPercentOnGraph",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawHeroMapModCostBonusesV2Input := _RawHeroMapModCostBonusesV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawHeroMapModCostBonusesV2Input)

	if err != nil {
		return err
	}

	*o = RawHeroMapModCostBonusesV2Input(varRawHeroMapModCostBonusesV2Input)

	return err
}

type NullableRawHeroMapModCostBonusesV2Input struct {
	value *RawHeroMapModCostBonusesV2Input
	isSet bool
}

func (v NullableRawHeroMapModCostBonusesV2Input) Get() *RawHeroMapModCostBonusesV2Input {
	return v.value
}

func (v *NullableRawHeroMapModCostBonusesV2Input) Set(val *RawHeroMapModCostBonusesV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawHeroMapModCostBonusesV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawHeroMapModCostBonusesV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawHeroMapModCostBonusesV2Input(val *RawHeroMapModCostBonusesV2Input) *NullableRawHeroMapModCostBonusesV2Input {
	return &NullableRawHeroMapModCostBonusesV2Input{value: val, isSet: true}
}

func (v NullableRawHeroMapModCostBonusesV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawHeroMapModCostBonusesV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


