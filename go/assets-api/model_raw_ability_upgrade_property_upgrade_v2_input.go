/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawAbilityUpgradePropertyUpgradeV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawAbilityUpgradePropertyUpgradeV2Input{}

// RawAbilityUpgradePropertyUpgradeV2Input struct for RawAbilityUpgradePropertyUpgradeV2Input
type RawAbilityUpgradePropertyUpgradeV2Input struct {
	MStrPropertyName string `json:"m_strPropertyName"`
	MStrBonus MStrbonus `json:"m_strBonus"`
	MEScaleStatFilter NullableString `json:"m_eScaleStatFilter,omitempty"`
	MEUpgradeType NullableString `json:"m_eUpgradeType,omitempty"`
}

type _RawAbilityUpgradePropertyUpgradeV2Input RawAbilityUpgradePropertyUpgradeV2Input

// NewRawAbilityUpgradePropertyUpgradeV2Input instantiates a new RawAbilityUpgradePropertyUpgradeV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawAbilityUpgradePropertyUpgradeV2Input(mStrPropertyName string, mStrBonus MStrbonus) *RawAbilityUpgradePropertyUpgradeV2Input {
	this := RawAbilityUpgradePropertyUpgradeV2Input{}
	this.MStrPropertyName = mStrPropertyName
	this.MStrBonus = mStrBonus
	return &this
}

// NewRawAbilityUpgradePropertyUpgradeV2InputWithDefaults instantiates a new RawAbilityUpgradePropertyUpgradeV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawAbilityUpgradePropertyUpgradeV2InputWithDefaults() *RawAbilityUpgradePropertyUpgradeV2Input {
	this := RawAbilityUpgradePropertyUpgradeV2Input{}
	return &this
}

// GetMStrPropertyName returns the MStrPropertyName field value
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMStrPropertyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MStrPropertyName
}

// GetMStrPropertyNameOk returns a tuple with the MStrPropertyName field value
// and a boolean to check if the value has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMStrPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MStrPropertyName, true
}

// SetMStrPropertyName sets field value
func (o *RawAbilityUpgradePropertyUpgradeV2Input) SetMStrPropertyName(v string) {
	o.MStrPropertyName = v
}

// GetMStrBonus returns the MStrBonus field value
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMStrBonus() MStrbonus {
	if o == nil {
		var ret MStrbonus
		return ret
	}

	return o.MStrBonus
}

// GetMStrBonusOk returns a tuple with the MStrBonus field value
// and a boolean to check if the value has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMStrBonusOk() (*MStrbonus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MStrBonus, true
}

// SetMStrBonus sets field value
func (o *RawAbilityUpgradePropertyUpgradeV2Input) SetMStrBonus(v MStrbonus) {
	o.MStrBonus = v
}

// GetMEScaleStatFilter returns the MEScaleStatFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMEScaleStatFilter() string {
	if o == nil || IsNil(o.MEScaleStatFilter.Get()) {
		var ret string
		return ret
	}
	return *o.MEScaleStatFilter.Get()
}

// GetMEScaleStatFilterOk returns a tuple with the MEScaleStatFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMEScaleStatFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MEScaleStatFilter.Get(), o.MEScaleStatFilter.IsSet()
}

// HasMEScaleStatFilter returns a boolean if a field has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Input) HasMEScaleStatFilter() bool {
	if o != nil && o.MEScaleStatFilter.IsSet() {
		return true
	}

	return false
}

// SetMEScaleStatFilter gets a reference to the given NullableString and assigns it to the MEScaleStatFilter field.
func (o *RawAbilityUpgradePropertyUpgradeV2Input) SetMEScaleStatFilter(v string) {
	o.MEScaleStatFilter.Set(&v)
}
// SetMEScaleStatFilterNil sets the value for MEScaleStatFilter to be an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Input) SetMEScaleStatFilterNil() {
	o.MEScaleStatFilter.Set(nil)
}

// UnsetMEScaleStatFilter ensures that no value is present for MEScaleStatFilter, not even an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Input) UnsetMEScaleStatFilter() {
	o.MEScaleStatFilter.Unset()
}

// GetMEUpgradeType returns the MEUpgradeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMEUpgradeType() string {
	if o == nil || IsNil(o.MEUpgradeType.Get()) {
		var ret string
		return ret
	}
	return *o.MEUpgradeType.Get()
}

// GetMEUpgradeTypeOk returns a tuple with the MEUpgradeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawAbilityUpgradePropertyUpgradeV2Input) GetMEUpgradeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MEUpgradeType.Get(), o.MEUpgradeType.IsSet()
}

// HasMEUpgradeType returns a boolean if a field has been set.
func (o *RawAbilityUpgradePropertyUpgradeV2Input) HasMEUpgradeType() bool {
	if o != nil && o.MEUpgradeType.IsSet() {
		return true
	}

	return false
}

// SetMEUpgradeType gets a reference to the given NullableString and assigns it to the MEUpgradeType field.
func (o *RawAbilityUpgradePropertyUpgradeV2Input) SetMEUpgradeType(v string) {
	o.MEUpgradeType.Set(&v)
}
// SetMEUpgradeTypeNil sets the value for MEUpgradeType to be an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Input) SetMEUpgradeTypeNil() {
	o.MEUpgradeType.Set(nil)
}

// UnsetMEUpgradeType ensures that no value is present for MEUpgradeType, not even an explicit nil
func (o *RawAbilityUpgradePropertyUpgradeV2Input) UnsetMEUpgradeType() {
	o.MEUpgradeType.Unset()
}

func (o RawAbilityUpgradePropertyUpgradeV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawAbilityUpgradePropertyUpgradeV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["m_strPropertyName"] = o.MStrPropertyName
	toSerialize["m_strBonus"] = o.MStrBonus
	if o.MEScaleStatFilter.IsSet() {
		toSerialize["m_eScaleStatFilter"] = o.MEScaleStatFilter.Get()
	}
	if o.MEUpgradeType.IsSet() {
		toSerialize["m_eUpgradeType"] = o.MEUpgradeType.Get()
	}
	return toSerialize, nil
}

func (o *RawAbilityUpgradePropertyUpgradeV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"m_strPropertyName",
		"m_strBonus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawAbilityUpgradePropertyUpgradeV2Input := _RawAbilityUpgradePropertyUpgradeV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawAbilityUpgradePropertyUpgradeV2Input)

	if err != nil {
		return err
	}

	*o = RawAbilityUpgradePropertyUpgradeV2Input(varRawAbilityUpgradePropertyUpgradeV2Input)

	return err
}

type NullableRawAbilityUpgradePropertyUpgradeV2Input struct {
	value *RawAbilityUpgradePropertyUpgradeV2Input
	isSet bool
}

func (v NullableRawAbilityUpgradePropertyUpgradeV2Input) Get() *RawAbilityUpgradePropertyUpgradeV2Input {
	return v.value
}

func (v *NullableRawAbilityUpgradePropertyUpgradeV2Input) Set(val *RawAbilityUpgradePropertyUpgradeV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawAbilityUpgradePropertyUpgradeV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawAbilityUpgradePropertyUpgradeV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawAbilityUpgradePropertyUpgradeV2Input(val *RawAbilityUpgradePropertyUpgradeV2Input) *NullableRawAbilityUpgradePropertyUpgradeV2Input {
	return &NullableRawAbilityUpgradePropertyUpgradeV2Input{value: val, isSet: true}
}

func (v NullableRawAbilityUpgradePropertyUpgradeV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawAbilityUpgradePropertyUpgradeV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


