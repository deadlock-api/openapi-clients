/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawHeroMapModCostBonusesV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawHeroMapModCostBonusesV2Output{}

// RawHeroMapModCostBonusesV2Output struct for RawHeroMapModCostBonusesV2Output
type RawHeroMapModCostBonusesV2Output struct {
	GoldThreshold int32 `json:"gold_threshold"`
	Bonus float32 `json:"bonus"`
	PercentOnGraph float32 `json:"percent_on_graph"`
}

type _RawHeroMapModCostBonusesV2Output RawHeroMapModCostBonusesV2Output

// NewRawHeroMapModCostBonusesV2Output instantiates a new RawHeroMapModCostBonusesV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawHeroMapModCostBonusesV2Output(goldThreshold int32, bonus float32, percentOnGraph float32) *RawHeroMapModCostBonusesV2Output {
	this := RawHeroMapModCostBonusesV2Output{}
	this.GoldThreshold = goldThreshold
	this.Bonus = bonus
	this.PercentOnGraph = percentOnGraph
	return &this
}

// NewRawHeroMapModCostBonusesV2OutputWithDefaults instantiates a new RawHeroMapModCostBonusesV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawHeroMapModCostBonusesV2OutputWithDefaults() *RawHeroMapModCostBonusesV2Output {
	this := RawHeroMapModCostBonusesV2Output{}
	return &this
}

// GetGoldThreshold returns the GoldThreshold field value
func (o *RawHeroMapModCostBonusesV2Output) GetGoldThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GoldThreshold
}

// GetGoldThresholdOk returns a tuple with the GoldThreshold field value
// and a boolean to check if the value has been set.
func (o *RawHeroMapModCostBonusesV2Output) GetGoldThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoldThreshold, true
}

// SetGoldThreshold sets field value
func (o *RawHeroMapModCostBonusesV2Output) SetGoldThreshold(v int32) {
	o.GoldThreshold = v
}

// GetBonus returns the Bonus field value
func (o *RawHeroMapModCostBonusesV2Output) GetBonus() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Bonus
}

// GetBonusOk returns a tuple with the Bonus field value
// and a boolean to check if the value has been set.
func (o *RawHeroMapModCostBonusesV2Output) GetBonusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bonus, true
}

// SetBonus sets field value
func (o *RawHeroMapModCostBonusesV2Output) SetBonus(v float32) {
	o.Bonus = v
}

// GetPercentOnGraph returns the PercentOnGraph field value
func (o *RawHeroMapModCostBonusesV2Output) GetPercentOnGraph() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PercentOnGraph
}

// GetPercentOnGraphOk returns a tuple with the PercentOnGraph field value
// and a boolean to check if the value has been set.
func (o *RawHeroMapModCostBonusesV2Output) GetPercentOnGraphOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentOnGraph, true
}

// SetPercentOnGraph sets field value
func (o *RawHeroMapModCostBonusesV2Output) SetPercentOnGraph(v float32) {
	o.PercentOnGraph = v
}

func (o RawHeroMapModCostBonusesV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawHeroMapModCostBonusesV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gold_threshold"] = o.GoldThreshold
	toSerialize["bonus"] = o.Bonus
	toSerialize["percent_on_graph"] = o.PercentOnGraph
	return toSerialize, nil
}

func (o *RawHeroMapModCostBonusesV2Output) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gold_threshold",
		"bonus",
		"percent_on_graph",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawHeroMapModCostBonusesV2Output := _RawHeroMapModCostBonusesV2Output{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawHeroMapModCostBonusesV2Output)

	if err != nil {
		return err
	}

	*o = RawHeroMapModCostBonusesV2Output(varRawHeroMapModCostBonusesV2Output)

	return err
}

type NullableRawHeroMapModCostBonusesV2Output struct {
	value *RawHeroMapModCostBonusesV2Output
	isSet bool
}

func (v NullableRawHeroMapModCostBonusesV2Output) Get() *RawHeroMapModCostBonusesV2Output {
	return v.value
}

func (v *NullableRawHeroMapModCostBonusesV2Output) Set(val *RawHeroMapModCostBonusesV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableRawHeroMapModCostBonusesV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableRawHeroMapModCostBonusesV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawHeroMapModCostBonusesV2Output(val *RawHeroMapModCostBonusesV2Output) *NullableRawHeroMapModCostBonusesV2Output {
	return &NullableRawHeroMapModCostBonusesV2Output{value: val, isSet: true}
}

func (v NullableRawHeroMapModCostBonusesV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawHeroMapModCostBonusesV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


