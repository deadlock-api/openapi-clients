/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildTagV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildTagV2Output{}

// BuildTagV2Output struct for BuildTagV2Output
type BuildTagV2Output struct {
	ClassName string `json:"class_name"`
	Label string `json:"label"`
	Id int32 `json:"id"`
	Icon string `json:"icon"`
}

type _BuildTagV2Output BuildTagV2Output

// NewBuildTagV2Output instantiates a new BuildTagV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildTagV2Output(className string, label string, id int32, icon string) *BuildTagV2Output {
	this := BuildTagV2Output{}
	this.ClassName = className
	this.Label = label
	this.Id = id
	this.Icon = icon
	return &this
}

// NewBuildTagV2OutputWithDefaults instantiates a new BuildTagV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildTagV2OutputWithDefaults() *BuildTagV2Output {
	this := BuildTagV2Output{}
	return &this
}

// GetClassName returns the ClassName field value
func (o *BuildTagV2Output) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *BuildTagV2Output) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *BuildTagV2Output) SetClassName(v string) {
	o.ClassName = v
}

// GetLabel returns the Label field value
func (o *BuildTagV2Output) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *BuildTagV2Output) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *BuildTagV2Output) SetLabel(v string) {
	o.Label = v
}

// GetId returns the Id field value
func (o *BuildTagV2Output) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BuildTagV2Output) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BuildTagV2Output) SetId(v int32) {
	o.Id = v
}

// GetIcon returns the Icon field value
func (o *BuildTagV2Output) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *BuildTagV2Output) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *BuildTagV2Output) SetIcon(v string) {
	o.Icon = v
}

func (o BuildTagV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildTagV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["class_name"] = o.ClassName
	toSerialize["label"] = o.Label
	toSerialize["id"] = o.Id
	toSerialize["icon"] = o.Icon
	return toSerialize, nil
}

func (o *BuildTagV2Output) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class_name",
		"label",
		"id",
		"icon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildTagV2Output := _BuildTagV2Output{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildTagV2Output)

	if err != nil {
		return err
	}

	*o = BuildTagV2Output(varBuildTagV2Output)

	return err
}

type NullableBuildTagV2Output struct {
	value *BuildTagV2Output
	isSet bool
}

func (v NullableBuildTagV2Output) Get() *BuildTagV2Output {
	return v.value
}

func (v *NullableBuildTagV2Output) Set(val *BuildTagV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildTagV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildTagV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildTagV2Output(val *BuildTagV2Output) *NullableBuildTagV2Output {
	return &NullableBuildTagV2Output{value: val, isSet: true}
}

func (v NullableBuildTagV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildTagV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


