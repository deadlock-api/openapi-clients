/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectivePositionV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectivePositionV1{}

// ObjectivePositionV1 struct for ObjectivePositionV1
type ObjectivePositionV1 struct {
	// The relative margin left of the map image.
	LeftRelative float32 `json:"left_relative"`
	// The relative margin top of the map image.
	TopRelative float32 `json:"top_relative"`
}

type _ObjectivePositionV1 ObjectivePositionV1

// NewObjectivePositionV1 instantiates a new ObjectivePositionV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectivePositionV1(leftRelative float32, topRelative float32) *ObjectivePositionV1 {
	this := ObjectivePositionV1{}
	this.LeftRelative = leftRelative
	this.TopRelative = topRelative
	return &this
}

// NewObjectivePositionV1WithDefaults instantiates a new ObjectivePositionV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectivePositionV1WithDefaults() *ObjectivePositionV1 {
	this := ObjectivePositionV1{}
	return &this
}

// GetLeftRelative returns the LeftRelative field value
func (o *ObjectivePositionV1) GetLeftRelative() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LeftRelative
}

// GetLeftRelativeOk returns a tuple with the LeftRelative field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionV1) GetLeftRelativeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeftRelative, true
}

// SetLeftRelative sets field value
func (o *ObjectivePositionV1) SetLeftRelative(v float32) {
	o.LeftRelative = v
}

// GetTopRelative returns the TopRelative field value
func (o *ObjectivePositionV1) GetTopRelative() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TopRelative
}

// GetTopRelativeOk returns a tuple with the TopRelative field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionV1) GetTopRelativeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopRelative, true
}

// SetTopRelative sets field value
func (o *ObjectivePositionV1) SetTopRelative(v float32) {
	o.TopRelative = v
}

func (o ObjectivePositionV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectivePositionV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["left_relative"] = o.LeftRelative
	toSerialize["top_relative"] = o.TopRelative
	return toSerialize, nil
}

func (o *ObjectivePositionV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"left_relative",
		"top_relative",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectivePositionV1 := _ObjectivePositionV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectivePositionV1)

	if err != nil {
		return err
	}

	*o = ObjectivePositionV1(varObjectivePositionV1)

	return err
}

type NullableObjectivePositionV1 struct {
	value *ObjectivePositionV1
	isSet bool
}

func (v NullableObjectivePositionV1) Get() *ObjectivePositionV1 {
	return v.value
}

func (v *NullableObjectivePositionV1) Set(val *ObjectivePositionV1) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectivePositionV1) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectivePositionV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectivePositionV1(val *ObjectivePositionV1) *NullableObjectivePositionV1 {
	return &NullableObjectivePositionV1{value: val, isSet: true}
}

func (v NullableObjectivePositionV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectivePositionV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


