/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawHeroScalingStatV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawHeroScalingStatV2{}

// RawHeroScalingStatV2 struct for RawHeroScalingStatV2
type RawHeroScalingStatV2 struct {
	ScalingStat string `json:"scaling_stat"`
	Scale float32 `json:"scale"`
}

type _RawHeroScalingStatV2 RawHeroScalingStatV2

// NewRawHeroScalingStatV2 instantiates a new RawHeroScalingStatV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawHeroScalingStatV2(scalingStat string, scale float32) *RawHeroScalingStatV2 {
	this := RawHeroScalingStatV2{}
	this.ScalingStat = scalingStat
	this.Scale = scale
	return &this
}

// NewRawHeroScalingStatV2WithDefaults instantiates a new RawHeroScalingStatV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawHeroScalingStatV2WithDefaults() *RawHeroScalingStatV2 {
	this := RawHeroScalingStatV2{}
	return &this
}

// GetScalingStat returns the ScalingStat field value
func (o *RawHeroScalingStatV2) GetScalingStat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScalingStat
}

// GetScalingStatOk returns a tuple with the ScalingStat field value
// and a boolean to check if the value has been set.
func (o *RawHeroScalingStatV2) GetScalingStatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScalingStat, true
}

// SetScalingStat sets field value
func (o *RawHeroScalingStatV2) SetScalingStat(v string) {
	o.ScalingStat = v
}

// GetScale returns the Scale field value
func (o *RawHeroScalingStatV2) GetScale() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Scale
}

// GetScaleOk returns a tuple with the Scale field value
// and a boolean to check if the value has been set.
func (o *RawHeroScalingStatV2) GetScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scale, true
}

// SetScale sets field value
func (o *RawHeroScalingStatV2) SetScale(v float32) {
	o.Scale = v
}

func (o RawHeroScalingStatV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawHeroScalingStatV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scaling_stat"] = o.ScalingStat
	toSerialize["scale"] = o.Scale
	return toSerialize, nil
}

func (o *RawHeroScalingStatV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scaling_stat",
		"scale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawHeroScalingStatV2 := _RawHeroScalingStatV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawHeroScalingStatV2)

	if err != nil {
		return err
	}

	*o = RawHeroScalingStatV2(varRawHeroScalingStatV2)

	return err
}

type NullableRawHeroScalingStatV2 struct {
	value *RawHeroScalingStatV2
	isSet bool
}

func (v NullableRawHeroScalingStatV2) Get() *RawHeroScalingStatV2 {
	return v.value
}

func (v *NullableRawHeroScalingStatV2) Set(val *RawHeroScalingStatV2) {
	v.value = val
	v.isSet = true
}

func (v NullableRawHeroScalingStatV2) IsSet() bool {
	return v.isSet
}

func (v *NullableRawHeroScalingStatV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawHeroScalingStatV2(val *RawHeroScalingStatV2) *NullableRawHeroScalingStatV2 {
	return &NullableRawHeroScalingStatV2{value: val, isSet: true}
}

func (v NullableRawHeroScalingStatV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawHeroScalingStatV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


