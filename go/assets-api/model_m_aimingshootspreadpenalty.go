/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)


// MAimingshootspreadpenalty struct for MAimingshootspreadpenalty
type MAimingshootspreadpenalty struct {
	ArrayOfFloat32 *[]float32
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MAimingshootspreadpenalty) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into ArrayOfFloat32
	err = json.Unmarshal(data, &dst.ArrayOfFloat32);
	if err == nil {
		jsonArrayOfFloat32, _ := json.Marshal(dst.ArrayOfFloat32)
		if string(jsonArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfFloat32 = nil
		} else {
			return nil // data stored in dst.ArrayOfFloat32, return on the first match
		}
	} else {
		dst.ArrayOfFloat32 = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MAimingshootspreadpenalty)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MAimingshootspreadpenalty) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfFloat32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableMAimingshootspreadpenalty struct {
	value *MAimingshootspreadpenalty
	isSet bool
}

func (v NullableMAimingshootspreadpenalty) Get() *MAimingshootspreadpenalty {
	return v.value
}

func (v *NullableMAimingshootspreadpenalty) Set(val *MAimingshootspreadpenalty) {
	v.value = val
	v.isSet = true
}

func (v NullableMAimingshootspreadpenalty) IsSet() bool {
	return v.isSet
}

func (v *NullableMAimingshootspreadpenalty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMAimingshootspreadpenalty(val *MAimingshootspreadpenalty) *NullableMAimingshootspreadpenalty {
	return &NullableMAimingshootspreadpenalty{value: val, isSet: true}
}

func (v NullableMAimingshootspreadpenalty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMAimingshootspreadpenalty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


