/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawWeaponInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawWeaponInfoV2{}

// RawWeaponInfoV2 struct for RawWeaponInfoV2
type RawWeaponInfoV2 struct {
	CanZoom NullableBool `json:"can_zoom,omitempty"`
	BulletDamage NullableFloat32 `json:"bullet_damage,omitempty"`
	BulletGravityScale NullableFloat32 `json:"bullet_gravity_scale,omitempty"`
	BulletInheritShooterVelocityScale NullableFloat32 `json:"bullet_inherit_shooter_velocity_scale,omitempty"`
	BulletLifetime NullableFloat32 `json:"bullet_lifetime,omitempty"`
	BulletRadius NullableFloat32 `json:"bullet_radius,omitempty"`
	BulletRadiusVsWorld NullableFloat32 `json:"bullet_radius_vs_world,omitempty"`
	BulletReflectAmount NullableFloat32 `json:"bullet_reflect_amount,omitempty"`
	BulletReflectScale NullableFloat32 `json:"bullet_reflect_scale,omitempty"`
	BulletWhizDistance NullableFloat32 `json:"bullet_whiz_distance,omitempty"`
	BurstShotCooldown NullableFloat32 `json:"burst_shot_cooldown,omitempty"`
	CritBonusAgainstNpcs NullableFloat32 `json:"crit_bonus_against_npcs,omitempty"`
	CritBonusEnd NullableFloat32 `json:"crit_bonus_end,omitempty"`
	CritBonusEndRange NullableFloat32 `json:"crit_bonus_end_range,omitempty"`
	CritBonusStart NullableFloat32 `json:"crit_bonus_start,omitempty"`
	CritBonusStartRange NullableFloat32 `json:"crit_bonus_start_range,omitempty"`
	CycleTime NullableFloat32 `json:"cycle_time,omitempty"`
	IntraBurstCycleTime NullableFloat32 `json:"intra_burst_cycle_time,omitempty"`
	MaxSpinCycleTime NullableFloat32 `json:"max_spin_cycle_time,omitempty"`
	DamageFalloffBias NullableFloat32 `json:"damage_falloff_bias,omitempty"`
	DamageFalloffEndRange NullableFloat32 `json:"damage_falloff_end_range,omitempty"`
	DamageFalloffEndScale NullableFloat32 `json:"damage_falloff_end_scale,omitempty"`
	DamageFalloffStartRange NullableFloat32 `json:"damage_falloff_start_range,omitempty"`
	DamageFalloffStartScale NullableFloat32 `json:"damage_falloff_start_scale,omitempty"`
	HorizontalPunch NullableFloat32 `json:"horizontal_punch,omitempty"`
	Range NullableFloat32 `json:"range,omitempty"`
	RecoilRecoveryDelayFactor NullableFloat32 `json:"recoil_recovery_delay_factor,omitempty"`
	RecoilRecoverySpeed NullableFloat32 `json:"recoil_recovery_speed,omitempty"`
	RecoilShotIndexRecoveryTimeFactor NullableFloat32 `json:"recoil_shot_index_recovery_time_factor,omitempty"`
	RecoilSpeed NullableFloat32 `json:"recoil_speed,omitempty"`
	ReloadMoveSpeed NullableFloat32 `json:"reload_move_speed,omitempty"`
	ScatterYawScale NullableFloat32 `json:"scatter_yaw_scale,omitempty"`
	AimingShotSpreadPenalty NullableAimingShotSpreadPenalty `json:"aiming_shot_spread_penalty,omitempty"`
	StandingShotSpreadPenalty NullableStandingShotSpreadPenalty `json:"standing_shot_spread_penalty,omitempty"`
	ShootMoveSpeedPercent NullableFloat32 `json:"shoot_move_speed_percent,omitempty"`
	ShootSpreadPenaltyDecay NullableFloat32 `json:"shoot_spread_penalty_decay,omitempty"`
	ShootSpreadPenaltyDecayDelay NullableFloat32 `json:"shoot_spread_penalty_decay_delay,omitempty"`
	ShootSpreadPenaltyPerShot NullableFloat32 `json:"shoot_spread_penalty_per_shot,omitempty"`
	ShootingUpSpreadPenalty NullableFloat32 `json:"shooting_up_spread_penalty,omitempty"`
	VerticalPunch NullableFloat32 `json:"vertical_punch,omitempty"`
	ZoomFov NullableFloat32 `json:"zoom_fov,omitempty"`
	ZoomMoveSpeedPercent NullableFloat32 `json:"zoom_move_speed_percent,omitempty"`
	Bullets NullableInt32 `json:"bullets,omitempty"`
	BurstShotCount NullableInt32 `json:"burst_shot_count,omitempty"`
	ClipSize NullableInt32 `json:"clip_size,omitempty"`
	Spread NullableFloat32 `json:"spread,omitempty"`
	StandingSpread NullableFloat32 `json:"standing_spread,omitempty"`
	LowAmmoIndicatorThreshold NullableFloat32 `json:"low_ammo_indicator_threshold,omitempty"`
	RecoilSeed NullableFloat32 `json:"recoil_seed,omitempty"`
	ReloadDuration NullableFloat32 `json:"reload_duration,omitempty"`
	BulletSpeedCurve NullableRawItemWeaponInfoBulletSpeedCurveV2 `json:"bullet_speed_curve,omitempty"`
	HorizontalRecoil NullableRawWeaponInfoHorizontalRecoilV2 `json:"horizontal_recoil,omitempty"`
	VerticalRecoil NullableRawWeaponInfoVerticalRecoilV2 `json:"vertical_recoil,omitempty"`
}

// NewRawWeaponInfoV2 instantiates a new RawWeaponInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawWeaponInfoV2() *RawWeaponInfoV2 {
	this := RawWeaponInfoV2{}
	return &this
}

// NewRawWeaponInfoV2WithDefaults instantiates a new RawWeaponInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawWeaponInfoV2WithDefaults() *RawWeaponInfoV2 {
	this := RawWeaponInfoV2{}
	return &this
}

// GetCanZoom returns the CanZoom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCanZoom() bool {
	if o == nil || IsNil(o.CanZoom.Get()) {
		var ret bool
		return ret
	}
	return *o.CanZoom.Get()
}

// GetCanZoomOk returns a tuple with the CanZoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCanZoomOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanZoom.Get(), o.CanZoom.IsSet()
}

// HasCanZoom returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCanZoom() bool {
	if o != nil && o.CanZoom.IsSet() {
		return true
	}

	return false
}

// SetCanZoom gets a reference to the given NullableBool and assigns it to the CanZoom field.
func (o *RawWeaponInfoV2) SetCanZoom(v bool) {
	o.CanZoom.Set(&v)
}
// SetCanZoomNil sets the value for CanZoom to be an explicit nil
func (o *RawWeaponInfoV2) SetCanZoomNil() {
	o.CanZoom.Set(nil)
}

// UnsetCanZoom ensures that no value is present for CanZoom, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCanZoom() {
	o.CanZoom.Unset()
}

// GetBulletDamage returns the BulletDamage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletDamage() float32 {
	if o == nil || IsNil(o.BulletDamage.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletDamage.Get()
}

// GetBulletDamageOk returns a tuple with the BulletDamage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletDamageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletDamage.Get(), o.BulletDamage.IsSet()
}

// HasBulletDamage returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletDamage() bool {
	if o != nil && o.BulletDamage.IsSet() {
		return true
	}

	return false
}

// SetBulletDamage gets a reference to the given NullableFloat32 and assigns it to the BulletDamage field.
func (o *RawWeaponInfoV2) SetBulletDamage(v float32) {
	o.BulletDamage.Set(&v)
}
// SetBulletDamageNil sets the value for BulletDamage to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletDamageNil() {
	o.BulletDamage.Set(nil)
}

// UnsetBulletDamage ensures that no value is present for BulletDamage, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletDamage() {
	o.BulletDamage.Unset()
}

// GetBulletGravityScale returns the BulletGravityScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletGravityScale() float32 {
	if o == nil || IsNil(o.BulletGravityScale.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletGravityScale.Get()
}

// GetBulletGravityScaleOk returns a tuple with the BulletGravityScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletGravityScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletGravityScale.Get(), o.BulletGravityScale.IsSet()
}

// HasBulletGravityScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletGravityScale() bool {
	if o != nil && o.BulletGravityScale.IsSet() {
		return true
	}

	return false
}

// SetBulletGravityScale gets a reference to the given NullableFloat32 and assigns it to the BulletGravityScale field.
func (o *RawWeaponInfoV2) SetBulletGravityScale(v float32) {
	o.BulletGravityScale.Set(&v)
}
// SetBulletGravityScaleNil sets the value for BulletGravityScale to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletGravityScaleNil() {
	o.BulletGravityScale.Set(nil)
}

// UnsetBulletGravityScale ensures that no value is present for BulletGravityScale, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletGravityScale() {
	o.BulletGravityScale.Unset()
}

// GetBulletInheritShooterVelocityScale returns the BulletInheritShooterVelocityScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletInheritShooterVelocityScale() float32 {
	if o == nil || IsNil(o.BulletInheritShooterVelocityScale.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletInheritShooterVelocityScale.Get()
}

// GetBulletInheritShooterVelocityScaleOk returns a tuple with the BulletInheritShooterVelocityScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletInheritShooterVelocityScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletInheritShooterVelocityScale.Get(), o.BulletInheritShooterVelocityScale.IsSet()
}

// HasBulletInheritShooterVelocityScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletInheritShooterVelocityScale() bool {
	if o != nil && o.BulletInheritShooterVelocityScale.IsSet() {
		return true
	}

	return false
}

// SetBulletInheritShooterVelocityScale gets a reference to the given NullableFloat32 and assigns it to the BulletInheritShooterVelocityScale field.
func (o *RawWeaponInfoV2) SetBulletInheritShooterVelocityScale(v float32) {
	o.BulletInheritShooterVelocityScale.Set(&v)
}
// SetBulletInheritShooterVelocityScaleNil sets the value for BulletInheritShooterVelocityScale to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletInheritShooterVelocityScaleNil() {
	o.BulletInheritShooterVelocityScale.Set(nil)
}

// UnsetBulletInheritShooterVelocityScale ensures that no value is present for BulletInheritShooterVelocityScale, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletInheritShooterVelocityScale() {
	o.BulletInheritShooterVelocityScale.Unset()
}

// GetBulletLifetime returns the BulletLifetime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletLifetime() float32 {
	if o == nil || IsNil(o.BulletLifetime.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletLifetime.Get()
}

// GetBulletLifetimeOk returns a tuple with the BulletLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletLifetimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletLifetime.Get(), o.BulletLifetime.IsSet()
}

// HasBulletLifetime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletLifetime() bool {
	if o != nil && o.BulletLifetime.IsSet() {
		return true
	}

	return false
}

// SetBulletLifetime gets a reference to the given NullableFloat32 and assigns it to the BulletLifetime field.
func (o *RawWeaponInfoV2) SetBulletLifetime(v float32) {
	o.BulletLifetime.Set(&v)
}
// SetBulletLifetimeNil sets the value for BulletLifetime to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletLifetimeNil() {
	o.BulletLifetime.Set(nil)
}

// UnsetBulletLifetime ensures that no value is present for BulletLifetime, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletLifetime() {
	o.BulletLifetime.Unset()
}

// GetBulletRadius returns the BulletRadius field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletRadius() float32 {
	if o == nil || IsNil(o.BulletRadius.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletRadius.Get()
}

// GetBulletRadiusOk returns a tuple with the BulletRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletRadiusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletRadius.Get(), o.BulletRadius.IsSet()
}

// HasBulletRadius returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletRadius() bool {
	if o != nil && o.BulletRadius.IsSet() {
		return true
	}

	return false
}

// SetBulletRadius gets a reference to the given NullableFloat32 and assigns it to the BulletRadius field.
func (o *RawWeaponInfoV2) SetBulletRadius(v float32) {
	o.BulletRadius.Set(&v)
}
// SetBulletRadiusNil sets the value for BulletRadius to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletRadiusNil() {
	o.BulletRadius.Set(nil)
}

// UnsetBulletRadius ensures that no value is present for BulletRadius, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletRadius() {
	o.BulletRadius.Unset()
}

// GetBulletRadiusVsWorld returns the BulletRadiusVsWorld field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletRadiusVsWorld() float32 {
	if o == nil || IsNil(o.BulletRadiusVsWorld.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletRadiusVsWorld.Get()
}

// GetBulletRadiusVsWorldOk returns a tuple with the BulletRadiusVsWorld field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletRadiusVsWorldOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletRadiusVsWorld.Get(), o.BulletRadiusVsWorld.IsSet()
}

// HasBulletRadiusVsWorld returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletRadiusVsWorld() bool {
	if o != nil && o.BulletRadiusVsWorld.IsSet() {
		return true
	}

	return false
}

// SetBulletRadiusVsWorld gets a reference to the given NullableFloat32 and assigns it to the BulletRadiusVsWorld field.
func (o *RawWeaponInfoV2) SetBulletRadiusVsWorld(v float32) {
	o.BulletRadiusVsWorld.Set(&v)
}
// SetBulletRadiusVsWorldNil sets the value for BulletRadiusVsWorld to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletRadiusVsWorldNil() {
	o.BulletRadiusVsWorld.Set(nil)
}

// UnsetBulletRadiusVsWorld ensures that no value is present for BulletRadiusVsWorld, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletRadiusVsWorld() {
	o.BulletRadiusVsWorld.Unset()
}

// GetBulletReflectAmount returns the BulletReflectAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletReflectAmount() float32 {
	if o == nil || IsNil(o.BulletReflectAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletReflectAmount.Get()
}

// GetBulletReflectAmountOk returns a tuple with the BulletReflectAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletReflectAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletReflectAmount.Get(), o.BulletReflectAmount.IsSet()
}

// HasBulletReflectAmount returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletReflectAmount() bool {
	if o != nil && o.BulletReflectAmount.IsSet() {
		return true
	}

	return false
}

// SetBulletReflectAmount gets a reference to the given NullableFloat32 and assigns it to the BulletReflectAmount field.
func (o *RawWeaponInfoV2) SetBulletReflectAmount(v float32) {
	o.BulletReflectAmount.Set(&v)
}
// SetBulletReflectAmountNil sets the value for BulletReflectAmount to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletReflectAmountNil() {
	o.BulletReflectAmount.Set(nil)
}

// UnsetBulletReflectAmount ensures that no value is present for BulletReflectAmount, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletReflectAmount() {
	o.BulletReflectAmount.Unset()
}

// GetBulletReflectScale returns the BulletReflectScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletReflectScale() float32 {
	if o == nil || IsNil(o.BulletReflectScale.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletReflectScale.Get()
}

// GetBulletReflectScaleOk returns a tuple with the BulletReflectScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletReflectScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletReflectScale.Get(), o.BulletReflectScale.IsSet()
}

// HasBulletReflectScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletReflectScale() bool {
	if o != nil && o.BulletReflectScale.IsSet() {
		return true
	}

	return false
}

// SetBulletReflectScale gets a reference to the given NullableFloat32 and assigns it to the BulletReflectScale field.
func (o *RawWeaponInfoV2) SetBulletReflectScale(v float32) {
	o.BulletReflectScale.Set(&v)
}
// SetBulletReflectScaleNil sets the value for BulletReflectScale to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletReflectScaleNil() {
	o.BulletReflectScale.Set(nil)
}

// UnsetBulletReflectScale ensures that no value is present for BulletReflectScale, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletReflectScale() {
	o.BulletReflectScale.Unset()
}

// GetBulletWhizDistance returns the BulletWhizDistance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletWhizDistance() float32 {
	if o == nil || IsNil(o.BulletWhizDistance.Get()) {
		var ret float32
		return ret
	}
	return *o.BulletWhizDistance.Get()
}

// GetBulletWhizDistanceOk returns a tuple with the BulletWhizDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletWhizDistanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletWhizDistance.Get(), o.BulletWhizDistance.IsSet()
}

// HasBulletWhizDistance returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletWhizDistance() bool {
	if o != nil && o.BulletWhizDistance.IsSet() {
		return true
	}

	return false
}

// SetBulletWhizDistance gets a reference to the given NullableFloat32 and assigns it to the BulletWhizDistance field.
func (o *RawWeaponInfoV2) SetBulletWhizDistance(v float32) {
	o.BulletWhizDistance.Set(&v)
}
// SetBulletWhizDistanceNil sets the value for BulletWhizDistance to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletWhizDistanceNil() {
	o.BulletWhizDistance.Set(nil)
}

// UnsetBulletWhizDistance ensures that no value is present for BulletWhizDistance, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletWhizDistance() {
	o.BulletWhizDistance.Unset()
}

// GetBurstShotCooldown returns the BurstShotCooldown field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBurstShotCooldown() float32 {
	if o == nil || IsNil(o.BurstShotCooldown.Get()) {
		var ret float32
		return ret
	}
	return *o.BurstShotCooldown.Get()
}

// GetBurstShotCooldownOk returns a tuple with the BurstShotCooldown field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBurstShotCooldownOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstShotCooldown.Get(), o.BurstShotCooldown.IsSet()
}

// HasBurstShotCooldown returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBurstShotCooldown() bool {
	if o != nil && o.BurstShotCooldown.IsSet() {
		return true
	}

	return false
}

// SetBurstShotCooldown gets a reference to the given NullableFloat32 and assigns it to the BurstShotCooldown field.
func (o *RawWeaponInfoV2) SetBurstShotCooldown(v float32) {
	o.BurstShotCooldown.Set(&v)
}
// SetBurstShotCooldownNil sets the value for BurstShotCooldown to be an explicit nil
func (o *RawWeaponInfoV2) SetBurstShotCooldownNil() {
	o.BurstShotCooldown.Set(nil)
}

// UnsetBurstShotCooldown ensures that no value is present for BurstShotCooldown, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBurstShotCooldown() {
	o.BurstShotCooldown.Unset()
}

// GetCritBonusAgainstNpcs returns the CritBonusAgainstNpcs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCritBonusAgainstNpcs() float32 {
	if o == nil || IsNil(o.CritBonusAgainstNpcs.Get()) {
		var ret float32
		return ret
	}
	return *o.CritBonusAgainstNpcs.Get()
}

// GetCritBonusAgainstNpcsOk returns a tuple with the CritBonusAgainstNpcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCritBonusAgainstNpcsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CritBonusAgainstNpcs.Get(), o.CritBonusAgainstNpcs.IsSet()
}

// HasCritBonusAgainstNpcs returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCritBonusAgainstNpcs() bool {
	if o != nil && o.CritBonusAgainstNpcs.IsSet() {
		return true
	}

	return false
}

// SetCritBonusAgainstNpcs gets a reference to the given NullableFloat32 and assigns it to the CritBonusAgainstNpcs field.
func (o *RawWeaponInfoV2) SetCritBonusAgainstNpcs(v float32) {
	o.CritBonusAgainstNpcs.Set(&v)
}
// SetCritBonusAgainstNpcsNil sets the value for CritBonusAgainstNpcs to be an explicit nil
func (o *RawWeaponInfoV2) SetCritBonusAgainstNpcsNil() {
	o.CritBonusAgainstNpcs.Set(nil)
}

// UnsetCritBonusAgainstNpcs ensures that no value is present for CritBonusAgainstNpcs, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCritBonusAgainstNpcs() {
	o.CritBonusAgainstNpcs.Unset()
}

// GetCritBonusEnd returns the CritBonusEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCritBonusEnd() float32 {
	if o == nil || IsNil(o.CritBonusEnd.Get()) {
		var ret float32
		return ret
	}
	return *o.CritBonusEnd.Get()
}

// GetCritBonusEndOk returns a tuple with the CritBonusEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCritBonusEndOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CritBonusEnd.Get(), o.CritBonusEnd.IsSet()
}

// HasCritBonusEnd returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCritBonusEnd() bool {
	if o != nil && o.CritBonusEnd.IsSet() {
		return true
	}

	return false
}

// SetCritBonusEnd gets a reference to the given NullableFloat32 and assigns it to the CritBonusEnd field.
func (o *RawWeaponInfoV2) SetCritBonusEnd(v float32) {
	o.CritBonusEnd.Set(&v)
}
// SetCritBonusEndNil sets the value for CritBonusEnd to be an explicit nil
func (o *RawWeaponInfoV2) SetCritBonusEndNil() {
	o.CritBonusEnd.Set(nil)
}

// UnsetCritBonusEnd ensures that no value is present for CritBonusEnd, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCritBonusEnd() {
	o.CritBonusEnd.Unset()
}

// GetCritBonusEndRange returns the CritBonusEndRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCritBonusEndRange() float32 {
	if o == nil || IsNil(o.CritBonusEndRange.Get()) {
		var ret float32
		return ret
	}
	return *o.CritBonusEndRange.Get()
}

// GetCritBonusEndRangeOk returns a tuple with the CritBonusEndRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCritBonusEndRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CritBonusEndRange.Get(), o.CritBonusEndRange.IsSet()
}

// HasCritBonusEndRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCritBonusEndRange() bool {
	if o != nil && o.CritBonusEndRange.IsSet() {
		return true
	}

	return false
}

// SetCritBonusEndRange gets a reference to the given NullableFloat32 and assigns it to the CritBonusEndRange field.
func (o *RawWeaponInfoV2) SetCritBonusEndRange(v float32) {
	o.CritBonusEndRange.Set(&v)
}
// SetCritBonusEndRangeNil sets the value for CritBonusEndRange to be an explicit nil
func (o *RawWeaponInfoV2) SetCritBonusEndRangeNil() {
	o.CritBonusEndRange.Set(nil)
}

// UnsetCritBonusEndRange ensures that no value is present for CritBonusEndRange, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCritBonusEndRange() {
	o.CritBonusEndRange.Unset()
}

// GetCritBonusStart returns the CritBonusStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCritBonusStart() float32 {
	if o == nil || IsNil(o.CritBonusStart.Get()) {
		var ret float32
		return ret
	}
	return *o.CritBonusStart.Get()
}

// GetCritBonusStartOk returns a tuple with the CritBonusStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCritBonusStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CritBonusStart.Get(), o.CritBonusStart.IsSet()
}

// HasCritBonusStart returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCritBonusStart() bool {
	if o != nil && o.CritBonusStart.IsSet() {
		return true
	}

	return false
}

// SetCritBonusStart gets a reference to the given NullableFloat32 and assigns it to the CritBonusStart field.
func (o *RawWeaponInfoV2) SetCritBonusStart(v float32) {
	o.CritBonusStart.Set(&v)
}
// SetCritBonusStartNil sets the value for CritBonusStart to be an explicit nil
func (o *RawWeaponInfoV2) SetCritBonusStartNil() {
	o.CritBonusStart.Set(nil)
}

// UnsetCritBonusStart ensures that no value is present for CritBonusStart, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCritBonusStart() {
	o.CritBonusStart.Unset()
}

// GetCritBonusStartRange returns the CritBonusStartRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCritBonusStartRange() float32 {
	if o == nil || IsNil(o.CritBonusStartRange.Get()) {
		var ret float32
		return ret
	}
	return *o.CritBonusStartRange.Get()
}

// GetCritBonusStartRangeOk returns a tuple with the CritBonusStartRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCritBonusStartRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CritBonusStartRange.Get(), o.CritBonusStartRange.IsSet()
}

// HasCritBonusStartRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCritBonusStartRange() bool {
	if o != nil && o.CritBonusStartRange.IsSet() {
		return true
	}

	return false
}

// SetCritBonusStartRange gets a reference to the given NullableFloat32 and assigns it to the CritBonusStartRange field.
func (o *RawWeaponInfoV2) SetCritBonusStartRange(v float32) {
	o.CritBonusStartRange.Set(&v)
}
// SetCritBonusStartRangeNil sets the value for CritBonusStartRange to be an explicit nil
func (o *RawWeaponInfoV2) SetCritBonusStartRangeNil() {
	o.CritBonusStartRange.Set(nil)
}

// UnsetCritBonusStartRange ensures that no value is present for CritBonusStartRange, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCritBonusStartRange() {
	o.CritBonusStartRange.Unset()
}

// GetCycleTime returns the CycleTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetCycleTime() float32 {
	if o == nil || IsNil(o.CycleTime.Get()) {
		var ret float32
		return ret
	}
	return *o.CycleTime.Get()
}

// GetCycleTimeOk returns a tuple with the CycleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetCycleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CycleTime.Get(), o.CycleTime.IsSet()
}

// HasCycleTime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasCycleTime() bool {
	if o != nil && o.CycleTime.IsSet() {
		return true
	}

	return false
}

// SetCycleTime gets a reference to the given NullableFloat32 and assigns it to the CycleTime field.
func (o *RawWeaponInfoV2) SetCycleTime(v float32) {
	o.CycleTime.Set(&v)
}
// SetCycleTimeNil sets the value for CycleTime to be an explicit nil
func (o *RawWeaponInfoV2) SetCycleTimeNil() {
	o.CycleTime.Set(nil)
}

// UnsetCycleTime ensures that no value is present for CycleTime, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetCycleTime() {
	o.CycleTime.Unset()
}

// GetIntraBurstCycleTime returns the IntraBurstCycleTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetIntraBurstCycleTime() float32 {
	if o == nil || IsNil(o.IntraBurstCycleTime.Get()) {
		var ret float32
		return ret
	}
	return *o.IntraBurstCycleTime.Get()
}

// GetIntraBurstCycleTimeOk returns a tuple with the IntraBurstCycleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetIntraBurstCycleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntraBurstCycleTime.Get(), o.IntraBurstCycleTime.IsSet()
}

// HasIntraBurstCycleTime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasIntraBurstCycleTime() bool {
	if o != nil && o.IntraBurstCycleTime.IsSet() {
		return true
	}

	return false
}

// SetIntraBurstCycleTime gets a reference to the given NullableFloat32 and assigns it to the IntraBurstCycleTime field.
func (o *RawWeaponInfoV2) SetIntraBurstCycleTime(v float32) {
	o.IntraBurstCycleTime.Set(&v)
}
// SetIntraBurstCycleTimeNil sets the value for IntraBurstCycleTime to be an explicit nil
func (o *RawWeaponInfoV2) SetIntraBurstCycleTimeNil() {
	o.IntraBurstCycleTime.Set(nil)
}

// UnsetIntraBurstCycleTime ensures that no value is present for IntraBurstCycleTime, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetIntraBurstCycleTime() {
	o.IntraBurstCycleTime.Unset()
}

// GetMaxSpinCycleTime returns the MaxSpinCycleTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetMaxSpinCycleTime() float32 {
	if o == nil || IsNil(o.MaxSpinCycleTime.Get()) {
		var ret float32
		return ret
	}
	return *o.MaxSpinCycleTime.Get()
}

// GetMaxSpinCycleTimeOk returns a tuple with the MaxSpinCycleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetMaxSpinCycleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSpinCycleTime.Get(), o.MaxSpinCycleTime.IsSet()
}

// HasMaxSpinCycleTime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasMaxSpinCycleTime() bool {
	if o != nil && o.MaxSpinCycleTime.IsSet() {
		return true
	}

	return false
}

// SetMaxSpinCycleTime gets a reference to the given NullableFloat32 and assigns it to the MaxSpinCycleTime field.
func (o *RawWeaponInfoV2) SetMaxSpinCycleTime(v float32) {
	o.MaxSpinCycleTime.Set(&v)
}
// SetMaxSpinCycleTimeNil sets the value for MaxSpinCycleTime to be an explicit nil
func (o *RawWeaponInfoV2) SetMaxSpinCycleTimeNil() {
	o.MaxSpinCycleTime.Set(nil)
}

// UnsetMaxSpinCycleTime ensures that no value is present for MaxSpinCycleTime, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetMaxSpinCycleTime() {
	o.MaxSpinCycleTime.Unset()
}

// GetDamageFalloffBias returns the DamageFalloffBias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetDamageFalloffBias() float32 {
	if o == nil || IsNil(o.DamageFalloffBias.Get()) {
		var ret float32
		return ret
	}
	return *o.DamageFalloffBias.Get()
}

// GetDamageFalloffBiasOk returns a tuple with the DamageFalloffBias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetDamageFalloffBiasOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DamageFalloffBias.Get(), o.DamageFalloffBias.IsSet()
}

// HasDamageFalloffBias returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasDamageFalloffBias() bool {
	if o != nil && o.DamageFalloffBias.IsSet() {
		return true
	}

	return false
}

// SetDamageFalloffBias gets a reference to the given NullableFloat32 and assigns it to the DamageFalloffBias field.
func (o *RawWeaponInfoV2) SetDamageFalloffBias(v float32) {
	o.DamageFalloffBias.Set(&v)
}
// SetDamageFalloffBiasNil sets the value for DamageFalloffBias to be an explicit nil
func (o *RawWeaponInfoV2) SetDamageFalloffBiasNil() {
	o.DamageFalloffBias.Set(nil)
}

// UnsetDamageFalloffBias ensures that no value is present for DamageFalloffBias, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetDamageFalloffBias() {
	o.DamageFalloffBias.Unset()
}

// GetDamageFalloffEndRange returns the DamageFalloffEndRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetDamageFalloffEndRange() float32 {
	if o == nil || IsNil(o.DamageFalloffEndRange.Get()) {
		var ret float32
		return ret
	}
	return *o.DamageFalloffEndRange.Get()
}

// GetDamageFalloffEndRangeOk returns a tuple with the DamageFalloffEndRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetDamageFalloffEndRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DamageFalloffEndRange.Get(), o.DamageFalloffEndRange.IsSet()
}

// HasDamageFalloffEndRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasDamageFalloffEndRange() bool {
	if o != nil && o.DamageFalloffEndRange.IsSet() {
		return true
	}

	return false
}

// SetDamageFalloffEndRange gets a reference to the given NullableFloat32 and assigns it to the DamageFalloffEndRange field.
func (o *RawWeaponInfoV2) SetDamageFalloffEndRange(v float32) {
	o.DamageFalloffEndRange.Set(&v)
}
// SetDamageFalloffEndRangeNil sets the value for DamageFalloffEndRange to be an explicit nil
func (o *RawWeaponInfoV2) SetDamageFalloffEndRangeNil() {
	o.DamageFalloffEndRange.Set(nil)
}

// UnsetDamageFalloffEndRange ensures that no value is present for DamageFalloffEndRange, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetDamageFalloffEndRange() {
	o.DamageFalloffEndRange.Unset()
}

// GetDamageFalloffEndScale returns the DamageFalloffEndScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetDamageFalloffEndScale() float32 {
	if o == nil || IsNil(o.DamageFalloffEndScale.Get()) {
		var ret float32
		return ret
	}
	return *o.DamageFalloffEndScale.Get()
}

// GetDamageFalloffEndScaleOk returns a tuple with the DamageFalloffEndScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetDamageFalloffEndScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DamageFalloffEndScale.Get(), o.DamageFalloffEndScale.IsSet()
}

// HasDamageFalloffEndScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasDamageFalloffEndScale() bool {
	if o != nil && o.DamageFalloffEndScale.IsSet() {
		return true
	}

	return false
}

// SetDamageFalloffEndScale gets a reference to the given NullableFloat32 and assigns it to the DamageFalloffEndScale field.
func (o *RawWeaponInfoV2) SetDamageFalloffEndScale(v float32) {
	o.DamageFalloffEndScale.Set(&v)
}
// SetDamageFalloffEndScaleNil sets the value for DamageFalloffEndScale to be an explicit nil
func (o *RawWeaponInfoV2) SetDamageFalloffEndScaleNil() {
	o.DamageFalloffEndScale.Set(nil)
}

// UnsetDamageFalloffEndScale ensures that no value is present for DamageFalloffEndScale, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetDamageFalloffEndScale() {
	o.DamageFalloffEndScale.Unset()
}

// GetDamageFalloffStartRange returns the DamageFalloffStartRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetDamageFalloffStartRange() float32 {
	if o == nil || IsNil(o.DamageFalloffStartRange.Get()) {
		var ret float32
		return ret
	}
	return *o.DamageFalloffStartRange.Get()
}

// GetDamageFalloffStartRangeOk returns a tuple with the DamageFalloffStartRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetDamageFalloffStartRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DamageFalloffStartRange.Get(), o.DamageFalloffStartRange.IsSet()
}

// HasDamageFalloffStartRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasDamageFalloffStartRange() bool {
	if o != nil && o.DamageFalloffStartRange.IsSet() {
		return true
	}

	return false
}

// SetDamageFalloffStartRange gets a reference to the given NullableFloat32 and assigns it to the DamageFalloffStartRange field.
func (o *RawWeaponInfoV2) SetDamageFalloffStartRange(v float32) {
	o.DamageFalloffStartRange.Set(&v)
}
// SetDamageFalloffStartRangeNil sets the value for DamageFalloffStartRange to be an explicit nil
func (o *RawWeaponInfoV2) SetDamageFalloffStartRangeNil() {
	o.DamageFalloffStartRange.Set(nil)
}

// UnsetDamageFalloffStartRange ensures that no value is present for DamageFalloffStartRange, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetDamageFalloffStartRange() {
	o.DamageFalloffStartRange.Unset()
}

// GetDamageFalloffStartScale returns the DamageFalloffStartScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetDamageFalloffStartScale() float32 {
	if o == nil || IsNil(o.DamageFalloffStartScale.Get()) {
		var ret float32
		return ret
	}
	return *o.DamageFalloffStartScale.Get()
}

// GetDamageFalloffStartScaleOk returns a tuple with the DamageFalloffStartScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetDamageFalloffStartScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DamageFalloffStartScale.Get(), o.DamageFalloffStartScale.IsSet()
}

// HasDamageFalloffStartScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasDamageFalloffStartScale() bool {
	if o != nil && o.DamageFalloffStartScale.IsSet() {
		return true
	}

	return false
}

// SetDamageFalloffStartScale gets a reference to the given NullableFloat32 and assigns it to the DamageFalloffStartScale field.
func (o *RawWeaponInfoV2) SetDamageFalloffStartScale(v float32) {
	o.DamageFalloffStartScale.Set(&v)
}
// SetDamageFalloffStartScaleNil sets the value for DamageFalloffStartScale to be an explicit nil
func (o *RawWeaponInfoV2) SetDamageFalloffStartScaleNil() {
	o.DamageFalloffStartScale.Set(nil)
}

// UnsetDamageFalloffStartScale ensures that no value is present for DamageFalloffStartScale, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetDamageFalloffStartScale() {
	o.DamageFalloffStartScale.Unset()
}

// GetHorizontalPunch returns the HorizontalPunch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetHorizontalPunch() float32 {
	if o == nil || IsNil(o.HorizontalPunch.Get()) {
		var ret float32
		return ret
	}
	return *o.HorizontalPunch.Get()
}

// GetHorizontalPunchOk returns a tuple with the HorizontalPunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetHorizontalPunchOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HorizontalPunch.Get(), o.HorizontalPunch.IsSet()
}

// HasHorizontalPunch returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasHorizontalPunch() bool {
	if o != nil && o.HorizontalPunch.IsSet() {
		return true
	}

	return false
}

// SetHorizontalPunch gets a reference to the given NullableFloat32 and assigns it to the HorizontalPunch field.
func (o *RawWeaponInfoV2) SetHorizontalPunch(v float32) {
	o.HorizontalPunch.Set(&v)
}
// SetHorizontalPunchNil sets the value for HorizontalPunch to be an explicit nil
func (o *RawWeaponInfoV2) SetHorizontalPunchNil() {
	o.HorizontalPunch.Set(nil)
}

// UnsetHorizontalPunch ensures that no value is present for HorizontalPunch, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetHorizontalPunch() {
	o.HorizontalPunch.Unset()
}

// GetRange returns the Range field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetRange() float32 {
	if o == nil || IsNil(o.Range.Get()) {
		var ret float32
		return ret
	}
	return *o.Range.Get()
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Range.Get(), o.Range.IsSet()
}

// HasRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasRange() bool {
	if o != nil && o.Range.IsSet() {
		return true
	}

	return false
}

// SetRange gets a reference to the given NullableFloat32 and assigns it to the Range field.
func (o *RawWeaponInfoV2) SetRange(v float32) {
	o.Range.Set(&v)
}
// SetRangeNil sets the value for Range to be an explicit nil
func (o *RawWeaponInfoV2) SetRangeNil() {
	o.Range.Set(nil)
}

// UnsetRange ensures that no value is present for Range, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetRange() {
	o.Range.Unset()
}

// GetRecoilRecoveryDelayFactor returns the RecoilRecoveryDelayFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetRecoilRecoveryDelayFactor() float32 {
	if o == nil || IsNil(o.RecoilRecoveryDelayFactor.Get()) {
		var ret float32
		return ret
	}
	return *o.RecoilRecoveryDelayFactor.Get()
}

// GetRecoilRecoveryDelayFactorOk returns a tuple with the RecoilRecoveryDelayFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetRecoilRecoveryDelayFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoilRecoveryDelayFactor.Get(), o.RecoilRecoveryDelayFactor.IsSet()
}

// HasRecoilRecoveryDelayFactor returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasRecoilRecoveryDelayFactor() bool {
	if o != nil && o.RecoilRecoveryDelayFactor.IsSet() {
		return true
	}

	return false
}

// SetRecoilRecoveryDelayFactor gets a reference to the given NullableFloat32 and assigns it to the RecoilRecoveryDelayFactor field.
func (o *RawWeaponInfoV2) SetRecoilRecoveryDelayFactor(v float32) {
	o.RecoilRecoveryDelayFactor.Set(&v)
}
// SetRecoilRecoveryDelayFactorNil sets the value for RecoilRecoveryDelayFactor to be an explicit nil
func (o *RawWeaponInfoV2) SetRecoilRecoveryDelayFactorNil() {
	o.RecoilRecoveryDelayFactor.Set(nil)
}

// UnsetRecoilRecoveryDelayFactor ensures that no value is present for RecoilRecoveryDelayFactor, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetRecoilRecoveryDelayFactor() {
	o.RecoilRecoveryDelayFactor.Unset()
}

// GetRecoilRecoverySpeed returns the RecoilRecoverySpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetRecoilRecoverySpeed() float32 {
	if o == nil || IsNil(o.RecoilRecoverySpeed.Get()) {
		var ret float32
		return ret
	}
	return *o.RecoilRecoverySpeed.Get()
}

// GetRecoilRecoverySpeedOk returns a tuple with the RecoilRecoverySpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetRecoilRecoverySpeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoilRecoverySpeed.Get(), o.RecoilRecoverySpeed.IsSet()
}

// HasRecoilRecoverySpeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasRecoilRecoverySpeed() bool {
	if o != nil && o.RecoilRecoverySpeed.IsSet() {
		return true
	}

	return false
}

// SetRecoilRecoverySpeed gets a reference to the given NullableFloat32 and assigns it to the RecoilRecoverySpeed field.
func (o *RawWeaponInfoV2) SetRecoilRecoverySpeed(v float32) {
	o.RecoilRecoverySpeed.Set(&v)
}
// SetRecoilRecoverySpeedNil sets the value for RecoilRecoverySpeed to be an explicit nil
func (o *RawWeaponInfoV2) SetRecoilRecoverySpeedNil() {
	o.RecoilRecoverySpeed.Set(nil)
}

// UnsetRecoilRecoverySpeed ensures that no value is present for RecoilRecoverySpeed, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetRecoilRecoverySpeed() {
	o.RecoilRecoverySpeed.Unset()
}

// GetRecoilShotIndexRecoveryTimeFactor returns the RecoilShotIndexRecoveryTimeFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetRecoilShotIndexRecoveryTimeFactor() float32 {
	if o == nil || IsNil(o.RecoilShotIndexRecoveryTimeFactor.Get()) {
		var ret float32
		return ret
	}
	return *o.RecoilShotIndexRecoveryTimeFactor.Get()
}

// GetRecoilShotIndexRecoveryTimeFactorOk returns a tuple with the RecoilShotIndexRecoveryTimeFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetRecoilShotIndexRecoveryTimeFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoilShotIndexRecoveryTimeFactor.Get(), o.RecoilShotIndexRecoveryTimeFactor.IsSet()
}

// HasRecoilShotIndexRecoveryTimeFactor returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasRecoilShotIndexRecoveryTimeFactor() bool {
	if o != nil && o.RecoilShotIndexRecoveryTimeFactor.IsSet() {
		return true
	}

	return false
}

// SetRecoilShotIndexRecoveryTimeFactor gets a reference to the given NullableFloat32 and assigns it to the RecoilShotIndexRecoveryTimeFactor field.
func (o *RawWeaponInfoV2) SetRecoilShotIndexRecoveryTimeFactor(v float32) {
	o.RecoilShotIndexRecoveryTimeFactor.Set(&v)
}
// SetRecoilShotIndexRecoveryTimeFactorNil sets the value for RecoilShotIndexRecoveryTimeFactor to be an explicit nil
func (o *RawWeaponInfoV2) SetRecoilShotIndexRecoveryTimeFactorNil() {
	o.RecoilShotIndexRecoveryTimeFactor.Set(nil)
}

// UnsetRecoilShotIndexRecoveryTimeFactor ensures that no value is present for RecoilShotIndexRecoveryTimeFactor, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetRecoilShotIndexRecoveryTimeFactor() {
	o.RecoilShotIndexRecoveryTimeFactor.Unset()
}

// GetRecoilSpeed returns the RecoilSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetRecoilSpeed() float32 {
	if o == nil || IsNil(o.RecoilSpeed.Get()) {
		var ret float32
		return ret
	}
	return *o.RecoilSpeed.Get()
}

// GetRecoilSpeedOk returns a tuple with the RecoilSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetRecoilSpeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoilSpeed.Get(), o.RecoilSpeed.IsSet()
}

// HasRecoilSpeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasRecoilSpeed() bool {
	if o != nil && o.RecoilSpeed.IsSet() {
		return true
	}

	return false
}

// SetRecoilSpeed gets a reference to the given NullableFloat32 and assigns it to the RecoilSpeed field.
func (o *RawWeaponInfoV2) SetRecoilSpeed(v float32) {
	o.RecoilSpeed.Set(&v)
}
// SetRecoilSpeedNil sets the value for RecoilSpeed to be an explicit nil
func (o *RawWeaponInfoV2) SetRecoilSpeedNil() {
	o.RecoilSpeed.Set(nil)
}

// UnsetRecoilSpeed ensures that no value is present for RecoilSpeed, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetRecoilSpeed() {
	o.RecoilSpeed.Unset()
}

// GetReloadMoveSpeed returns the ReloadMoveSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetReloadMoveSpeed() float32 {
	if o == nil || IsNil(o.ReloadMoveSpeed.Get()) {
		var ret float32
		return ret
	}
	return *o.ReloadMoveSpeed.Get()
}

// GetReloadMoveSpeedOk returns a tuple with the ReloadMoveSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetReloadMoveSpeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReloadMoveSpeed.Get(), o.ReloadMoveSpeed.IsSet()
}

// HasReloadMoveSpeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasReloadMoveSpeed() bool {
	if o != nil && o.ReloadMoveSpeed.IsSet() {
		return true
	}

	return false
}

// SetReloadMoveSpeed gets a reference to the given NullableFloat32 and assigns it to the ReloadMoveSpeed field.
func (o *RawWeaponInfoV2) SetReloadMoveSpeed(v float32) {
	o.ReloadMoveSpeed.Set(&v)
}
// SetReloadMoveSpeedNil sets the value for ReloadMoveSpeed to be an explicit nil
func (o *RawWeaponInfoV2) SetReloadMoveSpeedNil() {
	o.ReloadMoveSpeed.Set(nil)
}

// UnsetReloadMoveSpeed ensures that no value is present for ReloadMoveSpeed, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetReloadMoveSpeed() {
	o.ReloadMoveSpeed.Unset()
}

// GetScatterYawScale returns the ScatterYawScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetScatterYawScale() float32 {
	if o == nil || IsNil(o.ScatterYawScale.Get()) {
		var ret float32
		return ret
	}
	return *o.ScatterYawScale.Get()
}

// GetScatterYawScaleOk returns a tuple with the ScatterYawScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetScatterYawScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScatterYawScale.Get(), o.ScatterYawScale.IsSet()
}

// HasScatterYawScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasScatterYawScale() bool {
	if o != nil && o.ScatterYawScale.IsSet() {
		return true
	}

	return false
}

// SetScatterYawScale gets a reference to the given NullableFloat32 and assigns it to the ScatterYawScale field.
func (o *RawWeaponInfoV2) SetScatterYawScale(v float32) {
	o.ScatterYawScale.Set(&v)
}
// SetScatterYawScaleNil sets the value for ScatterYawScale to be an explicit nil
func (o *RawWeaponInfoV2) SetScatterYawScaleNil() {
	o.ScatterYawScale.Set(nil)
}

// UnsetScatterYawScale ensures that no value is present for ScatterYawScale, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetScatterYawScale() {
	o.ScatterYawScale.Unset()
}

// GetAimingShotSpreadPenalty returns the AimingShotSpreadPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetAimingShotSpreadPenalty() AimingShotSpreadPenalty {
	if o == nil || IsNil(o.AimingShotSpreadPenalty.Get()) {
		var ret AimingShotSpreadPenalty
		return ret
	}
	return *o.AimingShotSpreadPenalty.Get()
}

// GetAimingShotSpreadPenaltyOk returns a tuple with the AimingShotSpreadPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetAimingShotSpreadPenaltyOk() (*AimingShotSpreadPenalty, bool) {
	if o == nil {
		return nil, false
	}
	return o.AimingShotSpreadPenalty.Get(), o.AimingShotSpreadPenalty.IsSet()
}

// HasAimingShotSpreadPenalty returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasAimingShotSpreadPenalty() bool {
	if o != nil && o.AimingShotSpreadPenalty.IsSet() {
		return true
	}

	return false
}

// SetAimingShotSpreadPenalty gets a reference to the given NullableAimingShotSpreadPenalty and assigns it to the AimingShotSpreadPenalty field.
func (o *RawWeaponInfoV2) SetAimingShotSpreadPenalty(v AimingShotSpreadPenalty) {
	o.AimingShotSpreadPenalty.Set(&v)
}
// SetAimingShotSpreadPenaltyNil sets the value for AimingShotSpreadPenalty to be an explicit nil
func (o *RawWeaponInfoV2) SetAimingShotSpreadPenaltyNil() {
	o.AimingShotSpreadPenalty.Set(nil)
}

// UnsetAimingShotSpreadPenalty ensures that no value is present for AimingShotSpreadPenalty, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetAimingShotSpreadPenalty() {
	o.AimingShotSpreadPenalty.Unset()
}

// GetStandingShotSpreadPenalty returns the StandingShotSpreadPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetStandingShotSpreadPenalty() StandingShotSpreadPenalty {
	if o == nil || IsNil(o.StandingShotSpreadPenalty.Get()) {
		var ret StandingShotSpreadPenalty
		return ret
	}
	return *o.StandingShotSpreadPenalty.Get()
}

// GetStandingShotSpreadPenaltyOk returns a tuple with the StandingShotSpreadPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetStandingShotSpreadPenaltyOk() (*StandingShotSpreadPenalty, bool) {
	if o == nil {
		return nil, false
	}
	return o.StandingShotSpreadPenalty.Get(), o.StandingShotSpreadPenalty.IsSet()
}

// HasStandingShotSpreadPenalty returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasStandingShotSpreadPenalty() bool {
	if o != nil && o.StandingShotSpreadPenalty.IsSet() {
		return true
	}

	return false
}

// SetStandingShotSpreadPenalty gets a reference to the given NullableStandingShotSpreadPenalty and assigns it to the StandingShotSpreadPenalty field.
func (o *RawWeaponInfoV2) SetStandingShotSpreadPenalty(v StandingShotSpreadPenalty) {
	o.StandingShotSpreadPenalty.Set(&v)
}
// SetStandingShotSpreadPenaltyNil sets the value for StandingShotSpreadPenalty to be an explicit nil
func (o *RawWeaponInfoV2) SetStandingShotSpreadPenaltyNil() {
	o.StandingShotSpreadPenalty.Set(nil)
}

// UnsetStandingShotSpreadPenalty ensures that no value is present for StandingShotSpreadPenalty, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetStandingShotSpreadPenalty() {
	o.StandingShotSpreadPenalty.Unset()
}

// GetShootMoveSpeedPercent returns the ShootMoveSpeedPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetShootMoveSpeedPercent() float32 {
	if o == nil || IsNil(o.ShootMoveSpeedPercent.Get()) {
		var ret float32
		return ret
	}
	return *o.ShootMoveSpeedPercent.Get()
}

// GetShootMoveSpeedPercentOk returns a tuple with the ShootMoveSpeedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetShootMoveSpeedPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShootMoveSpeedPercent.Get(), o.ShootMoveSpeedPercent.IsSet()
}

// HasShootMoveSpeedPercent returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasShootMoveSpeedPercent() bool {
	if o != nil && o.ShootMoveSpeedPercent.IsSet() {
		return true
	}

	return false
}

// SetShootMoveSpeedPercent gets a reference to the given NullableFloat32 and assigns it to the ShootMoveSpeedPercent field.
func (o *RawWeaponInfoV2) SetShootMoveSpeedPercent(v float32) {
	o.ShootMoveSpeedPercent.Set(&v)
}
// SetShootMoveSpeedPercentNil sets the value for ShootMoveSpeedPercent to be an explicit nil
func (o *RawWeaponInfoV2) SetShootMoveSpeedPercentNil() {
	o.ShootMoveSpeedPercent.Set(nil)
}

// UnsetShootMoveSpeedPercent ensures that no value is present for ShootMoveSpeedPercent, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetShootMoveSpeedPercent() {
	o.ShootMoveSpeedPercent.Unset()
}

// GetShootSpreadPenaltyDecay returns the ShootSpreadPenaltyDecay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetShootSpreadPenaltyDecay() float32 {
	if o == nil || IsNil(o.ShootSpreadPenaltyDecay.Get()) {
		var ret float32
		return ret
	}
	return *o.ShootSpreadPenaltyDecay.Get()
}

// GetShootSpreadPenaltyDecayOk returns a tuple with the ShootSpreadPenaltyDecay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetShootSpreadPenaltyDecayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShootSpreadPenaltyDecay.Get(), o.ShootSpreadPenaltyDecay.IsSet()
}

// HasShootSpreadPenaltyDecay returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasShootSpreadPenaltyDecay() bool {
	if o != nil && o.ShootSpreadPenaltyDecay.IsSet() {
		return true
	}

	return false
}

// SetShootSpreadPenaltyDecay gets a reference to the given NullableFloat32 and assigns it to the ShootSpreadPenaltyDecay field.
func (o *RawWeaponInfoV2) SetShootSpreadPenaltyDecay(v float32) {
	o.ShootSpreadPenaltyDecay.Set(&v)
}
// SetShootSpreadPenaltyDecayNil sets the value for ShootSpreadPenaltyDecay to be an explicit nil
func (o *RawWeaponInfoV2) SetShootSpreadPenaltyDecayNil() {
	o.ShootSpreadPenaltyDecay.Set(nil)
}

// UnsetShootSpreadPenaltyDecay ensures that no value is present for ShootSpreadPenaltyDecay, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetShootSpreadPenaltyDecay() {
	o.ShootSpreadPenaltyDecay.Unset()
}

// GetShootSpreadPenaltyDecayDelay returns the ShootSpreadPenaltyDecayDelay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetShootSpreadPenaltyDecayDelay() float32 {
	if o == nil || IsNil(o.ShootSpreadPenaltyDecayDelay.Get()) {
		var ret float32
		return ret
	}
	return *o.ShootSpreadPenaltyDecayDelay.Get()
}

// GetShootSpreadPenaltyDecayDelayOk returns a tuple with the ShootSpreadPenaltyDecayDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetShootSpreadPenaltyDecayDelayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShootSpreadPenaltyDecayDelay.Get(), o.ShootSpreadPenaltyDecayDelay.IsSet()
}

// HasShootSpreadPenaltyDecayDelay returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasShootSpreadPenaltyDecayDelay() bool {
	if o != nil && o.ShootSpreadPenaltyDecayDelay.IsSet() {
		return true
	}

	return false
}

// SetShootSpreadPenaltyDecayDelay gets a reference to the given NullableFloat32 and assigns it to the ShootSpreadPenaltyDecayDelay field.
func (o *RawWeaponInfoV2) SetShootSpreadPenaltyDecayDelay(v float32) {
	o.ShootSpreadPenaltyDecayDelay.Set(&v)
}
// SetShootSpreadPenaltyDecayDelayNil sets the value for ShootSpreadPenaltyDecayDelay to be an explicit nil
func (o *RawWeaponInfoV2) SetShootSpreadPenaltyDecayDelayNil() {
	o.ShootSpreadPenaltyDecayDelay.Set(nil)
}

// UnsetShootSpreadPenaltyDecayDelay ensures that no value is present for ShootSpreadPenaltyDecayDelay, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetShootSpreadPenaltyDecayDelay() {
	o.ShootSpreadPenaltyDecayDelay.Unset()
}

// GetShootSpreadPenaltyPerShot returns the ShootSpreadPenaltyPerShot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetShootSpreadPenaltyPerShot() float32 {
	if o == nil || IsNil(o.ShootSpreadPenaltyPerShot.Get()) {
		var ret float32
		return ret
	}
	return *o.ShootSpreadPenaltyPerShot.Get()
}

// GetShootSpreadPenaltyPerShotOk returns a tuple with the ShootSpreadPenaltyPerShot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetShootSpreadPenaltyPerShotOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShootSpreadPenaltyPerShot.Get(), o.ShootSpreadPenaltyPerShot.IsSet()
}

// HasShootSpreadPenaltyPerShot returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasShootSpreadPenaltyPerShot() bool {
	if o != nil && o.ShootSpreadPenaltyPerShot.IsSet() {
		return true
	}

	return false
}

// SetShootSpreadPenaltyPerShot gets a reference to the given NullableFloat32 and assigns it to the ShootSpreadPenaltyPerShot field.
func (o *RawWeaponInfoV2) SetShootSpreadPenaltyPerShot(v float32) {
	o.ShootSpreadPenaltyPerShot.Set(&v)
}
// SetShootSpreadPenaltyPerShotNil sets the value for ShootSpreadPenaltyPerShot to be an explicit nil
func (o *RawWeaponInfoV2) SetShootSpreadPenaltyPerShotNil() {
	o.ShootSpreadPenaltyPerShot.Set(nil)
}

// UnsetShootSpreadPenaltyPerShot ensures that no value is present for ShootSpreadPenaltyPerShot, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetShootSpreadPenaltyPerShot() {
	o.ShootSpreadPenaltyPerShot.Unset()
}

// GetShootingUpSpreadPenalty returns the ShootingUpSpreadPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetShootingUpSpreadPenalty() float32 {
	if o == nil || IsNil(o.ShootingUpSpreadPenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.ShootingUpSpreadPenalty.Get()
}

// GetShootingUpSpreadPenaltyOk returns a tuple with the ShootingUpSpreadPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetShootingUpSpreadPenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShootingUpSpreadPenalty.Get(), o.ShootingUpSpreadPenalty.IsSet()
}

// HasShootingUpSpreadPenalty returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasShootingUpSpreadPenalty() bool {
	if o != nil && o.ShootingUpSpreadPenalty.IsSet() {
		return true
	}

	return false
}

// SetShootingUpSpreadPenalty gets a reference to the given NullableFloat32 and assigns it to the ShootingUpSpreadPenalty field.
func (o *RawWeaponInfoV2) SetShootingUpSpreadPenalty(v float32) {
	o.ShootingUpSpreadPenalty.Set(&v)
}
// SetShootingUpSpreadPenaltyNil sets the value for ShootingUpSpreadPenalty to be an explicit nil
func (o *RawWeaponInfoV2) SetShootingUpSpreadPenaltyNil() {
	o.ShootingUpSpreadPenalty.Set(nil)
}

// UnsetShootingUpSpreadPenalty ensures that no value is present for ShootingUpSpreadPenalty, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetShootingUpSpreadPenalty() {
	o.ShootingUpSpreadPenalty.Unset()
}

// GetVerticalPunch returns the VerticalPunch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetVerticalPunch() float32 {
	if o == nil || IsNil(o.VerticalPunch.Get()) {
		var ret float32
		return ret
	}
	return *o.VerticalPunch.Get()
}

// GetVerticalPunchOk returns a tuple with the VerticalPunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetVerticalPunchOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerticalPunch.Get(), o.VerticalPunch.IsSet()
}

// HasVerticalPunch returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasVerticalPunch() bool {
	if o != nil && o.VerticalPunch.IsSet() {
		return true
	}

	return false
}

// SetVerticalPunch gets a reference to the given NullableFloat32 and assigns it to the VerticalPunch field.
func (o *RawWeaponInfoV2) SetVerticalPunch(v float32) {
	o.VerticalPunch.Set(&v)
}
// SetVerticalPunchNil sets the value for VerticalPunch to be an explicit nil
func (o *RawWeaponInfoV2) SetVerticalPunchNil() {
	o.VerticalPunch.Set(nil)
}

// UnsetVerticalPunch ensures that no value is present for VerticalPunch, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetVerticalPunch() {
	o.VerticalPunch.Unset()
}

// GetZoomFov returns the ZoomFov field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetZoomFov() float32 {
	if o == nil || IsNil(o.ZoomFov.Get()) {
		var ret float32
		return ret
	}
	return *o.ZoomFov.Get()
}

// GetZoomFovOk returns a tuple with the ZoomFov field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetZoomFovOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoomFov.Get(), o.ZoomFov.IsSet()
}

// HasZoomFov returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasZoomFov() bool {
	if o != nil && o.ZoomFov.IsSet() {
		return true
	}

	return false
}

// SetZoomFov gets a reference to the given NullableFloat32 and assigns it to the ZoomFov field.
func (o *RawWeaponInfoV2) SetZoomFov(v float32) {
	o.ZoomFov.Set(&v)
}
// SetZoomFovNil sets the value for ZoomFov to be an explicit nil
func (o *RawWeaponInfoV2) SetZoomFovNil() {
	o.ZoomFov.Set(nil)
}

// UnsetZoomFov ensures that no value is present for ZoomFov, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetZoomFov() {
	o.ZoomFov.Unset()
}

// GetZoomMoveSpeedPercent returns the ZoomMoveSpeedPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetZoomMoveSpeedPercent() float32 {
	if o == nil || IsNil(o.ZoomMoveSpeedPercent.Get()) {
		var ret float32
		return ret
	}
	return *o.ZoomMoveSpeedPercent.Get()
}

// GetZoomMoveSpeedPercentOk returns a tuple with the ZoomMoveSpeedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetZoomMoveSpeedPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoomMoveSpeedPercent.Get(), o.ZoomMoveSpeedPercent.IsSet()
}

// HasZoomMoveSpeedPercent returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasZoomMoveSpeedPercent() bool {
	if o != nil && o.ZoomMoveSpeedPercent.IsSet() {
		return true
	}

	return false
}

// SetZoomMoveSpeedPercent gets a reference to the given NullableFloat32 and assigns it to the ZoomMoveSpeedPercent field.
func (o *RawWeaponInfoV2) SetZoomMoveSpeedPercent(v float32) {
	o.ZoomMoveSpeedPercent.Set(&v)
}
// SetZoomMoveSpeedPercentNil sets the value for ZoomMoveSpeedPercent to be an explicit nil
func (o *RawWeaponInfoV2) SetZoomMoveSpeedPercentNil() {
	o.ZoomMoveSpeedPercent.Set(nil)
}

// UnsetZoomMoveSpeedPercent ensures that no value is present for ZoomMoveSpeedPercent, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetZoomMoveSpeedPercent() {
	o.ZoomMoveSpeedPercent.Unset()
}

// GetBullets returns the Bullets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBullets() int32 {
	if o == nil || IsNil(o.Bullets.Get()) {
		var ret int32
		return ret
	}
	return *o.Bullets.Get()
}

// GetBulletsOk returns a tuple with the Bullets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bullets.Get(), o.Bullets.IsSet()
}

// HasBullets returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBullets() bool {
	if o != nil && o.Bullets.IsSet() {
		return true
	}

	return false
}

// SetBullets gets a reference to the given NullableInt32 and assigns it to the Bullets field.
func (o *RawWeaponInfoV2) SetBullets(v int32) {
	o.Bullets.Set(&v)
}
// SetBulletsNil sets the value for Bullets to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletsNil() {
	o.Bullets.Set(nil)
}

// UnsetBullets ensures that no value is present for Bullets, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBullets() {
	o.Bullets.Unset()
}

// GetBurstShotCount returns the BurstShotCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBurstShotCount() int32 {
	if o == nil || IsNil(o.BurstShotCount.Get()) {
		var ret int32
		return ret
	}
	return *o.BurstShotCount.Get()
}

// GetBurstShotCountOk returns a tuple with the BurstShotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBurstShotCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstShotCount.Get(), o.BurstShotCount.IsSet()
}

// HasBurstShotCount returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBurstShotCount() bool {
	if o != nil && o.BurstShotCount.IsSet() {
		return true
	}

	return false
}

// SetBurstShotCount gets a reference to the given NullableInt32 and assigns it to the BurstShotCount field.
func (o *RawWeaponInfoV2) SetBurstShotCount(v int32) {
	o.BurstShotCount.Set(&v)
}
// SetBurstShotCountNil sets the value for BurstShotCount to be an explicit nil
func (o *RawWeaponInfoV2) SetBurstShotCountNil() {
	o.BurstShotCount.Set(nil)
}

// UnsetBurstShotCount ensures that no value is present for BurstShotCount, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBurstShotCount() {
	o.BurstShotCount.Unset()
}

// GetClipSize returns the ClipSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetClipSize() int32 {
	if o == nil || IsNil(o.ClipSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ClipSize.Get()
}

// GetClipSizeOk returns a tuple with the ClipSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetClipSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClipSize.Get(), o.ClipSize.IsSet()
}

// HasClipSize returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasClipSize() bool {
	if o != nil && o.ClipSize.IsSet() {
		return true
	}

	return false
}

// SetClipSize gets a reference to the given NullableInt32 and assigns it to the ClipSize field.
func (o *RawWeaponInfoV2) SetClipSize(v int32) {
	o.ClipSize.Set(&v)
}
// SetClipSizeNil sets the value for ClipSize to be an explicit nil
func (o *RawWeaponInfoV2) SetClipSizeNil() {
	o.ClipSize.Set(nil)
}

// UnsetClipSize ensures that no value is present for ClipSize, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetClipSize() {
	o.ClipSize.Unset()
}

// GetSpread returns the Spread field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetSpread() float32 {
	if o == nil || IsNil(o.Spread.Get()) {
		var ret float32
		return ret
	}
	return *o.Spread.Get()
}

// GetSpreadOk returns a tuple with the Spread field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetSpreadOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spread.Get(), o.Spread.IsSet()
}

// HasSpread returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasSpread() bool {
	if o != nil && o.Spread.IsSet() {
		return true
	}

	return false
}

// SetSpread gets a reference to the given NullableFloat32 and assigns it to the Spread field.
func (o *RawWeaponInfoV2) SetSpread(v float32) {
	o.Spread.Set(&v)
}
// SetSpreadNil sets the value for Spread to be an explicit nil
func (o *RawWeaponInfoV2) SetSpreadNil() {
	o.Spread.Set(nil)
}

// UnsetSpread ensures that no value is present for Spread, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetSpread() {
	o.Spread.Unset()
}

// GetStandingSpread returns the StandingSpread field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetStandingSpread() float32 {
	if o == nil || IsNil(o.StandingSpread.Get()) {
		var ret float32
		return ret
	}
	return *o.StandingSpread.Get()
}

// GetStandingSpreadOk returns a tuple with the StandingSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetStandingSpreadOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StandingSpread.Get(), o.StandingSpread.IsSet()
}

// HasStandingSpread returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasStandingSpread() bool {
	if o != nil && o.StandingSpread.IsSet() {
		return true
	}

	return false
}

// SetStandingSpread gets a reference to the given NullableFloat32 and assigns it to the StandingSpread field.
func (o *RawWeaponInfoV2) SetStandingSpread(v float32) {
	o.StandingSpread.Set(&v)
}
// SetStandingSpreadNil sets the value for StandingSpread to be an explicit nil
func (o *RawWeaponInfoV2) SetStandingSpreadNil() {
	o.StandingSpread.Set(nil)
}

// UnsetStandingSpread ensures that no value is present for StandingSpread, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetStandingSpread() {
	o.StandingSpread.Unset()
}

// GetLowAmmoIndicatorThreshold returns the LowAmmoIndicatorThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetLowAmmoIndicatorThreshold() float32 {
	if o == nil || IsNil(o.LowAmmoIndicatorThreshold.Get()) {
		var ret float32
		return ret
	}
	return *o.LowAmmoIndicatorThreshold.Get()
}

// GetLowAmmoIndicatorThresholdOk returns a tuple with the LowAmmoIndicatorThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetLowAmmoIndicatorThresholdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LowAmmoIndicatorThreshold.Get(), o.LowAmmoIndicatorThreshold.IsSet()
}

// HasLowAmmoIndicatorThreshold returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasLowAmmoIndicatorThreshold() bool {
	if o != nil && o.LowAmmoIndicatorThreshold.IsSet() {
		return true
	}

	return false
}

// SetLowAmmoIndicatorThreshold gets a reference to the given NullableFloat32 and assigns it to the LowAmmoIndicatorThreshold field.
func (o *RawWeaponInfoV2) SetLowAmmoIndicatorThreshold(v float32) {
	o.LowAmmoIndicatorThreshold.Set(&v)
}
// SetLowAmmoIndicatorThresholdNil sets the value for LowAmmoIndicatorThreshold to be an explicit nil
func (o *RawWeaponInfoV2) SetLowAmmoIndicatorThresholdNil() {
	o.LowAmmoIndicatorThreshold.Set(nil)
}

// UnsetLowAmmoIndicatorThreshold ensures that no value is present for LowAmmoIndicatorThreshold, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetLowAmmoIndicatorThreshold() {
	o.LowAmmoIndicatorThreshold.Unset()
}

// GetRecoilSeed returns the RecoilSeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetRecoilSeed() float32 {
	if o == nil || IsNil(o.RecoilSeed.Get()) {
		var ret float32
		return ret
	}
	return *o.RecoilSeed.Get()
}

// GetRecoilSeedOk returns a tuple with the RecoilSeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetRecoilSeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoilSeed.Get(), o.RecoilSeed.IsSet()
}

// HasRecoilSeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasRecoilSeed() bool {
	if o != nil && o.RecoilSeed.IsSet() {
		return true
	}

	return false
}

// SetRecoilSeed gets a reference to the given NullableFloat32 and assigns it to the RecoilSeed field.
func (o *RawWeaponInfoV2) SetRecoilSeed(v float32) {
	o.RecoilSeed.Set(&v)
}
// SetRecoilSeedNil sets the value for RecoilSeed to be an explicit nil
func (o *RawWeaponInfoV2) SetRecoilSeedNil() {
	o.RecoilSeed.Set(nil)
}

// UnsetRecoilSeed ensures that no value is present for RecoilSeed, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetRecoilSeed() {
	o.RecoilSeed.Unset()
}

// GetReloadDuration returns the ReloadDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetReloadDuration() float32 {
	if o == nil || IsNil(o.ReloadDuration.Get()) {
		var ret float32
		return ret
	}
	return *o.ReloadDuration.Get()
}

// GetReloadDurationOk returns a tuple with the ReloadDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetReloadDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReloadDuration.Get(), o.ReloadDuration.IsSet()
}

// HasReloadDuration returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasReloadDuration() bool {
	if o != nil && o.ReloadDuration.IsSet() {
		return true
	}

	return false
}

// SetReloadDuration gets a reference to the given NullableFloat32 and assigns it to the ReloadDuration field.
func (o *RawWeaponInfoV2) SetReloadDuration(v float32) {
	o.ReloadDuration.Set(&v)
}
// SetReloadDurationNil sets the value for ReloadDuration to be an explicit nil
func (o *RawWeaponInfoV2) SetReloadDurationNil() {
	o.ReloadDuration.Set(nil)
}

// UnsetReloadDuration ensures that no value is present for ReloadDuration, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetReloadDuration() {
	o.ReloadDuration.Unset()
}

// GetBulletSpeedCurve returns the BulletSpeedCurve field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetBulletSpeedCurve() RawItemWeaponInfoBulletSpeedCurveV2 {
	if o == nil || IsNil(o.BulletSpeedCurve.Get()) {
		var ret RawItemWeaponInfoBulletSpeedCurveV2
		return ret
	}
	return *o.BulletSpeedCurve.Get()
}

// GetBulletSpeedCurveOk returns a tuple with the BulletSpeedCurve field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetBulletSpeedCurveOk() (*RawItemWeaponInfoBulletSpeedCurveV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.BulletSpeedCurve.Get(), o.BulletSpeedCurve.IsSet()
}

// HasBulletSpeedCurve returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasBulletSpeedCurve() bool {
	if o != nil && o.BulletSpeedCurve.IsSet() {
		return true
	}

	return false
}

// SetBulletSpeedCurve gets a reference to the given NullableRawItemWeaponInfoBulletSpeedCurveV2 and assigns it to the BulletSpeedCurve field.
func (o *RawWeaponInfoV2) SetBulletSpeedCurve(v RawItemWeaponInfoBulletSpeedCurveV2) {
	o.BulletSpeedCurve.Set(&v)
}
// SetBulletSpeedCurveNil sets the value for BulletSpeedCurve to be an explicit nil
func (o *RawWeaponInfoV2) SetBulletSpeedCurveNil() {
	o.BulletSpeedCurve.Set(nil)
}

// UnsetBulletSpeedCurve ensures that no value is present for BulletSpeedCurve, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetBulletSpeedCurve() {
	o.BulletSpeedCurve.Unset()
}

// GetHorizontalRecoil returns the HorizontalRecoil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetHorizontalRecoil() RawWeaponInfoHorizontalRecoilV2 {
	if o == nil || IsNil(o.HorizontalRecoil.Get()) {
		var ret RawWeaponInfoHorizontalRecoilV2
		return ret
	}
	return *o.HorizontalRecoil.Get()
}

// GetHorizontalRecoilOk returns a tuple with the HorizontalRecoil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetHorizontalRecoilOk() (*RawWeaponInfoHorizontalRecoilV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.HorizontalRecoil.Get(), o.HorizontalRecoil.IsSet()
}

// HasHorizontalRecoil returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasHorizontalRecoil() bool {
	if o != nil && o.HorizontalRecoil.IsSet() {
		return true
	}

	return false
}

// SetHorizontalRecoil gets a reference to the given NullableRawWeaponInfoHorizontalRecoilV2 and assigns it to the HorizontalRecoil field.
func (o *RawWeaponInfoV2) SetHorizontalRecoil(v RawWeaponInfoHorizontalRecoilV2) {
	o.HorizontalRecoil.Set(&v)
}
// SetHorizontalRecoilNil sets the value for HorizontalRecoil to be an explicit nil
func (o *RawWeaponInfoV2) SetHorizontalRecoilNil() {
	o.HorizontalRecoil.Set(nil)
}

// UnsetHorizontalRecoil ensures that no value is present for HorizontalRecoil, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetHorizontalRecoil() {
	o.HorizontalRecoil.Unset()
}

// GetVerticalRecoil returns the VerticalRecoil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2) GetVerticalRecoil() RawWeaponInfoVerticalRecoilV2 {
	if o == nil || IsNil(o.VerticalRecoil.Get()) {
		var ret RawWeaponInfoVerticalRecoilV2
		return ret
	}
	return *o.VerticalRecoil.Get()
}

// GetVerticalRecoilOk returns a tuple with the VerticalRecoil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2) GetVerticalRecoilOk() (*RawWeaponInfoVerticalRecoilV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerticalRecoil.Get(), o.VerticalRecoil.IsSet()
}

// HasVerticalRecoil returns a boolean if a field has been set.
func (o *RawWeaponInfoV2) HasVerticalRecoil() bool {
	if o != nil && o.VerticalRecoil.IsSet() {
		return true
	}

	return false
}

// SetVerticalRecoil gets a reference to the given NullableRawWeaponInfoVerticalRecoilV2 and assigns it to the VerticalRecoil field.
func (o *RawWeaponInfoV2) SetVerticalRecoil(v RawWeaponInfoVerticalRecoilV2) {
	o.VerticalRecoil.Set(&v)
}
// SetVerticalRecoilNil sets the value for VerticalRecoil to be an explicit nil
func (o *RawWeaponInfoV2) SetVerticalRecoilNil() {
	o.VerticalRecoil.Set(nil)
}

// UnsetVerticalRecoil ensures that no value is present for VerticalRecoil, not even an explicit nil
func (o *RawWeaponInfoV2) UnsetVerticalRecoil() {
	o.VerticalRecoil.Unset()
}

func (o RawWeaponInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawWeaponInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CanZoom.IsSet() {
		toSerialize["can_zoom"] = o.CanZoom.Get()
	}
	if o.BulletDamage.IsSet() {
		toSerialize["bullet_damage"] = o.BulletDamage.Get()
	}
	if o.BulletGravityScale.IsSet() {
		toSerialize["bullet_gravity_scale"] = o.BulletGravityScale.Get()
	}
	if o.BulletInheritShooterVelocityScale.IsSet() {
		toSerialize["bullet_inherit_shooter_velocity_scale"] = o.BulletInheritShooterVelocityScale.Get()
	}
	if o.BulletLifetime.IsSet() {
		toSerialize["bullet_lifetime"] = o.BulletLifetime.Get()
	}
	if o.BulletRadius.IsSet() {
		toSerialize["bullet_radius"] = o.BulletRadius.Get()
	}
	if o.BulletRadiusVsWorld.IsSet() {
		toSerialize["bullet_radius_vs_world"] = o.BulletRadiusVsWorld.Get()
	}
	if o.BulletReflectAmount.IsSet() {
		toSerialize["bullet_reflect_amount"] = o.BulletReflectAmount.Get()
	}
	if o.BulletReflectScale.IsSet() {
		toSerialize["bullet_reflect_scale"] = o.BulletReflectScale.Get()
	}
	if o.BulletWhizDistance.IsSet() {
		toSerialize["bullet_whiz_distance"] = o.BulletWhizDistance.Get()
	}
	if o.BurstShotCooldown.IsSet() {
		toSerialize["burst_shot_cooldown"] = o.BurstShotCooldown.Get()
	}
	if o.CritBonusAgainstNpcs.IsSet() {
		toSerialize["crit_bonus_against_npcs"] = o.CritBonusAgainstNpcs.Get()
	}
	if o.CritBonusEnd.IsSet() {
		toSerialize["crit_bonus_end"] = o.CritBonusEnd.Get()
	}
	if o.CritBonusEndRange.IsSet() {
		toSerialize["crit_bonus_end_range"] = o.CritBonusEndRange.Get()
	}
	if o.CritBonusStart.IsSet() {
		toSerialize["crit_bonus_start"] = o.CritBonusStart.Get()
	}
	if o.CritBonusStartRange.IsSet() {
		toSerialize["crit_bonus_start_range"] = o.CritBonusStartRange.Get()
	}
	if o.CycleTime.IsSet() {
		toSerialize["cycle_time"] = o.CycleTime.Get()
	}
	if o.IntraBurstCycleTime.IsSet() {
		toSerialize["intra_burst_cycle_time"] = o.IntraBurstCycleTime.Get()
	}
	if o.MaxSpinCycleTime.IsSet() {
		toSerialize["max_spin_cycle_time"] = o.MaxSpinCycleTime.Get()
	}
	if o.DamageFalloffBias.IsSet() {
		toSerialize["damage_falloff_bias"] = o.DamageFalloffBias.Get()
	}
	if o.DamageFalloffEndRange.IsSet() {
		toSerialize["damage_falloff_end_range"] = o.DamageFalloffEndRange.Get()
	}
	if o.DamageFalloffEndScale.IsSet() {
		toSerialize["damage_falloff_end_scale"] = o.DamageFalloffEndScale.Get()
	}
	if o.DamageFalloffStartRange.IsSet() {
		toSerialize["damage_falloff_start_range"] = o.DamageFalloffStartRange.Get()
	}
	if o.DamageFalloffStartScale.IsSet() {
		toSerialize["damage_falloff_start_scale"] = o.DamageFalloffStartScale.Get()
	}
	if o.HorizontalPunch.IsSet() {
		toSerialize["horizontal_punch"] = o.HorizontalPunch.Get()
	}
	if o.Range.IsSet() {
		toSerialize["range"] = o.Range.Get()
	}
	if o.RecoilRecoveryDelayFactor.IsSet() {
		toSerialize["recoil_recovery_delay_factor"] = o.RecoilRecoveryDelayFactor.Get()
	}
	if o.RecoilRecoverySpeed.IsSet() {
		toSerialize["recoil_recovery_speed"] = o.RecoilRecoverySpeed.Get()
	}
	if o.RecoilShotIndexRecoveryTimeFactor.IsSet() {
		toSerialize["recoil_shot_index_recovery_time_factor"] = o.RecoilShotIndexRecoveryTimeFactor.Get()
	}
	if o.RecoilSpeed.IsSet() {
		toSerialize["recoil_speed"] = o.RecoilSpeed.Get()
	}
	if o.ReloadMoveSpeed.IsSet() {
		toSerialize["reload_move_speed"] = o.ReloadMoveSpeed.Get()
	}
	if o.ScatterYawScale.IsSet() {
		toSerialize["scatter_yaw_scale"] = o.ScatterYawScale.Get()
	}
	if o.AimingShotSpreadPenalty.IsSet() {
		toSerialize["aiming_shot_spread_penalty"] = o.AimingShotSpreadPenalty.Get()
	}
	if o.StandingShotSpreadPenalty.IsSet() {
		toSerialize["standing_shot_spread_penalty"] = o.StandingShotSpreadPenalty.Get()
	}
	if o.ShootMoveSpeedPercent.IsSet() {
		toSerialize["shoot_move_speed_percent"] = o.ShootMoveSpeedPercent.Get()
	}
	if o.ShootSpreadPenaltyDecay.IsSet() {
		toSerialize["shoot_spread_penalty_decay"] = o.ShootSpreadPenaltyDecay.Get()
	}
	if o.ShootSpreadPenaltyDecayDelay.IsSet() {
		toSerialize["shoot_spread_penalty_decay_delay"] = o.ShootSpreadPenaltyDecayDelay.Get()
	}
	if o.ShootSpreadPenaltyPerShot.IsSet() {
		toSerialize["shoot_spread_penalty_per_shot"] = o.ShootSpreadPenaltyPerShot.Get()
	}
	if o.ShootingUpSpreadPenalty.IsSet() {
		toSerialize["shooting_up_spread_penalty"] = o.ShootingUpSpreadPenalty.Get()
	}
	if o.VerticalPunch.IsSet() {
		toSerialize["vertical_punch"] = o.VerticalPunch.Get()
	}
	if o.ZoomFov.IsSet() {
		toSerialize["zoom_fov"] = o.ZoomFov.Get()
	}
	if o.ZoomMoveSpeedPercent.IsSet() {
		toSerialize["zoom_move_speed_percent"] = o.ZoomMoveSpeedPercent.Get()
	}
	if o.Bullets.IsSet() {
		toSerialize["bullets"] = o.Bullets.Get()
	}
	if o.BurstShotCount.IsSet() {
		toSerialize["burst_shot_count"] = o.BurstShotCount.Get()
	}
	if o.ClipSize.IsSet() {
		toSerialize["clip_size"] = o.ClipSize.Get()
	}
	if o.Spread.IsSet() {
		toSerialize["spread"] = o.Spread.Get()
	}
	if o.StandingSpread.IsSet() {
		toSerialize["standing_spread"] = o.StandingSpread.Get()
	}
	if o.LowAmmoIndicatorThreshold.IsSet() {
		toSerialize["low_ammo_indicator_threshold"] = o.LowAmmoIndicatorThreshold.Get()
	}
	if o.RecoilSeed.IsSet() {
		toSerialize["recoil_seed"] = o.RecoilSeed.Get()
	}
	if o.ReloadDuration.IsSet() {
		toSerialize["reload_duration"] = o.ReloadDuration.Get()
	}
	if o.BulletSpeedCurve.IsSet() {
		toSerialize["bullet_speed_curve"] = o.BulletSpeedCurve.Get()
	}
	if o.HorizontalRecoil.IsSet() {
		toSerialize["horizontal_recoil"] = o.HorizontalRecoil.Get()
	}
	if o.VerticalRecoil.IsSet() {
		toSerialize["vertical_recoil"] = o.VerticalRecoil.Get()
	}
	return toSerialize, nil
}

type NullableRawWeaponInfoV2 struct {
	value *RawWeaponInfoV2
	isSet bool
}

func (v NullableRawWeaponInfoV2) Get() *RawWeaponInfoV2 {
	return v.value
}

func (v *NullableRawWeaponInfoV2) Set(val *RawWeaponInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableRawWeaponInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableRawWeaponInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawWeaponInfoV2(val *RawWeaponInfoV2) *NullableRawWeaponInfoV2 {
	return &NullableRawWeaponInfoV2{value: val, isSet: true}
}

func (v NullableRawWeaponInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawWeaponInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


