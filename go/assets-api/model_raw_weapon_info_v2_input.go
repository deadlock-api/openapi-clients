/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawWeaponInfoV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawWeaponInfoV2Input{}

// RawWeaponInfoV2Input struct for RawWeaponInfoV2Input
type RawWeaponInfoV2Input struct {
	MBCanZoom NullableBool `json:"m_bCanZoom,omitempty"`
	MFlBulletDamage NullableFloat32 `json:"m_flBulletDamage,omitempty"`
	MFlBulletGravityScale NullableFloat32 `json:"m_flBulletGravityScale,omitempty"`
	MFlBulletInheritShooterVelocityScale NullableFloat32 `json:"m_flBulletInheritShooterVelocityScale,omitempty"`
	MFlBulletLifetime NullableFloat32 `json:"m_flBulletLifetime,omitempty"`
	MFlBulletRadius NullableFloat32 `json:"m_flBulletRadius,omitempty"`
	MFlBulletRadiusVsWorld NullableFloat32 `json:"m_flBulletRadiusVsWorld,omitempty"`
	MFlBulletReflectAmount NullableFloat32 `json:"m_flBulletReflectAmount,omitempty"`
	MFlBulletReflectScale NullableFloat32 `json:"m_flBulletReflectScale,omitempty"`
	MFlBulletWhizDistance NullableFloat32 `json:"m_flBulletWhizDistance,omitempty"`
	MFlBurstShotCooldown NullableFloat32 `json:"m_flBurstShotCooldown,omitempty"`
	MFlCritBonusAgainstNpcs NullableFloat32 `json:"m_flCritBonusAgainstNpcs,omitempty"`
	MFlCritBonusEnd NullableFloat32 `json:"m_flCritBonusEnd,omitempty"`
	MFlCritBonusEndRange NullableFloat32 `json:"m_flCritBonusEndRange,omitempty"`
	MFlCritBonusStart NullableFloat32 `json:"m_flCritBonusStart,omitempty"`
	MFlCritBonusStartRange NullableFloat32 `json:"m_flCritBonusStartRange,omitempty"`
	MFlCycleTime NullableFloat32 `json:"m_flCycleTime,omitempty"`
	MFlIntraBurstCycleTime NullableFloat32 `json:"m_flIntraBurstCycleTime,omitempty"`
	MFlMaxSpinCycleTime NullableFloat32 `json:"m_flMaxSpinCycleTime,omitempty"`
	MFlDamageFalloffBias NullableFloat32 `json:"m_flDamageFalloffBias,omitempty"`
	MFlDamageFalloffEndRange NullableFloat32 `json:"m_flDamageFalloffEndRange,omitempty"`
	MFlDamageFalloffEndScale NullableFloat32 `json:"m_flDamageFalloffEndScale,omitempty"`
	MFlDamageFalloffStartRange NullableFloat32 `json:"m_flDamageFalloffStartRange,omitempty"`
	MFlDamageFalloffStartScale NullableFloat32 `json:"m_flDamageFalloffStartScale,omitempty"`
	MFlHorizontalPunch NullableFloat32 `json:"m_flHorizontalPunch,omitempty"`
	MFlRange NullableFloat32 `json:"m_flRange,omitempty"`
	MFlRecoilRecoveryDelayFactor NullableFloat32 `json:"m_flRecoilRecoveryDelayFactor,omitempty"`
	MFlRecoilRecoverySpeed NullableFloat32 `json:"m_flRecoilRecoverySpeed,omitempty"`
	MFlRecoilShotIndexRecoveryTimeFactor NullableFloat32 `json:"m_flRecoilShotIndexRecoveryTimeFactor,omitempty"`
	MFlRecoilSpeed NullableFloat32 `json:"m_flRecoilSpeed,omitempty"`
	MFlReloadMoveSpeed NullableFloat32 `json:"m_flReloadMoveSpeed,omitempty"`
	MFlScatterYawScale NullableFloat32 `json:"m_flScatterYawScale,omitempty"`
	MAimingShootSpreadPenalty NullableMAimingshootspreadpenalty `json:"m_AimingShootSpreadPenalty,omitempty"`
	MStandingShootSpreadPenalty NullableMStandingshootspreadpenalty `json:"m_StandingShootSpreadPenalty,omitempty"`
	MFlShootMoveSpeedPercent NullableFloat32 `json:"m_flShootMoveSpeedPercent,omitempty"`
	MFlShootSpreadPenaltyDecay NullableFloat32 `json:"m_flShootSpreadPenaltyDecay,omitempty"`
	MFlShootSpreadPenaltyDecayDelay NullableFloat32 `json:"m_flShootSpreadPenaltyDecayDelay,omitempty"`
	MFlShootSpreadPenaltyPerShot NullableFloat32 `json:"m_flShootSpreadPenaltyPerShot,omitempty"`
	MFlShootingUpSpreadPenalty NullableFloat32 `json:"m_flShootingUpSpreadPenalty,omitempty"`
	MFlVerticalPunch NullableFloat32 `json:"m_flVerticalPunch,omitempty"`
	MFlZoomFov NullableFloat32 `json:"m_flZoomFov,omitempty"`
	MFlZoomMoveSpeedPercent NullableFloat32 `json:"m_flZoomMoveSpeedPercent,omitempty"`
	MIBullets NullableInt32 `json:"m_iBullets,omitempty"`
	MIBurstShotCount NullableInt32 `json:"m_iBurstShotCount,omitempty"`
	MIClipSize NullableInt32 `json:"m_iClipSize,omitempty"`
	MFlSpread NullableFloat32 `json:"m_flSpread,omitempty"`
	MFlStandingSpread NullableFloat32 `json:"m_flStandingSpread,omitempty"`
	MFlLowAmmoIndicatorThreshold NullableFloat32 `json:"m_flLowAmmoIndicatorThreshold,omitempty"`
	MFlRecoilSeed NullableFloat32 `json:"m_flRecoilSeed,omitempty"`
	MFlReloadDuration NullableFloat32 `json:"m_flReloadDuration,omitempty"`
	MBulletSpeedCurve NullableRawItemWeaponInfoBulletSpeedCurveV2Input `json:"m_BulletSpeedCurve,omitempty"`
	MHorizontalRecoil NullableRawWeaponInfoHorizontalRecoilV2Input `json:"m_HorizontalRecoil,omitempty"`
	MVerticalRecoil NullableRawWeaponInfoVerticalRecoilV2Input `json:"m_VerticalRecoil,omitempty"`
}

// NewRawWeaponInfoV2Input instantiates a new RawWeaponInfoV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawWeaponInfoV2Input() *RawWeaponInfoV2Input {
	this := RawWeaponInfoV2Input{}
	return &this
}

// NewRawWeaponInfoV2InputWithDefaults instantiates a new RawWeaponInfoV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawWeaponInfoV2InputWithDefaults() *RawWeaponInfoV2Input {
	this := RawWeaponInfoV2Input{}
	return &this
}

// GetMBCanZoom returns the MBCanZoom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMBCanZoom() bool {
	if o == nil || IsNil(o.MBCanZoom.Get()) {
		var ret bool
		return ret
	}
	return *o.MBCanZoom.Get()
}

// GetMBCanZoomOk returns a tuple with the MBCanZoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMBCanZoomOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MBCanZoom.Get(), o.MBCanZoom.IsSet()
}

// HasMBCanZoom returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMBCanZoom() bool {
	if o != nil && o.MBCanZoom.IsSet() {
		return true
	}

	return false
}

// SetMBCanZoom gets a reference to the given NullableBool and assigns it to the MBCanZoom field.
func (o *RawWeaponInfoV2Input) SetMBCanZoom(v bool) {
	o.MBCanZoom.Set(&v)
}
// SetMBCanZoomNil sets the value for MBCanZoom to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMBCanZoomNil() {
	o.MBCanZoom.Set(nil)
}

// UnsetMBCanZoom ensures that no value is present for MBCanZoom, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMBCanZoom() {
	o.MBCanZoom.Unset()
}

// GetMFlBulletDamage returns the MFlBulletDamage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletDamage() float32 {
	if o == nil || IsNil(o.MFlBulletDamage.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletDamage.Get()
}

// GetMFlBulletDamageOk returns a tuple with the MFlBulletDamage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletDamageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletDamage.Get(), o.MFlBulletDamage.IsSet()
}

// HasMFlBulletDamage returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletDamage() bool {
	if o != nil && o.MFlBulletDamage.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletDamage gets a reference to the given NullableFloat32 and assigns it to the MFlBulletDamage field.
func (o *RawWeaponInfoV2Input) SetMFlBulletDamage(v float32) {
	o.MFlBulletDamage.Set(&v)
}
// SetMFlBulletDamageNil sets the value for MFlBulletDamage to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletDamageNil() {
	o.MFlBulletDamage.Set(nil)
}

// UnsetMFlBulletDamage ensures that no value is present for MFlBulletDamage, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletDamage() {
	o.MFlBulletDamage.Unset()
}

// GetMFlBulletGravityScale returns the MFlBulletGravityScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletGravityScale() float32 {
	if o == nil || IsNil(o.MFlBulletGravityScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletGravityScale.Get()
}

// GetMFlBulletGravityScaleOk returns a tuple with the MFlBulletGravityScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletGravityScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletGravityScale.Get(), o.MFlBulletGravityScale.IsSet()
}

// HasMFlBulletGravityScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletGravityScale() bool {
	if o != nil && o.MFlBulletGravityScale.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletGravityScale gets a reference to the given NullableFloat32 and assigns it to the MFlBulletGravityScale field.
func (o *RawWeaponInfoV2Input) SetMFlBulletGravityScale(v float32) {
	o.MFlBulletGravityScale.Set(&v)
}
// SetMFlBulletGravityScaleNil sets the value for MFlBulletGravityScale to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletGravityScaleNil() {
	o.MFlBulletGravityScale.Set(nil)
}

// UnsetMFlBulletGravityScale ensures that no value is present for MFlBulletGravityScale, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletGravityScale() {
	o.MFlBulletGravityScale.Unset()
}

// GetMFlBulletInheritShooterVelocityScale returns the MFlBulletInheritShooterVelocityScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletInheritShooterVelocityScale() float32 {
	if o == nil || IsNil(o.MFlBulletInheritShooterVelocityScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletInheritShooterVelocityScale.Get()
}

// GetMFlBulletInheritShooterVelocityScaleOk returns a tuple with the MFlBulletInheritShooterVelocityScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletInheritShooterVelocityScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletInheritShooterVelocityScale.Get(), o.MFlBulletInheritShooterVelocityScale.IsSet()
}

// HasMFlBulletInheritShooterVelocityScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletInheritShooterVelocityScale() bool {
	if o != nil && o.MFlBulletInheritShooterVelocityScale.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletInheritShooterVelocityScale gets a reference to the given NullableFloat32 and assigns it to the MFlBulletInheritShooterVelocityScale field.
func (o *RawWeaponInfoV2Input) SetMFlBulletInheritShooterVelocityScale(v float32) {
	o.MFlBulletInheritShooterVelocityScale.Set(&v)
}
// SetMFlBulletInheritShooterVelocityScaleNil sets the value for MFlBulletInheritShooterVelocityScale to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletInheritShooterVelocityScaleNil() {
	o.MFlBulletInheritShooterVelocityScale.Set(nil)
}

// UnsetMFlBulletInheritShooterVelocityScale ensures that no value is present for MFlBulletInheritShooterVelocityScale, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletInheritShooterVelocityScale() {
	o.MFlBulletInheritShooterVelocityScale.Unset()
}

// GetMFlBulletLifetime returns the MFlBulletLifetime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletLifetime() float32 {
	if o == nil || IsNil(o.MFlBulletLifetime.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletLifetime.Get()
}

// GetMFlBulletLifetimeOk returns a tuple with the MFlBulletLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletLifetimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletLifetime.Get(), o.MFlBulletLifetime.IsSet()
}

// HasMFlBulletLifetime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletLifetime() bool {
	if o != nil && o.MFlBulletLifetime.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletLifetime gets a reference to the given NullableFloat32 and assigns it to the MFlBulletLifetime field.
func (o *RawWeaponInfoV2Input) SetMFlBulletLifetime(v float32) {
	o.MFlBulletLifetime.Set(&v)
}
// SetMFlBulletLifetimeNil sets the value for MFlBulletLifetime to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletLifetimeNil() {
	o.MFlBulletLifetime.Set(nil)
}

// UnsetMFlBulletLifetime ensures that no value is present for MFlBulletLifetime, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletLifetime() {
	o.MFlBulletLifetime.Unset()
}

// GetMFlBulletRadius returns the MFlBulletRadius field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletRadius() float32 {
	if o == nil || IsNil(o.MFlBulletRadius.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletRadius.Get()
}

// GetMFlBulletRadiusOk returns a tuple with the MFlBulletRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletRadiusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletRadius.Get(), o.MFlBulletRadius.IsSet()
}

// HasMFlBulletRadius returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletRadius() bool {
	if o != nil && o.MFlBulletRadius.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletRadius gets a reference to the given NullableFloat32 and assigns it to the MFlBulletRadius field.
func (o *RawWeaponInfoV2Input) SetMFlBulletRadius(v float32) {
	o.MFlBulletRadius.Set(&v)
}
// SetMFlBulletRadiusNil sets the value for MFlBulletRadius to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletRadiusNil() {
	o.MFlBulletRadius.Set(nil)
}

// UnsetMFlBulletRadius ensures that no value is present for MFlBulletRadius, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletRadius() {
	o.MFlBulletRadius.Unset()
}

// GetMFlBulletRadiusVsWorld returns the MFlBulletRadiusVsWorld field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletRadiusVsWorld() float32 {
	if o == nil || IsNil(o.MFlBulletRadiusVsWorld.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletRadiusVsWorld.Get()
}

// GetMFlBulletRadiusVsWorldOk returns a tuple with the MFlBulletRadiusVsWorld field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletRadiusVsWorldOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletRadiusVsWorld.Get(), o.MFlBulletRadiusVsWorld.IsSet()
}

// HasMFlBulletRadiusVsWorld returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletRadiusVsWorld() bool {
	if o != nil && o.MFlBulletRadiusVsWorld.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletRadiusVsWorld gets a reference to the given NullableFloat32 and assigns it to the MFlBulletRadiusVsWorld field.
func (o *RawWeaponInfoV2Input) SetMFlBulletRadiusVsWorld(v float32) {
	o.MFlBulletRadiusVsWorld.Set(&v)
}
// SetMFlBulletRadiusVsWorldNil sets the value for MFlBulletRadiusVsWorld to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletRadiusVsWorldNil() {
	o.MFlBulletRadiusVsWorld.Set(nil)
}

// UnsetMFlBulletRadiusVsWorld ensures that no value is present for MFlBulletRadiusVsWorld, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletRadiusVsWorld() {
	o.MFlBulletRadiusVsWorld.Unset()
}

// GetMFlBulletReflectAmount returns the MFlBulletReflectAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletReflectAmount() float32 {
	if o == nil || IsNil(o.MFlBulletReflectAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletReflectAmount.Get()
}

// GetMFlBulletReflectAmountOk returns a tuple with the MFlBulletReflectAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletReflectAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletReflectAmount.Get(), o.MFlBulletReflectAmount.IsSet()
}

// HasMFlBulletReflectAmount returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletReflectAmount() bool {
	if o != nil && o.MFlBulletReflectAmount.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletReflectAmount gets a reference to the given NullableFloat32 and assigns it to the MFlBulletReflectAmount field.
func (o *RawWeaponInfoV2Input) SetMFlBulletReflectAmount(v float32) {
	o.MFlBulletReflectAmount.Set(&v)
}
// SetMFlBulletReflectAmountNil sets the value for MFlBulletReflectAmount to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletReflectAmountNil() {
	o.MFlBulletReflectAmount.Set(nil)
}

// UnsetMFlBulletReflectAmount ensures that no value is present for MFlBulletReflectAmount, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletReflectAmount() {
	o.MFlBulletReflectAmount.Unset()
}

// GetMFlBulletReflectScale returns the MFlBulletReflectScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletReflectScale() float32 {
	if o == nil || IsNil(o.MFlBulletReflectScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletReflectScale.Get()
}

// GetMFlBulletReflectScaleOk returns a tuple with the MFlBulletReflectScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletReflectScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletReflectScale.Get(), o.MFlBulletReflectScale.IsSet()
}

// HasMFlBulletReflectScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletReflectScale() bool {
	if o != nil && o.MFlBulletReflectScale.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletReflectScale gets a reference to the given NullableFloat32 and assigns it to the MFlBulletReflectScale field.
func (o *RawWeaponInfoV2Input) SetMFlBulletReflectScale(v float32) {
	o.MFlBulletReflectScale.Set(&v)
}
// SetMFlBulletReflectScaleNil sets the value for MFlBulletReflectScale to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletReflectScaleNil() {
	o.MFlBulletReflectScale.Set(nil)
}

// UnsetMFlBulletReflectScale ensures that no value is present for MFlBulletReflectScale, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletReflectScale() {
	o.MFlBulletReflectScale.Unset()
}

// GetMFlBulletWhizDistance returns the MFlBulletWhizDistance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBulletWhizDistance() float32 {
	if o == nil || IsNil(o.MFlBulletWhizDistance.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBulletWhizDistance.Get()
}

// GetMFlBulletWhizDistanceOk returns a tuple with the MFlBulletWhizDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBulletWhizDistanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBulletWhizDistance.Get(), o.MFlBulletWhizDistance.IsSet()
}

// HasMFlBulletWhizDistance returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBulletWhizDistance() bool {
	if o != nil && o.MFlBulletWhizDistance.IsSet() {
		return true
	}

	return false
}

// SetMFlBulletWhizDistance gets a reference to the given NullableFloat32 and assigns it to the MFlBulletWhizDistance field.
func (o *RawWeaponInfoV2Input) SetMFlBulletWhizDistance(v float32) {
	o.MFlBulletWhizDistance.Set(&v)
}
// SetMFlBulletWhizDistanceNil sets the value for MFlBulletWhizDistance to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBulletWhizDistanceNil() {
	o.MFlBulletWhizDistance.Set(nil)
}

// UnsetMFlBulletWhizDistance ensures that no value is present for MFlBulletWhizDistance, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBulletWhizDistance() {
	o.MFlBulletWhizDistance.Unset()
}

// GetMFlBurstShotCooldown returns the MFlBurstShotCooldown field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlBurstShotCooldown() float32 {
	if o == nil || IsNil(o.MFlBurstShotCooldown.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBurstShotCooldown.Get()
}

// GetMFlBurstShotCooldownOk returns a tuple with the MFlBurstShotCooldown field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlBurstShotCooldownOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBurstShotCooldown.Get(), o.MFlBurstShotCooldown.IsSet()
}

// HasMFlBurstShotCooldown returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlBurstShotCooldown() bool {
	if o != nil && o.MFlBurstShotCooldown.IsSet() {
		return true
	}

	return false
}

// SetMFlBurstShotCooldown gets a reference to the given NullableFloat32 and assigns it to the MFlBurstShotCooldown field.
func (o *RawWeaponInfoV2Input) SetMFlBurstShotCooldown(v float32) {
	o.MFlBurstShotCooldown.Set(&v)
}
// SetMFlBurstShotCooldownNil sets the value for MFlBurstShotCooldown to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlBurstShotCooldownNil() {
	o.MFlBurstShotCooldown.Set(nil)
}

// UnsetMFlBurstShotCooldown ensures that no value is present for MFlBurstShotCooldown, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlBurstShotCooldown() {
	o.MFlBurstShotCooldown.Unset()
}

// GetMFlCritBonusAgainstNpcs returns the MFlCritBonusAgainstNpcs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlCritBonusAgainstNpcs() float32 {
	if o == nil || IsNil(o.MFlCritBonusAgainstNpcs.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlCritBonusAgainstNpcs.Get()
}

// GetMFlCritBonusAgainstNpcsOk returns a tuple with the MFlCritBonusAgainstNpcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlCritBonusAgainstNpcsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlCritBonusAgainstNpcs.Get(), o.MFlCritBonusAgainstNpcs.IsSet()
}

// HasMFlCritBonusAgainstNpcs returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlCritBonusAgainstNpcs() bool {
	if o != nil && o.MFlCritBonusAgainstNpcs.IsSet() {
		return true
	}

	return false
}

// SetMFlCritBonusAgainstNpcs gets a reference to the given NullableFloat32 and assigns it to the MFlCritBonusAgainstNpcs field.
func (o *RawWeaponInfoV2Input) SetMFlCritBonusAgainstNpcs(v float32) {
	o.MFlCritBonusAgainstNpcs.Set(&v)
}
// SetMFlCritBonusAgainstNpcsNil sets the value for MFlCritBonusAgainstNpcs to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlCritBonusAgainstNpcsNil() {
	o.MFlCritBonusAgainstNpcs.Set(nil)
}

// UnsetMFlCritBonusAgainstNpcs ensures that no value is present for MFlCritBonusAgainstNpcs, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlCritBonusAgainstNpcs() {
	o.MFlCritBonusAgainstNpcs.Unset()
}

// GetMFlCritBonusEnd returns the MFlCritBonusEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlCritBonusEnd() float32 {
	if o == nil || IsNil(o.MFlCritBonusEnd.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlCritBonusEnd.Get()
}

// GetMFlCritBonusEndOk returns a tuple with the MFlCritBonusEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlCritBonusEndOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlCritBonusEnd.Get(), o.MFlCritBonusEnd.IsSet()
}

// HasMFlCritBonusEnd returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlCritBonusEnd() bool {
	if o != nil && o.MFlCritBonusEnd.IsSet() {
		return true
	}

	return false
}

// SetMFlCritBonusEnd gets a reference to the given NullableFloat32 and assigns it to the MFlCritBonusEnd field.
func (o *RawWeaponInfoV2Input) SetMFlCritBonusEnd(v float32) {
	o.MFlCritBonusEnd.Set(&v)
}
// SetMFlCritBonusEndNil sets the value for MFlCritBonusEnd to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlCritBonusEndNil() {
	o.MFlCritBonusEnd.Set(nil)
}

// UnsetMFlCritBonusEnd ensures that no value is present for MFlCritBonusEnd, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlCritBonusEnd() {
	o.MFlCritBonusEnd.Unset()
}

// GetMFlCritBonusEndRange returns the MFlCritBonusEndRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlCritBonusEndRange() float32 {
	if o == nil || IsNil(o.MFlCritBonusEndRange.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlCritBonusEndRange.Get()
}

// GetMFlCritBonusEndRangeOk returns a tuple with the MFlCritBonusEndRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlCritBonusEndRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlCritBonusEndRange.Get(), o.MFlCritBonusEndRange.IsSet()
}

// HasMFlCritBonusEndRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlCritBonusEndRange() bool {
	if o != nil && o.MFlCritBonusEndRange.IsSet() {
		return true
	}

	return false
}

// SetMFlCritBonusEndRange gets a reference to the given NullableFloat32 and assigns it to the MFlCritBonusEndRange field.
func (o *RawWeaponInfoV2Input) SetMFlCritBonusEndRange(v float32) {
	o.MFlCritBonusEndRange.Set(&v)
}
// SetMFlCritBonusEndRangeNil sets the value for MFlCritBonusEndRange to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlCritBonusEndRangeNil() {
	o.MFlCritBonusEndRange.Set(nil)
}

// UnsetMFlCritBonusEndRange ensures that no value is present for MFlCritBonusEndRange, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlCritBonusEndRange() {
	o.MFlCritBonusEndRange.Unset()
}

// GetMFlCritBonusStart returns the MFlCritBonusStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlCritBonusStart() float32 {
	if o == nil || IsNil(o.MFlCritBonusStart.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlCritBonusStart.Get()
}

// GetMFlCritBonusStartOk returns a tuple with the MFlCritBonusStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlCritBonusStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlCritBonusStart.Get(), o.MFlCritBonusStart.IsSet()
}

// HasMFlCritBonusStart returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlCritBonusStart() bool {
	if o != nil && o.MFlCritBonusStart.IsSet() {
		return true
	}

	return false
}

// SetMFlCritBonusStart gets a reference to the given NullableFloat32 and assigns it to the MFlCritBonusStart field.
func (o *RawWeaponInfoV2Input) SetMFlCritBonusStart(v float32) {
	o.MFlCritBonusStart.Set(&v)
}
// SetMFlCritBonusStartNil sets the value for MFlCritBonusStart to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlCritBonusStartNil() {
	o.MFlCritBonusStart.Set(nil)
}

// UnsetMFlCritBonusStart ensures that no value is present for MFlCritBonusStart, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlCritBonusStart() {
	o.MFlCritBonusStart.Unset()
}

// GetMFlCritBonusStartRange returns the MFlCritBonusStartRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlCritBonusStartRange() float32 {
	if o == nil || IsNil(o.MFlCritBonusStartRange.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlCritBonusStartRange.Get()
}

// GetMFlCritBonusStartRangeOk returns a tuple with the MFlCritBonusStartRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlCritBonusStartRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlCritBonusStartRange.Get(), o.MFlCritBonusStartRange.IsSet()
}

// HasMFlCritBonusStartRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlCritBonusStartRange() bool {
	if o != nil && o.MFlCritBonusStartRange.IsSet() {
		return true
	}

	return false
}

// SetMFlCritBonusStartRange gets a reference to the given NullableFloat32 and assigns it to the MFlCritBonusStartRange field.
func (o *RawWeaponInfoV2Input) SetMFlCritBonusStartRange(v float32) {
	o.MFlCritBonusStartRange.Set(&v)
}
// SetMFlCritBonusStartRangeNil sets the value for MFlCritBonusStartRange to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlCritBonusStartRangeNil() {
	o.MFlCritBonusStartRange.Set(nil)
}

// UnsetMFlCritBonusStartRange ensures that no value is present for MFlCritBonusStartRange, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlCritBonusStartRange() {
	o.MFlCritBonusStartRange.Unset()
}

// GetMFlCycleTime returns the MFlCycleTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlCycleTime() float32 {
	if o == nil || IsNil(o.MFlCycleTime.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlCycleTime.Get()
}

// GetMFlCycleTimeOk returns a tuple with the MFlCycleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlCycleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlCycleTime.Get(), o.MFlCycleTime.IsSet()
}

// HasMFlCycleTime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlCycleTime() bool {
	if o != nil && o.MFlCycleTime.IsSet() {
		return true
	}

	return false
}

// SetMFlCycleTime gets a reference to the given NullableFloat32 and assigns it to the MFlCycleTime field.
func (o *RawWeaponInfoV2Input) SetMFlCycleTime(v float32) {
	o.MFlCycleTime.Set(&v)
}
// SetMFlCycleTimeNil sets the value for MFlCycleTime to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlCycleTimeNil() {
	o.MFlCycleTime.Set(nil)
}

// UnsetMFlCycleTime ensures that no value is present for MFlCycleTime, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlCycleTime() {
	o.MFlCycleTime.Unset()
}

// GetMFlIntraBurstCycleTime returns the MFlIntraBurstCycleTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlIntraBurstCycleTime() float32 {
	if o == nil || IsNil(o.MFlIntraBurstCycleTime.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlIntraBurstCycleTime.Get()
}

// GetMFlIntraBurstCycleTimeOk returns a tuple with the MFlIntraBurstCycleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlIntraBurstCycleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlIntraBurstCycleTime.Get(), o.MFlIntraBurstCycleTime.IsSet()
}

// HasMFlIntraBurstCycleTime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlIntraBurstCycleTime() bool {
	if o != nil && o.MFlIntraBurstCycleTime.IsSet() {
		return true
	}

	return false
}

// SetMFlIntraBurstCycleTime gets a reference to the given NullableFloat32 and assigns it to the MFlIntraBurstCycleTime field.
func (o *RawWeaponInfoV2Input) SetMFlIntraBurstCycleTime(v float32) {
	o.MFlIntraBurstCycleTime.Set(&v)
}
// SetMFlIntraBurstCycleTimeNil sets the value for MFlIntraBurstCycleTime to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlIntraBurstCycleTimeNil() {
	o.MFlIntraBurstCycleTime.Set(nil)
}

// UnsetMFlIntraBurstCycleTime ensures that no value is present for MFlIntraBurstCycleTime, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlIntraBurstCycleTime() {
	o.MFlIntraBurstCycleTime.Unset()
}

// GetMFlMaxSpinCycleTime returns the MFlMaxSpinCycleTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlMaxSpinCycleTime() float32 {
	if o == nil || IsNil(o.MFlMaxSpinCycleTime.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlMaxSpinCycleTime.Get()
}

// GetMFlMaxSpinCycleTimeOk returns a tuple with the MFlMaxSpinCycleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlMaxSpinCycleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlMaxSpinCycleTime.Get(), o.MFlMaxSpinCycleTime.IsSet()
}

// HasMFlMaxSpinCycleTime returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlMaxSpinCycleTime() bool {
	if o != nil && o.MFlMaxSpinCycleTime.IsSet() {
		return true
	}

	return false
}

// SetMFlMaxSpinCycleTime gets a reference to the given NullableFloat32 and assigns it to the MFlMaxSpinCycleTime field.
func (o *RawWeaponInfoV2Input) SetMFlMaxSpinCycleTime(v float32) {
	o.MFlMaxSpinCycleTime.Set(&v)
}
// SetMFlMaxSpinCycleTimeNil sets the value for MFlMaxSpinCycleTime to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlMaxSpinCycleTimeNil() {
	o.MFlMaxSpinCycleTime.Set(nil)
}

// UnsetMFlMaxSpinCycleTime ensures that no value is present for MFlMaxSpinCycleTime, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlMaxSpinCycleTime() {
	o.MFlMaxSpinCycleTime.Unset()
}

// GetMFlDamageFalloffBias returns the MFlDamageFalloffBias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffBias() float32 {
	if o == nil || IsNil(o.MFlDamageFalloffBias.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlDamageFalloffBias.Get()
}

// GetMFlDamageFalloffBiasOk returns a tuple with the MFlDamageFalloffBias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffBiasOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlDamageFalloffBias.Get(), o.MFlDamageFalloffBias.IsSet()
}

// HasMFlDamageFalloffBias returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlDamageFalloffBias() bool {
	if o != nil && o.MFlDamageFalloffBias.IsSet() {
		return true
	}

	return false
}

// SetMFlDamageFalloffBias gets a reference to the given NullableFloat32 and assigns it to the MFlDamageFalloffBias field.
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffBias(v float32) {
	o.MFlDamageFalloffBias.Set(&v)
}
// SetMFlDamageFalloffBiasNil sets the value for MFlDamageFalloffBias to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffBiasNil() {
	o.MFlDamageFalloffBias.Set(nil)
}

// UnsetMFlDamageFalloffBias ensures that no value is present for MFlDamageFalloffBias, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlDamageFalloffBias() {
	o.MFlDamageFalloffBias.Unset()
}

// GetMFlDamageFalloffEndRange returns the MFlDamageFalloffEndRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffEndRange() float32 {
	if o == nil || IsNil(o.MFlDamageFalloffEndRange.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlDamageFalloffEndRange.Get()
}

// GetMFlDamageFalloffEndRangeOk returns a tuple with the MFlDamageFalloffEndRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffEndRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlDamageFalloffEndRange.Get(), o.MFlDamageFalloffEndRange.IsSet()
}

// HasMFlDamageFalloffEndRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlDamageFalloffEndRange() bool {
	if o != nil && o.MFlDamageFalloffEndRange.IsSet() {
		return true
	}

	return false
}

// SetMFlDamageFalloffEndRange gets a reference to the given NullableFloat32 and assigns it to the MFlDamageFalloffEndRange field.
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffEndRange(v float32) {
	o.MFlDamageFalloffEndRange.Set(&v)
}
// SetMFlDamageFalloffEndRangeNil sets the value for MFlDamageFalloffEndRange to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffEndRangeNil() {
	o.MFlDamageFalloffEndRange.Set(nil)
}

// UnsetMFlDamageFalloffEndRange ensures that no value is present for MFlDamageFalloffEndRange, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlDamageFalloffEndRange() {
	o.MFlDamageFalloffEndRange.Unset()
}

// GetMFlDamageFalloffEndScale returns the MFlDamageFalloffEndScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffEndScale() float32 {
	if o == nil || IsNil(o.MFlDamageFalloffEndScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlDamageFalloffEndScale.Get()
}

// GetMFlDamageFalloffEndScaleOk returns a tuple with the MFlDamageFalloffEndScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffEndScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlDamageFalloffEndScale.Get(), o.MFlDamageFalloffEndScale.IsSet()
}

// HasMFlDamageFalloffEndScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlDamageFalloffEndScale() bool {
	if o != nil && o.MFlDamageFalloffEndScale.IsSet() {
		return true
	}

	return false
}

// SetMFlDamageFalloffEndScale gets a reference to the given NullableFloat32 and assigns it to the MFlDamageFalloffEndScale field.
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffEndScale(v float32) {
	o.MFlDamageFalloffEndScale.Set(&v)
}
// SetMFlDamageFalloffEndScaleNil sets the value for MFlDamageFalloffEndScale to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffEndScaleNil() {
	o.MFlDamageFalloffEndScale.Set(nil)
}

// UnsetMFlDamageFalloffEndScale ensures that no value is present for MFlDamageFalloffEndScale, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlDamageFalloffEndScale() {
	o.MFlDamageFalloffEndScale.Unset()
}

// GetMFlDamageFalloffStartRange returns the MFlDamageFalloffStartRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffStartRange() float32 {
	if o == nil || IsNil(o.MFlDamageFalloffStartRange.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlDamageFalloffStartRange.Get()
}

// GetMFlDamageFalloffStartRangeOk returns a tuple with the MFlDamageFalloffStartRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffStartRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlDamageFalloffStartRange.Get(), o.MFlDamageFalloffStartRange.IsSet()
}

// HasMFlDamageFalloffStartRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlDamageFalloffStartRange() bool {
	if o != nil && o.MFlDamageFalloffStartRange.IsSet() {
		return true
	}

	return false
}

// SetMFlDamageFalloffStartRange gets a reference to the given NullableFloat32 and assigns it to the MFlDamageFalloffStartRange field.
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffStartRange(v float32) {
	o.MFlDamageFalloffStartRange.Set(&v)
}
// SetMFlDamageFalloffStartRangeNil sets the value for MFlDamageFalloffStartRange to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffStartRangeNil() {
	o.MFlDamageFalloffStartRange.Set(nil)
}

// UnsetMFlDamageFalloffStartRange ensures that no value is present for MFlDamageFalloffStartRange, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlDamageFalloffStartRange() {
	o.MFlDamageFalloffStartRange.Unset()
}

// GetMFlDamageFalloffStartScale returns the MFlDamageFalloffStartScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffStartScale() float32 {
	if o == nil || IsNil(o.MFlDamageFalloffStartScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlDamageFalloffStartScale.Get()
}

// GetMFlDamageFalloffStartScaleOk returns a tuple with the MFlDamageFalloffStartScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlDamageFalloffStartScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlDamageFalloffStartScale.Get(), o.MFlDamageFalloffStartScale.IsSet()
}

// HasMFlDamageFalloffStartScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlDamageFalloffStartScale() bool {
	if o != nil && o.MFlDamageFalloffStartScale.IsSet() {
		return true
	}

	return false
}

// SetMFlDamageFalloffStartScale gets a reference to the given NullableFloat32 and assigns it to the MFlDamageFalloffStartScale field.
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffStartScale(v float32) {
	o.MFlDamageFalloffStartScale.Set(&v)
}
// SetMFlDamageFalloffStartScaleNil sets the value for MFlDamageFalloffStartScale to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlDamageFalloffStartScaleNil() {
	o.MFlDamageFalloffStartScale.Set(nil)
}

// UnsetMFlDamageFalloffStartScale ensures that no value is present for MFlDamageFalloffStartScale, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlDamageFalloffStartScale() {
	o.MFlDamageFalloffStartScale.Unset()
}

// GetMFlHorizontalPunch returns the MFlHorizontalPunch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlHorizontalPunch() float32 {
	if o == nil || IsNil(o.MFlHorizontalPunch.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlHorizontalPunch.Get()
}

// GetMFlHorizontalPunchOk returns a tuple with the MFlHorizontalPunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlHorizontalPunchOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlHorizontalPunch.Get(), o.MFlHorizontalPunch.IsSet()
}

// HasMFlHorizontalPunch returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlHorizontalPunch() bool {
	if o != nil && o.MFlHorizontalPunch.IsSet() {
		return true
	}

	return false
}

// SetMFlHorizontalPunch gets a reference to the given NullableFloat32 and assigns it to the MFlHorizontalPunch field.
func (o *RawWeaponInfoV2Input) SetMFlHorizontalPunch(v float32) {
	o.MFlHorizontalPunch.Set(&v)
}
// SetMFlHorizontalPunchNil sets the value for MFlHorizontalPunch to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlHorizontalPunchNil() {
	o.MFlHorizontalPunch.Set(nil)
}

// UnsetMFlHorizontalPunch ensures that no value is present for MFlHorizontalPunch, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlHorizontalPunch() {
	o.MFlHorizontalPunch.Unset()
}

// GetMFlRange returns the MFlRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlRange() float32 {
	if o == nil || IsNil(o.MFlRange.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlRange.Get()
}

// GetMFlRangeOk returns a tuple with the MFlRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlRangeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlRange.Get(), o.MFlRange.IsSet()
}

// HasMFlRange returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlRange() bool {
	if o != nil && o.MFlRange.IsSet() {
		return true
	}

	return false
}

// SetMFlRange gets a reference to the given NullableFloat32 and assigns it to the MFlRange field.
func (o *RawWeaponInfoV2Input) SetMFlRange(v float32) {
	o.MFlRange.Set(&v)
}
// SetMFlRangeNil sets the value for MFlRange to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlRangeNil() {
	o.MFlRange.Set(nil)
}

// UnsetMFlRange ensures that no value is present for MFlRange, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlRange() {
	o.MFlRange.Unset()
}

// GetMFlRecoilRecoveryDelayFactor returns the MFlRecoilRecoveryDelayFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlRecoilRecoveryDelayFactor() float32 {
	if o == nil || IsNil(o.MFlRecoilRecoveryDelayFactor.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlRecoilRecoveryDelayFactor.Get()
}

// GetMFlRecoilRecoveryDelayFactorOk returns a tuple with the MFlRecoilRecoveryDelayFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlRecoilRecoveryDelayFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlRecoilRecoveryDelayFactor.Get(), o.MFlRecoilRecoveryDelayFactor.IsSet()
}

// HasMFlRecoilRecoveryDelayFactor returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlRecoilRecoveryDelayFactor() bool {
	if o != nil && o.MFlRecoilRecoveryDelayFactor.IsSet() {
		return true
	}

	return false
}

// SetMFlRecoilRecoveryDelayFactor gets a reference to the given NullableFloat32 and assigns it to the MFlRecoilRecoveryDelayFactor field.
func (o *RawWeaponInfoV2Input) SetMFlRecoilRecoveryDelayFactor(v float32) {
	o.MFlRecoilRecoveryDelayFactor.Set(&v)
}
// SetMFlRecoilRecoveryDelayFactorNil sets the value for MFlRecoilRecoveryDelayFactor to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlRecoilRecoveryDelayFactorNil() {
	o.MFlRecoilRecoveryDelayFactor.Set(nil)
}

// UnsetMFlRecoilRecoveryDelayFactor ensures that no value is present for MFlRecoilRecoveryDelayFactor, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlRecoilRecoveryDelayFactor() {
	o.MFlRecoilRecoveryDelayFactor.Unset()
}

// GetMFlRecoilRecoverySpeed returns the MFlRecoilRecoverySpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlRecoilRecoverySpeed() float32 {
	if o == nil || IsNil(o.MFlRecoilRecoverySpeed.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlRecoilRecoverySpeed.Get()
}

// GetMFlRecoilRecoverySpeedOk returns a tuple with the MFlRecoilRecoverySpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlRecoilRecoverySpeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlRecoilRecoverySpeed.Get(), o.MFlRecoilRecoverySpeed.IsSet()
}

// HasMFlRecoilRecoverySpeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlRecoilRecoverySpeed() bool {
	if o != nil && o.MFlRecoilRecoverySpeed.IsSet() {
		return true
	}

	return false
}

// SetMFlRecoilRecoverySpeed gets a reference to the given NullableFloat32 and assigns it to the MFlRecoilRecoverySpeed field.
func (o *RawWeaponInfoV2Input) SetMFlRecoilRecoverySpeed(v float32) {
	o.MFlRecoilRecoverySpeed.Set(&v)
}
// SetMFlRecoilRecoverySpeedNil sets the value for MFlRecoilRecoverySpeed to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlRecoilRecoverySpeedNil() {
	o.MFlRecoilRecoverySpeed.Set(nil)
}

// UnsetMFlRecoilRecoverySpeed ensures that no value is present for MFlRecoilRecoverySpeed, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlRecoilRecoverySpeed() {
	o.MFlRecoilRecoverySpeed.Unset()
}

// GetMFlRecoilShotIndexRecoveryTimeFactor returns the MFlRecoilShotIndexRecoveryTimeFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlRecoilShotIndexRecoveryTimeFactor() float32 {
	if o == nil || IsNil(o.MFlRecoilShotIndexRecoveryTimeFactor.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlRecoilShotIndexRecoveryTimeFactor.Get()
}

// GetMFlRecoilShotIndexRecoveryTimeFactorOk returns a tuple with the MFlRecoilShotIndexRecoveryTimeFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlRecoilShotIndexRecoveryTimeFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlRecoilShotIndexRecoveryTimeFactor.Get(), o.MFlRecoilShotIndexRecoveryTimeFactor.IsSet()
}

// HasMFlRecoilShotIndexRecoveryTimeFactor returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlRecoilShotIndexRecoveryTimeFactor() bool {
	if o != nil && o.MFlRecoilShotIndexRecoveryTimeFactor.IsSet() {
		return true
	}

	return false
}

// SetMFlRecoilShotIndexRecoveryTimeFactor gets a reference to the given NullableFloat32 and assigns it to the MFlRecoilShotIndexRecoveryTimeFactor field.
func (o *RawWeaponInfoV2Input) SetMFlRecoilShotIndexRecoveryTimeFactor(v float32) {
	o.MFlRecoilShotIndexRecoveryTimeFactor.Set(&v)
}
// SetMFlRecoilShotIndexRecoveryTimeFactorNil sets the value for MFlRecoilShotIndexRecoveryTimeFactor to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlRecoilShotIndexRecoveryTimeFactorNil() {
	o.MFlRecoilShotIndexRecoveryTimeFactor.Set(nil)
}

// UnsetMFlRecoilShotIndexRecoveryTimeFactor ensures that no value is present for MFlRecoilShotIndexRecoveryTimeFactor, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlRecoilShotIndexRecoveryTimeFactor() {
	o.MFlRecoilShotIndexRecoveryTimeFactor.Unset()
}

// GetMFlRecoilSpeed returns the MFlRecoilSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlRecoilSpeed() float32 {
	if o == nil || IsNil(o.MFlRecoilSpeed.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlRecoilSpeed.Get()
}

// GetMFlRecoilSpeedOk returns a tuple with the MFlRecoilSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlRecoilSpeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlRecoilSpeed.Get(), o.MFlRecoilSpeed.IsSet()
}

// HasMFlRecoilSpeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlRecoilSpeed() bool {
	if o != nil && o.MFlRecoilSpeed.IsSet() {
		return true
	}

	return false
}

// SetMFlRecoilSpeed gets a reference to the given NullableFloat32 and assigns it to the MFlRecoilSpeed field.
func (o *RawWeaponInfoV2Input) SetMFlRecoilSpeed(v float32) {
	o.MFlRecoilSpeed.Set(&v)
}
// SetMFlRecoilSpeedNil sets the value for MFlRecoilSpeed to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlRecoilSpeedNil() {
	o.MFlRecoilSpeed.Set(nil)
}

// UnsetMFlRecoilSpeed ensures that no value is present for MFlRecoilSpeed, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlRecoilSpeed() {
	o.MFlRecoilSpeed.Unset()
}

// GetMFlReloadMoveSpeed returns the MFlReloadMoveSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlReloadMoveSpeed() float32 {
	if o == nil || IsNil(o.MFlReloadMoveSpeed.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlReloadMoveSpeed.Get()
}

// GetMFlReloadMoveSpeedOk returns a tuple with the MFlReloadMoveSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlReloadMoveSpeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlReloadMoveSpeed.Get(), o.MFlReloadMoveSpeed.IsSet()
}

// HasMFlReloadMoveSpeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlReloadMoveSpeed() bool {
	if o != nil && o.MFlReloadMoveSpeed.IsSet() {
		return true
	}

	return false
}

// SetMFlReloadMoveSpeed gets a reference to the given NullableFloat32 and assigns it to the MFlReloadMoveSpeed field.
func (o *RawWeaponInfoV2Input) SetMFlReloadMoveSpeed(v float32) {
	o.MFlReloadMoveSpeed.Set(&v)
}
// SetMFlReloadMoveSpeedNil sets the value for MFlReloadMoveSpeed to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlReloadMoveSpeedNil() {
	o.MFlReloadMoveSpeed.Set(nil)
}

// UnsetMFlReloadMoveSpeed ensures that no value is present for MFlReloadMoveSpeed, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlReloadMoveSpeed() {
	o.MFlReloadMoveSpeed.Unset()
}

// GetMFlScatterYawScale returns the MFlScatterYawScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlScatterYawScale() float32 {
	if o == nil || IsNil(o.MFlScatterYawScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlScatterYawScale.Get()
}

// GetMFlScatterYawScaleOk returns a tuple with the MFlScatterYawScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlScatterYawScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlScatterYawScale.Get(), o.MFlScatterYawScale.IsSet()
}

// HasMFlScatterYawScale returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlScatterYawScale() bool {
	if o != nil && o.MFlScatterYawScale.IsSet() {
		return true
	}

	return false
}

// SetMFlScatterYawScale gets a reference to the given NullableFloat32 and assigns it to the MFlScatterYawScale field.
func (o *RawWeaponInfoV2Input) SetMFlScatterYawScale(v float32) {
	o.MFlScatterYawScale.Set(&v)
}
// SetMFlScatterYawScaleNil sets the value for MFlScatterYawScale to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlScatterYawScaleNil() {
	o.MFlScatterYawScale.Set(nil)
}

// UnsetMFlScatterYawScale ensures that no value is present for MFlScatterYawScale, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlScatterYawScale() {
	o.MFlScatterYawScale.Unset()
}

// GetMAimingShootSpreadPenalty returns the MAimingShootSpreadPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMAimingShootSpreadPenalty() MAimingshootspreadpenalty {
	if o == nil || IsNil(o.MAimingShootSpreadPenalty.Get()) {
		var ret MAimingshootspreadpenalty
		return ret
	}
	return *o.MAimingShootSpreadPenalty.Get()
}

// GetMAimingShootSpreadPenaltyOk returns a tuple with the MAimingShootSpreadPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMAimingShootSpreadPenaltyOk() (*MAimingshootspreadpenalty, bool) {
	if o == nil {
		return nil, false
	}
	return o.MAimingShootSpreadPenalty.Get(), o.MAimingShootSpreadPenalty.IsSet()
}

// HasMAimingShootSpreadPenalty returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMAimingShootSpreadPenalty() bool {
	if o != nil && o.MAimingShootSpreadPenalty.IsSet() {
		return true
	}

	return false
}

// SetMAimingShootSpreadPenalty gets a reference to the given NullableMAimingshootspreadpenalty and assigns it to the MAimingShootSpreadPenalty field.
func (o *RawWeaponInfoV2Input) SetMAimingShootSpreadPenalty(v MAimingshootspreadpenalty) {
	o.MAimingShootSpreadPenalty.Set(&v)
}
// SetMAimingShootSpreadPenaltyNil sets the value for MAimingShootSpreadPenalty to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMAimingShootSpreadPenaltyNil() {
	o.MAimingShootSpreadPenalty.Set(nil)
}

// UnsetMAimingShootSpreadPenalty ensures that no value is present for MAimingShootSpreadPenalty, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMAimingShootSpreadPenalty() {
	o.MAimingShootSpreadPenalty.Unset()
}

// GetMStandingShootSpreadPenalty returns the MStandingShootSpreadPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMStandingShootSpreadPenalty() MStandingshootspreadpenalty {
	if o == nil || IsNil(o.MStandingShootSpreadPenalty.Get()) {
		var ret MStandingshootspreadpenalty
		return ret
	}
	return *o.MStandingShootSpreadPenalty.Get()
}

// GetMStandingShootSpreadPenaltyOk returns a tuple with the MStandingShootSpreadPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMStandingShootSpreadPenaltyOk() (*MStandingshootspreadpenalty, bool) {
	if o == nil {
		return nil, false
	}
	return o.MStandingShootSpreadPenalty.Get(), o.MStandingShootSpreadPenalty.IsSet()
}

// HasMStandingShootSpreadPenalty returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMStandingShootSpreadPenalty() bool {
	if o != nil && o.MStandingShootSpreadPenalty.IsSet() {
		return true
	}

	return false
}

// SetMStandingShootSpreadPenalty gets a reference to the given NullableMStandingshootspreadpenalty and assigns it to the MStandingShootSpreadPenalty field.
func (o *RawWeaponInfoV2Input) SetMStandingShootSpreadPenalty(v MStandingshootspreadpenalty) {
	o.MStandingShootSpreadPenalty.Set(&v)
}
// SetMStandingShootSpreadPenaltyNil sets the value for MStandingShootSpreadPenalty to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMStandingShootSpreadPenaltyNil() {
	o.MStandingShootSpreadPenalty.Set(nil)
}

// UnsetMStandingShootSpreadPenalty ensures that no value is present for MStandingShootSpreadPenalty, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMStandingShootSpreadPenalty() {
	o.MStandingShootSpreadPenalty.Unset()
}

// GetMFlShootMoveSpeedPercent returns the MFlShootMoveSpeedPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlShootMoveSpeedPercent() float32 {
	if o == nil || IsNil(o.MFlShootMoveSpeedPercent.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlShootMoveSpeedPercent.Get()
}

// GetMFlShootMoveSpeedPercentOk returns a tuple with the MFlShootMoveSpeedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlShootMoveSpeedPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlShootMoveSpeedPercent.Get(), o.MFlShootMoveSpeedPercent.IsSet()
}

// HasMFlShootMoveSpeedPercent returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlShootMoveSpeedPercent() bool {
	if o != nil && o.MFlShootMoveSpeedPercent.IsSet() {
		return true
	}

	return false
}

// SetMFlShootMoveSpeedPercent gets a reference to the given NullableFloat32 and assigns it to the MFlShootMoveSpeedPercent field.
func (o *RawWeaponInfoV2Input) SetMFlShootMoveSpeedPercent(v float32) {
	o.MFlShootMoveSpeedPercent.Set(&v)
}
// SetMFlShootMoveSpeedPercentNil sets the value for MFlShootMoveSpeedPercent to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlShootMoveSpeedPercentNil() {
	o.MFlShootMoveSpeedPercent.Set(nil)
}

// UnsetMFlShootMoveSpeedPercent ensures that no value is present for MFlShootMoveSpeedPercent, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlShootMoveSpeedPercent() {
	o.MFlShootMoveSpeedPercent.Unset()
}

// GetMFlShootSpreadPenaltyDecay returns the MFlShootSpreadPenaltyDecay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlShootSpreadPenaltyDecay() float32 {
	if o == nil || IsNil(o.MFlShootSpreadPenaltyDecay.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlShootSpreadPenaltyDecay.Get()
}

// GetMFlShootSpreadPenaltyDecayOk returns a tuple with the MFlShootSpreadPenaltyDecay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlShootSpreadPenaltyDecayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlShootSpreadPenaltyDecay.Get(), o.MFlShootSpreadPenaltyDecay.IsSet()
}

// HasMFlShootSpreadPenaltyDecay returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlShootSpreadPenaltyDecay() bool {
	if o != nil && o.MFlShootSpreadPenaltyDecay.IsSet() {
		return true
	}

	return false
}

// SetMFlShootSpreadPenaltyDecay gets a reference to the given NullableFloat32 and assigns it to the MFlShootSpreadPenaltyDecay field.
func (o *RawWeaponInfoV2Input) SetMFlShootSpreadPenaltyDecay(v float32) {
	o.MFlShootSpreadPenaltyDecay.Set(&v)
}
// SetMFlShootSpreadPenaltyDecayNil sets the value for MFlShootSpreadPenaltyDecay to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlShootSpreadPenaltyDecayNil() {
	o.MFlShootSpreadPenaltyDecay.Set(nil)
}

// UnsetMFlShootSpreadPenaltyDecay ensures that no value is present for MFlShootSpreadPenaltyDecay, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlShootSpreadPenaltyDecay() {
	o.MFlShootSpreadPenaltyDecay.Unset()
}

// GetMFlShootSpreadPenaltyDecayDelay returns the MFlShootSpreadPenaltyDecayDelay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlShootSpreadPenaltyDecayDelay() float32 {
	if o == nil || IsNil(o.MFlShootSpreadPenaltyDecayDelay.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlShootSpreadPenaltyDecayDelay.Get()
}

// GetMFlShootSpreadPenaltyDecayDelayOk returns a tuple with the MFlShootSpreadPenaltyDecayDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlShootSpreadPenaltyDecayDelayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlShootSpreadPenaltyDecayDelay.Get(), o.MFlShootSpreadPenaltyDecayDelay.IsSet()
}

// HasMFlShootSpreadPenaltyDecayDelay returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlShootSpreadPenaltyDecayDelay() bool {
	if o != nil && o.MFlShootSpreadPenaltyDecayDelay.IsSet() {
		return true
	}

	return false
}

// SetMFlShootSpreadPenaltyDecayDelay gets a reference to the given NullableFloat32 and assigns it to the MFlShootSpreadPenaltyDecayDelay field.
func (o *RawWeaponInfoV2Input) SetMFlShootSpreadPenaltyDecayDelay(v float32) {
	o.MFlShootSpreadPenaltyDecayDelay.Set(&v)
}
// SetMFlShootSpreadPenaltyDecayDelayNil sets the value for MFlShootSpreadPenaltyDecayDelay to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlShootSpreadPenaltyDecayDelayNil() {
	o.MFlShootSpreadPenaltyDecayDelay.Set(nil)
}

// UnsetMFlShootSpreadPenaltyDecayDelay ensures that no value is present for MFlShootSpreadPenaltyDecayDelay, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlShootSpreadPenaltyDecayDelay() {
	o.MFlShootSpreadPenaltyDecayDelay.Unset()
}

// GetMFlShootSpreadPenaltyPerShot returns the MFlShootSpreadPenaltyPerShot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlShootSpreadPenaltyPerShot() float32 {
	if o == nil || IsNil(o.MFlShootSpreadPenaltyPerShot.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlShootSpreadPenaltyPerShot.Get()
}

// GetMFlShootSpreadPenaltyPerShotOk returns a tuple with the MFlShootSpreadPenaltyPerShot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlShootSpreadPenaltyPerShotOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlShootSpreadPenaltyPerShot.Get(), o.MFlShootSpreadPenaltyPerShot.IsSet()
}

// HasMFlShootSpreadPenaltyPerShot returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlShootSpreadPenaltyPerShot() bool {
	if o != nil && o.MFlShootSpreadPenaltyPerShot.IsSet() {
		return true
	}

	return false
}

// SetMFlShootSpreadPenaltyPerShot gets a reference to the given NullableFloat32 and assigns it to the MFlShootSpreadPenaltyPerShot field.
func (o *RawWeaponInfoV2Input) SetMFlShootSpreadPenaltyPerShot(v float32) {
	o.MFlShootSpreadPenaltyPerShot.Set(&v)
}
// SetMFlShootSpreadPenaltyPerShotNil sets the value for MFlShootSpreadPenaltyPerShot to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlShootSpreadPenaltyPerShotNil() {
	o.MFlShootSpreadPenaltyPerShot.Set(nil)
}

// UnsetMFlShootSpreadPenaltyPerShot ensures that no value is present for MFlShootSpreadPenaltyPerShot, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlShootSpreadPenaltyPerShot() {
	o.MFlShootSpreadPenaltyPerShot.Unset()
}

// GetMFlShootingUpSpreadPenalty returns the MFlShootingUpSpreadPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlShootingUpSpreadPenalty() float32 {
	if o == nil || IsNil(o.MFlShootingUpSpreadPenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlShootingUpSpreadPenalty.Get()
}

// GetMFlShootingUpSpreadPenaltyOk returns a tuple with the MFlShootingUpSpreadPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlShootingUpSpreadPenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlShootingUpSpreadPenalty.Get(), o.MFlShootingUpSpreadPenalty.IsSet()
}

// HasMFlShootingUpSpreadPenalty returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlShootingUpSpreadPenalty() bool {
	if o != nil && o.MFlShootingUpSpreadPenalty.IsSet() {
		return true
	}

	return false
}

// SetMFlShootingUpSpreadPenalty gets a reference to the given NullableFloat32 and assigns it to the MFlShootingUpSpreadPenalty field.
func (o *RawWeaponInfoV2Input) SetMFlShootingUpSpreadPenalty(v float32) {
	o.MFlShootingUpSpreadPenalty.Set(&v)
}
// SetMFlShootingUpSpreadPenaltyNil sets the value for MFlShootingUpSpreadPenalty to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlShootingUpSpreadPenaltyNil() {
	o.MFlShootingUpSpreadPenalty.Set(nil)
}

// UnsetMFlShootingUpSpreadPenalty ensures that no value is present for MFlShootingUpSpreadPenalty, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlShootingUpSpreadPenalty() {
	o.MFlShootingUpSpreadPenalty.Unset()
}

// GetMFlVerticalPunch returns the MFlVerticalPunch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlVerticalPunch() float32 {
	if o == nil || IsNil(o.MFlVerticalPunch.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlVerticalPunch.Get()
}

// GetMFlVerticalPunchOk returns a tuple with the MFlVerticalPunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlVerticalPunchOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlVerticalPunch.Get(), o.MFlVerticalPunch.IsSet()
}

// HasMFlVerticalPunch returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlVerticalPunch() bool {
	if o != nil && o.MFlVerticalPunch.IsSet() {
		return true
	}

	return false
}

// SetMFlVerticalPunch gets a reference to the given NullableFloat32 and assigns it to the MFlVerticalPunch field.
func (o *RawWeaponInfoV2Input) SetMFlVerticalPunch(v float32) {
	o.MFlVerticalPunch.Set(&v)
}
// SetMFlVerticalPunchNil sets the value for MFlVerticalPunch to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlVerticalPunchNil() {
	o.MFlVerticalPunch.Set(nil)
}

// UnsetMFlVerticalPunch ensures that no value is present for MFlVerticalPunch, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlVerticalPunch() {
	o.MFlVerticalPunch.Unset()
}

// GetMFlZoomFov returns the MFlZoomFov field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlZoomFov() float32 {
	if o == nil || IsNil(o.MFlZoomFov.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlZoomFov.Get()
}

// GetMFlZoomFovOk returns a tuple with the MFlZoomFov field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlZoomFovOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlZoomFov.Get(), o.MFlZoomFov.IsSet()
}

// HasMFlZoomFov returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlZoomFov() bool {
	if o != nil && o.MFlZoomFov.IsSet() {
		return true
	}

	return false
}

// SetMFlZoomFov gets a reference to the given NullableFloat32 and assigns it to the MFlZoomFov field.
func (o *RawWeaponInfoV2Input) SetMFlZoomFov(v float32) {
	o.MFlZoomFov.Set(&v)
}
// SetMFlZoomFovNil sets the value for MFlZoomFov to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlZoomFovNil() {
	o.MFlZoomFov.Set(nil)
}

// UnsetMFlZoomFov ensures that no value is present for MFlZoomFov, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlZoomFov() {
	o.MFlZoomFov.Unset()
}

// GetMFlZoomMoveSpeedPercent returns the MFlZoomMoveSpeedPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlZoomMoveSpeedPercent() float32 {
	if o == nil || IsNil(o.MFlZoomMoveSpeedPercent.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlZoomMoveSpeedPercent.Get()
}

// GetMFlZoomMoveSpeedPercentOk returns a tuple with the MFlZoomMoveSpeedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlZoomMoveSpeedPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlZoomMoveSpeedPercent.Get(), o.MFlZoomMoveSpeedPercent.IsSet()
}

// HasMFlZoomMoveSpeedPercent returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlZoomMoveSpeedPercent() bool {
	if o != nil && o.MFlZoomMoveSpeedPercent.IsSet() {
		return true
	}

	return false
}

// SetMFlZoomMoveSpeedPercent gets a reference to the given NullableFloat32 and assigns it to the MFlZoomMoveSpeedPercent field.
func (o *RawWeaponInfoV2Input) SetMFlZoomMoveSpeedPercent(v float32) {
	o.MFlZoomMoveSpeedPercent.Set(&v)
}
// SetMFlZoomMoveSpeedPercentNil sets the value for MFlZoomMoveSpeedPercent to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlZoomMoveSpeedPercentNil() {
	o.MFlZoomMoveSpeedPercent.Set(nil)
}

// UnsetMFlZoomMoveSpeedPercent ensures that no value is present for MFlZoomMoveSpeedPercent, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlZoomMoveSpeedPercent() {
	o.MFlZoomMoveSpeedPercent.Unset()
}

// GetMIBullets returns the MIBullets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMIBullets() int32 {
	if o == nil || IsNil(o.MIBullets.Get()) {
		var ret int32
		return ret
	}
	return *o.MIBullets.Get()
}

// GetMIBulletsOk returns a tuple with the MIBullets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMIBulletsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MIBullets.Get(), o.MIBullets.IsSet()
}

// HasMIBullets returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMIBullets() bool {
	if o != nil && o.MIBullets.IsSet() {
		return true
	}

	return false
}

// SetMIBullets gets a reference to the given NullableInt32 and assigns it to the MIBullets field.
func (o *RawWeaponInfoV2Input) SetMIBullets(v int32) {
	o.MIBullets.Set(&v)
}
// SetMIBulletsNil sets the value for MIBullets to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMIBulletsNil() {
	o.MIBullets.Set(nil)
}

// UnsetMIBullets ensures that no value is present for MIBullets, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMIBullets() {
	o.MIBullets.Unset()
}

// GetMIBurstShotCount returns the MIBurstShotCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMIBurstShotCount() int32 {
	if o == nil || IsNil(o.MIBurstShotCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MIBurstShotCount.Get()
}

// GetMIBurstShotCountOk returns a tuple with the MIBurstShotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMIBurstShotCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MIBurstShotCount.Get(), o.MIBurstShotCount.IsSet()
}

// HasMIBurstShotCount returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMIBurstShotCount() bool {
	if o != nil && o.MIBurstShotCount.IsSet() {
		return true
	}

	return false
}

// SetMIBurstShotCount gets a reference to the given NullableInt32 and assigns it to the MIBurstShotCount field.
func (o *RawWeaponInfoV2Input) SetMIBurstShotCount(v int32) {
	o.MIBurstShotCount.Set(&v)
}
// SetMIBurstShotCountNil sets the value for MIBurstShotCount to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMIBurstShotCountNil() {
	o.MIBurstShotCount.Set(nil)
}

// UnsetMIBurstShotCount ensures that no value is present for MIBurstShotCount, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMIBurstShotCount() {
	o.MIBurstShotCount.Unset()
}

// GetMIClipSize returns the MIClipSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMIClipSize() int32 {
	if o == nil || IsNil(o.MIClipSize.Get()) {
		var ret int32
		return ret
	}
	return *o.MIClipSize.Get()
}

// GetMIClipSizeOk returns a tuple with the MIClipSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMIClipSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MIClipSize.Get(), o.MIClipSize.IsSet()
}

// HasMIClipSize returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMIClipSize() bool {
	if o != nil && o.MIClipSize.IsSet() {
		return true
	}

	return false
}

// SetMIClipSize gets a reference to the given NullableInt32 and assigns it to the MIClipSize field.
func (o *RawWeaponInfoV2Input) SetMIClipSize(v int32) {
	o.MIClipSize.Set(&v)
}
// SetMIClipSizeNil sets the value for MIClipSize to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMIClipSizeNil() {
	o.MIClipSize.Set(nil)
}

// UnsetMIClipSize ensures that no value is present for MIClipSize, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMIClipSize() {
	o.MIClipSize.Unset()
}

// GetMFlSpread returns the MFlSpread field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlSpread() float32 {
	if o == nil || IsNil(o.MFlSpread.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlSpread.Get()
}

// GetMFlSpreadOk returns a tuple with the MFlSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlSpreadOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlSpread.Get(), o.MFlSpread.IsSet()
}

// HasMFlSpread returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlSpread() bool {
	if o != nil && o.MFlSpread.IsSet() {
		return true
	}

	return false
}

// SetMFlSpread gets a reference to the given NullableFloat32 and assigns it to the MFlSpread field.
func (o *RawWeaponInfoV2Input) SetMFlSpread(v float32) {
	o.MFlSpread.Set(&v)
}
// SetMFlSpreadNil sets the value for MFlSpread to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlSpreadNil() {
	o.MFlSpread.Set(nil)
}

// UnsetMFlSpread ensures that no value is present for MFlSpread, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlSpread() {
	o.MFlSpread.Unset()
}

// GetMFlStandingSpread returns the MFlStandingSpread field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlStandingSpread() float32 {
	if o == nil || IsNil(o.MFlStandingSpread.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlStandingSpread.Get()
}

// GetMFlStandingSpreadOk returns a tuple with the MFlStandingSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlStandingSpreadOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlStandingSpread.Get(), o.MFlStandingSpread.IsSet()
}

// HasMFlStandingSpread returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlStandingSpread() bool {
	if o != nil && o.MFlStandingSpread.IsSet() {
		return true
	}

	return false
}

// SetMFlStandingSpread gets a reference to the given NullableFloat32 and assigns it to the MFlStandingSpread field.
func (o *RawWeaponInfoV2Input) SetMFlStandingSpread(v float32) {
	o.MFlStandingSpread.Set(&v)
}
// SetMFlStandingSpreadNil sets the value for MFlStandingSpread to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlStandingSpreadNil() {
	o.MFlStandingSpread.Set(nil)
}

// UnsetMFlStandingSpread ensures that no value is present for MFlStandingSpread, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlStandingSpread() {
	o.MFlStandingSpread.Unset()
}

// GetMFlLowAmmoIndicatorThreshold returns the MFlLowAmmoIndicatorThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlLowAmmoIndicatorThreshold() float32 {
	if o == nil || IsNil(o.MFlLowAmmoIndicatorThreshold.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlLowAmmoIndicatorThreshold.Get()
}

// GetMFlLowAmmoIndicatorThresholdOk returns a tuple with the MFlLowAmmoIndicatorThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlLowAmmoIndicatorThresholdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlLowAmmoIndicatorThreshold.Get(), o.MFlLowAmmoIndicatorThreshold.IsSet()
}

// HasMFlLowAmmoIndicatorThreshold returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlLowAmmoIndicatorThreshold() bool {
	if o != nil && o.MFlLowAmmoIndicatorThreshold.IsSet() {
		return true
	}

	return false
}

// SetMFlLowAmmoIndicatorThreshold gets a reference to the given NullableFloat32 and assigns it to the MFlLowAmmoIndicatorThreshold field.
func (o *RawWeaponInfoV2Input) SetMFlLowAmmoIndicatorThreshold(v float32) {
	o.MFlLowAmmoIndicatorThreshold.Set(&v)
}
// SetMFlLowAmmoIndicatorThresholdNil sets the value for MFlLowAmmoIndicatorThreshold to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlLowAmmoIndicatorThresholdNil() {
	o.MFlLowAmmoIndicatorThreshold.Set(nil)
}

// UnsetMFlLowAmmoIndicatorThreshold ensures that no value is present for MFlLowAmmoIndicatorThreshold, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlLowAmmoIndicatorThreshold() {
	o.MFlLowAmmoIndicatorThreshold.Unset()
}

// GetMFlRecoilSeed returns the MFlRecoilSeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlRecoilSeed() float32 {
	if o == nil || IsNil(o.MFlRecoilSeed.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlRecoilSeed.Get()
}

// GetMFlRecoilSeedOk returns a tuple with the MFlRecoilSeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlRecoilSeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlRecoilSeed.Get(), o.MFlRecoilSeed.IsSet()
}

// HasMFlRecoilSeed returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlRecoilSeed() bool {
	if o != nil && o.MFlRecoilSeed.IsSet() {
		return true
	}

	return false
}

// SetMFlRecoilSeed gets a reference to the given NullableFloat32 and assigns it to the MFlRecoilSeed field.
func (o *RawWeaponInfoV2Input) SetMFlRecoilSeed(v float32) {
	o.MFlRecoilSeed.Set(&v)
}
// SetMFlRecoilSeedNil sets the value for MFlRecoilSeed to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlRecoilSeedNil() {
	o.MFlRecoilSeed.Set(nil)
}

// UnsetMFlRecoilSeed ensures that no value is present for MFlRecoilSeed, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlRecoilSeed() {
	o.MFlRecoilSeed.Unset()
}

// GetMFlReloadDuration returns the MFlReloadDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMFlReloadDuration() float32 {
	if o == nil || IsNil(o.MFlReloadDuration.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlReloadDuration.Get()
}

// GetMFlReloadDurationOk returns a tuple with the MFlReloadDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMFlReloadDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlReloadDuration.Get(), o.MFlReloadDuration.IsSet()
}

// HasMFlReloadDuration returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMFlReloadDuration() bool {
	if o != nil && o.MFlReloadDuration.IsSet() {
		return true
	}

	return false
}

// SetMFlReloadDuration gets a reference to the given NullableFloat32 and assigns it to the MFlReloadDuration field.
func (o *RawWeaponInfoV2Input) SetMFlReloadDuration(v float32) {
	o.MFlReloadDuration.Set(&v)
}
// SetMFlReloadDurationNil sets the value for MFlReloadDuration to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMFlReloadDurationNil() {
	o.MFlReloadDuration.Set(nil)
}

// UnsetMFlReloadDuration ensures that no value is present for MFlReloadDuration, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMFlReloadDuration() {
	o.MFlReloadDuration.Unset()
}

// GetMBulletSpeedCurve returns the MBulletSpeedCurve field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMBulletSpeedCurve() RawItemWeaponInfoBulletSpeedCurveV2Input {
	if o == nil || IsNil(o.MBulletSpeedCurve.Get()) {
		var ret RawItemWeaponInfoBulletSpeedCurveV2Input
		return ret
	}
	return *o.MBulletSpeedCurve.Get()
}

// GetMBulletSpeedCurveOk returns a tuple with the MBulletSpeedCurve field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMBulletSpeedCurveOk() (*RawItemWeaponInfoBulletSpeedCurveV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return o.MBulletSpeedCurve.Get(), o.MBulletSpeedCurve.IsSet()
}

// HasMBulletSpeedCurve returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMBulletSpeedCurve() bool {
	if o != nil && o.MBulletSpeedCurve.IsSet() {
		return true
	}

	return false
}

// SetMBulletSpeedCurve gets a reference to the given NullableRawItemWeaponInfoBulletSpeedCurveV2Input and assigns it to the MBulletSpeedCurve field.
func (o *RawWeaponInfoV2Input) SetMBulletSpeedCurve(v RawItemWeaponInfoBulletSpeedCurveV2Input) {
	o.MBulletSpeedCurve.Set(&v)
}
// SetMBulletSpeedCurveNil sets the value for MBulletSpeedCurve to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMBulletSpeedCurveNil() {
	o.MBulletSpeedCurve.Set(nil)
}

// UnsetMBulletSpeedCurve ensures that no value is present for MBulletSpeedCurve, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMBulletSpeedCurve() {
	o.MBulletSpeedCurve.Unset()
}

// GetMHorizontalRecoil returns the MHorizontalRecoil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMHorizontalRecoil() RawWeaponInfoHorizontalRecoilV2Input {
	if o == nil || IsNil(o.MHorizontalRecoil.Get()) {
		var ret RawWeaponInfoHorizontalRecoilV2Input
		return ret
	}
	return *o.MHorizontalRecoil.Get()
}

// GetMHorizontalRecoilOk returns a tuple with the MHorizontalRecoil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMHorizontalRecoilOk() (*RawWeaponInfoHorizontalRecoilV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return o.MHorizontalRecoil.Get(), o.MHorizontalRecoil.IsSet()
}

// HasMHorizontalRecoil returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMHorizontalRecoil() bool {
	if o != nil && o.MHorizontalRecoil.IsSet() {
		return true
	}

	return false
}

// SetMHorizontalRecoil gets a reference to the given NullableRawWeaponInfoHorizontalRecoilV2Input and assigns it to the MHorizontalRecoil field.
func (o *RawWeaponInfoV2Input) SetMHorizontalRecoil(v RawWeaponInfoHorizontalRecoilV2Input) {
	o.MHorizontalRecoil.Set(&v)
}
// SetMHorizontalRecoilNil sets the value for MHorizontalRecoil to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMHorizontalRecoilNil() {
	o.MHorizontalRecoil.Set(nil)
}

// UnsetMHorizontalRecoil ensures that no value is present for MHorizontalRecoil, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMHorizontalRecoil() {
	o.MHorizontalRecoil.Unset()
}

// GetMVerticalRecoil returns the MVerticalRecoil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoV2Input) GetMVerticalRecoil() RawWeaponInfoVerticalRecoilV2Input {
	if o == nil || IsNil(o.MVerticalRecoil.Get()) {
		var ret RawWeaponInfoVerticalRecoilV2Input
		return ret
	}
	return *o.MVerticalRecoil.Get()
}

// GetMVerticalRecoilOk returns a tuple with the MVerticalRecoil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoV2Input) GetMVerticalRecoilOk() (*RawWeaponInfoVerticalRecoilV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVerticalRecoil.Get(), o.MVerticalRecoil.IsSet()
}

// HasMVerticalRecoil returns a boolean if a field has been set.
func (o *RawWeaponInfoV2Input) HasMVerticalRecoil() bool {
	if o != nil && o.MVerticalRecoil.IsSet() {
		return true
	}

	return false
}

// SetMVerticalRecoil gets a reference to the given NullableRawWeaponInfoVerticalRecoilV2Input and assigns it to the MVerticalRecoil field.
func (o *RawWeaponInfoV2Input) SetMVerticalRecoil(v RawWeaponInfoVerticalRecoilV2Input) {
	o.MVerticalRecoil.Set(&v)
}
// SetMVerticalRecoilNil sets the value for MVerticalRecoil to be an explicit nil
func (o *RawWeaponInfoV2Input) SetMVerticalRecoilNil() {
	o.MVerticalRecoil.Set(nil)
}

// UnsetMVerticalRecoil ensures that no value is present for MVerticalRecoil, not even an explicit nil
func (o *RawWeaponInfoV2Input) UnsetMVerticalRecoil() {
	o.MVerticalRecoil.Unset()
}

func (o RawWeaponInfoV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawWeaponInfoV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MBCanZoom.IsSet() {
		toSerialize["m_bCanZoom"] = o.MBCanZoom.Get()
	}
	if o.MFlBulletDamage.IsSet() {
		toSerialize["m_flBulletDamage"] = o.MFlBulletDamage.Get()
	}
	if o.MFlBulletGravityScale.IsSet() {
		toSerialize["m_flBulletGravityScale"] = o.MFlBulletGravityScale.Get()
	}
	if o.MFlBulletInheritShooterVelocityScale.IsSet() {
		toSerialize["m_flBulletInheritShooterVelocityScale"] = o.MFlBulletInheritShooterVelocityScale.Get()
	}
	if o.MFlBulletLifetime.IsSet() {
		toSerialize["m_flBulletLifetime"] = o.MFlBulletLifetime.Get()
	}
	if o.MFlBulletRadius.IsSet() {
		toSerialize["m_flBulletRadius"] = o.MFlBulletRadius.Get()
	}
	if o.MFlBulletRadiusVsWorld.IsSet() {
		toSerialize["m_flBulletRadiusVsWorld"] = o.MFlBulletRadiusVsWorld.Get()
	}
	if o.MFlBulletReflectAmount.IsSet() {
		toSerialize["m_flBulletReflectAmount"] = o.MFlBulletReflectAmount.Get()
	}
	if o.MFlBulletReflectScale.IsSet() {
		toSerialize["m_flBulletReflectScale"] = o.MFlBulletReflectScale.Get()
	}
	if o.MFlBulletWhizDistance.IsSet() {
		toSerialize["m_flBulletWhizDistance"] = o.MFlBulletWhizDistance.Get()
	}
	if o.MFlBurstShotCooldown.IsSet() {
		toSerialize["m_flBurstShotCooldown"] = o.MFlBurstShotCooldown.Get()
	}
	if o.MFlCritBonusAgainstNpcs.IsSet() {
		toSerialize["m_flCritBonusAgainstNpcs"] = o.MFlCritBonusAgainstNpcs.Get()
	}
	if o.MFlCritBonusEnd.IsSet() {
		toSerialize["m_flCritBonusEnd"] = o.MFlCritBonusEnd.Get()
	}
	if o.MFlCritBonusEndRange.IsSet() {
		toSerialize["m_flCritBonusEndRange"] = o.MFlCritBonusEndRange.Get()
	}
	if o.MFlCritBonusStart.IsSet() {
		toSerialize["m_flCritBonusStart"] = o.MFlCritBonusStart.Get()
	}
	if o.MFlCritBonusStartRange.IsSet() {
		toSerialize["m_flCritBonusStartRange"] = o.MFlCritBonusStartRange.Get()
	}
	if o.MFlCycleTime.IsSet() {
		toSerialize["m_flCycleTime"] = o.MFlCycleTime.Get()
	}
	if o.MFlIntraBurstCycleTime.IsSet() {
		toSerialize["m_flIntraBurstCycleTime"] = o.MFlIntraBurstCycleTime.Get()
	}
	if o.MFlMaxSpinCycleTime.IsSet() {
		toSerialize["m_flMaxSpinCycleTime"] = o.MFlMaxSpinCycleTime.Get()
	}
	if o.MFlDamageFalloffBias.IsSet() {
		toSerialize["m_flDamageFalloffBias"] = o.MFlDamageFalloffBias.Get()
	}
	if o.MFlDamageFalloffEndRange.IsSet() {
		toSerialize["m_flDamageFalloffEndRange"] = o.MFlDamageFalloffEndRange.Get()
	}
	if o.MFlDamageFalloffEndScale.IsSet() {
		toSerialize["m_flDamageFalloffEndScale"] = o.MFlDamageFalloffEndScale.Get()
	}
	if o.MFlDamageFalloffStartRange.IsSet() {
		toSerialize["m_flDamageFalloffStartRange"] = o.MFlDamageFalloffStartRange.Get()
	}
	if o.MFlDamageFalloffStartScale.IsSet() {
		toSerialize["m_flDamageFalloffStartScale"] = o.MFlDamageFalloffStartScale.Get()
	}
	if o.MFlHorizontalPunch.IsSet() {
		toSerialize["m_flHorizontalPunch"] = o.MFlHorizontalPunch.Get()
	}
	if o.MFlRange.IsSet() {
		toSerialize["m_flRange"] = o.MFlRange.Get()
	}
	if o.MFlRecoilRecoveryDelayFactor.IsSet() {
		toSerialize["m_flRecoilRecoveryDelayFactor"] = o.MFlRecoilRecoveryDelayFactor.Get()
	}
	if o.MFlRecoilRecoverySpeed.IsSet() {
		toSerialize["m_flRecoilRecoverySpeed"] = o.MFlRecoilRecoverySpeed.Get()
	}
	if o.MFlRecoilShotIndexRecoveryTimeFactor.IsSet() {
		toSerialize["m_flRecoilShotIndexRecoveryTimeFactor"] = o.MFlRecoilShotIndexRecoveryTimeFactor.Get()
	}
	if o.MFlRecoilSpeed.IsSet() {
		toSerialize["m_flRecoilSpeed"] = o.MFlRecoilSpeed.Get()
	}
	if o.MFlReloadMoveSpeed.IsSet() {
		toSerialize["m_flReloadMoveSpeed"] = o.MFlReloadMoveSpeed.Get()
	}
	if o.MFlScatterYawScale.IsSet() {
		toSerialize["m_flScatterYawScale"] = o.MFlScatterYawScale.Get()
	}
	if o.MAimingShootSpreadPenalty.IsSet() {
		toSerialize["m_AimingShootSpreadPenalty"] = o.MAimingShootSpreadPenalty.Get()
	}
	if o.MStandingShootSpreadPenalty.IsSet() {
		toSerialize["m_StandingShootSpreadPenalty"] = o.MStandingShootSpreadPenalty.Get()
	}
	if o.MFlShootMoveSpeedPercent.IsSet() {
		toSerialize["m_flShootMoveSpeedPercent"] = o.MFlShootMoveSpeedPercent.Get()
	}
	if o.MFlShootSpreadPenaltyDecay.IsSet() {
		toSerialize["m_flShootSpreadPenaltyDecay"] = o.MFlShootSpreadPenaltyDecay.Get()
	}
	if o.MFlShootSpreadPenaltyDecayDelay.IsSet() {
		toSerialize["m_flShootSpreadPenaltyDecayDelay"] = o.MFlShootSpreadPenaltyDecayDelay.Get()
	}
	if o.MFlShootSpreadPenaltyPerShot.IsSet() {
		toSerialize["m_flShootSpreadPenaltyPerShot"] = o.MFlShootSpreadPenaltyPerShot.Get()
	}
	if o.MFlShootingUpSpreadPenalty.IsSet() {
		toSerialize["m_flShootingUpSpreadPenalty"] = o.MFlShootingUpSpreadPenalty.Get()
	}
	if o.MFlVerticalPunch.IsSet() {
		toSerialize["m_flVerticalPunch"] = o.MFlVerticalPunch.Get()
	}
	if o.MFlZoomFov.IsSet() {
		toSerialize["m_flZoomFov"] = o.MFlZoomFov.Get()
	}
	if o.MFlZoomMoveSpeedPercent.IsSet() {
		toSerialize["m_flZoomMoveSpeedPercent"] = o.MFlZoomMoveSpeedPercent.Get()
	}
	if o.MIBullets.IsSet() {
		toSerialize["m_iBullets"] = o.MIBullets.Get()
	}
	if o.MIBurstShotCount.IsSet() {
		toSerialize["m_iBurstShotCount"] = o.MIBurstShotCount.Get()
	}
	if o.MIClipSize.IsSet() {
		toSerialize["m_iClipSize"] = o.MIClipSize.Get()
	}
	if o.MFlSpread.IsSet() {
		toSerialize["m_flSpread"] = o.MFlSpread.Get()
	}
	if o.MFlStandingSpread.IsSet() {
		toSerialize["m_flStandingSpread"] = o.MFlStandingSpread.Get()
	}
	if o.MFlLowAmmoIndicatorThreshold.IsSet() {
		toSerialize["m_flLowAmmoIndicatorThreshold"] = o.MFlLowAmmoIndicatorThreshold.Get()
	}
	if o.MFlRecoilSeed.IsSet() {
		toSerialize["m_flRecoilSeed"] = o.MFlRecoilSeed.Get()
	}
	if o.MFlReloadDuration.IsSet() {
		toSerialize["m_flReloadDuration"] = o.MFlReloadDuration.Get()
	}
	if o.MBulletSpeedCurve.IsSet() {
		toSerialize["m_BulletSpeedCurve"] = o.MBulletSpeedCurve.Get()
	}
	if o.MHorizontalRecoil.IsSet() {
		toSerialize["m_HorizontalRecoil"] = o.MHorizontalRecoil.Get()
	}
	if o.MVerticalRecoil.IsSet() {
		toSerialize["m_VerticalRecoil"] = o.MVerticalRecoil.Get()
	}
	return toSerialize, nil
}

type NullableRawWeaponInfoV2Input struct {
	value *RawWeaponInfoV2Input
	isSet bool
}

func (v NullableRawWeaponInfoV2Input) Get() *RawWeaponInfoV2Input {
	return v.value
}

func (v *NullableRawWeaponInfoV2Input) Set(val *RawWeaponInfoV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawWeaponInfoV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawWeaponInfoV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawWeaponInfoV2Input(val *RawWeaponInfoV2Input) *NullableRawWeaponInfoV2Input {
	return &NullableRawWeaponInfoV2Input{value: val, isSet: true}
}

func (v NullableRawWeaponInfoV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawWeaponInfoV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


