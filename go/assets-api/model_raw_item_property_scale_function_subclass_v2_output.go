/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawItemPropertyScaleFunctionSubclassV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawItemPropertyScaleFunctionSubclassV2Output{}

// RawItemPropertyScaleFunctionSubclassV2Output struct for RawItemPropertyScaleFunctionSubclassV2Output
type RawItemPropertyScaleFunctionSubclassV2Output struct {
	ClassName NullableString `json:"class_name,omitempty"`
	SubclassName NullableString `json:"subclass_name,omitempty"`
	SpecificStatScaleType NullableString `json:"specific_stat_scale_type,omitempty"`
	ScalingStats []string `json:"scaling_stats,omitempty"`
	StatScale NullableFloat32 `json:"stat_scale,omitempty"`
}

// NewRawItemPropertyScaleFunctionSubclassV2Output instantiates a new RawItemPropertyScaleFunctionSubclassV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawItemPropertyScaleFunctionSubclassV2Output() *RawItemPropertyScaleFunctionSubclassV2Output {
	this := RawItemPropertyScaleFunctionSubclassV2Output{}
	return &this
}

// NewRawItemPropertyScaleFunctionSubclassV2OutputWithDefaults instantiates a new RawItemPropertyScaleFunctionSubclassV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawItemPropertyScaleFunctionSubclassV2OutputWithDefaults() *RawItemPropertyScaleFunctionSubclassV2Output {
	this := RawItemPropertyScaleFunctionSubclassV2Output{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetClassName() string {
	if o == nil || IsNil(o.ClassName.Get()) {
		var ret string
		return ret
	}
	return *o.ClassName.Get()
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClassName.Get(), o.ClassName.IsSet()
}

// HasClassName returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) HasClassName() bool {
	if o != nil && o.ClassName.IsSet() {
		return true
	}

	return false
}

// SetClassName gets a reference to the given NullableString and assigns it to the ClassName field.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetClassName(v string) {
	o.ClassName.Set(&v)
}
// SetClassNameNil sets the value for ClassName to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetClassNameNil() {
	o.ClassName.Set(nil)
}

// UnsetClassName ensures that no value is present for ClassName, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) UnsetClassName() {
	o.ClassName.Unset()
}

// GetSubclassName returns the SubclassName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetSubclassName() string {
	if o == nil || IsNil(o.SubclassName.Get()) {
		var ret string
		return ret
	}
	return *o.SubclassName.Get()
}

// GetSubclassNameOk returns a tuple with the SubclassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetSubclassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubclassName.Get(), o.SubclassName.IsSet()
}

// HasSubclassName returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) HasSubclassName() bool {
	if o != nil && o.SubclassName.IsSet() {
		return true
	}

	return false
}

// SetSubclassName gets a reference to the given NullableString and assigns it to the SubclassName field.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetSubclassName(v string) {
	o.SubclassName.Set(&v)
}
// SetSubclassNameNil sets the value for SubclassName to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetSubclassNameNil() {
	o.SubclassName.Set(nil)
}

// UnsetSubclassName ensures that no value is present for SubclassName, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) UnsetSubclassName() {
	o.SubclassName.Unset()
}

// GetSpecificStatScaleType returns the SpecificStatScaleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetSpecificStatScaleType() string {
	if o == nil || IsNil(o.SpecificStatScaleType.Get()) {
		var ret string
		return ret
	}
	return *o.SpecificStatScaleType.Get()
}

// GetSpecificStatScaleTypeOk returns a tuple with the SpecificStatScaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetSpecificStatScaleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecificStatScaleType.Get(), o.SpecificStatScaleType.IsSet()
}

// HasSpecificStatScaleType returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) HasSpecificStatScaleType() bool {
	if o != nil && o.SpecificStatScaleType.IsSet() {
		return true
	}

	return false
}

// SetSpecificStatScaleType gets a reference to the given NullableString and assigns it to the SpecificStatScaleType field.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetSpecificStatScaleType(v string) {
	o.SpecificStatScaleType.Set(&v)
}
// SetSpecificStatScaleTypeNil sets the value for SpecificStatScaleType to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetSpecificStatScaleTypeNil() {
	o.SpecificStatScaleType.Set(nil)
}

// UnsetSpecificStatScaleType ensures that no value is present for SpecificStatScaleType, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) UnsetSpecificStatScaleType() {
	o.SpecificStatScaleType.Unset()
}

// GetScalingStats returns the ScalingStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetScalingStats() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ScalingStats
}

// GetScalingStatsOk returns a tuple with the ScalingStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetScalingStatsOk() ([]string, bool) {
	if o == nil || IsNil(o.ScalingStats) {
		return nil, false
	}
	return o.ScalingStats, true
}

// HasScalingStats returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) HasScalingStats() bool {
	if o != nil && !IsNil(o.ScalingStats) {
		return true
	}

	return false
}

// SetScalingStats gets a reference to the given []string and assigns it to the ScalingStats field.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetScalingStats(v []string) {
	o.ScalingStats = v
}

// GetStatScale returns the StatScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetStatScale() float32 {
	if o == nil || IsNil(o.StatScale.Get()) {
		var ret float32
		return ret
	}
	return *o.StatScale.Get()
}

// GetStatScaleOk returns a tuple with the StatScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Output) GetStatScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatScale.Get(), o.StatScale.IsSet()
}

// HasStatScale returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) HasStatScale() bool {
	if o != nil && o.StatScale.IsSet() {
		return true
	}

	return false
}

// SetStatScale gets a reference to the given NullableFloat32 and assigns it to the StatScale field.
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetStatScale(v float32) {
	o.StatScale.Set(&v)
}
// SetStatScaleNil sets the value for StatScale to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) SetStatScaleNil() {
	o.StatScale.Set(nil)
}

// UnsetStatScale ensures that no value is present for StatScale, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Output) UnsetStatScale() {
	o.StatScale.Unset()
}

func (o RawItemPropertyScaleFunctionSubclassV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawItemPropertyScaleFunctionSubclassV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClassName.IsSet() {
		toSerialize["class_name"] = o.ClassName.Get()
	}
	if o.SubclassName.IsSet() {
		toSerialize["subclass_name"] = o.SubclassName.Get()
	}
	if o.SpecificStatScaleType.IsSet() {
		toSerialize["specific_stat_scale_type"] = o.SpecificStatScaleType.Get()
	}
	if o.ScalingStats != nil {
		toSerialize["scaling_stats"] = o.ScalingStats
	}
	if o.StatScale.IsSet() {
		toSerialize["stat_scale"] = o.StatScale.Get()
	}
	return toSerialize, nil
}

type NullableRawItemPropertyScaleFunctionSubclassV2Output struct {
	value *RawItemPropertyScaleFunctionSubclassV2Output
	isSet bool
}

func (v NullableRawItemPropertyScaleFunctionSubclassV2Output) Get() *RawItemPropertyScaleFunctionSubclassV2Output {
	return v.value
}

func (v *NullableRawItemPropertyScaleFunctionSubclassV2Output) Set(val *RawItemPropertyScaleFunctionSubclassV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableRawItemPropertyScaleFunctionSubclassV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableRawItemPropertyScaleFunctionSubclassV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawItemPropertyScaleFunctionSubclassV2Output(val *RawItemPropertyScaleFunctionSubclassV2Output) *NullableRawItemPropertyScaleFunctionSubclassV2Output {
	return &NullableRawItemPropertyScaleFunctionSubclassV2Output{value: val, isSet: true}
}

func (v NullableRawItemPropertyScaleFunctionSubclassV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawItemPropertyScaleFunctionSubclassV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


