/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the UpgradePropertyV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradePropertyV2Input{}

// UpgradePropertyV2Input struct for UpgradePropertyV2Input
type UpgradePropertyV2Input struct {
	MStrValue NullableMStrvalue `json:"m_strValue,omitempty"`
	MBCanSetTokenOverride NullableBool `json:"m_bCanSetTokenOverride,omitempty"`
	MEProvidedPropertyType NullableString `json:"m_eProvidedPropertyType,omitempty"`
	MStrCSSClass NullableString `json:"m_strCSSClass,omitempty"`
	MEStatsUsageFlags NullableMEstatsusageflags `json:"m_eStatsUsageFlags,omitempty"`
	MBIsNegativeAttribute NullableBool `json:"m_bIsNegativeAttribute,omitempty"`
	MStrDisableValue NullableString `json:"m_strDisableValue,omitempty"`
	MStrLocTokenOverride NullableString `json:"m_strLocTokenOverride,omitempty"`
	MEDisplayUnits NullableString `json:"m_eDisplayUnits,omitempty"`
	ScaleFunction NullableRawItemPropertyScaleFunctionSubclassV2Input `json:"scale_function,omitempty"`
	Prefix NullableString `json:"prefix,omitempty"`
	Label NullableString `json:"label,omitempty"`
	Postfix NullableString `json:"postfix,omitempty"`
	PostvalueLabel NullableString `json:"postvalue_label,omitempty"`
	Conditional NullableString `json:"conditional,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	TooltipSection NullableRawAbilitySectionTypeV2 `json:"tooltip_section,omitempty"`
	TooltipIsElevated NullableBool `json:"tooltip_is_elevated,omitempty"`
	TooltipIsImportant NullableBool `json:"tooltip_is_important,omitempty"`
}

// NewUpgradePropertyV2Input instantiates a new UpgradePropertyV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradePropertyV2Input() *UpgradePropertyV2Input {
	this := UpgradePropertyV2Input{}
	return &this
}

// NewUpgradePropertyV2InputWithDefaults instantiates a new UpgradePropertyV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradePropertyV2InputWithDefaults() *UpgradePropertyV2Input {
	this := UpgradePropertyV2Input{}
	return &this
}

// GetMStrValue returns the MStrValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMStrValue() MStrvalue {
	if o == nil || IsNil(o.MStrValue.Get()) {
		var ret MStrvalue
		return ret
	}
	return *o.MStrValue.Get()
}

// GetMStrValueOk returns a tuple with the MStrValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMStrValueOk() (*MStrvalue, bool) {
	if o == nil {
		return nil, false
	}
	return o.MStrValue.Get(), o.MStrValue.IsSet()
}

// HasMStrValue returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMStrValue() bool {
	if o != nil && o.MStrValue.IsSet() {
		return true
	}

	return false
}

// SetMStrValue gets a reference to the given NullableMStrvalue and assigns it to the MStrValue field.
func (o *UpgradePropertyV2Input) SetMStrValue(v MStrvalue) {
	o.MStrValue.Set(&v)
}
// SetMStrValueNil sets the value for MStrValue to be an explicit nil
func (o *UpgradePropertyV2Input) SetMStrValueNil() {
	o.MStrValue.Set(nil)
}

// UnsetMStrValue ensures that no value is present for MStrValue, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMStrValue() {
	o.MStrValue.Unset()
}

// GetMBCanSetTokenOverride returns the MBCanSetTokenOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMBCanSetTokenOverride() bool {
	if o == nil || IsNil(o.MBCanSetTokenOverride.Get()) {
		var ret bool
		return ret
	}
	return *o.MBCanSetTokenOverride.Get()
}

// GetMBCanSetTokenOverrideOk returns a tuple with the MBCanSetTokenOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMBCanSetTokenOverrideOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MBCanSetTokenOverride.Get(), o.MBCanSetTokenOverride.IsSet()
}

// HasMBCanSetTokenOverride returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMBCanSetTokenOverride() bool {
	if o != nil && o.MBCanSetTokenOverride.IsSet() {
		return true
	}

	return false
}

// SetMBCanSetTokenOverride gets a reference to the given NullableBool and assigns it to the MBCanSetTokenOverride field.
func (o *UpgradePropertyV2Input) SetMBCanSetTokenOverride(v bool) {
	o.MBCanSetTokenOverride.Set(&v)
}
// SetMBCanSetTokenOverrideNil sets the value for MBCanSetTokenOverride to be an explicit nil
func (o *UpgradePropertyV2Input) SetMBCanSetTokenOverrideNil() {
	o.MBCanSetTokenOverride.Set(nil)
}

// UnsetMBCanSetTokenOverride ensures that no value is present for MBCanSetTokenOverride, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMBCanSetTokenOverride() {
	o.MBCanSetTokenOverride.Unset()
}

// GetMEProvidedPropertyType returns the MEProvidedPropertyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMEProvidedPropertyType() string {
	if o == nil || IsNil(o.MEProvidedPropertyType.Get()) {
		var ret string
		return ret
	}
	return *o.MEProvidedPropertyType.Get()
}

// GetMEProvidedPropertyTypeOk returns a tuple with the MEProvidedPropertyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMEProvidedPropertyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MEProvidedPropertyType.Get(), o.MEProvidedPropertyType.IsSet()
}

// HasMEProvidedPropertyType returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMEProvidedPropertyType() bool {
	if o != nil && o.MEProvidedPropertyType.IsSet() {
		return true
	}

	return false
}

// SetMEProvidedPropertyType gets a reference to the given NullableString and assigns it to the MEProvidedPropertyType field.
func (o *UpgradePropertyV2Input) SetMEProvidedPropertyType(v string) {
	o.MEProvidedPropertyType.Set(&v)
}
// SetMEProvidedPropertyTypeNil sets the value for MEProvidedPropertyType to be an explicit nil
func (o *UpgradePropertyV2Input) SetMEProvidedPropertyTypeNil() {
	o.MEProvidedPropertyType.Set(nil)
}

// UnsetMEProvidedPropertyType ensures that no value is present for MEProvidedPropertyType, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMEProvidedPropertyType() {
	o.MEProvidedPropertyType.Unset()
}

// GetMStrCSSClass returns the MStrCSSClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMStrCSSClass() string {
	if o == nil || IsNil(o.MStrCSSClass.Get()) {
		var ret string
		return ret
	}
	return *o.MStrCSSClass.Get()
}

// GetMStrCSSClassOk returns a tuple with the MStrCSSClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMStrCSSClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MStrCSSClass.Get(), o.MStrCSSClass.IsSet()
}

// HasMStrCSSClass returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMStrCSSClass() bool {
	if o != nil && o.MStrCSSClass.IsSet() {
		return true
	}

	return false
}

// SetMStrCSSClass gets a reference to the given NullableString and assigns it to the MStrCSSClass field.
func (o *UpgradePropertyV2Input) SetMStrCSSClass(v string) {
	o.MStrCSSClass.Set(&v)
}
// SetMStrCSSClassNil sets the value for MStrCSSClass to be an explicit nil
func (o *UpgradePropertyV2Input) SetMStrCSSClassNil() {
	o.MStrCSSClass.Set(nil)
}

// UnsetMStrCSSClass ensures that no value is present for MStrCSSClass, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMStrCSSClass() {
	o.MStrCSSClass.Unset()
}

// GetMEStatsUsageFlags returns the MEStatsUsageFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMEStatsUsageFlags() MEstatsusageflags {
	if o == nil || IsNil(o.MEStatsUsageFlags.Get()) {
		var ret MEstatsusageflags
		return ret
	}
	return *o.MEStatsUsageFlags.Get()
}

// GetMEStatsUsageFlagsOk returns a tuple with the MEStatsUsageFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMEStatsUsageFlagsOk() (*MEstatsusageflags, bool) {
	if o == nil {
		return nil, false
	}
	return o.MEStatsUsageFlags.Get(), o.MEStatsUsageFlags.IsSet()
}

// HasMEStatsUsageFlags returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMEStatsUsageFlags() bool {
	if o != nil && o.MEStatsUsageFlags.IsSet() {
		return true
	}

	return false
}

// SetMEStatsUsageFlags gets a reference to the given NullableMEstatsusageflags and assigns it to the MEStatsUsageFlags field.
func (o *UpgradePropertyV2Input) SetMEStatsUsageFlags(v MEstatsusageflags) {
	o.MEStatsUsageFlags.Set(&v)
}
// SetMEStatsUsageFlagsNil sets the value for MEStatsUsageFlags to be an explicit nil
func (o *UpgradePropertyV2Input) SetMEStatsUsageFlagsNil() {
	o.MEStatsUsageFlags.Set(nil)
}

// UnsetMEStatsUsageFlags ensures that no value is present for MEStatsUsageFlags, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMEStatsUsageFlags() {
	o.MEStatsUsageFlags.Unset()
}

// GetMBIsNegativeAttribute returns the MBIsNegativeAttribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMBIsNegativeAttribute() bool {
	if o == nil || IsNil(o.MBIsNegativeAttribute.Get()) {
		var ret bool
		return ret
	}
	return *o.MBIsNegativeAttribute.Get()
}

// GetMBIsNegativeAttributeOk returns a tuple with the MBIsNegativeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMBIsNegativeAttributeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MBIsNegativeAttribute.Get(), o.MBIsNegativeAttribute.IsSet()
}

// HasMBIsNegativeAttribute returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMBIsNegativeAttribute() bool {
	if o != nil && o.MBIsNegativeAttribute.IsSet() {
		return true
	}

	return false
}

// SetMBIsNegativeAttribute gets a reference to the given NullableBool and assigns it to the MBIsNegativeAttribute field.
func (o *UpgradePropertyV2Input) SetMBIsNegativeAttribute(v bool) {
	o.MBIsNegativeAttribute.Set(&v)
}
// SetMBIsNegativeAttributeNil sets the value for MBIsNegativeAttribute to be an explicit nil
func (o *UpgradePropertyV2Input) SetMBIsNegativeAttributeNil() {
	o.MBIsNegativeAttribute.Set(nil)
}

// UnsetMBIsNegativeAttribute ensures that no value is present for MBIsNegativeAttribute, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMBIsNegativeAttribute() {
	o.MBIsNegativeAttribute.Unset()
}

// GetMStrDisableValue returns the MStrDisableValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMStrDisableValue() string {
	if o == nil || IsNil(o.MStrDisableValue.Get()) {
		var ret string
		return ret
	}
	return *o.MStrDisableValue.Get()
}

// GetMStrDisableValueOk returns a tuple with the MStrDisableValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMStrDisableValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MStrDisableValue.Get(), o.MStrDisableValue.IsSet()
}

// HasMStrDisableValue returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMStrDisableValue() bool {
	if o != nil && o.MStrDisableValue.IsSet() {
		return true
	}

	return false
}

// SetMStrDisableValue gets a reference to the given NullableString and assigns it to the MStrDisableValue field.
func (o *UpgradePropertyV2Input) SetMStrDisableValue(v string) {
	o.MStrDisableValue.Set(&v)
}
// SetMStrDisableValueNil sets the value for MStrDisableValue to be an explicit nil
func (o *UpgradePropertyV2Input) SetMStrDisableValueNil() {
	o.MStrDisableValue.Set(nil)
}

// UnsetMStrDisableValue ensures that no value is present for MStrDisableValue, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMStrDisableValue() {
	o.MStrDisableValue.Unset()
}

// GetMStrLocTokenOverride returns the MStrLocTokenOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMStrLocTokenOverride() string {
	if o == nil || IsNil(o.MStrLocTokenOverride.Get()) {
		var ret string
		return ret
	}
	return *o.MStrLocTokenOverride.Get()
}

// GetMStrLocTokenOverrideOk returns a tuple with the MStrLocTokenOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMStrLocTokenOverrideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MStrLocTokenOverride.Get(), o.MStrLocTokenOverride.IsSet()
}

// HasMStrLocTokenOverride returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMStrLocTokenOverride() bool {
	if o != nil && o.MStrLocTokenOverride.IsSet() {
		return true
	}

	return false
}

// SetMStrLocTokenOverride gets a reference to the given NullableString and assigns it to the MStrLocTokenOverride field.
func (o *UpgradePropertyV2Input) SetMStrLocTokenOverride(v string) {
	o.MStrLocTokenOverride.Set(&v)
}
// SetMStrLocTokenOverrideNil sets the value for MStrLocTokenOverride to be an explicit nil
func (o *UpgradePropertyV2Input) SetMStrLocTokenOverrideNil() {
	o.MStrLocTokenOverride.Set(nil)
}

// UnsetMStrLocTokenOverride ensures that no value is present for MStrLocTokenOverride, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMStrLocTokenOverride() {
	o.MStrLocTokenOverride.Unset()
}

// GetMEDisplayUnits returns the MEDisplayUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetMEDisplayUnits() string {
	if o == nil || IsNil(o.MEDisplayUnits.Get()) {
		var ret string
		return ret
	}
	return *o.MEDisplayUnits.Get()
}

// GetMEDisplayUnitsOk returns a tuple with the MEDisplayUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetMEDisplayUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MEDisplayUnits.Get(), o.MEDisplayUnits.IsSet()
}

// HasMEDisplayUnits returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasMEDisplayUnits() bool {
	if o != nil && o.MEDisplayUnits.IsSet() {
		return true
	}

	return false
}

// SetMEDisplayUnits gets a reference to the given NullableString and assigns it to the MEDisplayUnits field.
func (o *UpgradePropertyV2Input) SetMEDisplayUnits(v string) {
	o.MEDisplayUnits.Set(&v)
}
// SetMEDisplayUnitsNil sets the value for MEDisplayUnits to be an explicit nil
func (o *UpgradePropertyV2Input) SetMEDisplayUnitsNil() {
	o.MEDisplayUnits.Set(nil)
}

// UnsetMEDisplayUnits ensures that no value is present for MEDisplayUnits, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetMEDisplayUnits() {
	o.MEDisplayUnits.Unset()
}

// GetScaleFunction returns the ScaleFunction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetScaleFunction() RawItemPropertyScaleFunctionSubclassV2Input {
	if o == nil || IsNil(o.ScaleFunction.Get()) {
		var ret RawItemPropertyScaleFunctionSubclassV2Input
		return ret
	}
	return *o.ScaleFunction.Get()
}

// GetScaleFunctionOk returns a tuple with the ScaleFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetScaleFunctionOk() (*RawItemPropertyScaleFunctionSubclassV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaleFunction.Get(), o.ScaleFunction.IsSet()
}

// HasScaleFunction returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasScaleFunction() bool {
	if o != nil && o.ScaleFunction.IsSet() {
		return true
	}

	return false
}

// SetScaleFunction gets a reference to the given NullableRawItemPropertyScaleFunctionSubclassV2Input and assigns it to the ScaleFunction field.
func (o *UpgradePropertyV2Input) SetScaleFunction(v RawItemPropertyScaleFunctionSubclassV2Input) {
	o.ScaleFunction.Set(&v)
}
// SetScaleFunctionNil sets the value for ScaleFunction to be an explicit nil
func (o *UpgradePropertyV2Input) SetScaleFunctionNil() {
	o.ScaleFunction.Set(nil)
}

// UnsetScaleFunction ensures that no value is present for ScaleFunction, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetScaleFunction() {
	o.ScaleFunction.Unset()
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetPrefix() string {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret string
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableString and assigns it to the Prefix field.
func (o *UpgradePropertyV2Input) SetPrefix(v string) {
	o.Prefix.Set(&v)
}
// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *UpgradePropertyV2Input) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *UpgradePropertyV2Input) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *UpgradePropertyV2Input) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetLabel() {
	o.Label.Unset()
}

// GetPostfix returns the Postfix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetPostfix() string {
	if o == nil || IsNil(o.Postfix.Get()) {
		var ret string
		return ret
	}
	return *o.Postfix.Get()
}

// GetPostfixOk returns a tuple with the Postfix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetPostfixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Postfix.Get(), o.Postfix.IsSet()
}

// HasPostfix returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasPostfix() bool {
	if o != nil && o.Postfix.IsSet() {
		return true
	}

	return false
}

// SetPostfix gets a reference to the given NullableString and assigns it to the Postfix field.
func (o *UpgradePropertyV2Input) SetPostfix(v string) {
	o.Postfix.Set(&v)
}
// SetPostfixNil sets the value for Postfix to be an explicit nil
func (o *UpgradePropertyV2Input) SetPostfixNil() {
	o.Postfix.Set(nil)
}

// UnsetPostfix ensures that no value is present for Postfix, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetPostfix() {
	o.Postfix.Unset()
}

// GetPostvalueLabel returns the PostvalueLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetPostvalueLabel() string {
	if o == nil || IsNil(o.PostvalueLabel.Get()) {
		var ret string
		return ret
	}
	return *o.PostvalueLabel.Get()
}

// GetPostvalueLabelOk returns a tuple with the PostvalueLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetPostvalueLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostvalueLabel.Get(), o.PostvalueLabel.IsSet()
}

// HasPostvalueLabel returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasPostvalueLabel() bool {
	if o != nil && o.PostvalueLabel.IsSet() {
		return true
	}

	return false
}

// SetPostvalueLabel gets a reference to the given NullableString and assigns it to the PostvalueLabel field.
func (o *UpgradePropertyV2Input) SetPostvalueLabel(v string) {
	o.PostvalueLabel.Set(&v)
}
// SetPostvalueLabelNil sets the value for PostvalueLabel to be an explicit nil
func (o *UpgradePropertyV2Input) SetPostvalueLabelNil() {
	o.PostvalueLabel.Set(nil)
}

// UnsetPostvalueLabel ensures that no value is present for PostvalueLabel, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetPostvalueLabel() {
	o.PostvalueLabel.Unset()
}

// GetConditional returns the Conditional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetConditional() string {
	if o == nil || IsNil(o.Conditional.Get()) {
		var ret string
		return ret
	}
	return *o.Conditional.Get()
}

// GetConditionalOk returns a tuple with the Conditional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetConditionalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditional.Get(), o.Conditional.IsSet()
}

// HasConditional returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasConditional() bool {
	if o != nil && o.Conditional.IsSet() {
		return true
	}

	return false
}

// SetConditional gets a reference to the given NullableString and assigns it to the Conditional field.
func (o *UpgradePropertyV2Input) SetConditional(v string) {
	o.Conditional.Set(&v)
}
// SetConditionalNil sets the value for Conditional to be an explicit nil
func (o *UpgradePropertyV2Input) SetConditionalNil() {
	o.Conditional.Set(nil)
}

// UnsetConditional ensures that no value is present for Conditional, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetConditional() {
	o.Conditional.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *UpgradePropertyV2Input) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *UpgradePropertyV2Input) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetIcon() {
	o.Icon.Unset()
}

// GetTooltipSection returns the TooltipSection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetTooltipSection() RawAbilitySectionTypeV2 {
	if o == nil || IsNil(o.TooltipSection.Get()) {
		var ret RawAbilitySectionTypeV2
		return ret
	}
	return *o.TooltipSection.Get()
}

// GetTooltipSectionOk returns a tuple with the TooltipSection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetTooltipSectionOk() (*RawAbilitySectionTypeV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.TooltipSection.Get(), o.TooltipSection.IsSet()
}

// HasTooltipSection returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasTooltipSection() bool {
	if o != nil && o.TooltipSection.IsSet() {
		return true
	}

	return false
}

// SetTooltipSection gets a reference to the given NullableRawAbilitySectionTypeV2 and assigns it to the TooltipSection field.
func (o *UpgradePropertyV2Input) SetTooltipSection(v RawAbilitySectionTypeV2) {
	o.TooltipSection.Set(&v)
}
// SetTooltipSectionNil sets the value for TooltipSection to be an explicit nil
func (o *UpgradePropertyV2Input) SetTooltipSectionNil() {
	o.TooltipSection.Set(nil)
}

// UnsetTooltipSection ensures that no value is present for TooltipSection, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetTooltipSection() {
	o.TooltipSection.Unset()
}

// GetTooltipIsElevated returns the TooltipIsElevated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetTooltipIsElevated() bool {
	if o == nil || IsNil(o.TooltipIsElevated.Get()) {
		var ret bool
		return ret
	}
	return *o.TooltipIsElevated.Get()
}

// GetTooltipIsElevatedOk returns a tuple with the TooltipIsElevated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetTooltipIsElevatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TooltipIsElevated.Get(), o.TooltipIsElevated.IsSet()
}

// HasTooltipIsElevated returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasTooltipIsElevated() bool {
	if o != nil && o.TooltipIsElevated.IsSet() {
		return true
	}

	return false
}

// SetTooltipIsElevated gets a reference to the given NullableBool and assigns it to the TooltipIsElevated field.
func (o *UpgradePropertyV2Input) SetTooltipIsElevated(v bool) {
	o.TooltipIsElevated.Set(&v)
}
// SetTooltipIsElevatedNil sets the value for TooltipIsElevated to be an explicit nil
func (o *UpgradePropertyV2Input) SetTooltipIsElevatedNil() {
	o.TooltipIsElevated.Set(nil)
}

// UnsetTooltipIsElevated ensures that no value is present for TooltipIsElevated, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetTooltipIsElevated() {
	o.TooltipIsElevated.Unset()
}

// GetTooltipIsImportant returns the TooltipIsImportant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradePropertyV2Input) GetTooltipIsImportant() bool {
	if o == nil || IsNil(o.TooltipIsImportant.Get()) {
		var ret bool
		return ret
	}
	return *o.TooltipIsImportant.Get()
}

// GetTooltipIsImportantOk returns a tuple with the TooltipIsImportant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradePropertyV2Input) GetTooltipIsImportantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TooltipIsImportant.Get(), o.TooltipIsImportant.IsSet()
}

// HasTooltipIsImportant returns a boolean if a field has been set.
func (o *UpgradePropertyV2Input) HasTooltipIsImportant() bool {
	if o != nil && o.TooltipIsImportant.IsSet() {
		return true
	}

	return false
}

// SetTooltipIsImportant gets a reference to the given NullableBool and assigns it to the TooltipIsImportant field.
func (o *UpgradePropertyV2Input) SetTooltipIsImportant(v bool) {
	o.TooltipIsImportant.Set(&v)
}
// SetTooltipIsImportantNil sets the value for TooltipIsImportant to be an explicit nil
func (o *UpgradePropertyV2Input) SetTooltipIsImportantNil() {
	o.TooltipIsImportant.Set(nil)
}

// UnsetTooltipIsImportant ensures that no value is present for TooltipIsImportant, not even an explicit nil
func (o *UpgradePropertyV2Input) UnsetTooltipIsImportant() {
	o.TooltipIsImportant.Unset()
}

func (o UpgradePropertyV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradePropertyV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MStrValue.IsSet() {
		toSerialize["m_strValue"] = o.MStrValue.Get()
	}
	if o.MBCanSetTokenOverride.IsSet() {
		toSerialize["m_bCanSetTokenOverride"] = o.MBCanSetTokenOverride.Get()
	}
	if o.MEProvidedPropertyType.IsSet() {
		toSerialize["m_eProvidedPropertyType"] = o.MEProvidedPropertyType.Get()
	}
	if o.MStrCSSClass.IsSet() {
		toSerialize["m_strCSSClass"] = o.MStrCSSClass.Get()
	}
	if o.MEStatsUsageFlags.IsSet() {
		toSerialize["m_eStatsUsageFlags"] = o.MEStatsUsageFlags.Get()
	}
	if o.MBIsNegativeAttribute.IsSet() {
		toSerialize["m_bIsNegativeAttribute"] = o.MBIsNegativeAttribute.Get()
	}
	if o.MStrDisableValue.IsSet() {
		toSerialize["m_strDisableValue"] = o.MStrDisableValue.Get()
	}
	if o.MStrLocTokenOverride.IsSet() {
		toSerialize["m_strLocTokenOverride"] = o.MStrLocTokenOverride.Get()
	}
	if o.MEDisplayUnits.IsSet() {
		toSerialize["m_eDisplayUnits"] = o.MEDisplayUnits.Get()
	}
	if o.ScaleFunction.IsSet() {
		toSerialize["scale_function"] = o.ScaleFunction.Get()
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Postfix.IsSet() {
		toSerialize["postfix"] = o.Postfix.Get()
	}
	if o.PostvalueLabel.IsSet() {
		toSerialize["postvalue_label"] = o.PostvalueLabel.Get()
	}
	if o.Conditional.IsSet() {
		toSerialize["conditional"] = o.Conditional.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.TooltipSection.IsSet() {
		toSerialize["tooltip_section"] = o.TooltipSection.Get()
	}
	if o.TooltipIsElevated.IsSet() {
		toSerialize["tooltip_is_elevated"] = o.TooltipIsElevated.Get()
	}
	if o.TooltipIsImportant.IsSet() {
		toSerialize["tooltip_is_important"] = o.TooltipIsImportant.Get()
	}
	return toSerialize, nil
}

type NullableUpgradePropertyV2Input struct {
	value *UpgradePropertyV2Input
	isSet bool
}

func (v NullableUpgradePropertyV2Input) Get() *UpgradePropertyV2Input {
	return v.value
}

func (v *NullableUpgradePropertyV2Input) Set(val *UpgradePropertyV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradePropertyV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradePropertyV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradePropertyV2Input(val *UpgradePropertyV2Input) *NullableUpgradePropertyV2Input {
	return &NullableUpgradePropertyV2Input{value: val, isSet: true}
}

func (v NullableUpgradePropertyV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradePropertyV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


