/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectivePositionsV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectivePositionsV1{}

// ObjectivePositionsV1 struct for ObjectivePositionsV1
type ObjectivePositionsV1 struct {
	Team0Core ObjectivePositionV1 `json:"team0_core"`
	Team1Core ObjectivePositionV1 `json:"team1_core"`
	Team0Titan ObjectivePositionV1 `json:"team0_titan"`
	Team1Titan ObjectivePositionV1 `json:"team1_titan"`
	Team0Tier21 ObjectivePositionV1 `json:"team0_tier2_1"`
	Team0Tier22 NullableObjectivePositionV1 `json:"team0_tier2_2,omitempty"`
	Team0Tier23 ObjectivePositionV1 `json:"team0_tier2_3"`
	Team0Tier24 ObjectivePositionV1 `json:"team0_tier2_4"`
	Team1Tier21 ObjectivePositionV1 `json:"team1_tier2_1"`
	Team1Tier22 NullableObjectivePositionV1 `json:"team1_tier2_2,omitempty"`
	Team1Tier23 ObjectivePositionV1 `json:"team1_tier2_3"`
	Team1Tier24 ObjectivePositionV1 `json:"team1_tier2_4"`
	Team0Tier11 ObjectivePositionV1 `json:"team0_tier1_1"`
	Team0Tier12 NullableObjectivePositionV1 `json:"team0_tier1_2,omitempty"`
	Team0Tier13 ObjectivePositionV1 `json:"team0_tier1_3"`
	Team0Tier14 ObjectivePositionV1 `json:"team0_tier1_4"`
	Team1Tier11 ObjectivePositionV1 `json:"team1_tier1_1"`
	Team1Tier12 NullableObjectivePositionV1 `json:"team1_tier1_2,omitempty"`
	Team1Tier13 ObjectivePositionV1 `json:"team1_tier1_3"`
	Team1Tier14 ObjectivePositionV1 `json:"team1_tier1_4"`
}

type _ObjectivePositionsV1 ObjectivePositionsV1

// NewObjectivePositionsV1 instantiates a new ObjectivePositionsV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectivePositionsV1(team0Core ObjectivePositionV1, team1Core ObjectivePositionV1, team0Titan ObjectivePositionV1, team1Titan ObjectivePositionV1, team0Tier21 ObjectivePositionV1, team0Tier23 ObjectivePositionV1, team0Tier24 ObjectivePositionV1, team1Tier21 ObjectivePositionV1, team1Tier23 ObjectivePositionV1, team1Tier24 ObjectivePositionV1, team0Tier11 ObjectivePositionV1, team0Tier13 ObjectivePositionV1, team0Tier14 ObjectivePositionV1, team1Tier11 ObjectivePositionV1, team1Tier13 ObjectivePositionV1, team1Tier14 ObjectivePositionV1) *ObjectivePositionsV1 {
	this := ObjectivePositionsV1{}
	this.Team0Core = team0Core
	this.Team1Core = team1Core
	this.Team0Titan = team0Titan
	this.Team1Titan = team1Titan
	this.Team0Tier21 = team0Tier21
	this.Team0Tier23 = team0Tier23
	this.Team0Tier24 = team0Tier24
	this.Team1Tier21 = team1Tier21
	this.Team1Tier23 = team1Tier23
	this.Team1Tier24 = team1Tier24
	this.Team0Tier11 = team0Tier11
	this.Team0Tier13 = team0Tier13
	this.Team0Tier14 = team0Tier14
	this.Team1Tier11 = team1Tier11
	this.Team1Tier13 = team1Tier13
	this.Team1Tier14 = team1Tier14
	return &this
}

// NewObjectivePositionsV1WithDefaults instantiates a new ObjectivePositionsV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectivePositionsV1WithDefaults() *ObjectivePositionsV1 {
	this := ObjectivePositionsV1{}
	return &this
}

// GetTeam0Core returns the Team0Core field value
func (o *ObjectivePositionsV1) GetTeam0Core() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Core
}

// GetTeam0CoreOk returns a tuple with the Team0Core field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0CoreOk() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Core, true
}

// SetTeam0Core sets field value
func (o *ObjectivePositionsV1) SetTeam0Core(v ObjectivePositionV1) {
	o.Team0Core = v
}

// GetTeam1Core returns the Team1Core field value
func (o *ObjectivePositionsV1) GetTeam1Core() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Core
}

// GetTeam1CoreOk returns a tuple with the Team1Core field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1CoreOk() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Core, true
}

// SetTeam1Core sets field value
func (o *ObjectivePositionsV1) SetTeam1Core(v ObjectivePositionV1) {
	o.Team1Core = v
}

// GetTeam0Titan returns the Team0Titan field value
func (o *ObjectivePositionsV1) GetTeam0Titan() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Titan
}

// GetTeam0TitanOk returns a tuple with the Team0Titan field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0TitanOk() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Titan, true
}

// SetTeam0Titan sets field value
func (o *ObjectivePositionsV1) SetTeam0Titan(v ObjectivePositionV1) {
	o.Team0Titan = v
}

// GetTeam1Titan returns the Team1Titan field value
func (o *ObjectivePositionsV1) GetTeam1Titan() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Titan
}

// GetTeam1TitanOk returns a tuple with the Team1Titan field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1TitanOk() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Titan, true
}

// SetTeam1Titan sets field value
func (o *ObjectivePositionsV1) SetTeam1Titan(v ObjectivePositionV1) {
	o.Team1Titan = v
}

// GetTeam0Tier21 returns the Team0Tier21 field value
func (o *ObjectivePositionsV1) GetTeam0Tier21() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Tier21
}

// GetTeam0Tier21Ok returns a tuple with the Team0Tier21 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0Tier21Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Tier21, true
}

// SetTeam0Tier21 sets field value
func (o *ObjectivePositionsV1) SetTeam0Tier21(v ObjectivePositionV1) {
	o.Team0Tier21 = v
}

// GetTeam0Tier22 returns the Team0Tier22 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectivePositionsV1) GetTeam0Tier22() ObjectivePositionV1 {
	if o == nil || IsNil(o.Team0Tier22.Get()) {
		var ret ObjectivePositionV1
		return ret
	}
	return *o.Team0Tier22.Get()
}

// GetTeam0Tier22Ok returns a tuple with the Team0Tier22 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectivePositionsV1) GetTeam0Tier22Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team0Tier22.Get(), o.Team0Tier22.IsSet()
}

// HasTeam0Tier22 returns a boolean if a field has been set.
func (o *ObjectivePositionsV1) HasTeam0Tier22() bool {
	if o != nil && o.Team0Tier22.IsSet() {
		return true
	}

	return false
}

// SetTeam0Tier22 gets a reference to the given NullableObjectivePositionV1 and assigns it to the Team0Tier22 field.
func (o *ObjectivePositionsV1) SetTeam0Tier22(v ObjectivePositionV1) {
	o.Team0Tier22.Set(&v)
}
// SetTeam0Tier22Nil sets the value for Team0Tier22 to be an explicit nil
func (o *ObjectivePositionsV1) SetTeam0Tier22Nil() {
	o.Team0Tier22.Set(nil)
}

// UnsetTeam0Tier22 ensures that no value is present for Team0Tier22, not even an explicit nil
func (o *ObjectivePositionsV1) UnsetTeam0Tier22() {
	o.Team0Tier22.Unset()
}

// GetTeam0Tier23 returns the Team0Tier23 field value
func (o *ObjectivePositionsV1) GetTeam0Tier23() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Tier23
}

// GetTeam0Tier23Ok returns a tuple with the Team0Tier23 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0Tier23Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Tier23, true
}

// SetTeam0Tier23 sets field value
func (o *ObjectivePositionsV1) SetTeam0Tier23(v ObjectivePositionV1) {
	o.Team0Tier23 = v
}

// GetTeam0Tier24 returns the Team0Tier24 field value
func (o *ObjectivePositionsV1) GetTeam0Tier24() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Tier24
}

// GetTeam0Tier24Ok returns a tuple with the Team0Tier24 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0Tier24Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Tier24, true
}

// SetTeam0Tier24 sets field value
func (o *ObjectivePositionsV1) SetTeam0Tier24(v ObjectivePositionV1) {
	o.Team0Tier24 = v
}

// GetTeam1Tier21 returns the Team1Tier21 field value
func (o *ObjectivePositionsV1) GetTeam1Tier21() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Tier21
}

// GetTeam1Tier21Ok returns a tuple with the Team1Tier21 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1Tier21Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Tier21, true
}

// SetTeam1Tier21 sets field value
func (o *ObjectivePositionsV1) SetTeam1Tier21(v ObjectivePositionV1) {
	o.Team1Tier21 = v
}

// GetTeam1Tier22 returns the Team1Tier22 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectivePositionsV1) GetTeam1Tier22() ObjectivePositionV1 {
	if o == nil || IsNil(o.Team1Tier22.Get()) {
		var ret ObjectivePositionV1
		return ret
	}
	return *o.Team1Tier22.Get()
}

// GetTeam1Tier22Ok returns a tuple with the Team1Tier22 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectivePositionsV1) GetTeam1Tier22Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team1Tier22.Get(), o.Team1Tier22.IsSet()
}

// HasTeam1Tier22 returns a boolean if a field has been set.
func (o *ObjectivePositionsV1) HasTeam1Tier22() bool {
	if o != nil && o.Team1Tier22.IsSet() {
		return true
	}

	return false
}

// SetTeam1Tier22 gets a reference to the given NullableObjectivePositionV1 and assigns it to the Team1Tier22 field.
func (o *ObjectivePositionsV1) SetTeam1Tier22(v ObjectivePositionV1) {
	o.Team1Tier22.Set(&v)
}
// SetTeam1Tier22Nil sets the value for Team1Tier22 to be an explicit nil
func (o *ObjectivePositionsV1) SetTeam1Tier22Nil() {
	o.Team1Tier22.Set(nil)
}

// UnsetTeam1Tier22 ensures that no value is present for Team1Tier22, not even an explicit nil
func (o *ObjectivePositionsV1) UnsetTeam1Tier22() {
	o.Team1Tier22.Unset()
}

// GetTeam1Tier23 returns the Team1Tier23 field value
func (o *ObjectivePositionsV1) GetTeam1Tier23() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Tier23
}

// GetTeam1Tier23Ok returns a tuple with the Team1Tier23 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1Tier23Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Tier23, true
}

// SetTeam1Tier23 sets field value
func (o *ObjectivePositionsV1) SetTeam1Tier23(v ObjectivePositionV1) {
	o.Team1Tier23 = v
}

// GetTeam1Tier24 returns the Team1Tier24 field value
func (o *ObjectivePositionsV1) GetTeam1Tier24() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Tier24
}

// GetTeam1Tier24Ok returns a tuple with the Team1Tier24 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1Tier24Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Tier24, true
}

// SetTeam1Tier24 sets field value
func (o *ObjectivePositionsV1) SetTeam1Tier24(v ObjectivePositionV1) {
	o.Team1Tier24 = v
}

// GetTeam0Tier11 returns the Team0Tier11 field value
func (o *ObjectivePositionsV1) GetTeam0Tier11() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Tier11
}

// GetTeam0Tier11Ok returns a tuple with the Team0Tier11 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0Tier11Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Tier11, true
}

// SetTeam0Tier11 sets field value
func (o *ObjectivePositionsV1) SetTeam0Tier11(v ObjectivePositionV1) {
	o.Team0Tier11 = v
}

// GetTeam0Tier12 returns the Team0Tier12 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectivePositionsV1) GetTeam0Tier12() ObjectivePositionV1 {
	if o == nil || IsNil(o.Team0Tier12.Get()) {
		var ret ObjectivePositionV1
		return ret
	}
	return *o.Team0Tier12.Get()
}

// GetTeam0Tier12Ok returns a tuple with the Team0Tier12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectivePositionsV1) GetTeam0Tier12Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team0Tier12.Get(), o.Team0Tier12.IsSet()
}

// HasTeam0Tier12 returns a boolean if a field has been set.
func (o *ObjectivePositionsV1) HasTeam0Tier12() bool {
	if o != nil && o.Team0Tier12.IsSet() {
		return true
	}

	return false
}

// SetTeam0Tier12 gets a reference to the given NullableObjectivePositionV1 and assigns it to the Team0Tier12 field.
func (o *ObjectivePositionsV1) SetTeam0Tier12(v ObjectivePositionV1) {
	o.Team0Tier12.Set(&v)
}
// SetTeam0Tier12Nil sets the value for Team0Tier12 to be an explicit nil
func (o *ObjectivePositionsV1) SetTeam0Tier12Nil() {
	o.Team0Tier12.Set(nil)
}

// UnsetTeam0Tier12 ensures that no value is present for Team0Tier12, not even an explicit nil
func (o *ObjectivePositionsV1) UnsetTeam0Tier12() {
	o.Team0Tier12.Unset()
}

// GetTeam0Tier13 returns the Team0Tier13 field value
func (o *ObjectivePositionsV1) GetTeam0Tier13() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Tier13
}

// GetTeam0Tier13Ok returns a tuple with the Team0Tier13 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0Tier13Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Tier13, true
}

// SetTeam0Tier13 sets field value
func (o *ObjectivePositionsV1) SetTeam0Tier13(v ObjectivePositionV1) {
	o.Team0Tier13 = v
}

// GetTeam0Tier14 returns the Team0Tier14 field value
func (o *ObjectivePositionsV1) GetTeam0Tier14() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team0Tier14
}

// GetTeam0Tier14Ok returns a tuple with the Team0Tier14 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam0Tier14Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team0Tier14, true
}

// SetTeam0Tier14 sets field value
func (o *ObjectivePositionsV1) SetTeam0Tier14(v ObjectivePositionV1) {
	o.Team0Tier14 = v
}

// GetTeam1Tier11 returns the Team1Tier11 field value
func (o *ObjectivePositionsV1) GetTeam1Tier11() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Tier11
}

// GetTeam1Tier11Ok returns a tuple with the Team1Tier11 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1Tier11Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Tier11, true
}

// SetTeam1Tier11 sets field value
func (o *ObjectivePositionsV1) SetTeam1Tier11(v ObjectivePositionV1) {
	o.Team1Tier11 = v
}

// GetTeam1Tier12 returns the Team1Tier12 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectivePositionsV1) GetTeam1Tier12() ObjectivePositionV1 {
	if o == nil || IsNil(o.Team1Tier12.Get()) {
		var ret ObjectivePositionV1
		return ret
	}
	return *o.Team1Tier12.Get()
}

// GetTeam1Tier12Ok returns a tuple with the Team1Tier12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectivePositionsV1) GetTeam1Tier12Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team1Tier12.Get(), o.Team1Tier12.IsSet()
}

// HasTeam1Tier12 returns a boolean if a field has been set.
func (o *ObjectivePositionsV1) HasTeam1Tier12() bool {
	if o != nil && o.Team1Tier12.IsSet() {
		return true
	}

	return false
}

// SetTeam1Tier12 gets a reference to the given NullableObjectivePositionV1 and assigns it to the Team1Tier12 field.
func (o *ObjectivePositionsV1) SetTeam1Tier12(v ObjectivePositionV1) {
	o.Team1Tier12.Set(&v)
}
// SetTeam1Tier12Nil sets the value for Team1Tier12 to be an explicit nil
func (o *ObjectivePositionsV1) SetTeam1Tier12Nil() {
	o.Team1Tier12.Set(nil)
}

// UnsetTeam1Tier12 ensures that no value is present for Team1Tier12, not even an explicit nil
func (o *ObjectivePositionsV1) UnsetTeam1Tier12() {
	o.Team1Tier12.Unset()
}

// GetTeam1Tier13 returns the Team1Tier13 field value
func (o *ObjectivePositionsV1) GetTeam1Tier13() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Tier13
}

// GetTeam1Tier13Ok returns a tuple with the Team1Tier13 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1Tier13Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Tier13, true
}

// SetTeam1Tier13 sets field value
func (o *ObjectivePositionsV1) SetTeam1Tier13(v ObjectivePositionV1) {
	o.Team1Tier13 = v
}

// GetTeam1Tier14 returns the Team1Tier14 field value
func (o *ObjectivePositionsV1) GetTeam1Tier14() ObjectivePositionV1 {
	if o == nil {
		var ret ObjectivePositionV1
		return ret
	}

	return o.Team1Tier14
}

// GetTeam1Tier14Ok returns a tuple with the Team1Tier14 field value
// and a boolean to check if the value has been set.
func (o *ObjectivePositionsV1) GetTeam1Tier14Ok() (*ObjectivePositionV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team1Tier14, true
}

// SetTeam1Tier14 sets field value
func (o *ObjectivePositionsV1) SetTeam1Tier14(v ObjectivePositionV1) {
	o.Team1Tier14 = v
}

func (o ObjectivePositionsV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectivePositionsV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["team0_core"] = o.Team0Core
	toSerialize["team1_core"] = o.Team1Core
	toSerialize["team0_titan"] = o.Team0Titan
	toSerialize["team1_titan"] = o.Team1Titan
	toSerialize["team0_tier2_1"] = o.Team0Tier21
	if o.Team0Tier22.IsSet() {
		toSerialize["team0_tier2_2"] = o.Team0Tier22.Get()
	}
	toSerialize["team0_tier2_3"] = o.Team0Tier23
	toSerialize["team0_tier2_4"] = o.Team0Tier24
	toSerialize["team1_tier2_1"] = o.Team1Tier21
	if o.Team1Tier22.IsSet() {
		toSerialize["team1_tier2_2"] = o.Team1Tier22.Get()
	}
	toSerialize["team1_tier2_3"] = o.Team1Tier23
	toSerialize["team1_tier2_4"] = o.Team1Tier24
	toSerialize["team0_tier1_1"] = o.Team0Tier11
	if o.Team0Tier12.IsSet() {
		toSerialize["team0_tier1_2"] = o.Team0Tier12.Get()
	}
	toSerialize["team0_tier1_3"] = o.Team0Tier13
	toSerialize["team0_tier1_4"] = o.Team0Tier14
	toSerialize["team1_tier1_1"] = o.Team1Tier11
	if o.Team1Tier12.IsSet() {
		toSerialize["team1_tier1_2"] = o.Team1Tier12.Get()
	}
	toSerialize["team1_tier1_3"] = o.Team1Tier13
	toSerialize["team1_tier1_4"] = o.Team1Tier14
	return toSerialize, nil
}

func (o *ObjectivePositionsV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team0_core",
		"team1_core",
		"team0_titan",
		"team1_titan",
		"team0_tier2_1",
		"team0_tier2_3",
		"team0_tier2_4",
		"team1_tier2_1",
		"team1_tier2_3",
		"team1_tier2_4",
		"team0_tier1_1",
		"team0_tier1_3",
		"team0_tier1_4",
		"team1_tier1_1",
		"team1_tier1_3",
		"team1_tier1_4",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectivePositionsV1 := _ObjectivePositionsV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectivePositionsV1)

	if err != nil {
		return err
	}

	*o = ObjectivePositionsV1(varObjectivePositionsV1)

	return err
}

type NullableObjectivePositionsV1 struct {
	value *ObjectivePositionsV1
	isSet bool
}

func (v NullableObjectivePositionsV1) Get() *ObjectivePositionsV1 {
	return v.value
}

func (v *NullableObjectivePositionsV1) Set(val *ObjectivePositionsV1) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectivePositionsV1) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectivePositionsV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectivePositionsV1(val *ObjectivePositionsV1) *NullableObjectivePositionsV1 {
	return &NullableObjectivePositionsV1{value: val, isSet: true}
}

func (v NullableObjectivePositionsV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectivePositionsV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


