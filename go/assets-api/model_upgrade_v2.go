/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpgradeV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeV2{}

// UpgradeV2 struct for UpgradeV2
type UpgradeV2 struct {
	Id int32 `json:"id"`
	ClassName string `json:"class_name"`
	Name string `json:"name"`
	StartTrained NullableBool `json:"start_trained,omitempty"`
	Image NullableString `json:"image,omitempty"`
	ImageWebp NullableString `json:"image_webp,omitempty"`
	Hero NullableInt32 `json:"hero,omitempty"`
	Heroes []int32 `json:"heroes,omitempty"`
	UpdateTime NullableInt32 `json:"update_time,omitempty"`
	Properties map[string]UpgradePropertyV2 `json:"properties,omitempty"`
	WeaponInfo NullableRawItemWeaponInfoV2 `json:"weapon_info,omitempty"`
	Type *string `json:"type,omitempty"`
	ShopImage NullableString `json:"shop_image,omitempty"`
	ShopImageWebp NullableString `json:"shop_image_webp,omitempty"`
	ShopImageSmall NullableString `json:"shop_image_small,omitempty"`
	ShopImageSmallWebp NullableString `json:"shop_image_small_webp,omitempty"`
	ItemSlotType ItemSlotTypeV2 `json:"item_slot_type"`
	ItemTier ItemTierV2 `json:"item_tier"`
	Disabled NullableBool `json:"disabled,omitempty"`
	Description NullableUpgradeDescriptionV2 `json:"description,omitempty"`
	Activation RawAbilityActivationV2 `json:"activation"`
	Imbue NullableRawAbilityImbueV2 `json:"imbue,omitempty"`
	ComponentItems []string `json:"component_items,omitempty"`
	TooltipSections []UpgradeTooltipSectionV2 `json:"tooltip_sections,omitempty"`
	IsActiveItem bool `json:"is_active_item"`
	Shopable bool `json:"shopable"`
	Cost NullableInt32 `json:"cost"`
}

type _UpgradeV2 UpgradeV2

// NewUpgradeV2 instantiates a new UpgradeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeV2(id int32, className string, name string, itemSlotType ItemSlotTypeV2, itemTier ItemTierV2, activation RawAbilityActivationV2, isActiveItem bool, shopable bool, cost NullableInt32) *UpgradeV2 {
	this := UpgradeV2{}
	this.Id = id
	this.ClassName = className
	this.Name = name
	var type_ string = "upgrade"
	this.Type = &type_
	this.ItemSlotType = itemSlotType
	this.ItemTier = itemTier
	this.Activation = activation
	this.IsActiveItem = isActiveItem
	this.Shopable = shopable
	this.Cost = cost
	return &this
}

// NewUpgradeV2WithDefaults instantiates a new UpgradeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeV2WithDefaults() *UpgradeV2 {
	this := UpgradeV2{}
	var type_ string = "upgrade"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value
func (o *UpgradeV2) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpgradeV2) SetId(v int32) {
	o.Id = v
}

// GetClassName returns the ClassName field value
func (o *UpgradeV2) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *UpgradeV2) SetClassName(v string) {
	o.ClassName = v
}

// GetName returns the Name field value
func (o *UpgradeV2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpgradeV2) SetName(v string) {
	o.Name = v
}

// GetStartTrained returns the StartTrained field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetStartTrained() bool {
	if o == nil || IsNil(o.StartTrained.Get()) {
		var ret bool
		return ret
	}
	return *o.StartTrained.Get()
}

// GetStartTrainedOk returns a tuple with the StartTrained field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetStartTrainedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTrained.Get(), o.StartTrained.IsSet()
}

// HasStartTrained returns a boolean if a field has been set.
func (o *UpgradeV2) HasStartTrained() bool {
	if o != nil && o.StartTrained.IsSet() {
		return true
	}

	return false
}

// SetStartTrained gets a reference to the given NullableBool and assigns it to the StartTrained field.
func (o *UpgradeV2) SetStartTrained(v bool) {
	o.StartTrained.Set(&v)
}
// SetStartTrainedNil sets the value for StartTrained to be an explicit nil
func (o *UpgradeV2) SetStartTrainedNil() {
	o.StartTrained.Set(nil)
}

// UnsetStartTrained ensures that no value is present for StartTrained, not even an explicit nil
func (o *UpgradeV2) UnsetStartTrained() {
	o.StartTrained.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetImage() string {
	if o == nil || IsNil(o.Image.Get()) {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *UpgradeV2) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *UpgradeV2) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *UpgradeV2) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *UpgradeV2) UnsetImage() {
	o.Image.Unset()
}

// GetImageWebp returns the ImageWebp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetImageWebp() string {
	if o == nil || IsNil(o.ImageWebp.Get()) {
		var ret string
		return ret
	}
	return *o.ImageWebp.Get()
}

// GetImageWebpOk returns a tuple with the ImageWebp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetImageWebpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageWebp.Get(), o.ImageWebp.IsSet()
}

// HasImageWebp returns a boolean if a field has been set.
func (o *UpgradeV2) HasImageWebp() bool {
	if o != nil && o.ImageWebp.IsSet() {
		return true
	}

	return false
}

// SetImageWebp gets a reference to the given NullableString and assigns it to the ImageWebp field.
func (o *UpgradeV2) SetImageWebp(v string) {
	o.ImageWebp.Set(&v)
}
// SetImageWebpNil sets the value for ImageWebp to be an explicit nil
func (o *UpgradeV2) SetImageWebpNil() {
	o.ImageWebp.Set(nil)
}

// UnsetImageWebp ensures that no value is present for ImageWebp, not even an explicit nil
func (o *UpgradeV2) UnsetImageWebp() {
	o.ImageWebp.Unset()
}

// GetHero returns the Hero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetHero() int32 {
	if o == nil || IsNil(o.Hero.Get()) {
		var ret int32
		return ret
	}
	return *o.Hero.Get()
}

// GetHeroOk returns a tuple with the Hero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetHeroOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hero.Get(), o.Hero.IsSet()
}

// HasHero returns a boolean if a field has been set.
func (o *UpgradeV2) HasHero() bool {
	if o != nil && o.Hero.IsSet() {
		return true
	}

	return false
}

// SetHero gets a reference to the given NullableInt32 and assigns it to the Hero field.
func (o *UpgradeV2) SetHero(v int32) {
	o.Hero.Set(&v)
}
// SetHeroNil sets the value for Hero to be an explicit nil
func (o *UpgradeV2) SetHeroNil() {
	o.Hero.Set(nil)
}

// UnsetHero ensures that no value is present for Hero, not even an explicit nil
func (o *UpgradeV2) UnsetHero() {
	o.Hero.Unset()
}

// GetHeroes returns the Heroes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetHeroes() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Heroes
}

// GetHeroesOk returns a tuple with the Heroes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetHeroesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Heroes) {
		return nil, false
	}
	return o.Heroes, true
}

// HasHeroes returns a boolean if a field has been set.
func (o *UpgradeV2) HasHeroes() bool {
	if o != nil && !IsNil(o.Heroes) {
		return true
	}

	return false
}

// SetHeroes gets a reference to the given []int32 and assigns it to the Heroes field.
func (o *UpgradeV2) SetHeroes(v []int32) {
	o.Heroes = v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetUpdateTime() int32 {
	if o == nil || IsNil(o.UpdateTime.Get()) {
		var ret int32
		return ret
	}
	return *o.UpdateTime.Get()
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetUpdateTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateTime.Get(), o.UpdateTime.IsSet()
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *UpgradeV2) HasUpdateTime() bool {
	if o != nil && o.UpdateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given NullableInt32 and assigns it to the UpdateTime field.
func (o *UpgradeV2) SetUpdateTime(v int32) {
	o.UpdateTime.Set(&v)
}
// SetUpdateTimeNil sets the value for UpdateTime to be an explicit nil
func (o *UpgradeV2) SetUpdateTimeNil() {
	o.UpdateTime.Set(nil)
}

// UnsetUpdateTime ensures that no value is present for UpdateTime, not even an explicit nil
func (o *UpgradeV2) UnsetUpdateTime() {
	o.UpdateTime.Unset()
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetProperties() map[string]UpgradePropertyV2 {
	if o == nil {
		var ret map[string]UpgradePropertyV2
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetPropertiesOk() (map[string]UpgradePropertyV2, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]UpgradePropertyV2{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *UpgradeV2) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]UpgradePropertyV2 and assigns it to the Properties field.
func (o *UpgradeV2) SetProperties(v map[string]UpgradePropertyV2) {
	o.Properties = v
}

// GetWeaponInfo returns the WeaponInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetWeaponInfo() RawItemWeaponInfoV2 {
	if o == nil || IsNil(o.WeaponInfo.Get()) {
		var ret RawItemWeaponInfoV2
		return ret
	}
	return *o.WeaponInfo.Get()
}

// GetWeaponInfoOk returns a tuple with the WeaponInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetWeaponInfoOk() (*RawItemWeaponInfoV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeaponInfo.Get(), o.WeaponInfo.IsSet()
}

// HasWeaponInfo returns a boolean if a field has been set.
func (o *UpgradeV2) HasWeaponInfo() bool {
	if o != nil && o.WeaponInfo.IsSet() {
		return true
	}

	return false
}

// SetWeaponInfo gets a reference to the given NullableRawItemWeaponInfoV2 and assigns it to the WeaponInfo field.
func (o *UpgradeV2) SetWeaponInfo(v RawItemWeaponInfoV2) {
	o.WeaponInfo.Set(&v)
}
// SetWeaponInfoNil sets the value for WeaponInfo to be an explicit nil
func (o *UpgradeV2) SetWeaponInfoNil() {
	o.WeaponInfo.Set(nil)
}

// UnsetWeaponInfo ensures that no value is present for WeaponInfo, not even an explicit nil
func (o *UpgradeV2) UnsetWeaponInfo() {
	o.WeaponInfo.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpgradeV2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpgradeV2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpgradeV2) SetType(v string) {
	o.Type = &v
}

// GetShopImage returns the ShopImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetShopImage() string {
	if o == nil || IsNil(o.ShopImage.Get()) {
		var ret string
		return ret
	}
	return *o.ShopImage.Get()
}

// GetShopImageOk returns a tuple with the ShopImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetShopImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShopImage.Get(), o.ShopImage.IsSet()
}

// HasShopImage returns a boolean if a field has been set.
func (o *UpgradeV2) HasShopImage() bool {
	if o != nil && o.ShopImage.IsSet() {
		return true
	}

	return false
}

// SetShopImage gets a reference to the given NullableString and assigns it to the ShopImage field.
func (o *UpgradeV2) SetShopImage(v string) {
	o.ShopImage.Set(&v)
}
// SetShopImageNil sets the value for ShopImage to be an explicit nil
func (o *UpgradeV2) SetShopImageNil() {
	o.ShopImage.Set(nil)
}

// UnsetShopImage ensures that no value is present for ShopImage, not even an explicit nil
func (o *UpgradeV2) UnsetShopImage() {
	o.ShopImage.Unset()
}

// GetShopImageWebp returns the ShopImageWebp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetShopImageWebp() string {
	if o == nil || IsNil(o.ShopImageWebp.Get()) {
		var ret string
		return ret
	}
	return *o.ShopImageWebp.Get()
}

// GetShopImageWebpOk returns a tuple with the ShopImageWebp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetShopImageWebpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShopImageWebp.Get(), o.ShopImageWebp.IsSet()
}

// HasShopImageWebp returns a boolean if a field has been set.
func (o *UpgradeV2) HasShopImageWebp() bool {
	if o != nil && o.ShopImageWebp.IsSet() {
		return true
	}

	return false
}

// SetShopImageWebp gets a reference to the given NullableString and assigns it to the ShopImageWebp field.
func (o *UpgradeV2) SetShopImageWebp(v string) {
	o.ShopImageWebp.Set(&v)
}
// SetShopImageWebpNil sets the value for ShopImageWebp to be an explicit nil
func (o *UpgradeV2) SetShopImageWebpNil() {
	o.ShopImageWebp.Set(nil)
}

// UnsetShopImageWebp ensures that no value is present for ShopImageWebp, not even an explicit nil
func (o *UpgradeV2) UnsetShopImageWebp() {
	o.ShopImageWebp.Unset()
}

// GetShopImageSmall returns the ShopImageSmall field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetShopImageSmall() string {
	if o == nil || IsNil(o.ShopImageSmall.Get()) {
		var ret string
		return ret
	}
	return *o.ShopImageSmall.Get()
}

// GetShopImageSmallOk returns a tuple with the ShopImageSmall field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetShopImageSmallOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShopImageSmall.Get(), o.ShopImageSmall.IsSet()
}

// HasShopImageSmall returns a boolean if a field has been set.
func (o *UpgradeV2) HasShopImageSmall() bool {
	if o != nil && o.ShopImageSmall.IsSet() {
		return true
	}

	return false
}

// SetShopImageSmall gets a reference to the given NullableString and assigns it to the ShopImageSmall field.
func (o *UpgradeV2) SetShopImageSmall(v string) {
	o.ShopImageSmall.Set(&v)
}
// SetShopImageSmallNil sets the value for ShopImageSmall to be an explicit nil
func (o *UpgradeV2) SetShopImageSmallNil() {
	o.ShopImageSmall.Set(nil)
}

// UnsetShopImageSmall ensures that no value is present for ShopImageSmall, not even an explicit nil
func (o *UpgradeV2) UnsetShopImageSmall() {
	o.ShopImageSmall.Unset()
}

// GetShopImageSmallWebp returns the ShopImageSmallWebp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetShopImageSmallWebp() string {
	if o == nil || IsNil(o.ShopImageSmallWebp.Get()) {
		var ret string
		return ret
	}
	return *o.ShopImageSmallWebp.Get()
}

// GetShopImageSmallWebpOk returns a tuple with the ShopImageSmallWebp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetShopImageSmallWebpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShopImageSmallWebp.Get(), o.ShopImageSmallWebp.IsSet()
}

// HasShopImageSmallWebp returns a boolean if a field has been set.
func (o *UpgradeV2) HasShopImageSmallWebp() bool {
	if o != nil && o.ShopImageSmallWebp.IsSet() {
		return true
	}

	return false
}

// SetShopImageSmallWebp gets a reference to the given NullableString and assigns it to the ShopImageSmallWebp field.
func (o *UpgradeV2) SetShopImageSmallWebp(v string) {
	o.ShopImageSmallWebp.Set(&v)
}
// SetShopImageSmallWebpNil sets the value for ShopImageSmallWebp to be an explicit nil
func (o *UpgradeV2) SetShopImageSmallWebpNil() {
	o.ShopImageSmallWebp.Set(nil)
}

// UnsetShopImageSmallWebp ensures that no value is present for ShopImageSmallWebp, not even an explicit nil
func (o *UpgradeV2) UnsetShopImageSmallWebp() {
	o.ShopImageSmallWebp.Unset()
}

// GetItemSlotType returns the ItemSlotType field value
func (o *UpgradeV2) GetItemSlotType() ItemSlotTypeV2 {
	if o == nil {
		var ret ItemSlotTypeV2
		return ret
	}

	return o.ItemSlotType
}

// GetItemSlotTypeOk returns a tuple with the ItemSlotType field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetItemSlotTypeOk() (*ItemSlotTypeV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemSlotType, true
}

// SetItemSlotType sets field value
func (o *UpgradeV2) SetItemSlotType(v ItemSlotTypeV2) {
	o.ItemSlotType = v
}

// GetItemTier returns the ItemTier field value
func (o *UpgradeV2) GetItemTier() ItemTierV2 {
	if o == nil {
		var ret ItemTierV2
		return ret
	}

	return o.ItemTier
}

// GetItemTierOk returns a tuple with the ItemTier field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetItemTierOk() (*ItemTierV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemTier, true
}

// SetItemTier sets field value
func (o *UpgradeV2) SetItemTier(v ItemTierV2) {
	o.ItemTier = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Disabled.Get()
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disabled.Get(), o.Disabled.IsSet()
}

// HasDisabled returns a boolean if a field has been set.
func (o *UpgradeV2) HasDisabled() bool {
	if o != nil && o.Disabled.IsSet() {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given NullableBool and assigns it to the Disabled field.
func (o *UpgradeV2) SetDisabled(v bool) {
	o.Disabled.Set(&v)
}
// SetDisabledNil sets the value for Disabled to be an explicit nil
func (o *UpgradeV2) SetDisabledNil() {
	o.Disabled.Set(nil)
}

// UnsetDisabled ensures that no value is present for Disabled, not even an explicit nil
func (o *UpgradeV2) UnsetDisabled() {
	o.Disabled.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetDescription() UpgradeDescriptionV2 {
	if o == nil || IsNil(o.Description.Get()) {
		var ret UpgradeDescriptionV2
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetDescriptionOk() (*UpgradeDescriptionV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpgradeV2) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableUpgradeDescriptionV2 and assigns it to the Description field.
func (o *UpgradeV2) SetDescription(v UpgradeDescriptionV2) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpgradeV2) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpgradeV2) UnsetDescription() {
	o.Description.Unset()
}

// GetActivation returns the Activation field value
func (o *UpgradeV2) GetActivation() RawAbilityActivationV2 {
	if o == nil {
		var ret RawAbilityActivationV2
		return ret
	}

	return o.Activation
}

// GetActivationOk returns a tuple with the Activation field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetActivationOk() (*RawAbilityActivationV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activation, true
}

// SetActivation sets field value
func (o *UpgradeV2) SetActivation(v RawAbilityActivationV2) {
	o.Activation = v
}

// GetImbue returns the Imbue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetImbue() RawAbilityImbueV2 {
	if o == nil || IsNil(o.Imbue.Get()) {
		var ret RawAbilityImbueV2
		return ret
	}
	return *o.Imbue.Get()
}

// GetImbueOk returns a tuple with the Imbue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetImbueOk() (*RawAbilityImbueV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Imbue.Get(), o.Imbue.IsSet()
}

// HasImbue returns a boolean if a field has been set.
func (o *UpgradeV2) HasImbue() bool {
	if o != nil && o.Imbue.IsSet() {
		return true
	}

	return false
}

// SetImbue gets a reference to the given NullableRawAbilityImbueV2 and assigns it to the Imbue field.
func (o *UpgradeV2) SetImbue(v RawAbilityImbueV2) {
	o.Imbue.Set(&v)
}
// SetImbueNil sets the value for Imbue to be an explicit nil
func (o *UpgradeV2) SetImbueNil() {
	o.Imbue.Set(nil)
}

// UnsetImbue ensures that no value is present for Imbue, not even an explicit nil
func (o *UpgradeV2) UnsetImbue() {
	o.Imbue.Unset()
}

// GetComponentItems returns the ComponentItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetComponentItems() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ComponentItems
}

// GetComponentItemsOk returns a tuple with the ComponentItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetComponentItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.ComponentItems) {
		return nil, false
	}
	return o.ComponentItems, true
}

// HasComponentItems returns a boolean if a field has been set.
func (o *UpgradeV2) HasComponentItems() bool {
	if o != nil && !IsNil(o.ComponentItems) {
		return true
	}

	return false
}

// SetComponentItems gets a reference to the given []string and assigns it to the ComponentItems field.
func (o *UpgradeV2) SetComponentItems(v []string) {
	o.ComponentItems = v
}

// GetTooltipSections returns the TooltipSections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeV2) GetTooltipSections() []UpgradeTooltipSectionV2 {
	if o == nil {
		var ret []UpgradeTooltipSectionV2
		return ret
	}
	return o.TooltipSections
}

// GetTooltipSectionsOk returns a tuple with the TooltipSections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetTooltipSectionsOk() ([]UpgradeTooltipSectionV2, bool) {
	if o == nil || IsNil(o.TooltipSections) {
		return nil, false
	}
	return o.TooltipSections, true
}

// HasTooltipSections returns a boolean if a field has been set.
func (o *UpgradeV2) HasTooltipSections() bool {
	if o != nil && !IsNil(o.TooltipSections) {
		return true
	}

	return false
}

// SetTooltipSections gets a reference to the given []UpgradeTooltipSectionV2 and assigns it to the TooltipSections field.
func (o *UpgradeV2) SetTooltipSections(v []UpgradeTooltipSectionV2) {
	o.TooltipSections = v
}

// GetIsActiveItem returns the IsActiveItem field value
func (o *UpgradeV2) GetIsActiveItem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActiveItem
}

// GetIsActiveItemOk returns a tuple with the IsActiveItem field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetIsActiveItemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActiveItem, true
}

// SetIsActiveItem sets field value
func (o *UpgradeV2) SetIsActiveItem(v bool) {
	o.IsActiveItem = v
}

// GetShopable returns the Shopable field value
func (o *UpgradeV2) GetShopable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Shopable
}

// GetShopableOk returns a tuple with the Shopable field value
// and a boolean to check if the value has been set.
func (o *UpgradeV2) GetShopableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shopable, true
}

// SetShopable sets field value
func (o *UpgradeV2) SetShopable(v bool) {
	o.Shopable = v
}

// GetCost returns the Cost field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UpgradeV2) GetCost() int32 {
	if o == nil || o.Cost.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeV2) GetCostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// SetCost sets field value
func (o *UpgradeV2) SetCost(v int32) {
	o.Cost.Set(&v)
}

func (o UpgradeV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["class_name"] = o.ClassName
	toSerialize["name"] = o.Name
	if o.StartTrained.IsSet() {
		toSerialize["start_trained"] = o.StartTrained.Get()
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.ImageWebp.IsSet() {
		toSerialize["image_webp"] = o.ImageWebp.Get()
	}
	if o.Hero.IsSet() {
		toSerialize["hero"] = o.Hero.Get()
	}
	if o.Heroes != nil {
		toSerialize["heroes"] = o.Heroes
	}
	if o.UpdateTime.IsSet() {
		toSerialize["update_time"] = o.UpdateTime.Get()
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.WeaponInfo.IsSet() {
		toSerialize["weapon_info"] = o.WeaponInfo.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.ShopImage.IsSet() {
		toSerialize["shop_image"] = o.ShopImage.Get()
	}
	if o.ShopImageWebp.IsSet() {
		toSerialize["shop_image_webp"] = o.ShopImageWebp.Get()
	}
	if o.ShopImageSmall.IsSet() {
		toSerialize["shop_image_small"] = o.ShopImageSmall.Get()
	}
	if o.ShopImageSmallWebp.IsSet() {
		toSerialize["shop_image_small_webp"] = o.ShopImageSmallWebp.Get()
	}
	toSerialize["item_slot_type"] = o.ItemSlotType
	toSerialize["item_tier"] = o.ItemTier
	if o.Disabled.IsSet() {
		toSerialize["disabled"] = o.Disabled.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["activation"] = o.Activation
	if o.Imbue.IsSet() {
		toSerialize["imbue"] = o.Imbue.Get()
	}
	if o.ComponentItems != nil {
		toSerialize["component_items"] = o.ComponentItems
	}
	if o.TooltipSections != nil {
		toSerialize["tooltip_sections"] = o.TooltipSections
	}
	toSerialize["is_active_item"] = o.IsActiveItem
	toSerialize["shopable"] = o.Shopable
	toSerialize["cost"] = o.Cost.Get()
	return toSerialize, nil
}

func (o *UpgradeV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"class_name",
		"name",
		"item_slot_type",
		"item_tier",
		"activation",
		"is_active_item",
		"shopable",
		"cost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpgradeV2 := _UpgradeV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpgradeV2)

	if err != nil {
		return err
	}

	*o = UpgradeV2(varUpgradeV2)

	return err
}

type NullableUpgradeV2 struct {
	value *UpgradeV2
	isSet bool
}

func (v NullableUpgradeV2) Get() *UpgradeV2 {
	return v.value
}

func (v *NullableUpgradeV2) Set(val *UpgradeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeV2(val *UpgradeV2) *NullableUpgradeV2 {
	return &NullableUpgradeV2{value: val, isSet: true}
}

func (v NullableUpgradeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


