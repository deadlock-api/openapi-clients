/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// HeroItemTypeV2 the model 'HeroItemTypeV2'
type HeroItemTypeV2 string

// List of HeroItemTypeV2
const (
	WEAPON_PRIMARY HeroItemTypeV2 = "weapon_primary"
	WEAPON_SECONDARY HeroItemTypeV2 = "weapon_secondary"
	WEAPON_MELEE HeroItemTypeV2 = "weapon_melee"
	ABILITY_MANTLE HeroItemTypeV2 = "ability_mantle"
	ABILITY_JUMP HeroItemTypeV2 = "ability_jump"
	ABILITY_SLIDE HeroItemTypeV2 = "ability_slide"
	ABILITY_ZIP_LINE HeroItemTypeV2 = "ability_zip_line"
	ABILITY_ZIP_LINE_BOOST HeroItemTypeV2 = "ability_zip_line_boost"
	ABILITY_CLIMB_ROPE HeroItemTypeV2 = "ability_climb_rope"
	ABILITY_INNATE1 HeroItemTypeV2 = "ability_innate1"
	ABILITY_INNATE2 HeroItemTypeV2 = "ability_innate2"
	ABILITY_INNATE3 HeroItemTypeV2 = "ability_innate3"
	SIGNATURE1 HeroItemTypeV2 = "signature1"
	SIGNATURE2 HeroItemTypeV2 = "signature2"
	SIGNATURE3 HeroItemTypeV2 = "signature3"
	SIGNATURE4 HeroItemTypeV2 = "signature4"
)

// All allowed values of HeroItemTypeV2 enum
var AllowedHeroItemTypeV2EnumValues = []HeroItemTypeV2{
	"weapon_primary",
	"weapon_secondary",
	"weapon_melee",
	"ability_mantle",
	"ability_jump",
	"ability_slide",
	"ability_zip_line",
	"ability_zip_line_boost",
	"ability_climb_rope",
	"ability_innate1",
	"ability_innate2",
	"ability_innate3",
	"signature1",
	"signature2",
	"signature3",
	"signature4",
}

func (v *HeroItemTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HeroItemTypeV2(value)
	for _, existing := range AllowedHeroItemTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HeroItemTypeV2", value)
}

// NewHeroItemTypeV2FromValue returns a pointer to a valid HeroItemTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHeroItemTypeV2FromValue(v string) (*HeroItemTypeV2, error) {
	ev := HeroItemTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HeroItemTypeV2: valid values are %v", v, AllowedHeroItemTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HeroItemTypeV2) IsValid() bool {
	for _, existing := range AllowedHeroItemTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HeroItemTypeV2 value
func (v HeroItemTypeV2) Ptr() *HeroItemTypeV2 {
	return &v
}

type NullableHeroItemTypeV2 struct {
	value *HeroItemTypeV2
	isSet bool
}

func (v NullableHeroItemTypeV2) Get() *HeroItemTypeV2 {
	return v.value
}

func (v *NullableHeroItemTypeV2) Set(val *HeroItemTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroItemTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroItemTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroItemTypeV2(val *HeroItemTypeV2) *NullableHeroItemTypeV2 {
	return &NullableHeroItemTypeV2{value: val, isSet: true}
}

func (v NullableHeroItemTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroItemTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

