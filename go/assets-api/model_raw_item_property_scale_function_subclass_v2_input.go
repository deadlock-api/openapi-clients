/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawItemPropertyScaleFunctionSubclassV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawItemPropertyScaleFunctionSubclassV2Input{}

// RawItemPropertyScaleFunctionSubclassV2Input struct for RawItemPropertyScaleFunctionSubclassV2Input
type RawItemPropertyScaleFunctionSubclassV2Input struct {
	Class NullableString `json:"_class,omitempty"`
	MySubclassName NullableString `json:"_my_subclass_name,omitempty"`
	MESpecificStatScaleType NullableString `json:"m_eSpecificStatScaleType,omitempty"`
	MVecScalingStats []string `json:"m_vecScalingStats,omitempty"`
	MFlStatScale NullableFloat32 `json:"m_flStatScale,omitempty"`
}

// NewRawItemPropertyScaleFunctionSubclassV2Input instantiates a new RawItemPropertyScaleFunctionSubclassV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawItemPropertyScaleFunctionSubclassV2Input() *RawItemPropertyScaleFunctionSubclassV2Input {
	this := RawItemPropertyScaleFunctionSubclassV2Input{}
	return &this
}

// NewRawItemPropertyScaleFunctionSubclassV2InputWithDefaults instantiates a new RawItemPropertyScaleFunctionSubclassV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawItemPropertyScaleFunctionSubclassV2InputWithDefaults() *RawItemPropertyScaleFunctionSubclassV2Input {
	this := RawItemPropertyScaleFunctionSubclassV2Input{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetClass() string {
	if o == nil || IsNil(o.Class.Get()) {
		var ret string
		return ret
	}
	return *o.Class.Get()
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Class.Get(), o.Class.IsSet()
}

// HasClass returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) HasClass() bool {
	if o != nil && o.Class.IsSet() {
		return true
	}

	return false
}

// SetClass gets a reference to the given NullableString and assigns it to the Class field.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetClass(v string) {
	o.Class.Set(&v)
}
// SetClassNil sets the value for Class to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetClassNil() {
	o.Class.Set(nil)
}

// UnsetClass ensures that no value is present for Class, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) UnsetClass() {
	o.Class.Unset()
}

// GetMySubclassName returns the MySubclassName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMySubclassName() string {
	if o == nil || IsNil(o.MySubclassName.Get()) {
		var ret string
		return ret
	}
	return *o.MySubclassName.Get()
}

// GetMySubclassNameOk returns a tuple with the MySubclassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMySubclassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MySubclassName.Get(), o.MySubclassName.IsSet()
}

// HasMySubclassName returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) HasMySubclassName() bool {
	if o != nil && o.MySubclassName.IsSet() {
		return true
	}

	return false
}

// SetMySubclassName gets a reference to the given NullableString and assigns it to the MySubclassName field.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMySubclassName(v string) {
	o.MySubclassName.Set(&v)
}
// SetMySubclassNameNil sets the value for MySubclassName to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMySubclassNameNil() {
	o.MySubclassName.Set(nil)
}

// UnsetMySubclassName ensures that no value is present for MySubclassName, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) UnsetMySubclassName() {
	o.MySubclassName.Unset()
}

// GetMESpecificStatScaleType returns the MESpecificStatScaleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMESpecificStatScaleType() string {
	if o == nil || IsNil(o.MESpecificStatScaleType.Get()) {
		var ret string
		return ret
	}
	return *o.MESpecificStatScaleType.Get()
}

// GetMESpecificStatScaleTypeOk returns a tuple with the MESpecificStatScaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMESpecificStatScaleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MESpecificStatScaleType.Get(), o.MESpecificStatScaleType.IsSet()
}

// HasMESpecificStatScaleType returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) HasMESpecificStatScaleType() bool {
	if o != nil && o.MESpecificStatScaleType.IsSet() {
		return true
	}

	return false
}

// SetMESpecificStatScaleType gets a reference to the given NullableString and assigns it to the MESpecificStatScaleType field.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMESpecificStatScaleType(v string) {
	o.MESpecificStatScaleType.Set(&v)
}
// SetMESpecificStatScaleTypeNil sets the value for MESpecificStatScaleType to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMESpecificStatScaleTypeNil() {
	o.MESpecificStatScaleType.Set(nil)
}

// UnsetMESpecificStatScaleType ensures that no value is present for MESpecificStatScaleType, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) UnsetMESpecificStatScaleType() {
	o.MESpecificStatScaleType.Unset()
}

// GetMVecScalingStats returns the MVecScalingStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMVecScalingStats() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MVecScalingStats
}

// GetMVecScalingStatsOk returns a tuple with the MVecScalingStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMVecScalingStatsOk() ([]string, bool) {
	if o == nil || IsNil(o.MVecScalingStats) {
		return nil, false
	}
	return o.MVecScalingStats, true
}

// HasMVecScalingStats returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) HasMVecScalingStats() bool {
	if o != nil && !IsNil(o.MVecScalingStats) {
		return true
	}

	return false
}

// SetMVecScalingStats gets a reference to the given []string and assigns it to the MVecScalingStats field.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMVecScalingStats(v []string) {
	o.MVecScalingStats = v
}

// GetMFlStatScale returns the MFlStatScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMFlStatScale() float32 {
	if o == nil || IsNil(o.MFlStatScale.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlStatScale.Get()
}

// GetMFlStatScaleOk returns a tuple with the MFlStatScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawItemPropertyScaleFunctionSubclassV2Input) GetMFlStatScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlStatScale.Get(), o.MFlStatScale.IsSet()
}

// HasMFlStatScale returns a boolean if a field has been set.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) HasMFlStatScale() bool {
	if o != nil && o.MFlStatScale.IsSet() {
		return true
	}

	return false
}

// SetMFlStatScale gets a reference to the given NullableFloat32 and assigns it to the MFlStatScale field.
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMFlStatScale(v float32) {
	o.MFlStatScale.Set(&v)
}
// SetMFlStatScaleNil sets the value for MFlStatScale to be an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) SetMFlStatScaleNil() {
	o.MFlStatScale.Set(nil)
}

// UnsetMFlStatScale ensures that no value is present for MFlStatScale, not even an explicit nil
func (o *RawItemPropertyScaleFunctionSubclassV2Input) UnsetMFlStatScale() {
	o.MFlStatScale.Unset()
}

func (o RawItemPropertyScaleFunctionSubclassV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawItemPropertyScaleFunctionSubclassV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Class.IsSet() {
		toSerialize["_class"] = o.Class.Get()
	}
	if o.MySubclassName.IsSet() {
		toSerialize["_my_subclass_name"] = o.MySubclassName.Get()
	}
	if o.MESpecificStatScaleType.IsSet() {
		toSerialize["m_eSpecificStatScaleType"] = o.MESpecificStatScaleType.Get()
	}
	if o.MVecScalingStats != nil {
		toSerialize["m_vecScalingStats"] = o.MVecScalingStats
	}
	if o.MFlStatScale.IsSet() {
		toSerialize["m_flStatScale"] = o.MFlStatScale.Get()
	}
	return toSerialize, nil
}

type NullableRawItemPropertyScaleFunctionSubclassV2Input struct {
	value *RawItemPropertyScaleFunctionSubclassV2Input
	isSet bool
}

func (v NullableRawItemPropertyScaleFunctionSubclassV2Input) Get() *RawItemPropertyScaleFunctionSubclassV2Input {
	return v.value
}

func (v *NullableRawItemPropertyScaleFunctionSubclassV2Input) Set(val *RawItemPropertyScaleFunctionSubclassV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawItemPropertyScaleFunctionSubclassV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawItemPropertyScaleFunctionSubclassV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawItemPropertyScaleFunctionSubclassV2Input(val *RawItemPropertyScaleFunctionSubclassV2Input) *NullableRawItemPropertyScaleFunctionSubclassV2Input {
	return &NullableRawItemPropertyScaleFunctionSubclassV2Input{value: val, isSet: true}
}

func (v NullableRawItemPropertyScaleFunctionSubclassV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawItemPropertyScaleFunctionSubclassV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


