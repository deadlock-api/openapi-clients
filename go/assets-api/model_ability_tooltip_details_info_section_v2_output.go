/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the AbilityTooltipDetailsInfoSectionV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbilityTooltipDetailsInfoSectionV2Output{}

// AbilityTooltipDetailsInfoSectionV2Output struct for AbilityTooltipDetailsInfoSectionV2Output
type AbilityTooltipDetailsInfoSectionV2Output struct {
	LocString NullableString `json:"loc_string,omitempty"`
	PropertyUpgradeRequired NullableString `json:"property_upgrade_required,omitempty"`
	PropertiesBlock []AbilityTooltipDetailsInfoSectionPropertyBlockV2 `json:"properties_block,omitempty"`
	BasicProperties []string `json:"basic_properties,omitempty"`
}

// NewAbilityTooltipDetailsInfoSectionV2Output instantiates a new AbilityTooltipDetailsInfoSectionV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbilityTooltipDetailsInfoSectionV2Output() *AbilityTooltipDetailsInfoSectionV2Output {
	this := AbilityTooltipDetailsInfoSectionV2Output{}
	return &this
}

// NewAbilityTooltipDetailsInfoSectionV2OutputWithDefaults instantiates a new AbilityTooltipDetailsInfoSectionV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbilityTooltipDetailsInfoSectionV2OutputWithDefaults() *AbilityTooltipDetailsInfoSectionV2Output {
	this := AbilityTooltipDetailsInfoSectionV2Output{}
	return &this
}

// GetLocString returns the LocString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetLocString() string {
	if o == nil || IsNil(o.LocString.Get()) {
		var ret string
		return ret
	}
	return *o.LocString.Get()
}

// GetLocStringOk returns a tuple with the LocString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetLocStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocString.Get(), o.LocString.IsSet()
}

// HasLocString returns a boolean if a field has been set.
func (o *AbilityTooltipDetailsInfoSectionV2Output) HasLocString() bool {
	if o != nil && o.LocString.IsSet() {
		return true
	}

	return false
}

// SetLocString gets a reference to the given NullableString and assigns it to the LocString field.
func (o *AbilityTooltipDetailsInfoSectionV2Output) SetLocString(v string) {
	o.LocString.Set(&v)
}
// SetLocStringNil sets the value for LocString to be an explicit nil
func (o *AbilityTooltipDetailsInfoSectionV2Output) SetLocStringNil() {
	o.LocString.Set(nil)
}

// UnsetLocString ensures that no value is present for LocString, not even an explicit nil
func (o *AbilityTooltipDetailsInfoSectionV2Output) UnsetLocString() {
	o.LocString.Unset()
}

// GetPropertyUpgradeRequired returns the PropertyUpgradeRequired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetPropertyUpgradeRequired() string {
	if o == nil || IsNil(o.PropertyUpgradeRequired.Get()) {
		var ret string
		return ret
	}
	return *o.PropertyUpgradeRequired.Get()
}

// GetPropertyUpgradeRequiredOk returns a tuple with the PropertyUpgradeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetPropertyUpgradeRequiredOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyUpgradeRequired.Get(), o.PropertyUpgradeRequired.IsSet()
}

// HasPropertyUpgradeRequired returns a boolean if a field has been set.
func (o *AbilityTooltipDetailsInfoSectionV2Output) HasPropertyUpgradeRequired() bool {
	if o != nil && o.PropertyUpgradeRequired.IsSet() {
		return true
	}

	return false
}

// SetPropertyUpgradeRequired gets a reference to the given NullableString and assigns it to the PropertyUpgradeRequired field.
func (o *AbilityTooltipDetailsInfoSectionV2Output) SetPropertyUpgradeRequired(v string) {
	o.PropertyUpgradeRequired.Set(&v)
}
// SetPropertyUpgradeRequiredNil sets the value for PropertyUpgradeRequired to be an explicit nil
func (o *AbilityTooltipDetailsInfoSectionV2Output) SetPropertyUpgradeRequiredNil() {
	o.PropertyUpgradeRequired.Set(nil)
}

// UnsetPropertyUpgradeRequired ensures that no value is present for PropertyUpgradeRequired, not even an explicit nil
func (o *AbilityTooltipDetailsInfoSectionV2Output) UnsetPropertyUpgradeRequired() {
	o.PropertyUpgradeRequired.Unset()
}

// GetPropertiesBlock returns the PropertiesBlock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetPropertiesBlock() []AbilityTooltipDetailsInfoSectionPropertyBlockV2 {
	if o == nil {
		var ret []AbilityTooltipDetailsInfoSectionPropertyBlockV2
		return ret
	}
	return o.PropertiesBlock
}

// GetPropertiesBlockOk returns a tuple with the PropertiesBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetPropertiesBlockOk() ([]AbilityTooltipDetailsInfoSectionPropertyBlockV2, bool) {
	if o == nil || IsNil(o.PropertiesBlock) {
		return nil, false
	}
	return o.PropertiesBlock, true
}

// HasPropertiesBlock returns a boolean if a field has been set.
func (o *AbilityTooltipDetailsInfoSectionV2Output) HasPropertiesBlock() bool {
	if o != nil && !IsNil(o.PropertiesBlock) {
		return true
	}

	return false
}

// SetPropertiesBlock gets a reference to the given []AbilityTooltipDetailsInfoSectionPropertyBlockV2 and assigns it to the PropertiesBlock field.
func (o *AbilityTooltipDetailsInfoSectionV2Output) SetPropertiesBlock(v []AbilityTooltipDetailsInfoSectionPropertyBlockV2) {
	o.PropertiesBlock = v
}

// GetBasicProperties returns the BasicProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetBasicProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BasicProperties
}

// GetBasicPropertiesOk returns a tuple with the BasicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityTooltipDetailsInfoSectionV2Output) GetBasicPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.BasicProperties) {
		return nil, false
	}
	return o.BasicProperties, true
}

// HasBasicProperties returns a boolean if a field has been set.
func (o *AbilityTooltipDetailsInfoSectionV2Output) HasBasicProperties() bool {
	if o != nil && !IsNil(o.BasicProperties) {
		return true
	}

	return false
}

// SetBasicProperties gets a reference to the given []string and assigns it to the BasicProperties field.
func (o *AbilityTooltipDetailsInfoSectionV2Output) SetBasicProperties(v []string) {
	o.BasicProperties = v
}

func (o AbilityTooltipDetailsInfoSectionV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbilityTooltipDetailsInfoSectionV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LocString.IsSet() {
		toSerialize["loc_string"] = o.LocString.Get()
	}
	if o.PropertyUpgradeRequired.IsSet() {
		toSerialize["property_upgrade_required"] = o.PropertyUpgradeRequired.Get()
	}
	if o.PropertiesBlock != nil {
		toSerialize["properties_block"] = o.PropertiesBlock
	}
	if o.BasicProperties != nil {
		toSerialize["basic_properties"] = o.BasicProperties
	}
	return toSerialize, nil
}

type NullableAbilityTooltipDetailsInfoSectionV2Output struct {
	value *AbilityTooltipDetailsInfoSectionV2Output
	isSet bool
}

func (v NullableAbilityTooltipDetailsInfoSectionV2Output) Get() *AbilityTooltipDetailsInfoSectionV2Output {
	return v.value
}

func (v *NullableAbilityTooltipDetailsInfoSectionV2Output) Set(val *AbilityTooltipDetailsInfoSectionV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityTooltipDetailsInfoSectionV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityTooltipDetailsInfoSectionV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityTooltipDetailsInfoSectionV2Output(val *AbilityTooltipDetailsInfoSectionV2Output) *NullableAbilityTooltipDetailsInfoSectionV2Output {
	return &NullableAbilityTooltipDetailsInfoSectionV2Output{value: val, isSet: true}
}

func (v NullableAbilityTooltipDetailsInfoSectionV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityTooltipDetailsInfoSectionV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


