/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroShopStatDisplayV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroShopStatDisplayV2Input{}

// HeroShopStatDisplayV2Input struct for HeroShopStatDisplayV2Input
type HeroShopStatDisplayV2Input struct {
	MESpiritStatsDisplay RawHeroShopSpiritStatsDisplayV2Input `json:"m_eSpiritStatsDisplay"`
	MEVitalityStatsDisplay RawHeroShopVitalityStatsDisplayV2Input `json:"m_eVitalityStatsDisplay"`
	WeaponStatsDisplay HeroShopWeaponStatsDisplayV2Input `json:"weapon_stats_display"`
}

type _HeroShopStatDisplayV2Input HeroShopStatDisplayV2Input

// NewHeroShopStatDisplayV2Input instantiates a new HeroShopStatDisplayV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroShopStatDisplayV2Input(mESpiritStatsDisplay RawHeroShopSpiritStatsDisplayV2Input, mEVitalityStatsDisplay RawHeroShopVitalityStatsDisplayV2Input, weaponStatsDisplay HeroShopWeaponStatsDisplayV2Input) *HeroShopStatDisplayV2Input {
	this := HeroShopStatDisplayV2Input{}
	this.MESpiritStatsDisplay = mESpiritStatsDisplay
	this.MEVitalityStatsDisplay = mEVitalityStatsDisplay
	this.WeaponStatsDisplay = weaponStatsDisplay
	return &this
}

// NewHeroShopStatDisplayV2InputWithDefaults instantiates a new HeroShopStatDisplayV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroShopStatDisplayV2InputWithDefaults() *HeroShopStatDisplayV2Input {
	this := HeroShopStatDisplayV2Input{}
	return &this
}

// GetMESpiritStatsDisplay returns the MESpiritStatsDisplay field value
func (o *HeroShopStatDisplayV2Input) GetMESpiritStatsDisplay() RawHeroShopSpiritStatsDisplayV2Input {
	if o == nil {
		var ret RawHeroShopSpiritStatsDisplayV2Input
		return ret
	}

	return o.MESpiritStatsDisplay
}

// GetMESpiritStatsDisplayOk returns a tuple with the MESpiritStatsDisplay field value
// and a boolean to check if the value has been set.
func (o *HeroShopStatDisplayV2Input) GetMESpiritStatsDisplayOk() (*RawHeroShopSpiritStatsDisplayV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MESpiritStatsDisplay, true
}

// SetMESpiritStatsDisplay sets field value
func (o *HeroShopStatDisplayV2Input) SetMESpiritStatsDisplay(v RawHeroShopSpiritStatsDisplayV2Input) {
	o.MESpiritStatsDisplay = v
}

// GetMEVitalityStatsDisplay returns the MEVitalityStatsDisplay field value
func (o *HeroShopStatDisplayV2Input) GetMEVitalityStatsDisplay() RawHeroShopVitalityStatsDisplayV2Input {
	if o == nil {
		var ret RawHeroShopVitalityStatsDisplayV2Input
		return ret
	}

	return o.MEVitalityStatsDisplay
}

// GetMEVitalityStatsDisplayOk returns a tuple with the MEVitalityStatsDisplay field value
// and a boolean to check if the value has been set.
func (o *HeroShopStatDisplayV2Input) GetMEVitalityStatsDisplayOk() (*RawHeroShopVitalityStatsDisplayV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MEVitalityStatsDisplay, true
}

// SetMEVitalityStatsDisplay sets field value
func (o *HeroShopStatDisplayV2Input) SetMEVitalityStatsDisplay(v RawHeroShopVitalityStatsDisplayV2Input) {
	o.MEVitalityStatsDisplay = v
}

// GetWeaponStatsDisplay returns the WeaponStatsDisplay field value
func (o *HeroShopStatDisplayV2Input) GetWeaponStatsDisplay() HeroShopWeaponStatsDisplayV2Input {
	if o == nil {
		var ret HeroShopWeaponStatsDisplayV2Input
		return ret
	}

	return o.WeaponStatsDisplay
}

// GetWeaponStatsDisplayOk returns a tuple with the WeaponStatsDisplay field value
// and a boolean to check if the value has been set.
func (o *HeroShopStatDisplayV2Input) GetWeaponStatsDisplayOk() (*HeroShopWeaponStatsDisplayV2Input, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeaponStatsDisplay, true
}

// SetWeaponStatsDisplay sets field value
func (o *HeroShopStatDisplayV2Input) SetWeaponStatsDisplay(v HeroShopWeaponStatsDisplayV2Input) {
	o.WeaponStatsDisplay = v
}

func (o HeroShopStatDisplayV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroShopStatDisplayV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["m_eSpiritStatsDisplay"] = o.MESpiritStatsDisplay
	toSerialize["m_eVitalityStatsDisplay"] = o.MEVitalityStatsDisplay
	toSerialize["weapon_stats_display"] = o.WeaponStatsDisplay
	return toSerialize, nil
}

func (o *HeroShopStatDisplayV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"m_eSpiritStatsDisplay",
		"m_eVitalityStatsDisplay",
		"weapon_stats_display",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroShopStatDisplayV2Input := _HeroShopStatDisplayV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroShopStatDisplayV2Input)

	if err != nil {
		return err
	}

	*o = HeroShopStatDisplayV2Input(varHeroShopStatDisplayV2Input)

	return err
}

type NullableHeroShopStatDisplayV2Input struct {
	value *HeroShopStatDisplayV2Input
	isSet bool
}

func (v NullableHeroShopStatDisplayV2Input) Get() *HeroShopStatDisplayV2Input {
	return v.value
}

func (v *NullableHeroShopStatDisplayV2Input) Set(val *HeroShopStatDisplayV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroShopStatDisplayV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroShopStatDisplayV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroShopStatDisplayV2Input(val *HeroShopStatDisplayV2Input) *NullableHeroShopStatDisplayV2Input {
	return &NullableHeroShopStatDisplayV2Input{value: val, isSet: true}
}

func (v NullableHeroShopStatDisplayV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroShopStatDisplayV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


