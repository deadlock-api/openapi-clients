/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// DeadlockAssetsApiRoutesV1ValidClientVersions the model 'DeadlockAssetsApiRoutesV1ValidClientVersions'
type DeadlockAssetsApiRoutesV1ValidClientVersions int32

// List of deadlock_assets_api__routes__v1__ValidClientVersions
const (
	_5945 DeadlockAssetsApiRoutesV1ValidClientVersions = 5945
	_5920 DeadlockAssetsApiRoutesV1ValidClientVersions = 5920
	_5902 DeadlockAssetsApiRoutesV1ValidClientVersions = 5902
	_5885 DeadlockAssetsApiRoutesV1ValidClientVersions = 5885
	_5878 DeadlockAssetsApiRoutesV1ValidClientVersions = 5878
	_5869 DeadlockAssetsApiRoutesV1ValidClientVersions = 5869
	_5852 DeadlockAssetsApiRoutesV1ValidClientVersions = 5852
	_5831 DeadlockAssetsApiRoutesV1ValidClientVersions = 5831
	_5826 DeadlockAssetsApiRoutesV1ValidClientVersions = 5826
	_5818 DeadlockAssetsApiRoutesV1ValidClientVersions = 5818
	_5789 DeadlockAssetsApiRoutesV1ValidClientVersions = 5789
	_5748 DeadlockAssetsApiRoutesV1ValidClientVersions = 5748
	_5723 DeadlockAssetsApiRoutesV1ValidClientVersions = 5723
	_5712 DeadlockAssetsApiRoutesV1ValidClientVersions = 5712
	_5710 DeadlockAssetsApiRoutesV1ValidClientVersions = 5710
	_5690 DeadlockAssetsApiRoutesV1ValidClientVersions = 5690
	_5675 DeadlockAssetsApiRoutesV1ValidClientVersions = 5675
	_5668 DeadlockAssetsApiRoutesV1ValidClientVersions = 5668
	_5664 DeadlockAssetsApiRoutesV1ValidClientVersions = 5664
	_5658 DeadlockAssetsApiRoutesV1ValidClientVersions = 5658
	_5650 DeadlockAssetsApiRoutesV1ValidClientVersions = 5650
	_5636 DeadlockAssetsApiRoutesV1ValidClientVersions = 5636
	_5624 DeadlockAssetsApiRoutesV1ValidClientVersions = 5624
	_5615 DeadlockAssetsApiRoutesV1ValidClientVersions = 5615
	_5602 DeadlockAssetsApiRoutesV1ValidClientVersions = 5602
	_5583 DeadlockAssetsApiRoutesV1ValidClientVersions = 5583
	_5554 DeadlockAssetsApiRoutesV1ValidClientVersions = 5554
	_5538 DeadlockAssetsApiRoutesV1ValidClientVersions = 5538
	_5533 DeadlockAssetsApiRoutesV1ValidClientVersions = 5533
	_5529 DeadlockAssetsApiRoutesV1ValidClientVersions = 5529
	_5527 DeadlockAssetsApiRoutesV1ValidClientVersions = 5527
)

// All allowed values of DeadlockAssetsApiRoutesV1ValidClientVersions enum
var AllowedDeadlockAssetsApiRoutesV1ValidClientVersionsEnumValues = []DeadlockAssetsApiRoutesV1ValidClientVersions{
	5945,
	5920,
	5902,
	5885,
	5878,
	5869,
	5852,
	5831,
	5826,
	5818,
	5789,
	5748,
	5723,
	5712,
	5710,
	5690,
	5675,
	5668,
	5664,
	5658,
	5650,
	5636,
	5624,
	5615,
	5602,
	5583,
	5554,
	5538,
	5533,
	5529,
	5527,
}

func (v *DeadlockAssetsApiRoutesV1ValidClientVersions) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeadlockAssetsApiRoutesV1ValidClientVersions(value)
	for _, existing := range AllowedDeadlockAssetsApiRoutesV1ValidClientVersionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeadlockAssetsApiRoutesV1ValidClientVersions", value)
}

// NewDeadlockAssetsApiRoutesV1ValidClientVersionsFromValue returns a pointer to a valid DeadlockAssetsApiRoutesV1ValidClientVersions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeadlockAssetsApiRoutesV1ValidClientVersionsFromValue(v int32) (*DeadlockAssetsApiRoutesV1ValidClientVersions, error) {
	ev := DeadlockAssetsApiRoutesV1ValidClientVersions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeadlockAssetsApiRoutesV1ValidClientVersions: valid values are %v", v, AllowedDeadlockAssetsApiRoutesV1ValidClientVersionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeadlockAssetsApiRoutesV1ValidClientVersions) IsValid() bool {
	for _, existing := range AllowedDeadlockAssetsApiRoutesV1ValidClientVersionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to deadlock_assets_api__routes__v1__ValidClientVersions value
func (v DeadlockAssetsApiRoutesV1ValidClientVersions) Ptr() *DeadlockAssetsApiRoutesV1ValidClientVersions {
	return &v
}

type NullableDeadlockAssetsApiRoutesV1ValidClientVersions struct {
	value *DeadlockAssetsApiRoutesV1ValidClientVersions
	isSet bool
}

func (v NullableDeadlockAssetsApiRoutesV1ValidClientVersions) Get() *DeadlockAssetsApiRoutesV1ValidClientVersions {
	return v.value
}

func (v *NullableDeadlockAssetsApiRoutesV1ValidClientVersions) Set(val *DeadlockAssetsApiRoutesV1ValidClientVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableDeadlockAssetsApiRoutesV1ValidClientVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableDeadlockAssetsApiRoutesV1ValidClientVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeadlockAssetsApiRoutesV1ValidClientVersions(val *DeadlockAssetsApiRoutesV1ValidClientVersions) *NullableDeadlockAssetsApiRoutesV1ValidClientVersions {
	return &NullableDeadlockAssetsApiRoutesV1ValidClientVersions{value: val, isSet: true}
}

func (v NullableDeadlockAssetsApiRoutesV1ValidClientVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeadlockAssetsApiRoutesV1ValidClientVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

