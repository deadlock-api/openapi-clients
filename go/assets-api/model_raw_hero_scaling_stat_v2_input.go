/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawHeroScalingStatV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawHeroScalingStatV2Input{}

// RawHeroScalingStatV2Input struct for RawHeroScalingStatV2Input
type RawHeroScalingStatV2Input struct {
	EScalingStat string `json:"eScalingStat"`
	FlScale float32 `json:"flScale"`
}

type _RawHeroScalingStatV2Input RawHeroScalingStatV2Input

// NewRawHeroScalingStatV2Input instantiates a new RawHeroScalingStatV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawHeroScalingStatV2Input(eScalingStat string, flScale float32) *RawHeroScalingStatV2Input {
	this := RawHeroScalingStatV2Input{}
	this.EScalingStat = eScalingStat
	this.FlScale = flScale
	return &this
}

// NewRawHeroScalingStatV2InputWithDefaults instantiates a new RawHeroScalingStatV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawHeroScalingStatV2InputWithDefaults() *RawHeroScalingStatV2Input {
	this := RawHeroScalingStatV2Input{}
	return &this
}

// GetEScalingStat returns the EScalingStat field value
func (o *RawHeroScalingStatV2Input) GetEScalingStat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EScalingStat
}

// GetEScalingStatOk returns a tuple with the EScalingStat field value
// and a boolean to check if the value has been set.
func (o *RawHeroScalingStatV2Input) GetEScalingStatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EScalingStat, true
}

// SetEScalingStat sets field value
func (o *RawHeroScalingStatV2Input) SetEScalingStat(v string) {
	o.EScalingStat = v
}

// GetFlScale returns the FlScale field value
func (o *RawHeroScalingStatV2Input) GetFlScale() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FlScale
}

// GetFlScaleOk returns a tuple with the FlScale field value
// and a boolean to check if the value has been set.
func (o *RawHeroScalingStatV2Input) GetFlScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlScale, true
}

// SetFlScale sets field value
func (o *RawHeroScalingStatV2Input) SetFlScale(v float32) {
	o.FlScale = v
}

func (o RawHeroScalingStatV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawHeroScalingStatV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eScalingStat"] = o.EScalingStat
	toSerialize["flScale"] = o.FlScale
	return toSerialize, nil
}

func (o *RawHeroScalingStatV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eScalingStat",
		"flScale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawHeroScalingStatV2Input := _RawHeroScalingStatV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawHeroScalingStatV2Input)

	if err != nil {
		return err
	}

	*o = RawHeroScalingStatV2Input(varRawHeroScalingStatV2Input)

	return err
}

type NullableRawHeroScalingStatV2Input struct {
	value *RawHeroScalingStatV2Input
	isSet bool
}

func (v NullableRawHeroScalingStatV2Input) Get() *RawHeroScalingStatV2Input {
	return v.value
}

func (v *NullableRawHeroScalingStatV2Input) Set(val *RawHeroScalingStatV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawHeroScalingStatV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawHeroScalingStatV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawHeroScalingStatV2Input(val *RawHeroScalingStatV2Input) *NullableRawHeroScalingStatV2Input {
	return &NullableRawHeroScalingStatV2Input{value: val, isSet: true}
}

func (v NullableRawHeroScalingStatV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawHeroScalingStatV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


