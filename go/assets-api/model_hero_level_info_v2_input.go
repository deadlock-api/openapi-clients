/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroLevelInfoV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroLevelInfoV2Input{}

// HeroLevelInfoV2Input struct for HeroLevelInfoV2Input
type HeroLevelInfoV2Input struct {
	MBUseStandardUpgrade NullableBool `json:"m_bUseStandardUpgrade,omitempty"`
	BonusCurrencies []string `json:"bonus_currencies,omitempty"`
	MUnRequiredGold int32 `json:"m_unRequiredGold"`
}

type _HeroLevelInfoV2Input HeroLevelInfoV2Input

// NewHeroLevelInfoV2Input instantiates a new HeroLevelInfoV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroLevelInfoV2Input(mUnRequiredGold int32) *HeroLevelInfoV2Input {
	this := HeroLevelInfoV2Input{}
	this.MUnRequiredGold = mUnRequiredGold
	return &this
}

// NewHeroLevelInfoV2InputWithDefaults instantiates a new HeroLevelInfoV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroLevelInfoV2InputWithDefaults() *HeroLevelInfoV2Input {
	this := HeroLevelInfoV2Input{}
	return &this
}

// GetMBUseStandardUpgrade returns the MBUseStandardUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroLevelInfoV2Input) GetMBUseStandardUpgrade() bool {
	if o == nil || IsNil(o.MBUseStandardUpgrade.Get()) {
		var ret bool
		return ret
	}
	return *o.MBUseStandardUpgrade.Get()
}

// GetMBUseStandardUpgradeOk returns a tuple with the MBUseStandardUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroLevelInfoV2Input) GetMBUseStandardUpgradeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MBUseStandardUpgrade.Get(), o.MBUseStandardUpgrade.IsSet()
}

// HasMBUseStandardUpgrade returns a boolean if a field has been set.
func (o *HeroLevelInfoV2Input) HasMBUseStandardUpgrade() bool {
	if o != nil && o.MBUseStandardUpgrade.IsSet() {
		return true
	}

	return false
}

// SetMBUseStandardUpgrade gets a reference to the given NullableBool and assigns it to the MBUseStandardUpgrade field.
func (o *HeroLevelInfoV2Input) SetMBUseStandardUpgrade(v bool) {
	o.MBUseStandardUpgrade.Set(&v)
}
// SetMBUseStandardUpgradeNil sets the value for MBUseStandardUpgrade to be an explicit nil
func (o *HeroLevelInfoV2Input) SetMBUseStandardUpgradeNil() {
	o.MBUseStandardUpgrade.Set(nil)
}

// UnsetMBUseStandardUpgrade ensures that no value is present for MBUseStandardUpgrade, not even an explicit nil
func (o *HeroLevelInfoV2Input) UnsetMBUseStandardUpgrade() {
	o.MBUseStandardUpgrade.Unset()
}

// GetBonusCurrencies returns the BonusCurrencies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroLevelInfoV2Input) GetBonusCurrencies() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BonusCurrencies
}

// GetBonusCurrenciesOk returns a tuple with the BonusCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroLevelInfoV2Input) GetBonusCurrenciesOk() ([]string, bool) {
	if o == nil || IsNil(o.BonusCurrencies) {
		return nil, false
	}
	return o.BonusCurrencies, true
}

// HasBonusCurrencies returns a boolean if a field has been set.
func (o *HeroLevelInfoV2Input) HasBonusCurrencies() bool {
	if o != nil && !IsNil(o.BonusCurrencies) {
		return true
	}

	return false
}

// SetBonusCurrencies gets a reference to the given []string and assigns it to the BonusCurrencies field.
func (o *HeroLevelInfoV2Input) SetBonusCurrencies(v []string) {
	o.BonusCurrencies = v
}

// GetMUnRequiredGold returns the MUnRequiredGold field value
func (o *HeroLevelInfoV2Input) GetMUnRequiredGold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MUnRequiredGold
}

// GetMUnRequiredGoldOk returns a tuple with the MUnRequiredGold field value
// and a boolean to check if the value has been set.
func (o *HeroLevelInfoV2Input) GetMUnRequiredGoldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MUnRequiredGold, true
}

// SetMUnRequiredGold sets field value
func (o *HeroLevelInfoV2Input) SetMUnRequiredGold(v int32) {
	o.MUnRequiredGold = v
}

func (o HeroLevelInfoV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroLevelInfoV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MBUseStandardUpgrade.IsSet() {
		toSerialize["m_bUseStandardUpgrade"] = o.MBUseStandardUpgrade.Get()
	}
	if o.BonusCurrencies != nil {
		toSerialize["bonus_currencies"] = o.BonusCurrencies
	}
	toSerialize["m_unRequiredGold"] = o.MUnRequiredGold
	return toSerialize, nil
}

func (o *HeroLevelInfoV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"m_unRequiredGold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroLevelInfoV2Input := _HeroLevelInfoV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroLevelInfoV2Input)

	if err != nil {
		return err
	}

	*o = HeroLevelInfoV2Input(varHeroLevelInfoV2Input)

	return err
}

type NullableHeroLevelInfoV2Input struct {
	value *HeroLevelInfoV2Input
	isSet bool
}

func (v NullableHeroLevelInfoV2Input) Get() *HeroLevelInfoV2Input {
	return v.value
}

func (v *NullableHeroLevelInfoV2Input) Set(val *HeroLevelInfoV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroLevelInfoV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroLevelInfoV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroLevelInfoV2Input(val *HeroLevelInfoV2Input) *NullableHeroLevelInfoV2Input {
	return &NullableHeroLevelInfoV2Input{value: val, isSet: true}
}

func (v NullableHeroLevelInfoV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroLevelInfoV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


