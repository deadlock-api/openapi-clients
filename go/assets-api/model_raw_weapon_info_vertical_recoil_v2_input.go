/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawWeaponInfoVerticalRecoilV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawWeaponInfoVerticalRecoilV2Input{}

// RawWeaponInfoVerticalRecoilV2Input struct for RawWeaponInfoVerticalRecoilV2Input
type RawWeaponInfoVerticalRecoilV2Input struct {
	MRange NullableMRange `json:"m_Range,omitempty"`
	MFlBurstExponent NullableFloat32 `json:"m_flBurstExponent,omitempty"`
	MFlBurstConstant NullableFloat32 `json:"m_flBurstConstant,omitempty"`
	MFlBurstSlope NullableFloat32 `json:"m_flBurstSlope,omitempty"`
}

// NewRawWeaponInfoVerticalRecoilV2Input instantiates a new RawWeaponInfoVerticalRecoilV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawWeaponInfoVerticalRecoilV2Input() *RawWeaponInfoVerticalRecoilV2Input {
	this := RawWeaponInfoVerticalRecoilV2Input{}
	return &this
}

// NewRawWeaponInfoVerticalRecoilV2InputWithDefaults instantiates a new RawWeaponInfoVerticalRecoilV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawWeaponInfoVerticalRecoilV2InputWithDefaults() *RawWeaponInfoVerticalRecoilV2Input {
	this := RawWeaponInfoVerticalRecoilV2Input{}
	return &this
}

// GetMRange returns the MRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMRange() MRange {
	if o == nil || IsNil(o.MRange.Get()) {
		var ret MRange
		return ret
	}
	return *o.MRange.Get()
}

// GetMRangeOk returns a tuple with the MRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMRangeOk() (*MRange, bool) {
	if o == nil {
		return nil, false
	}
	return o.MRange.Get(), o.MRange.IsSet()
}

// HasMRange returns a boolean if a field has been set.
func (o *RawWeaponInfoVerticalRecoilV2Input) HasMRange() bool {
	if o != nil && o.MRange.IsSet() {
		return true
	}

	return false
}

// SetMRange gets a reference to the given NullableMRange and assigns it to the MRange field.
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMRange(v MRange) {
	o.MRange.Set(&v)
}
// SetMRangeNil sets the value for MRange to be an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMRangeNil() {
	o.MRange.Set(nil)
}

// UnsetMRange ensures that no value is present for MRange, not even an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) UnsetMRange() {
	o.MRange.Unset()
}

// GetMFlBurstExponent returns the MFlBurstExponent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMFlBurstExponent() float32 {
	if o == nil || IsNil(o.MFlBurstExponent.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBurstExponent.Get()
}

// GetMFlBurstExponentOk returns a tuple with the MFlBurstExponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMFlBurstExponentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBurstExponent.Get(), o.MFlBurstExponent.IsSet()
}

// HasMFlBurstExponent returns a boolean if a field has been set.
func (o *RawWeaponInfoVerticalRecoilV2Input) HasMFlBurstExponent() bool {
	if o != nil && o.MFlBurstExponent.IsSet() {
		return true
	}

	return false
}

// SetMFlBurstExponent gets a reference to the given NullableFloat32 and assigns it to the MFlBurstExponent field.
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMFlBurstExponent(v float32) {
	o.MFlBurstExponent.Set(&v)
}
// SetMFlBurstExponentNil sets the value for MFlBurstExponent to be an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMFlBurstExponentNil() {
	o.MFlBurstExponent.Set(nil)
}

// UnsetMFlBurstExponent ensures that no value is present for MFlBurstExponent, not even an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) UnsetMFlBurstExponent() {
	o.MFlBurstExponent.Unset()
}

// GetMFlBurstConstant returns the MFlBurstConstant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMFlBurstConstant() float32 {
	if o == nil || IsNil(o.MFlBurstConstant.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBurstConstant.Get()
}

// GetMFlBurstConstantOk returns a tuple with the MFlBurstConstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMFlBurstConstantOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBurstConstant.Get(), o.MFlBurstConstant.IsSet()
}

// HasMFlBurstConstant returns a boolean if a field has been set.
func (o *RawWeaponInfoVerticalRecoilV2Input) HasMFlBurstConstant() bool {
	if o != nil && o.MFlBurstConstant.IsSet() {
		return true
	}

	return false
}

// SetMFlBurstConstant gets a reference to the given NullableFloat32 and assigns it to the MFlBurstConstant field.
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMFlBurstConstant(v float32) {
	o.MFlBurstConstant.Set(&v)
}
// SetMFlBurstConstantNil sets the value for MFlBurstConstant to be an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMFlBurstConstantNil() {
	o.MFlBurstConstant.Set(nil)
}

// UnsetMFlBurstConstant ensures that no value is present for MFlBurstConstant, not even an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) UnsetMFlBurstConstant() {
	o.MFlBurstConstant.Unset()
}

// GetMFlBurstSlope returns the MFlBurstSlope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMFlBurstSlope() float32 {
	if o == nil || IsNil(o.MFlBurstSlope.Get()) {
		var ret float32
		return ret
	}
	return *o.MFlBurstSlope.Get()
}

// GetMFlBurstSlopeOk returns a tuple with the MFlBurstSlope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawWeaponInfoVerticalRecoilV2Input) GetMFlBurstSlopeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MFlBurstSlope.Get(), o.MFlBurstSlope.IsSet()
}

// HasMFlBurstSlope returns a boolean if a field has been set.
func (o *RawWeaponInfoVerticalRecoilV2Input) HasMFlBurstSlope() bool {
	if o != nil && o.MFlBurstSlope.IsSet() {
		return true
	}

	return false
}

// SetMFlBurstSlope gets a reference to the given NullableFloat32 and assigns it to the MFlBurstSlope field.
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMFlBurstSlope(v float32) {
	o.MFlBurstSlope.Set(&v)
}
// SetMFlBurstSlopeNil sets the value for MFlBurstSlope to be an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) SetMFlBurstSlopeNil() {
	o.MFlBurstSlope.Set(nil)
}

// UnsetMFlBurstSlope ensures that no value is present for MFlBurstSlope, not even an explicit nil
func (o *RawWeaponInfoVerticalRecoilV2Input) UnsetMFlBurstSlope() {
	o.MFlBurstSlope.Unset()
}

func (o RawWeaponInfoVerticalRecoilV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawWeaponInfoVerticalRecoilV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MRange.IsSet() {
		toSerialize["m_Range"] = o.MRange.Get()
	}
	if o.MFlBurstExponent.IsSet() {
		toSerialize["m_flBurstExponent"] = o.MFlBurstExponent.Get()
	}
	if o.MFlBurstConstant.IsSet() {
		toSerialize["m_flBurstConstant"] = o.MFlBurstConstant.Get()
	}
	if o.MFlBurstSlope.IsSet() {
		toSerialize["m_flBurstSlope"] = o.MFlBurstSlope.Get()
	}
	return toSerialize, nil
}

type NullableRawWeaponInfoVerticalRecoilV2Input struct {
	value *RawWeaponInfoVerticalRecoilV2Input
	isSet bool
}

func (v NullableRawWeaponInfoVerticalRecoilV2Input) Get() *RawWeaponInfoVerticalRecoilV2Input {
	return v.value
}

func (v *NullableRawWeaponInfoVerticalRecoilV2Input) Set(val *RawWeaponInfoVerticalRecoilV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawWeaponInfoVerticalRecoilV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawWeaponInfoVerticalRecoilV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawWeaponInfoVerticalRecoilV2Input(val *RawWeaponInfoVerticalRecoilV2Input) *NullableRawWeaponInfoVerticalRecoilV2Input {
	return &NullableRawWeaponInfoVerticalRecoilV2Input{value: val, isSet: true}
}

func (v NullableRawWeaponInfoVerticalRecoilV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawWeaponInfoVerticalRecoilV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


