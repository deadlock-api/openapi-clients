/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawAbilityUpgradeV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawAbilityUpgradeV2{}

// RawAbilityUpgradeV2 struct for RawAbilityUpgradeV2
type RawAbilityUpgradeV2 struct {
	PropertyUpgrades []RawAbilityUpgradePropertyUpgradeV2 `json:"property_upgrades,omitempty"`
}

// NewRawAbilityUpgradeV2 instantiates a new RawAbilityUpgradeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawAbilityUpgradeV2() *RawAbilityUpgradeV2 {
	this := RawAbilityUpgradeV2{}
	return &this
}

// NewRawAbilityUpgradeV2WithDefaults instantiates a new RawAbilityUpgradeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawAbilityUpgradeV2WithDefaults() *RawAbilityUpgradeV2 {
	this := RawAbilityUpgradeV2{}
	return &this
}

// GetPropertyUpgrades returns the PropertyUpgrades field value if set, zero value otherwise.
func (o *RawAbilityUpgradeV2) GetPropertyUpgrades() []RawAbilityUpgradePropertyUpgradeV2 {
	if o == nil || IsNil(o.PropertyUpgrades) {
		var ret []RawAbilityUpgradePropertyUpgradeV2
		return ret
	}
	return o.PropertyUpgrades
}

// GetPropertyUpgradesOk returns a tuple with the PropertyUpgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawAbilityUpgradeV2) GetPropertyUpgradesOk() ([]RawAbilityUpgradePropertyUpgradeV2, bool) {
	if o == nil || IsNil(o.PropertyUpgrades) {
		return nil, false
	}
	return o.PropertyUpgrades, true
}

// HasPropertyUpgrades returns a boolean if a field has been set.
func (o *RawAbilityUpgradeV2) HasPropertyUpgrades() bool {
	if o != nil && !IsNil(o.PropertyUpgrades) {
		return true
	}

	return false
}

// SetPropertyUpgrades gets a reference to the given []RawAbilityUpgradePropertyUpgradeV2 and assigns it to the PropertyUpgrades field.
func (o *RawAbilityUpgradeV2) SetPropertyUpgrades(v []RawAbilityUpgradePropertyUpgradeV2) {
	o.PropertyUpgrades = v
}

func (o RawAbilityUpgradeV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawAbilityUpgradeV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyUpgrades) {
		toSerialize["property_upgrades"] = o.PropertyUpgrades
	}
	return toSerialize, nil
}

type NullableRawAbilityUpgradeV2 struct {
	value *RawAbilityUpgradeV2
	isSet bool
}

func (v NullableRawAbilityUpgradeV2) Get() *RawAbilityUpgradeV2 {
	return v.value
}

func (v *NullableRawAbilityUpgradeV2) Set(val *RawAbilityUpgradeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableRawAbilityUpgradeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableRawAbilityUpgradeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawAbilityUpgradeV2(val *RawAbilityUpgradeV2) *NullableRawAbilityUpgradeV2 {
	return &NullableRawAbilityUpgradeV2{value: val, isSet: true}
}

func (v NullableRawAbilityUpgradeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawAbilityUpgradeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


