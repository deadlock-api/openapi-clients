/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the RawAbilityUpgradeV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawAbilityUpgradeV2Input{}

// RawAbilityUpgradeV2Input struct for RawAbilityUpgradeV2Input
type RawAbilityUpgradeV2Input struct {
	MVecPropertyUpgrades []RawAbilityUpgradePropertyUpgradeV2Input `json:"m_vecPropertyUpgrades,omitempty"`
}

// NewRawAbilityUpgradeV2Input instantiates a new RawAbilityUpgradeV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawAbilityUpgradeV2Input() *RawAbilityUpgradeV2Input {
	this := RawAbilityUpgradeV2Input{}
	return &this
}

// NewRawAbilityUpgradeV2InputWithDefaults instantiates a new RawAbilityUpgradeV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawAbilityUpgradeV2InputWithDefaults() *RawAbilityUpgradeV2Input {
	this := RawAbilityUpgradeV2Input{}
	return &this
}

// GetMVecPropertyUpgrades returns the MVecPropertyUpgrades field value if set, zero value otherwise.
func (o *RawAbilityUpgradeV2Input) GetMVecPropertyUpgrades() []RawAbilityUpgradePropertyUpgradeV2Input {
	if o == nil || IsNil(o.MVecPropertyUpgrades) {
		var ret []RawAbilityUpgradePropertyUpgradeV2Input
		return ret
	}
	return o.MVecPropertyUpgrades
}

// GetMVecPropertyUpgradesOk returns a tuple with the MVecPropertyUpgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawAbilityUpgradeV2Input) GetMVecPropertyUpgradesOk() ([]RawAbilityUpgradePropertyUpgradeV2Input, bool) {
	if o == nil || IsNil(o.MVecPropertyUpgrades) {
		return nil, false
	}
	return o.MVecPropertyUpgrades, true
}

// HasMVecPropertyUpgrades returns a boolean if a field has been set.
func (o *RawAbilityUpgradeV2Input) HasMVecPropertyUpgrades() bool {
	if o != nil && !IsNil(o.MVecPropertyUpgrades) {
		return true
	}

	return false
}

// SetMVecPropertyUpgrades gets a reference to the given []RawAbilityUpgradePropertyUpgradeV2Input and assigns it to the MVecPropertyUpgrades field.
func (o *RawAbilityUpgradeV2Input) SetMVecPropertyUpgrades(v []RawAbilityUpgradePropertyUpgradeV2Input) {
	o.MVecPropertyUpgrades = v
}

func (o RawAbilityUpgradeV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawAbilityUpgradeV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MVecPropertyUpgrades) {
		toSerialize["m_vecPropertyUpgrades"] = o.MVecPropertyUpgrades
	}
	return toSerialize, nil
}

type NullableRawAbilityUpgradeV2Input struct {
	value *RawAbilityUpgradeV2Input
	isSet bool
}

func (v NullableRawAbilityUpgradeV2Input) Get() *RawAbilityUpgradeV2Input {
	return v.value
}

func (v *NullableRawAbilityUpgradeV2Input) Set(val *RawAbilityUpgradeV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawAbilityUpgradeV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawAbilityUpgradeV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawAbilityUpgradeV2Input(val *RawAbilityUpgradeV2Input) *NullableRawAbilityUpgradeV2Input {
	return &NullableRawAbilityUpgradeV2Input{value: val, isSet: true}
}

func (v NullableRawAbilityUpgradeV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawAbilityUpgradeV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


