/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroV2{}

// HeroV2 struct for HeroV2
type HeroV2 struct {
	Id int32 `json:"id"`
	ClassName string `json:"class_name"`
	Name string `json:"name"`
	Description HeroDescriptionV2 `json:"description"`
	RecommendedUpgrades []string `json:"recommended_upgrades,omitempty"`
	RecommendedAbilityOrder []string `json:"recommended_ability_order,omitempty"`
	PlayerSelectable bool `json:"player_selectable"`
	Disabled bool `json:"disabled"`
	InDevelopment bool `json:"in_development"`
	NeedsTesting bool `json:"needs_testing"`
	AssignedPlayersOnly bool `json:"assigned_players_only"`
	Tags []string `json:"tags,omitempty"`
	GunTag NullableString `json:"gun_tag,omitempty"`
	HideoutRichPresence NullableString `json:"hideout_rich_presence,omitempty"`
	HeroType NullableHeroTypeV2 `json:"hero_type,omitempty"`
	PrereleaseOnly NullableBool `json:"prerelease_only,omitempty"`
	LimitedTesting bool `json:"limited_testing"`
	Complexity int32 `json:"complexity"`
	Skin int32 `json:"skin"`
	Images HeroImagesV2 `json:"images"`
	Items map[string]string `json:"items"`
	StartingStats HeroStartingStatsV2 `json:"starting_stats"`
	ItemSlotInfo map[string]RawHeroItemSlotInfoValueV2 `json:"item_slot_info"`
	Physics HeroPhysicsV2 `json:"physics"`
	Colors HeroColorsV2 `json:"colors"`
	ShopStatDisplay HeroShopStatDisplayV2 `json:"shop_stat_display"`
	CostBonuses map[string][]RawHeroMapModCostBonusesV2 `json:"cost_bonuses,omitempty"`
	StatsDisplay RawHeroStatsDisplayV2 `json:"stats_display"`
	HeroStatsUi RawHeroStatsUIV2 `json:"hero_stats_ui"`
	LevelInfo map[string]HeroLevelInfoV2 `json:"level_info"`
	ScalingStats map[string]RawHeroScalingStatV2 `json:"scaling_stats"`
	PurchaseBonuses map[string][]RawHeroPurchaseBonusV2 `json:"purchase_bonuses"`
	StandardLevelUpUpgrades map[string]float32 `json:"standard_level_up_upgrades"`
}

type _HeroV2 HeroV2

// NewHeroV2 instantiates a new HeroV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroV2(id int32, className string, name string, description HeroDescriptionV2, playerSelectable bool, disabled bool, inDevelopment bool, needsTesting bool, assignedPlayersOnly bool, limitedTesting bool, complexity int32, skin int32, images HeroImagesV2, items map[string]string, startingStats HeroStartingStatsV2, itemSlotInfo map[string]RawHeroItemSlotInfoValueV2, physics HeroPhysicsV2, colors HeroColorsV2, shopStatDisplay HeroShopStatDisplayV2, statsDisplay RawHeroStatsDisplayV2, heroStatsUi RawHeroStatsUIV2, levelInfo map[string]HeroLevelInfoV2, scalingStats map[string]RawHeroScalingStatV2, purchaseBonuses map[string][]RawHeroPurchaseBonusV2, standardLevelUpUpgrades map[string]float32) *HeroV2 {
	this := HeroV2{}
	this.Id = id
	this.ClassName = className
	this.Name = name
	this.Description = description
	this.PlayerSelectable = playerSelectable
	this.Disabled = disabled
	this.InDevelopment = inDevelopment
	this.NeedsTesting = needsTesting
	this.AssignedPlayersOnly = assignedPlayersOnly
	this.LimitedTesting = limitedTesting
	this.Complexity = complexity
	this.Skin = skin
	this.Images = images
	this.Items = items
	this.StartingStats = startingStats
	this.ItemSlotInfo = itemSlotInfo
	this.Physics = physics
	this.Colors = colors
	this.ShopStatDisplay = shopStatDisplay
	this.StatsDisplay = statsDisplay
	this.HeroStatsUi = heroStatsUi
	this.LevelInfo = levelInfo
	this.ScalingStats = scalingStats
	this.PurchaseBonuses = purchaseBonuses
	this.StandardLevelUpUpgrades = standardLevelUpUpgrades
	return &this
}

// NewHeroV2WithDefaults instantiates a new HeroV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroV2WithDefaults() *HeroV2 {
	this := HeroV2{}
	return &this
}

// GetId returns the Id field value
func (o *HeroV2) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HeroV2) SetId(v int32) {
	o.Id = v
}

// GetClassName returns the ClassName field value
func (o *HeroV2) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *HeroV2) SetClassName(v string) {
	o.ClassName = v
}

// GetName returns the Name field value
func (o *HeroV2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HeroV2) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *HeroV2) GetDescription() HeroDescriptionV2 {
	if o == nil {
		var ret HeroDescriptionV2
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetDescriptionOk() (*HeroDescriptionV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *HeroV2) SetDescription(v HeroDescriptionV2) {
	o.Description = v
}

// GetRecommendedUpgrades returns the RecommendedUpgrades field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetRecommendedUpgrades() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RecommendedUpgrades
}

// GetRecommendedUpgradesOk returns a tuple with the RecommendedUpgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetRecommendedUpgradesOk() ([]string, bool) {
	if o == nil || IsNil(o.RecommendedUpgrades) {
		return nil, false
	}
	return o.RecommendedUpgrades, true
}

// HasRecommendedUpgrades returns a boolean if a field has been set.
func (o *HeroV2) HasRecommendedUpgrades() bool {
	if o != nil && !IsNil(o.RecommendedUpgrades) {
		return true
	}

	return false
}

// SetRecommendedUpgrades gets a reference to the given []string and assigns it to the RecommendedUpgrades field.
func (o *HeroV2) SetRecommendedUpgrades(v []string) {
	o.RecommendedUpgrades = v
}

// GetRecommendedAbilityOrder returns the RecommendedAbilityOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetRecommendedAbilityOrder() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RecommendedAbilityOrder
}

// GetRecommendedAbilityOrderOk returns a tuple with the RecommendedAbilityOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetRecommendedAbilityOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.RecommendedAbilityOrder) {
		return nil, false
	}
	return o.RecommendedAbilityOrder, true
}

// HasRecommendedAbilityOrder returns a boolean if a field has been set.
func (o *HeroV2) HasRecommendedAbilityOrder() bool {
	if o != nil && !IsNil(o.RecommendedAbilityOrder) {
		return true
	}

	return false
}

// SetRecommendedAbilityOrder gets a reference to the given []string and assigns it to the RecommendedAbilityOrder field.
func (o *HeroV2) SetRecommendedAbilityOrder(v []string) {
	o.RecommendedAbilityOrder = v
}

// GetPlayerSelectable returns the PlayerSelectable field value
func (o *HeroV2) GetPlayerSelectable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PlayerSelectable
}

// GetPlayerSelectableOk returns a tuple with the PlayerSelectable field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetPlayerSelectableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerSelectable, true
}

// SetPlayerSelectable sets field value
func (o *HeroV2) SetPlayerSelectable(v bool) {
	o.PlayerSelectable = v
}

// GetDisabled returns the Disabled field value
func (o *HeroV2) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *HeroV2) SetDisabled(v bool) {
	o.Disabled = v
}

// GetInDevelopment returns the InDevelopment field value
func (o *HeroV2) GetInDevelopment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InDevelopment
}

// GetInDevelopmentOk returns a tuple with the InDevelopment field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetInDevelopmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InDevelopment, true
}

// SetInDevelopment sets field value
func (o *HeroV2) SetInDevelopment(v bool) {
	o.InDevelopment = v
}

// GetNeedsTesting returns the NeedsTesting field value
func (o *HeroV2) GetNeedsTesting() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NeedsTesting
}

// GetNeedsTestingOk returns a tuple with the NeedsTesting field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetNeedsTestingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NeedsTesting, true
}

// SetNeedsTesting sets field value
func (o *HeroV2) SetNeedsTesting(v bool) {
	o.NeedsTesting = v
}

// GetAssignedPlayersOnly returns the AssignedPlayersOnly field value
func (o *HeroV2) GetAssignedPlayersOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AssignedPlayersOnly
}

// GetAssignedPlayersOnlyOk returns a tuple with the AssignedPlayersOnly field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetAssignedPlayersOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignedPlayersOnly, true
}

// SetAssignedPlayersOnly sets field value
func (o *HeroV2) SetAssignedPlayersOnly(v bool) {
	o.AssignedPlayersOnly = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *HeroV2) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *HeroV2) SetTags(v []string) {
	o.Tags = v
}

// GetGunTag returns the GunTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetGunTag() string {
	if o == nil || IsNil(o.GunTag.Get()) {
		var ret string
		return ret
	}
	return *o.GunTag.Get()
}

// GetGunTagOk returns a tuple with the GunTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetGunTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GunTag.Get(), o.GunTag.IsSet()
}

// HasGunTag returns a boolean if a field has been set.
func (o *HeroV2) HasGunTag() bool {
	if o != nil && o.GunTag.IsSet() {
		return true
	}

	return false
}

// SetGunTag gets a reference to the given NullableString and assigns it to the GunTag field.
func (o *HeroV2) SetGunTag(v string) {
	o.GunTag.Set(&v)
}
// SetGunTagNil sets the value for GunTag to be an explicit nil
func (o *HeroV2) SetGunTagNil() {
	o.GunTag.Set(nil)
}

// UnsetGunTag ensures that no value is present for GunTag, not even an explicit nil
func (o *HeroV2) UnsetGunTag() {
	o.GunTag.Unset()
}

// GetHideoutRichPresence returns the HideoutRichPresence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetHideoutRichPresence() string {
	if o == nil || IsNil(o.HideoutRichPresence.Get()) {
		var ret string
		return ret
	}
	return *o.HideoutRichPresence.Get()
}

// GetHideoutRichPresenceOk returns a tuple with the HideoutRichPresence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetHideoutRichPresenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideoutRichPresence.Get(), o.HideoutRichPresence.IsSet()
}

// HasHideoutRichPresence returns a boolean if a field has been set.
func (o *HeroV2) HasHideoutRichPresence() bool {
	if o != nil && o.HideoutRichPresence.IsSet() {
		return true
	}

	return false
}

// SetHideoutRichPresence gets a reference to the given NullableString and assigns it to the HideoutRichPresence field.
func (o *HeroV2) SetHideoutRichPresence(v string) {
	o.HideoutRichPresence.Set(&v)
}
// SetHideoutRichPresenceNil sets the value for HideoutRichPresence to be an explicit nil
func (o *HeroV2) SetHideoutRichPresenceNil() {
	o.HideoutRichPresence.Set(nil)
}

// UnsetHideoutRichPresence ensures that no value is present for HideoutRichPresence, not even an explicit nil
func (o *HeroV2) UnsetHideoutRichPresence() {
	o.HideoutRichPresence.Unset()
}

// GetHeroType returns the HeroType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetHeroType() HeroTypeV2 {
	if o == nil || IsNil(o.HeroType.Get()) {
		var ret HeroTypeV2
		return ret
	}
	return *o.HeroType.Get()
}

// GetHeroTypeOk returns a tuple with the HeroType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetHeroTypeOk() (*HeroTypeV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeroType.Get(), o.HeroType.IsSet()
}

// HasHeroType returns a boolean if a field has been set.
func (o *HeroV2) HasHeroType() bool {
	if o != nil && o.HeroType.IsSet() {
		return true
	}

	return false
}

// SetHeroType gets a reference to the given NullableHeroTypeV2 and assigns it to the HeroType field.
func (o *HeroV2) SetHeroType(v HeroTypeV2) {
	o.HeroType.Set(&v)
}
// SetHeroTypeNil sets the value for HeroType to be an explicit nil
func (o *HeroV2) SetHeroTypeNil() {
	o.HeroType.Set(nil)
}

// UnsetHeroType ensures that no value is present for HeroType, not even an explicit nil
func (o *HeroV2) UnsetHeroType() {
	o.HeroType.Unset()
}

// GetPrereleaseOnly returns the PrereleaseOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetPrereleaseOnly() bool {
	if o == nil || IsNil(o.PrereleaseOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.PrereleaseOnly.Get()
}

// GetPrereleaseOnlyOk returns a tuple with the PrereleaseOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetPrereleaseOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrereleaseOnly.Get(), o.PrereleaseOnly.IsSet()
}

// HasPrereleaseOnly returns a boolean if a field has been set.
func (o *HeroV2) HasPrereleaseOnly() bool {
	if o != nil && o.PrereleaseOnly.IsSet() {
		return true
	}

	return false
}

// SetPrereleaseOnly gets a reference to the given NullableBool and assigns it to the PrereleaseOnly field.
func (o *HeroV2) SetPrereleaseOnly(v bool) {
	o.PrereleaseOnly.Set(&v)
}
// SetPrereleaseOnlyNil sets the value for PrereleaseOnly to be an explicit nil
func (o *HeroV2) SetPrereleaseOnlyNil() {
	o.PrereleaseOnly.Set(nil)
}

// UnsetPrereleaseOnly ensures that no value is present for PrereleaseOnly, not even an explicit nil
func (o *HeroV2) UnsetPrereleaseOnly() {
	o.PrereleaseOnly.Unset()
}

// GetLimitedTesting returns the LimitedTesting field value
func (o *HeroV2) GetLimitedTesting() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LimitedTesting
}

// GetLimitedTestingOk returns a tuple with the LimitedTesting field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetLimitedTestingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitedTesting, true
}

// SetLimitedTesting sets field value
func (o *HeroV2) SetLimitedTesting(v bool) {
	o.LimitedTesting = v
}

// GetComplexity returns the Complexity field value
func (o *HeroV2) GetComplexity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Complexity
}

// GetComplexityOk returns a tuple with the Complexity field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetComplexityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Complexity, true
}

// SetComplexity sets field value
func (o *HeroV2) SetComplexity(v int32) {
	o.Complexity = v
}

// GetSkin returns the Skin field value
func (o *HeroV2) GetSkin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Skin
}

// GetSkinOk returns a tuple with the Skin field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetSkinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skin, true
}

// SetSkin sets field value
func (o *HeroV2) SetSkin(v int32) {
	o.Skin = v
}

// GetImages returns the Images field value
func (o *HeroV2) GetImages() HeroImagesV2 {
	if o == nil {
		var ret HeroImagesV2
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetImagesOk() (*HeroImagesV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Images, true
}

// SetImages sets field value
func (o *HeroV2) SetImages(v HeroImagesV2) {
	o.Images = v
}

// GetItems returns the Items field value
func (o *HeroV2) GetItems() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetItemsOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *HeroV2) SetItems(v map[string]string) {
	o.Items = v
}

// GetStartingStats returns the StartingStats field value
func (o *HeroV2) GetStartingStats() HeroStartingStatsV2 {
	if o == nil {
		var ret HeroStartingStatsV2
		return ret
	}

	return o.StartingStats
}

// GetStartingStatsOk returns a tuple with the StartingStats field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetStartingStatsOk() (*HeroStartingStatsV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartingStats, true
}

// SetStartingStats sets field value
func (o *HeroV2) SetStartingStats(v HeroStartingStatsV2) {
	o.StartingStats = v
}

// GetItemSlotInfo returns the ItemSlotInfo field value
func (o *HeroV2) GetItemSlotInfo() map[string]RawHeroItemSlotInfoValueV2 {
	if o == nil {
		var ret map[string]RawHeroItemSlotInfoValueV2
		return ret
	}

	return o.ItemSlotInfo
}

// GetItemSlotInfoOk returns a tuple with the ItemSlotInfo field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetItemSlotInfoOk() (map[string]RawHeroItemSlotInfoValueV2, bool) {
	if o == nil {
		return map[string]RawHeroItemSlotInfoValueV2{}, false
	}
	return o.ItemSlotInfo, true
}

// SetItemSlotInfo sets field value
func (o *HeroV2) SetItemSlotInfo(v map[string]RawHeroItemSlotInfoValueV2) {
	o.ItemSlotInfo = v
}

// GetPhysics returns the Physics field value
func (o *HeroV2) GetPhysics() HeroPhysicsV2 {
	if o == nil {
		var ret HeroPhysicsV2
		return ret
	}

	return o.Physics
}

// GetPhysicsOk returns a tuple with the Physics field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetPhysicsOk() (*HeroPhysicsV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Physics, true
}

// SetPhysics sets field value
func (o *HeroV2) SetPhysics(v HeroPhysicsV2) {
	o.Physics = v
}

// GetColors returns the Colors field value
func (o *HeroV2) GetColors() HeroColorsV2 {
	if o == nil {
		var ret HeroColorsV2
		return ret
	}

	return o.Colors
}

// GetColorsOk returns a tuple with the Colors field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetColorsOk() (*HeroColorsV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Colors, true
}

// SetColors sets field value
func (o *HeroV2) SetColors(v HeroColorsV2) {
	o.Colors = v
}

// GetShopStatDisplay returns the ShopStatDisplay field value
func (o *HeroV2) GetShopStatDisplay() HeroShopStatDisplayV2 {
	if o == nil {
		var ret HeroShopStatDisplayV2
		return ret
	}

	return o.ShopStatDisplay
}

// GetShopStatDisplayOk returns a tuple with the ShopStatDisplay field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetShopStatDisplayOk() (*HeroShopStatDisplayV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopStatDisplay, true
}

// SetShopStatDisplay sets field value
func (o *HeroV2) SetShopStatDisplay(v HeroShopStatDisplayV2) {
	o.ShopStatDisplay = v
}

// GetCostBonuses returns the CostBonuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroV2) GetCostBonuses() map[string][]RawHeroMapModCostBonusesV2 {
	if o == nil {
		var ret map[string][]RawHeroMapModCostBonusesV2
		return ret
	}
	return o.CostBonuses
}

// GetCostBonusesOk returns a tuple with the CostBonuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroV2) GetCostBonusesOk() (map[string][]RawHeroMapModCostBonusesV2, bool) {
	if o == nil || IsNil(o.CostBonuses) {
		return map[string][]RawHeroMapModCostBonusesV2{}, false
	}
	return o.CostBonuses, true
}

// HasCostBonuses returns a boolean if a field has been set.
func (o *HeroV2) HasCostBonuses() bool {
	if o != nil && !IsNil(o.CostBonuses) {
		return true
	}

	return false
}

// SetCostBonuses gets a reference to the given map[string][]RawHeroMapModCostBonusesV2 and assigns it to the CostBonuses field.
func (o *HeroV2) SetCostBonuses(v map[string][]RawHeroMapModCostBonusesV2) {
	o.CostBonuses = v
}

// GetStatsDisplay returns the StatsDisplay field value
func (o *HeroV2) GetStatsDisplay() RawHeroStatsDisplayV2 {
	if o == nil {
		var ret RawHeroStatsDisplayV2
		return ret
	}

	return o.StatsDisplay
}

// GetStatsDisplayOk returns a tuple with the StatsDisplay field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetStatsDisplayOk() (*RawHeroStatsDisplayV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatsDisplay, true
}

// SetStatsDisplay sets field value
func (o *HeroV2) SetStatsDisplay(v RawHeroStatsDisplayV2) {
	o.StatsDisplay = v
}

// GetHeroStatsUi returns the HeroStatsUi field value
func (o *HeroV2) GetHeroStatsUi() RawHeroStatsUIV2 {
	if o == nil {
		var ret RawHeroStatsUIV2
		return ret
	}

	return o.HeroStatsUi
}

// GetHeroStatsUiOk returns a tuple with the HeroStatsUi field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetHeroStatsUiOk() (*RawHeroStatsUIV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroStatsUi, true
}

// SetHeroStatsUi sets field value
func (o *HeroV2) SetHeroStatsUi(v RawHeroStatsUIV2) {
	o.HeroStatsUi = v
}

// GetLevelInfo returns the LevelInfo field value
func (o *HeroV2) GetLevelInfo() map[string]HeroLevelInfoV2 {
	if o == nil {
		var ret map[string]HeroLevelInfoV2
		return ret
	}

	return o.LevelInfo
}

// GetLevelInfoOk returns a tuple with the LevelInfo field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetLevelInfoOk() (map[string]HeroLevelInfoV2, bool) {
	if o == nil {
		return map[string]HeroLevelInfoV2{}, false
	}
	return o.LevelInfo, true
}

// SetLevelInfo sets field value
func (o *HeroV2) SetLevelInfo(v map[string]HeroLevelInfoV2) {
	o.LevelInfo = v
}

// GetScalingStats returns the ScalingStats field value
func (o *HeroV2) GetScalingStats() map[string]RawHeroScalingStatV2 {
	if o == nil {
		var ret map[string]RawHeroScalingStatV2
		return ret
	}

	return o.ScalingStats
}

// GetScalingStatsOk returns a tuple with the ScalingStats field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetScalingStatsOk() (map[string]RawHeroScalingStatV2, bool) {
	if o == nil {
		return map[string]RawHeroScalingStatV2{}, false
	}
	return o.ScalingStats, true
}

// SetScalingStats sets field value
func (o *HeroV2) SetScalingStats(v map[string]RawHeroScalingStatV2) {
	o.ScalingStats = v
}

// GetPurchaseBonuses returns the PurchaseBonuses field value
func (o *HeroV2) GetPurchaseBonuses() map[string][]RawHeroPurchaseBonusV2 {
	if o == nil {
		var ret map[string][]RawHeroPurchaseBonusV2
		return ret
	}

	return o.PurchaseBonuses
}

// GetPurchaseBonusesOk returns a tuple with the PurchaseBonuses field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetPurchaseBonusesOk() (map[string][]RawHeroPurchaseBonusV2, bool) {
	if o == nil {
		return map[string][]RawHeroPurchaseBonusV2{}, false
	}
	return o.PurchaseBonuses, true
}

// SetPurchaseBonuses sets field value
func (o *HeroV2) SetPurchaseBonuses(v map[string][]RawHeroPurchaseBonusV2) {
	o.PurchaseBonuses = v
}

// GetStandardLevelUpUpgrades returns the StandardLevelUpUpgrades field value
func (o *HeroV2) GetStandardLevelUpUpgrades() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.StandardLevelUpUpgrades
}

// GetStandardLevelUpUpgradesOk returns a tuple with the StandardLevelUpUpgrades field value
// and a boolean to check if the value has been set.
func (o *HeroV2) GetStandardLevelUpUpgradesOk() (map[string]float32, bool) {
	if o == nil {
		return map[string]float32{}, false
	}
	return o.StandardLevelUpUpgrades, true
}

// SetStandardLevelUpUpgrades sets field value
func (o *HeroV2) SetStandardLevelUpUpgrades(v map[string]float32) {
	o.StandardLevelUpUpgrades = v
}

func (o HeroV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["class_name"] = o.ClassName
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if o.RecommendedUpgrades != nil {
		toSerialize["recommended_upgrades"] = o.RecommendedUpgrades
	}
	if o.RecommendedAbilityOrder != nil {
		toSerialize["recommended_ability_order"] = o.RecommendedAbilityOrder
	}
	toSerialize["player_selectable"] = o.PlayerSelectable
	toSerialize["disabled"] = o.Disabled
	toSerialize["in_development"] = o.InDevelopment
	toSerialize["needs_testing"] = o.NeedsTesting
	toSerialize["assigned_players_only"] = o.AssignedPlayersOnly
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.GunTag.IsSet() {
		toSerialize["gun_tag"] = o.GunTag.Get()
	}
	if o.HideoutRichPresence.IsSet() {
		toSerialize["hideout_rich_presence"] = o.HideoutRichPresence.Get()
	}
	if o.HeroType.IsSet() {
		toSerialize["hero_type"] = o.HeroType.Get()
	}
	if o.PrereleaseOnly.IsSet() {
		toSerialize["prerelease_only"] = o.PrereleaseOnly.Get()
	}
	toSerialize["limited_testing"] = o.LimitedTesting
	toSerialize["complexity"] = o.Complexity
	toSerialize["skin"] = o.Skin
	toSerialize["images"] = o.Images
	toSerialize["items"] = o.Items
	toSerialize["starting_stats"] = o.StartingStats
	toSerialize["item_slot_info"] = o.ItemSlotInfo
	toSerialize["physics"] = o.Physics
	toSerialize["colors"] = o.Colors
	toSerialize["shop_stat_display"] = o.ShopStatDisplay
	if o.CostBonuses != nil {
		toSerialize["cost_bonuses"] = o.CostBonuses
	}
	toSerialize["stats_display"] = o.StatsDisplay
	toSerialize["hero_stats_ui"] = o.HeroStatsUi
	toSerialize["level_info"] = o.LevelInfo
	toSerialize["scaling_stats"] = o.ScalingStats
	toSerialize["purchase_bonuses"] = o.PurchaseBonuses
	toSerialize["standard_level_up_upgrades"] = o.StandardLevelUpUpgrades
	return toSerialize, nil
}

func (o *HeroV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"class_name",
		"name",
		"description",
		"player_selectable",
		"disabled",
		"in_development",
		"needs_testing",
		"assigned_players_only",
		"limited_testing",
		"complexity",
		"skin",
		"images",
		"items",
		"starting_stats",
		"item_slot_info",
		"physics",
		"colors",
		"shop_stat_display",
		"stats_display",
		"hero_stats_ui",
		"level_info",
		"scaling_stats",
		"purchase_bonuses",
		"standard_level_up_upgrades",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroV2 := _HeroV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroV2)

	if err != nil {
		return err
	}

	*o = HeroV2(varHeroV2)

	return err
}

type NullableHeroV2 struct {
	value *HeroV2
	isSet bool
}

func (v NullableHeroV2) Get() *HeroV2 {
	return v.value
}

func (v *NullableHeroV2) Set(val *HeroV2) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroV2) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroV2(val *HeroV2) *NullableHeroV2 {
	return &NullableHeroV2{value: val, isSet: true}
}

func (v NullableHeroV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


