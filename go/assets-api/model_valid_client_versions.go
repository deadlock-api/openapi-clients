/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// ValidClientVersions the model 'ValidClientVersions'
type ValidClientVersions int32

// List of ValidClientVersions
const (
	_5902 ValidClientVersions = 5902
	_5885 ValidClientVersions = 5885
	_5878 ValidClientVersions = 5878
	_5869 ValidClientVersions = 5869
	_5852 ValidClientVersions = 5852
	_5831 ValidClientVersions = 5831
	_5826 ValidClientVersions = 5826
	_5818 ValidClientVersions = 5818
	_5789 ValidClientVersions = 5789
	_5748 ValidClientVersions = 5748
	_5723 ValidClientVersions = 5723
	_5712 ValidClientVersions = 5712
	_5710 ValidClientVersions = 5710
	_5690 ValidClientVersions = 5690
	_5675 ValidClientVersions = 5675
	_5668 ValidClientVersions = 5668
	_5664 ValidClientVersions = 5664
	_5658 ValidClientVersions = 5658
	_5650 ValidClientVersions = 5650
	_5636 ValidClientVersions = 5636
	_5624 ValidClientVersions = 5624
	_5615 ValidClientVersions = 5615
	_5602 ValidClientVersions = 5602
	_5583 ValidClientVersions = 5583
	_5554 ValidClientVersions = 5554
	_5538 ValidClientVersions = 5538
	_5533 ValidClientVersions = 5533
	_5529 ValidClientVersions = 5529
	_5527 ValidClientVersions = 5527
)

// All allowed values of ValidClientVersions enum
var AllowedValidClientVersionsEnumValues = []ValidClientVersions{
	5902,
	5885,
	5878,
	5869,
	5852,
	5831,
	5826,
	5818,
	5789,
	5748,
	5723,
	5712,
	5710,
	5690,
	5675,
	5668,
	5664,
	5658,
	5650,
	5636,
	5624,
	5615,
	5602,
	5583,
	5554,
	5538,
	5533,
	5529,
	5527,
}

func (v *ValidClientVersions) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidClientVersions(value)
	for _, existing := range AllowedValidClientVersionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidClientVersions", value)
}

// NewValidClientVersionsFromValue returns a pointer to a valid ValidClientVersions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidClientVersionsFromValue(v int32) (*ValidClientVersions, error) {
	ev := ValidClientVersions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidClientVersions: valid values are %v", v, AllowedValidClientVersionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidClientVersions) IsValid() bool {
	for _, existing := range AllowedValidClientVersionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidClientVersions value
func (v ValidClientVersions) Ptr() *ValidClientVersions {
	return &v
}

type NullableValidClientVersions struct {
	value *ValidClientVersions
	isSet bool
}

func (v NullableValidClientVersions) Get() *ValidClientVersions {
	return v.value
}

func (v *NullableValidClientVersions) Set(val *ValidClientVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableValidClientVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableValidClientVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidClientVersions(val *ValidClientVersions) *NullableValidClientVersions {
	return &NullableValidClientVersions{value: val, isSet: true}
}

func (v NullableValidClientVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidClientVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

