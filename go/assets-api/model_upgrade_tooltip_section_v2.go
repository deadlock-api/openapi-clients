/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the UpgradeTooltipSectionV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeTooltipSectionV2{}

// UpgradeTooltipSectionV2 struct for UpgradeTooltipSectionV2
type UpgradeTooltipSectionV2 struct {
	SectionType NullableRawAbilitySectionTypeV2 `json:"section_type,omitempty"`
	SectionAttributes []UpgradeTooltipSectionAttributeV2 `json:"section_attributes,omitempty"`
}

// NewUpgradeTooltipSectionV2 instantiates a new UpgradeTooltipSectionV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeTooltipSectionV2() *UpgradeTooltipSectionV2 {
	this := UpgradeTooltipSectionV2{}
	return &this
}

// NewUpgradeTooltipSectionV2WithDefaults instantiates a new UpgradeTooltipSectionV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeTooltipSectionV2WithDefaults() *UpgradeTooltipSectionV2 {
	this := UpgradeTooltipSectionV2{}
	return &this
}

// GetSectionType returns the SectionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionV2) GetSectionType() RawAbilitySectionTypeV2 {
	if o == nil || IsNil(o.SectionType.Get()) {
		var ret RawAbilitySectionTypeV2
		return ret
	}
	return *o.SectionType.Get()
}

// GetSectionTypeOk returns a tuple with the SectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionV2) GetSectionTypeOk() (*RawAbilitySectionTypeV2, bool) {
	if o == nil {
		return nil, false
	}
	return o.SectionType.Get(), o.SectionType.IsSet()
}

// HasSectionType returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionV2) HasSectionType() bool {
	if o != nil && o.SectionType.IsSet() {
		return true
	}

	return false
}

// SetSectionType gets a reference to the given NullableRawAbilitySectionTypeV2 and assigns it to the SectionType field.
func (o *UpgradeTooltipSectionV2) SetSectionType(v RawAbilitySectionTypeV2) {
	o.SectionType.Set(&v)
}
// SetSectionTypeNil sets the value for SectionType to be an explicit nil
func (o *UpgradeTooltipSectionV2) SetSectionTypeNil() {
	o.SectionType.Set(nil)
}

// UnsetSectionType ensures that no value is present for SectionType, not even an explicit nil
func (o *UpgradeTooltipSectionV2) UnsetSectionType() {
	o.SectionType.Unset()
}

// GetSectionAttributes returns the SectionAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionV2) GetSectionAttributes() []UpgradeTooltipSectionAttributeV2 {
	if o == nil {
		var ret []UpgradeTooltipSectionAttributeV2
		return ret
	}
	return o.SectionAttributes
}

// GetSectionAttributesOk returns a tuple with the SectionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionV2) GetSectionAttributesOk() ([]UpgradeTooltipSectionAttributeV2, bool) {
	if o == nil || IsNil(o.SectionAttributes) {
		return nil, false
	}
	return o.SectionAttributes, true
}

// HasSectionAttributes returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionV2) HasSectionAttributes() bool {
	if o != nil && !IsNil(o.SectionAttributes) {
		return true
	}

	return false
}

// SetSectionAttributes gets a reference to the given []UpgradeTooltipSectionAttributeV2 and assigns it to the SectionAttributes field.
func (o *UpgradeTooltipSectionV2) SetSectionAttributes(v []UpgradeTooltipSectionAttributeV2) {
	o.SectionAttributes = v
}

func (o UpgradeTooltipSectionV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeTooltipSectionV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SectionType.IsSet() {
		toSerialize["section_type"] = o.SectionType.Get()
	}
	if o.SectionAttributes != nil {
		toSerialize["section_attributes"] = o.SectionAttributes
	}
	return toSerialize, nil
}

type NullableUpgradeTooltipSectionV2 struct {
	value *UpgradeTooltipSectionV2
	isSet bool
}

func (v NullableUpgradeTooltipSectionV2) Get() *UpgradeTooltipSectionV2 {
	return v.value
}

func (v *NullableUpgradeTooltipSectionV2) Set(val *UpgradeTooltipSectionV2) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeTooltipSectionV2) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeTooltipSectionV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeTooltipSectionV2(val *UpgradeTooltipSectionV2) *NullableUpgradeTooltipSectionV2 {
	return &NullableUpgradeTooltipSectionV2{value: val, isSet: true}
}

func (v NullableUpgradeTooltipSectionV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeTooltipSectionV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


