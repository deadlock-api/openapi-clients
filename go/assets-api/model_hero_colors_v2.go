/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroColorsV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroColorsV2{}

// HeroColorsV2 struct for HeroColorsV2
type HeroColorsV2 struct {
	GlowEnemy []interface{} `json:"glow_enemy"`
	GlowFriendly []interface{} `json:"glow_friendly"`
	GlowTeam1 []interface{} `json:"glow_team1"`
	GlowTeam2 []interface{} `json:"glow_team2"`
	Ui []interface{} `json:"ui"`
}

type _HeroColorsV2 HeroColorsV2

// NewHeroColorsV2 instantiates a new HeroColorsV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroColorsV2(glowEnemy []interface{}, glowFriendly []interface{}, glowTeam1 []interface{}, glowTeam2 []interface{}, ui []interface{}) *HeroColorsV2 {
	this := HeroColorsV2{}
	this.GlowEnemy = glowEnemy
	this.GlowFriendly = glowFriendly
	this.GlowTeam1 = glowTeam1
	this.GlowTeam2 = glowTeam2
	this.Ui = ui
	return &this
}

// NewHeroColorsV2WithDefaults instantiates a new HeroColorsV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroColorsV2WithDefaults() *HeroColorsV2 {
	this := HeroColorsV2{}
	return &this
}

// GetGlowEnemy returns the GlowEnemy field value
func (o *HeroColorsV2) GetGlowEnemy() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.GlowEnemy
}

// GetGlowEnemyOk returns a tuple with the GlowEnemy field value
// and a boolean to check if the value has been set.
func (o *HeroColorsV2) GetGlowEnemyOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlowEnemy, true
}

// SetGlowEnemy sets field value
func (o *HeroColorsV2) SetGlowEnemy(v []interface{}) {
	o.GlowEnemy = v
}

// GetGlowFriendly returns the GlowFriendly field value
func (o *HeroColorsV2) GetGlowFriendly() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.GlowFriendly
}

// GetGlowFriendlyOk returns a tuple with the GlowFriendly field value
// and a boolean to check if the value has been set.
func (o *HeroColorsV2) GetGlowFriendlyOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlowFriendly, true
}

// SetGlowFriendly sets field value
func (o *HeroColorsV2) SetGlowFriendly(v []interface{}) {
	o.GlowFriendly = v
}

// GetGlowTeam1 returns the GlowTeam1 field value
func (o *HeroColorsV2) GetGlowTeam1() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.GlowTeam1
}

// GetGlowTeam1Ok returns a tuple with the GlowTeam1 field value
// and a boolean to check if the value has been set.
func (o *HeroColorsV2) GetGlowTeam1Ok() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlowTeam1, true
}

// SetGlowTeam1 sets field value
func (o *HeroColorsV2) SetGlowTeam1(v []interface{}) {
	o.GlowTeam1 = v
}

// GetGlowTeam2 returns the GlowTeam2 field value
func (o *HeroColorsV2) GetGlowTeam2() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.GlowTeam2
}

// GetGlowTeam2Ok returns a tuple with the GlowTeam2 field value
// and a boolean to check if the value has been set.
func (o *HeroColorsV2) GetGlowTeam2Ok() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlowTeam2, true
}

// SetGlowTeam2 sets field value
func (o *HeroColorsV2) SetGlowTeam2(v []interface{}) {
	o.GlowTeam2 = v
}

// GetUi returns the Ui field value
func (o *HeroColorsV2) GetUi() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Ui
}

// GetUiOk returns a tuple with the Ui field value
// and a boolean to check if the value has been set.
func (o *HeroColorsV2) GetUiOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ui, true
}

// SetUi sets field value
func (o *HeroColorsV2) SetUi(v []interface{}) {
	o.Ui = v
}

func (o HeroColorsV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroColorsV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["glow_enemy"] = o.GlowEnemy
	toSerialize["glow_friendly"] = o.GlowFriendly
	toSerialize["glow_team1"] = o.GlowTeam1
	toSerialize["glow_team2"] = o.GlowTeam2
	toSerialize["ui"] = o.Ui
	return toSerialize, nil
}

func (o *HeroColorsV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"glow_enemy",
		"glow_friendly",
		"glow_team1",
		"glow_team2",
		"ui",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroColorsV2 := _HeroColorsV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroColorsV2)

	if err != nil {
		return err
	}

	*o = HeroColorsV2(varHeroColorsV2)

	return err
}

type NullableHeroColorsV2 struct {
	value *HeroColorsV2
	isSet bool
}

func (v NullableHeroColorsV2) Get() *HeroColorsV2 {
	return v.value
}

func (v *NullableHeroColorsV2) Set(val *HeroColorsV2) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroColorsV2) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroColorsV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroColorsV2(val *HeroColorsV2) *NullableHeroColorsV2 {
	return &NullableHeroColorsV2{value: val, isSet: true}
}

func (v NullableHeroColorsV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroColorsV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


