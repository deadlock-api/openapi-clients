/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawHeroStatsDisplayV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawHeroStatsDisplayV2Input{}

// RawHeroStatsDisplayV2Input struct for RawHeroStatsDisplayV2Input
type RawHeroStatsDisplayV2Input struct {
	MVecHealthHeaderStats []string `json:"m_vecHealthHeaderStats"`
	MVecMagicHeaderStats []string `json:"m_vecMagicHeaderStats"`
	MVecMagicStats []string `json:"m_vecMagicStats"`
	MVecWeaponHeaderStats []string `json:"m_vecWeaponHeaderStats"`
	MVecWeaponStats []string `json:"m_vecWeaponStats"`
}

type _RawHeroStatsDisplayV2Input RawHeroStatsDisplayV2Input

// NewRawHeroStatsDisplayV2Input instantiates a new RawHeroStatsDisplayV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawHeroStatsDisplayV2Input(mVecHealthHeaderStats []string, mVecMagicHeaderStats []string, mVecMagicStats []string, mVecWeaponHeaderStats []string, mVecWeaponStats []string) *RawHeroStatsDisplayV2Input {
	this := RawHeroStatsDisplayV2Input{}
	this.MVecHealthHeaderStats = mVecHealthHeaderStats
	this.MVecMagicHeaderStats = mVecMagicHeaderStats
	this.MVecMagicStats = mVecMagicStats
	this.MVecWeaponHeaderStats = mVecWeaponHeaderStats
	this.MVecWeaponStats = mVecWeaponStats
	return &this
}

// NewRawHeroStatsDisplayV2InputWithDefaults instantiates a new RawHeroStatsDisplayV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawHeroStatsDisplayV2InputWithDefaults() *RawHeroStatsDisplayV2Input {
	this := RawHeroStatsDisplayV2Input{}
	return &this
}

// GetMVecHealthHeaderStats returns the MVecHealthHeaderStats field value
func (o *RawHeroStatsDisplayV2Input) GetMVecHealthHeaderStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecHealthHeaderStats
}

// GetMVecHealthHeaderStatsOk returns a tuple with the MVecHealthHeaderStats field value
// and a boolean to check if the value has been set.
func (o *RawHeroStatsDisplayV2Input) GetMVecHealthHeaderStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecHealthHeaderStats, true
}

// SetMVecHealthHeaderStats sets field value
func (o *RawHeroStatsDisplayV2Input) SetMVecHealthHeaderStats(v []string) {
	o.MVecHealthHeaderStats = v
}

// GetMVecMagicHeaderStats returns the MVecMagicHeaderStats field value
func (o *RawHeroStatsDisplayV2Input) GetMVecMagicHeaderStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecMagicHeaderStats
}

// GetMVecMagicHeaderStatsOk returns a tuple with the MVecMagicHeaderStats field value
// and a boolean to check if the value has been set.
func (o *RawHeroStatsDisplayV2Input) GetMVecMagicHeaderStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecMagicHeaderStats, true
}

// SetMVecMagicHeaderStats sets field value
func (o *RawHeroStatsDisplayV2Input) SetMVecMagicHeaderStats(v []string) {
	o.MVecMagicHeaderStats = v
}

// GetMVecMagicStats returns the MVecMagicStats field value
func (o *RawHeroStatsDisplayV2Input) GetMVecMagicStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecMagicStats
}

// GetMVecMagicStatsOk returns a tuple with the MVecMagicStats field value
// and a boolean to check if the value has been set.
func (o *RawHeroStatsDisplayV2Input) GetMVecMagicStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecMagicStats, true
}

// SetMVecMagicStats sets field value
func (o *RawHeroStatsDisplayV2Input) SetMVecMagicStats(v []string) {
	o.MVecMagicStats = v
}

// GetMVecWeaponHeaderStats returns the MVecWeaponHeaderStats field value
func (o *RawHeroStatsDisplayV2Input) GetMVecWeaponHeaderStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecWeaponHeaderStats
}

// GetMVecWeaponHeaderStatsOk returns a tuple with the MVecWeaponHeaderStats field value
// and a boolean to check if the value has been set.
func (o *RawHeroStatsDisplayV2Input) GetMVecWeaponHeaderStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecWeaponHeaderStats, true
}

// SetMVecWeaponHeaderStats sets field value
func (o *RawHeroStatsDisplayV2Input) SetMVecWeaponHeaderStats(v []string) {
	o.MVecWeaponHeaderStats = v
}

// GetMVecWeaponStats returns the MVecWeaponStats field value
func (o *RawHeroStatsDisplayV2Input) GetMVecWeaponStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecWeaponStats
}

// GetMVecWeaponStatsOk returns a tuple with the MVecWeaponStats field value
// and a boolean to check if the value has been set.
func (o *RawHeroStatsDisplayV2Input) GetMVecWeaponStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecWeaponStats, true
}

// SetMVecWeaponStats sets field value
func (o *RawHeroStatsDisplayV2Input) SetMVecWeaponStats(v []string) {
	o.MVecWeaponStats = v
}

func (o RawHeroStatsDisplayV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawHeroStatsDisplayV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["m_vecHealthHeaderStats"] = o.MVecHealthHeaderStats
	toSerialize["m_vecMagicHeaderStats"] = o.MVecMagicHeaderStats
	toSerialize["m_vecMagicStats"] = o.MVecMagicStats
	toSerialize["m_vecWeaponHeaderStats"] = o.MVecWeaponHeaderStats
	toSerialize["m_vecWeaponStats"] = o.MVecWeaponStats
	return toSerialize, nil
}

func (o *RawHeroStatsDisplayV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"m_vecHealthHeaderStats",
		"m_vecMagicHeaderStats",
		"m_vecMagicStats",
		"m_vecWeaponHeaderStats",
		"m_vecWeaponStats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawHeroStatsDisplayV2Input := _RawHeroStatsDisplayV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawHeroStatsDisplayV2Input)

	if err != nil {
		return err
	}

	*o = RawHeroStatsDisplayV2Input(varRawHeroStatsDisplayV2Input)

	return err
}

type NullableRawHeroStatsDisplayV2Input struct {
	value *RawHeroStatsDisplayV2Input
	isSet bool
}

func (v NullableRawHeroStatsDisplayV2Input) Get() *RawHeroStatsDisplayV2Input {
	return v.value
}

func (v *NullableRawHeroStatsDisplayV2Input) Set(val *RawHeroStatsDisplayV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableRawHeroStatsDisplayV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableRawHeroStatsDisplayV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawHeroStatsDisplayV2Input(val *RawHeroStatsDisplayV2Input) *NullableRawHeroStatsDisplayV2Input {
	return &NullableRawHeroStatsDisplayV2Input{value: val, isSet: true}
}

func (v NullableRawHeroStatsDisplayV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawHeroStatsDisplayV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


