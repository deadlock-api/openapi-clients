/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawItemWeaponInfoBulletSpeedCurveSplineV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawItemWeaponInfoBulletSpeedCurveSplineV2Output{}

// RawItemWeaponInfoBulletSpeedCurveSplineV2Output struct for RawItemWeaponInfoBulletSpeedCurveSplineV2Output
type RawItemWeaponInfoBulletSpeedCurveSplineV2Output struct {
	SlopeIncoming float32 `json:"slope_incoming"`
	SlopeOutgoing float32 `json:"slope_outgoing"`
	X float32 `json:"x"`
	Y float32 `json:"y"`
}

type _RawItemWeaponInfoBulletSpeedCurveSplineV2Output RawItemWeaponInfoBulletSpeedCurveSplineV2Output

// NewRawItemWeaponInfoBulletSpeedCurveSplineV2Output instantiates a new RawItemWeaponInfoBulletSpeedCurveSplineV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawItemWeaponInfoBulletSpeedCurveSplineV2Output(slopeIncoming float32, slopeOutgoing float32, x float32, y float32) *RawItemWeaponInfoBulletSpeedCurveSplineV2Output {
	this := RawItemWeaponInfoBulletSpeedCurveSplineV2Output{}
	this.SlopeIncoming = slopeIncoming
	this.SlopeOutgoing = slopeOutgoing
	this.X = x
	this.Y = y
	return &this
}

// NewRawItemWeaponInfoBulletSpeedCurveSplineV2OutputWithDefaults instantiates a new RawItemWeaponInfoBulletSpeedCurveSplineV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawItemWeaponInfoBulletSpeedCurveSplineV2OutputWithDefaults() *RawItemWeaponInfoBulletSpeedCurveSplineV2Output {
	this := RawItemWeaponInfoBulletSpeedCurveSplineV2Output{}
	return &this
}

// GetSlopeIncoming returns the SlopeIncoming field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetSlopeIncoming() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SlopeIncoming
}

// GetSlopeIncomingOk returns a tuple with the SlopeIncoming field value
// and a boolean to check if the value has been set.
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetSlopeIncomingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlopeIncoming, true
}

// SetSlopeIncoming sets field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) SetSlopeIncoming(v float32) {
	o.SlopeIncoming = v
}

// GetSlopeOutgoing returns the SlopeOutgoing field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetSlopeOutgoing() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SlopeOutgoing
}

// GetSlopeOutgoingOk returns a tuple with the SlopeOutgoing field value
// and a boolean to check if the value has been set.
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetSlopeOutgoingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlopeOutgoing, true
}

// SetSlopeOutgoing sets field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) SetSlopeOutgoing(v float32) {
	o.SlopeOutgoing = v
}

// GetX returns the X field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) SetY(v float32) {
	o.Y = v
}

func (o RawItemWeaponInfoBulletSpeedCurveSplineV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawItemWeaponInfoBulletSpeedCurveSplineV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["slope_incoming"] = o.SlopeIncoming
	toSerialize["slope_outgoing"] = o.SlopeOutgoing
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	return toSerialize, nil
}

func (o *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slope_incoming",
		"slope_outgoing",
		"x",
		"y",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawItemWeaponInfoBulletSpeedCurveSplineV2Output := _RawItemWeaponInfoBulletSpeedCurveSplineV2Output{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawItemWeaponInfoBulletSpeedCurveSplineV2Output)

	if err != nil {
		return err
	}

	*o = RawItemWeaponInfoBulletSpeedCurveSplineV2Output(varRawItemWeaponInfoBulletSpeedCurveSplineV2Output)

	return err
}

type NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output struct {
	value *RawItemWeaponInfoBulletSpeedCurveSplineV2Output
	isSet bool
}

func (v NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output) Get() *RawItemWeaponInfoBulletSpeedCurveSplineV2Output {
	return v.value
}

func (v *NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output) Set(val *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output(val *RawItemWeaponInfoBulletSpeedCurveSplineV2Output) *NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output {
	return &NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output{value: val, isSet: true}
}

func (v NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawItemWeaponInfoBulletSpeedCurveSplineV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


