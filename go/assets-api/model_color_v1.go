/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ColorV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorV1{}

// ColorV1 struct for ColorV1
type ColorV1 struct {
	// The red value of the color.
	Red int32 `json:"red"`
	// The green value of the color.
	Green int32 `json:"green"`
	// The blue value of the color.
	Blue int32 `json:"blue"`
	// The alpha value of the color.
	Alpha int32 `json:"alpha"`
}

type _ColorV1 ColorV1

// NewColorV1 instantiates a new ColorV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorV1(red int32, green int32, blue int32, alpha int32) *ColorV1 {
	this := ColorV1{}
	this.Red = red
	this.Green = green
	this.Blue = blue
	this.Alpha = alpha
	return &this
}

// NewColorV1WithDefaults instantiates a new ColorV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorV1WithDefaults() *ColorV1 {
	this := ColorV1{}
	return &this
}

// GetRed returns the Red field value
func (o *ColorV1) GetRed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Red
}

// GetRedOk returns a tuple with the Red field value
// and a boolean to check if the value has been set.
func (o *ColorV1) GetRedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Red, true
}

// SetRed sets field value
func (o *ColorV1) SetRed(v int32) {
	o.Red = v
}

// GetGreen returns the Green field value
func (o *ColorV1) GetGreen() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Green
}

// GetGreenOk returns a tuple with the Green field value
// and a boolean to check if the value has been set.
func (o *ColorV1) GetGreenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Green, true
}

// SetGreen sets field value
func (o *ColorV1) SetGreen(v int32) {
	o.Green = v
}

// GetBlue returns the Blue field value
func (o *ColorV1) GetBlue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Blue
}

// GetBlueOk returns a tuple with the Blue field value
// and a boolean to check if the value has been set.
func (o *ColorV1) GetBlueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blue, true
}

// SetBlue sets field value
func (o *ColorV1) SetBlue(v int32) {
	o.Blue = v
}

// GetAlpha returns the Alpha field value
func (o *ColorV1) GetAlpha() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Alpha
}

// GetAlphaOk returns a tuple with the Alpha field value
// and a boolean to check if the value has been set.
func (o *ColorV1) GetAlphaOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alpha, true
}

// SetAlpha sets field value
func (o *ColorV1) SetAlpha(v int32) {
	o.Alpha = v
}

func (o ColorV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["red"] = o.Red
	toSerialize["green"] = o.Green
	toSerialize["blue"] = o.Blue
	toSerialize["alpha"] = o.Alpha
	return toSerialize, nil
}

func (o *ColorV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"red",
		"green",
		"blue",
		"alpha",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColorV1 := _ColorV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColorV1)

	if err != nil {
		return err
	}

	*o = ColorV1(varColorV1)

	return err
}

type NullableColorV1 struct {
	value *ColorV1
	isSet bool
}

func (v NullableColorV1) Get() *ColorV1 {
	return v.value
}

func (v *NullableColorV1) Set(val *ColorV1) {
	v.value = val
	v.isSet = true
}

func (v NullableColorV1) IsSet() bool {
	return v.isSet
}

func (v *NullableColorV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorV1(val *ColorV1) *NullableColorV1 {
	return &NullableColorV1{value: val, isSet: true}
}

func (v NullableColorV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


