/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// RawAbilityActivationV2 the model 'RawAbilityActivationV2'
type RawAbilityActivationV2 string

// List of RawAbilityActivationV2
const (
	HOLD_TOGGLE RawAbilityActivationV2 = "hold_toggle"
	INSTANT_CAST RawAbilityActivationV2 = "instant_cast"
	ON_BUTTON_IS_DOWN RawAbilityActivationV2 = "on_button_is_down"
	PASSIVE RawAbilityActivationV2 = "passive"
	PRESS RawAbilityActivationV2 = "press"
	PRESS_TOGGLE RawAbilityActivationV2 = "press_toggle"
)

// All allowed values of RawAbilityActivationV2 enum
var AllowedRawAbilityActivationV2EnumValues = []RawAbilityActivationV2{
	"hold_toggle",
	"instant_cast",
	"on_button_is_down",
	"passive",
	"press",
	"press_toggle",
}

func (v *RawAbilityActivationV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RawAbilityActivationV2(value)
	for _, existing := range AllowedRawAbilityActivationV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RawAbilityActivationV2", value)
}

// NewRawAbilityActivationV2FromValue returns a pointer to a valid RawAbilityActivationV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRawAbilityActivationV2FromValue(v string) (*RawAbilityActivationV2, error) {
	ev := RawAbilityActivationV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RawAbilityActivationV2: valid values are %v", v, AllowedRawAbilityActivationV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RawAbilityActivationV2) IsValid() bool {
	for _, existing := range AllowedRawAbilityActivationV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RawAbilityActivationV2 value
func (v RawAbilityActivationV2) Ptr() *RawAbilityActivationV2 {
	return &v
}

type NullableRawAbilityActivationV2 struct {
	value *RawAbilityActivationV2
	isSet bool
}

func (v NullableRawAbilityActivationV2) Get() *RawAbilityActivationV2 {
	return v.value
}

func (v *NullableRawAbilityActivationV2) Set(val *RawAbilityActivationV2) {
	v.value = val
	v.isSet = true
}

func (v NullableRawAbilityActivationV2) IsSet() bool {
	return v.isSet
}

func (v *NullableRawAbilityActivationV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawAbilityActivationV2(val *RawAbilityActivationV2) *NullableRawAbilityActivationV2 {
	return &NullableRawAbilityActivationV2{value: val, isSet: true}
}

func (v NullableRawAbilityActivationV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawAbilityActivationV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

