/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroPhysicsV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroPhysicsV2{}

// HeroPhysicsV2 struct for HeroPhysicsV2
type HeroPhysicsV2 struct {
	CollisionHeight float32 `json:"collision_height"`
	CollisionRadius float32 `json:"collision_radius"`
	StealthSpeedMetersPerSecond float32 `json:"stealth_speed_meters_per_second"`
	StepHeight float32 `json:"step_height"`
	FootstepSoundTravelDistanceMeters NullableFloat32 `json:"footstep_sound_travel_distance_meters,omitempty"`
	StepSoundTime NullableFloat32 `json:"step_sound_time,omitempty"`
	StepSoundTimeSprinting NullableFloat32 `json:"step_sound_time_sprinting,omitempty"`
}

type _HeroPhysicsV2 HeroPhysicsV2

// NewHeroPhysicsV2 instantiates a new HeroPhysicsV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroPhysicsV2(collisionHeight float32, collisionRadius float32, stealthSpeedMetersPerSecond float32, stepHeight float32) *HeroPhysicsV2 {
	this := HeroPhysicsV2{}
	this.CollisionHeight = collisionHeight
	this.CollisionRadius = collisionRadius
	this.StealthSpeedMetersPerSecond = stealthSpeedMetersPerSecond
	this.StepHeight = stepHeight
	return &this
}

// NewHeroPhysicsV2WithDefaults instantiates a new HeroPhysicsV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroPhysicsV2WithDefaults() *HeroPhysicsV2 {
	this := HeroPhysicsV2{}
	return &this
}

// GetCollisionHeight returns the CollisionHeight field value
func (o *HeroPhysicsV2) GetCollisionHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CollisionHeight
}

// GetCollisionHeightOk returns a tuple with the CollisionHeight field value
// and a boolean to check if the value has been set.
func (o *HeroPhysicsV2) GetCollisionHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollisionHeight, true
}

// SetCollisionHeight sets field value
func (o *HeroPhysicsV2) SetCollisionHeight(v float32) {
	o.CollisionHeight = v
}

// GetCollisionRadius returns the CollisionRadius field value
func (o *HeroPhysicsV2) GetCollisionRadius() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CollisionRadius
}

// GetCollisionRadiusOk returns a tuple with the CollisionRadius field value
// and a boolean to check if the value has been set.
func (o *HeroPhysicsV2) GetCollisionRadiusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollisionRadius, true
}

// SetCollisionRadius sets field value
func (o *HeroPhysicsV2) SetCollisionRadius(v float32) {
	o.CollisionRadius = v
}

// GetStealthSpeedMetersPerSecond returns the StealthSpeedMetersPerSecond field value
func (o *HeroPhysicsV2) GetStealthSpeedMetersPerSecond() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StealthSpeedMetersPerSecond
}

// GetStealthSpeedMetersPerSecondOk returns a tuple with the StealthSpeedMetersPerSecond field value
// and a boolean to check if the value has been set.
func (o *HeroPhysicsV2) GetStealthSpeedMetersPerSecondOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StealthSpeedMetersPerSecond, true
}

// SetStealthSpeedMetersPerSecond sets field value
func (o *HeroPhysicsV2) SetStealthSpeedMetersPerSecond(v float32) {
	o.StealthSpeedMetersPerSecond = v
}

// GetStepHeight returns the StepHeight field value
func (o *HeroPhysicsV2) GetStepHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StepHeight
}

// GetStepHeightOk returns a tuple with the StepHeight field value
// and a boolean to check if the value has been set.
func (o *HeroPhysicsV2) GetStepHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepHeight, true
}

// SetStepHeight sets field value
func (o *HeroPhysicsV2) SetStepHeight(v float32) {
	o.StepHeight = v
}

// GetFootstepSoundTravelDistanceMeters returns the FootstepSoundTravelDistanceMeters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroPhysicsV2) GetFootstepSoundTravelDistanceMeters() float32 {
	if o == nil || IsNil(o.FootstepSoundTravelDistanceMeters.Get()) {
		var ret float32
		return ret
	}
	return *o.FootstepSoundTravelDistanceMeters.Get()
}

// GetFootstepSoundTravelDistanceMetersOk returns a tuple with the FootstepSoundTravelDistanceMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroPhysicsV2) GetFootstepSoundTravelDistanceMetersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FootstepSoundTravelDistanceMeters.Get(), o.FootstepSoundTravelDistanceMeters.IsSet()
}

// HasFootstepSoundTravelDistanceMeters returns a boolean if a field has been set.
func (o *HeroPhysicsV2) HasFootstepSoundTravelDistanceMeters() bool {
	if o != nil && o.FootstepSoundTravelDistanceMeters.IsSet() {
		return true
	}

	return false
}

// SetFootstepSoundTravelDistanceMeters gets a reference to the given NullableFloat32 and assigns it to the FootstepSoundTravelDistanceMeters field.
func (o *HeroPhysicsV2) SetFootstepSoundTravelDistanceMeters(v float32) {
	o.FootstepSoundTravelDistanceMeters.Set(&v)
}
// SetFootstepSoundTravelDistanceMetersNil sets the value for FootstepSoundTravelDistanceMeters to be an explicit nil
func (o *HeroPhysicsV2) SetFootstepSoundTravelDistanceMetersNil() {
	o.FootstepSoundTravelDistanceMeters.Set(nil)
}

// UnsetFootstepSoundTravelDistanceMeters ensures that no value is present for FootstepSoundTravelDistanceMeters, not even an explicit nil
func (o *HeroPhysicsV2) UnsetFootstepSoundTravelDistanceMeters() {
	o.FootstepSoundTravelDistanceMeters.Unset()
}

// GetStepSoundTime returns the StepSoundTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroPhysicsV2) GetStepSoundTime() float32 {
	if o == nil || IsNil(o.StepSoundTime.Get()) {
		var ret float32
		return ret
	}
	return *o.StepSoundTime.Get()
}

// GetStepSoundTimeOk returns a tuple with the StepSoundTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroPhysicsV2) GetStepSoundTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepSoundTime.Get(), o.StepSoundTime.IsSet()
}

// HasStepSoundTime returns a boolean if a field has been set.
func (o *HeroPhysicsV2) HasStepSoundTime() bool {
	if o != nil && o.StepSoundTime.IsSet() {
		return true
	}

	return false
}

// SetStepSoundTime gets a reference to the given NullableFloat32 and assigns it to the StepSoundTime field.
func (o *HeroPhysicsV2) SetStepSoundTime(v float32) {
	o.StepSoundTime.Set(&v)
}
// SetStepSoundTimeNil sets the value for StepSoundTime to be an explicit nil
func (o *HeroPhysicsV2) SetStepSoundTimeNil() {
	o.StepSoundTime.Set(nil)
}

// UnsetStepSoundTime ensures that no value is present for StepSoundTime, not even an explicit nil
func (o *HeroPhysicsV2) UnsetStepSoundTime() {
	o.StepSoundTime.Unset()
}

// GetStepSoundTimeSprinting returns the StepSoundTimeSprinting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroPhysicsV2) GetStepSoundTimeSprinting() float32 {
	if o == nil || IsNil(o.StepSoundTimeSprinting.Get()) {
		var ret float32
		return ret
	}
	return *o.StepSoundTimeSprinting.Get()
}

// GetStepSoundTimeSprintingOk returns a tuple with the StepSoundTimeSprinting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroPhysicsV2) GetStepSoundTimeSprintingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepSoundTimeSprinting.Get(), o.StepSoundTimeSprinting.IsSet()
}

// HasStepSoundTimeSprinting returns a boolean if a field has been set.
func (o *HeroPhysicsV2) HasStepSoundTimeSprinting() bool {
	if o != nil && o.StepSoundTimeSprinting.IsSet() {
		return true
	}

	return false
}

// SetStepSoundTimeSprinting gets a reference to the given NullableFloat32 and assigns it to the StepSoundTimeSprinting field.
func (o *HeroPhysicsV2) SetStepSoundTimeSprinting(v float32) {
	o.StepSoundTimeSprinting.Set(&v)
}
// SetStepSoundTimeSprintingNil sets the value for StepSoundTimeSprinting to be an explicit nil
func (o *HeroPhysicsV2) SetStepSoundTimeSprintingNil() {
	o.StepSoundTimeSprinting.Set(nil)
}

// UnsetStepSoundTimeSprinting ensures that no value is present for StepSoundTimeSprinting, not even an explicit nil
func (o *HeroPhysicsV2) UnsetStepSoundTimeSprinting() {
	o.StepSoundTimeSprinting.Unset()
}

func (o HeroPhysicsV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroPhysicsV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collision_height"] = o.CollisionHeight
	toSerialize["collision_radius"] = o.CollisionRadius
	toSerialize["stealth_speed_meters_per_second"] = o.StealthSpeedMetersPerSecond
	toSerialize["step_height"] = o.StepHeight
	if o.FootstepSoundTravelDistanceMeters.IsSet() {
		toSerialize["footstep_sound_travel_distance_meters"] = o.FootstepSoundTravelDistanceMeters.Get()
	}
	if o.StepSoundTime.IsSet() {
		toSerialize["step_sound_time"] = o.StepSoundTime.Get()
	}
	if o.StepSoundTimeSprinting.IsSet() {
		toSerialize["step_sound_time_sprinting"] = o.StepSoundTimeSprinting.Get()
	}
	return toSerialize, nil
}

func (o *HeroPhysicsV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collision_height",
		"collision_radius",
		"stealth_speed_meters_per_second",
		"step_height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroPhysicsV2 := _HeroPhysicsV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroPhysicsV2)

	if err != nil {
		return err
	}

	*o = HeroPhysicsV2(varHeroPhysicsV2)

	return err
}

type NullableHeroPhysicsV2 struct {
	value *HeroPhysicsV2
	isSet bool
}

func (v NullableHeroPhysicsV2) Get() *HeroPhysicsV2 {
	return v.value
}

func (v *NullableHeroPhysicsV2) Set(val *HeroPhysicsV2) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroPhysicsV2) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroPhysicsV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroPhysicsV2(val *HeroPhysicsV2) *NullableHeroPhysicsV2 {
	return &NullableHeroPhysicsV2{value: val, isSet: true}
}

func (v NullableHeroPhysicsV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroPhysicsV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


