/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon{}

// UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon struct for UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
type UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon struct {
	Name NullableString `json:"name,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	LocalizedName NullableString `json:"localized_name,omitempty"`
}

// NewUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon instantiates a new UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon() *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon {
	this := UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon{}
	return &this
}

// NewUpgradeTooltipSectionAttributeV2ImportantPropertyWithIconWithDefaults instantiates a new UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeTooltipSectionAttributeV2ImportantPropertyWithIconWithDefaults() *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon {
	this := UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) UnsetName() {
	o.Name.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) UnsetIcon() {
	o.Icon.Unset()
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) GetLocalizedName() string {
	if o == nil || IsNil(o.LocalizedName.Get()) {
		var ret string
		return ret
	}
	return *o.LocalizedName.Get()
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) GetLocalizedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalizedName.Get(), o.LocalizedName.IsSet()
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) HasLocalizedName() bool {
	if o != nil && o.LocalizedName.IsSet() {
		return true
	}

	return false
}

// SetLocalizedName gets a reference to the given NullableString and assigns it to the LocalizedName field.
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) SetLocalizedName(v string) {
	o.LocalizedName.Set(&v)
}
// SetLocalizedNameNil sets the value for LocalizedName to be an explicit nil
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) SetLocalizedNameNil() {
	o.LocalizedName.Set(nil)
}

// UnsetLocalizedName ensures that no value is present for LocalizedName, not even an explicit nil
func (o *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) UnsetLocalizedName() {
	o.LocalizedName.Unset()
}

func (o UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.LocalizedName.IsSet() {
		toSerialize["localized_name"] = o.LocalizedName.Get()
	}
	return toSerialize, nil
}

type NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon struct {
	value *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
	isSet bool
}

func (v NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) Get() *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon {
	return v.value
}

func (v *NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) Set(val *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon(val *UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) *NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon {
	return &NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon{value: val, isSet: true}
}

func (v NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


