/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MapImagesV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapImagesV1{}

// MapImagesV1 struct for MapImagesV1
type MapImagesV1 struct {
	// The minimap image of the map.
	Minimap string `json:"minimap"`
	// The minimap image of the map without background image and frame image.
	Plain string `json:"plain"`
	// The background image of the map.
	Background string `json:"background"`
	// The frame image of the map.
	Frame string `json:"frame"`
	// The mid image of the map.
	Mid string `json:"mid"`
}

type _MapImagesV1 MapImagesV1

// NewMapImagesV1 instantiates a new MapImagesV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapImagesV1(minimap string, plain string, background string, frame string, mid string) *MapImagesV1 {
	this := MapImagesV1{}
	this.Minimap = minimap
	this.Plain = plain
	this.Background = background
	this.Frame = frame
	this.Mid = mid
	return &this
}

// NewMapImagesV1WithDefaults instantiates a new MapImagesV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapImagesV1WithDefaults() *MapImagesV1 {
	this := MapImagesV1{}
	return &this
}

// GetMinimap returns the Minimap field value
func (o *MapImagesV1) GetMinimap() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Minimap
}

// GetMinimapOk returns a tuple with the Minimap field value
// and a boolean to check if the value has been set.
func (o *MapImagesV1) GetMinimapOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minimap, true
}

// SetMinimap sets field value
func (o *MapImagesV1) SetMinimap(v string) {
	o.Minimap = v
}

// GetPlain returns the Plain field value
func (o *MapImagesV1) GetPlain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plain
}

// GetPlainOk returns a tuple with the Plain field value
// and a boolean to check if the value has been set.
func (o *MapImagesV1) GetPlainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plain, true
}

// SetPlain sets field value
func (o *MapImagesV1) SetPlain(v string) {
	o.Plain = v
}

// GetBackground returns the Background field value
func (o *MapImagesV1) GetBackground() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Background
}

// GetBackgroundOk returns a tuple with the Background field value
// and a boolean to check if the value has been set.
func (o *MapImagesV1) GetBackgroundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Background, true
}

// SetBackground sets field value
func (o *MapImagesV1) SetBackground(v string) {
	o.Background = v
}

// GetFrame returns the Frame field value
func (o *MapImagesV1) GetFrame() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frame
}

// GetFrameOk returns a tuple with the Frame field value
// and a boolean to check if the value has been set.
func (o *MapImagesV1) GetFrameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frame, true
}

// SetFrame sets field value
func (o *MapImagesV1) SetFrame(v string) {
	o.Frame = v
}

// GetMid returns the Mid field value
func (o *MapImagesV1) GetMid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mid
}

// GetMidOk returns a tuple with the Mid field value
// and a boolean to check if the value has been set.
func (o *MapImagesV1) GetMidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mid, true
}

// SetMid sets field value
func (o *MapImagesV1) SetMid(v string) {
	o.Mid = v
}

func (o MapImagesV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapImagesV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["minimap"] = o.Minimap
	toSerialize["plain"] = o.Plain
	toSerialize["background"] = o.Background
	toSerialize["frame"] = o.Frame
	toSerialize["mid"] = o.Mid
	return toSerialize, nil
}

func (o *MapImagesV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"minimap",
		"plain",
		"background",
		"frame",
		"mid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapImagesV1 := _MapImagesV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMapImagesV1)

	if err != nil {
		return err
	}

	*o = MapImagesV1(varMapImagesV1)

	return err
}

type NullableMapImagesV1 struct {
	value *MapImagesV1
	isSet bool
}

func (v NullableMapImagesV1) Get() *MapImagesV1 {
	return v.value
}

func (v *NullableMapImagesV1) Set(val *MapImagesV1) {
	v.value = val
	v.isSet = true
}

func (v NullableMapImagesV1) IsSet() bool {
	return v.isSet
}

func (v *NullableMapImagesV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapImagesV1(val *MapImagesV1) *NullableMapImagesV1 {
	return &NullableMapImagesV1{value: val, isSet: true}
}

func (v NullableMapImagesV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapImagesV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


