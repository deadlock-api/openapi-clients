/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RankV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RankV2{}

// RankV2 struct for RankV2
type RankV2 struct {
	Tier int32 `json:"tier"`
	Name string `json:"name"`
	Images RankImagesV2 `json:"images"`
	Color string `json:"color"`
}

type _RankV2 RankV2

// NewRankV2 instantiates a new RankV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRankV2(tier int32, name string, images RankImagesV2, color string) *RankV2 {
	this := RankV2{}
	this.Tier = tier
	this.Name = name
	this.Images = images
	this.Color = color
	return &this
}

// NewRankV2WithDefaults instantiates a new RankV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRankV2WithDefaults() *RankV2 {
	this := RankV2{}
	return &this
}

// GetTier returns the Tier field value
func (o *RankV2) GetTier() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *RankV2) GetTierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *RankV2) SetTier(v int32) {
	o.Tier = v
}

// GetName returns the Name field value
func (o *RankV2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RankV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RankV2) SetName(v string) {
	o.Name = v
}

// GetImages returns the Images field value
func (o *RankV2) GetImages() RankImagesV2 {
	if o == nil {
		var ret RankImagesV2
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
func (o *RankV2) GetImagesOk() (*RankImagesV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Images, true
}

// SetImages sets field value
func (o *RankV2) SetImages(v RankImagesV2) {
	o.Images = v
}

// GetColor returns the Color field value
func (o *RankV2) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *RankV2) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *RankV2) SetColor(v string) {
	o.Color = v
}

func (o RankV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RankV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tier"] = o.Tier
	toSerialize["name"] = o.Name
	toSerialize["images"] = o.Images
	toSerialize["color"] = o.Color
	return toSerialize, nil
}

func (o *RankV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tier",
		"name",
		"images",
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRankV2 := _RankV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRankV2)

	if err != nil {
		return err
	}

	*o = RankV2(varRankV2)

	return err
}

type NullableRankV2 struct {
	value *RankV2
	isSet bool
}

func (v NullableRankV2) Get() *RankV2 {
	return v.value
}

func (v *NullableRankV2) Set(val *RankV2) {
	v.value = val
	v.isSet = true
}

func (v NullableRankV2) IsSet() bool {
	return v.isSet
}

func (v *NullableRankV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRankV2(val *RankV2) *NullableRankV2 {
	return &NullableRankV2{value: val, isSet: true}
}

func (v NullableRankV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRankV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


