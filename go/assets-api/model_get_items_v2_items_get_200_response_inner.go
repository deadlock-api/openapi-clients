/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetItemsV2ItemsGet200ResponseInner - struct for GetItemsV2ItemsGet200ResponseInner
type GetItemsV2ItemsGet200ResponseInner struct {
	AbilityV2Output *AbilityV2Output
	UpgradeV2Output *UpgradeV2Output
	WeaponV2Output *WeaponV2Output
}

// AbilityV2OutputAsGetItemsV2ItemsGet200ResponseInner is a convenience function that returns AbilityV2Output wrapped in GetItemsV2ItemsGet200ResponseInner
func AbilityV2OutputAsGetItemsV2ItemsGet200ResponseInner(v *AbilityV2Output) GetItemsV2ItemsGet200ResponseInner {
	return GetItemsV2ItemsGet200ResponseInner{
		AbilityV2Output: v,
	}
}

// UpgradeV2OutputAsGetItemsV2ItemsGet200ResponseInner is a convenience function that returns UpgradeV2Output wrapped in GetItemsV2ItemsGet200ResponseInner
func UpgradeV2OutputAsGetItemsV2ItemsGet200ResponseInner(v *UpgradeV2Output) GetItemsV2ItemsGet200ResponseInner {
	return GetItemsV2ItemsGet200ResponseInner{
		UpgradeV2Output: v,
	}
}

// WeaponV2OutputAsGetItemsV2ItemsGet200ResponseInner is a convenience function that returns WeaponV2Output wrapped in GetItemsV2ItemsGet200ResponseInner
func WeaponV2OutputAsGetItemsV2ItemsGet200ResponseInner(v *WeaponV2Output) GetItemsV2ItemsGet200ResponseInner {
	return GetItemsV2ItemsGet200ResponseInner{
		WeaponV2Output: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetItemsV2ItemsGet200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AbilityV2Output
	err = newStrictDecoder(data).Decode(&dst.AbilityV2Output)
	if err == nil {
		jsonAbilityV2Output, _ := json.Marshal(dst.AbilityV2Output)
		if string(jsonAbilityV2Output) == "{}" { // empty struct
			dst.AbilityV2Output = nil
		} else {
			if err = validator.Validate(dst.AbilityV2Output); err != nil {
				dst.AbilityV2Output = nil
			} else {
				match++
			}
		}
	} else {
		dst.AbilityV2Output = nil
	}

	// try to unmarshal data into UpgradeV2Output
	err = newStrictDecoder(data).Decode(&dst.UpgradeV2Output)
	if err == nil {
		jsonUpgradeV2Output, _ := json.Marshal(dst.UpgradeV2Output)
		if string(jsonUpgradeV2Output) == "{}" { // empty struct
			dst.UpgradeV2Output = nil
		} else {
			if err = validator.Validate(dst.UpgradeV2Output); err != nil {
				dst.UpgradeV2Output = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpgradeV2Output = nil
	}

	// try to unmarshal data into WeaponV2Output
	err = newStrictDecoder(data).Decode(&dst.WeaponV2Output)
	if err == nil {
		jsonWeaponV2Output, _ := json.Marshal(dst.WeaponV2Output)
		if string(jsonWeaponV2Output) == "{}" { // empty struct
			dst.WeaponV2Output = nil
		} else {
			if err = validator.Validate(dst.WeaponV2Output); err != nil {
				dst.WeaponV2Output = nil
			} else {
				match++
			}
		}
	} else {
		dst.WeaponV2Output = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AbilityV2Output = nil
		dst.UpgradeV2Output = nil
		dst.WeaponV2Output = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetItemsV2ItemsGet200ResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetItemsV2ItemsGet200ResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetItemsV2ItemsGet200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.AbilityV2Output != nil {
		return json.Marshal(&src.AbilityV2Output)
	}

	if src.UpgradeV2Output != nil {
		return json.Marshal(&src.UpgradeV2Output)
	}

	if src.WeaponV2Output != nil {
		return json.Marshal(&src.WeaponV2Output)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetItemsV2ItemsGet200ResponseInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AbilityV2Output != nil {
		return obj.AbilityV2Output
	}

	if obj.UpgradeV2Output != nil {
		return obj.UpgradeV2Output
	}

	if obj.WeaponV2Output != nil {
		return obj.WeaponV2Output
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetItemsV2ItemsGet200ResponseInner) GetActualInstanceValue() (interface{}) {
	if obj.AbilityV2Output != nil {
		return *obj.AbilityV2Output
	}

	if obj.UpgradeV2Output != nil {
		return *obj.UpgradeV2Output
	}

	if obj.WeaponV2Output != nil {
		return *obj.WeaponV2Output
	}

	// all schemas are nil
	return nil
}

type NullableGetItemsV2ItemsGet200ResponseInner struct {
	value *GetItemsV2ItemsGet200ResponseInner
	isSet bool
}

func (v NullableGetItemsV2ItemsGet200ResponseInner) Get() *GetItemsV2ItemsGet200ResponseInner {
	return v.value
}

func (v *NullableGetItemsV2ItemsGet200ResponseInner) Set(val *GetItemsV2ItemsGet200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetItemsV2ItemsGet200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetItemsV2ItemsGet200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetItemsV2ItemsGet200ResponseInner(val *GetItemsV2ItemsGet200ResponseInner) *NullableGetItemsV2ItemsGet200ResponseInner {
	return &NullableGetItemsV2ItemsGet200ResponseInner{value: val, isSet: true}
}

func (v NullableGetItemsV2ItemsGet200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetItemsV2ItemsGet200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


