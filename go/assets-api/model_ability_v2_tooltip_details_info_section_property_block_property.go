/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty{}

// AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty struct for AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
type AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty struct {
	RequiresAbilityUpgrade NullableBool `json:"requires_ability_upgrade,omitempty"`
	ShowPropertyValue NullableBool `json:"show_property_value,omitempty"`
	ImportantProperty NullableString `json:"important_property,omitempty"`
	StatusEffectValue NullableString `json:"status_effect_value,omitempty"`
	StatusEffectName NullableString `json:"status_effect_name,omitempty"`
	ImportantPropertyIcon NullableString `json:"important_property_icon,omitempty"`
}

// NewAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty instantiates a new AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty() *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty {
	this := AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty{}
	return &this
}

// NewAbilityV2TooltipDetailsInfoSectionPropertyBlockPropertyWithDefaults instantiates a new AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbilityV2TooltipDetailsInfoSectionPropertyBlockPropertyWithDefaults() *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty {
	this := AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty{}
	return &this
}

// GetRequiresAbilityUpgrade returns the RequiresAbilityUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetRequiresAbilityUpgrade() bool {
	if o == nil || IsNil(o.RequiresAbilityUpgrade.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiresAbilityUpgrade.Get()
}

// GetRequiresAbilityUpgradeOk returns a tuple with the RequiresAbilityUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetRequiresAbilityUpgradeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiresAbilityUpgrade.Get(), o.RequiresAbilityUpgrade.IsSet()
}

// HasRequiresAbilityUpgrade returns a boolean if a field has been set.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) HasRequiresAbilityUpgrade() bool {
	if o != nil && o.RequiresAbilityUpgrade.IsSet() {
		return true
	}

	return false
}

// SetRequiresAbilityUpgrade gets a reference to the given NullableBool and assigns it to the RequiresAbilityUpgrade field.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetRequiresAbilityUpgrade(v bool) {
	o.RequiresAbilityUpgrade.Set(&v)
}
// SetRequiresAbilityUpgradeNil sets the value for RequiresAbilityUpgrade to be an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetRequiresAbilityUpgradeNil() {
	o.RequiresAbilityUpgrade.Set(nil)
}

// UnsetRequiresAbilityUpgrade ensures that no value is present for RequiresAbilityUpgrade, not even an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnsetRequiresAbilityUpgrade() {
	o.RequiresAbilityUpgrade.Unset()
}

// GetShowPropertyValue returns the ShowPropertyValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetShowPropertyValue() bool {
	if o == nil || IsNil(o.ShowPropertyValue.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowPropertyValue.Get()
}

// GetShowPropertyValueOk returns a tuple with the ShowPropertyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetShowPropertyValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowPropertyValue.Get(), o.ShowPropertyValue.IsSet()
}

// HasShowPropertyValue returns a boolean if a field has been set.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) HasShowPropertyValue() bool {
	if o != nil && o.ShowPropertyValue.IsSet() {
		return true
	}

	return false
}

// SetShowPropertyValue gets a reference to the given NullableBool and assigns it to the ShowPropertyValue field.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetShowPropertyValue(v bool) {
	o.ShowPropertyValue.Set(&v)
}
// SetShowPropertyValueNil sets the value for ShowPropertyValue to be an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetShowPropertyValueNil() {
	o.ShowPropertyValue.Set(nil)
}

// UnsetShowPropertyValue ensures that no value is present for ShowPropertyValue, not even an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnsetShowPropertyValue() {
	o.ShowPropertyValue.Unset()
}

// GetImportantProperty returns the ImportantProperty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetImportantProperty() string {
	if o == nil || IsNil(o.ImportantProperty.Get()) {
		var ret string
		return ret
	}
	return *o.ImportantProperty.Get()
}

// GetImportantPropertyOk returns a tuple with the ImportantProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetImportantPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImportantProperty.Get(), o.ImportantProperty.IsSet()
}

// HasImportantProperty returns a boolean if a field has been set.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) HasImportantProperty() bool {
	if o != nil && o.ImportantProperty.IsSet() {
		return true
	}

	return false
}

// SetImportantProperty gets a reference to the given NullableString and assigns it to the ImportantProperty field.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetImportantProperty(v string) {
	o.ImportantProperty.Set(&v)
}
// SetImportantPropertyNil sets the value for ImportantProperty to be an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetImportantPropertyNil() {
	o.ImportantProperty.Set(nil)
}

// UnsetImportantProperty ensures that no value is present for ImportantProperty, not even an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnsetImportantProperty() {
	o.ImportantProperty.Unset()
}

// GetStatusEffectValue returns the StatusEffectValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetStatusEffectValue() string {
	if o == nil || IsNil(o.StatusEffectValue.Get()) {
		var ret string
		return ret
	}
	return *o.StatusEffectValue.Get()
}

// GetStatusEffectValueOk returns a tuple with the StatusEffectValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetStatusEffectValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusEffectValue.Get(), o.StatusEffectValue.IsSet()
}

// HasStatusEffectValue returns a boolean if a field has been set.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) HasStatusEffectValue() bool {
	if o != nil && o.StatusEffectValue.IsSet() {
		return true
	}

	return false
}

// SetStatusEffectValue gets a reference to the given NullableString and assigns it to the StatusEffectValue field.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetStatusEffectValue(v string) {
	o.StatusEffectValue.Set(&v)
}
// SetStatusEffectValueNil sets the value for StatusEffectValue to be an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetStatusEffectValueNil() {
	o.StatusEffectValue.Set(nil)
}

// UnsetStatusEffectValue ensures that no value is present for StatusEffectValue, not even an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnsetStatusEffectValue() {
	o.StatusEffectValue.Unset()
}

// GetStatusEffectName returns the StatusEffectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetStatusEffectName() string {
	if o == nil || IsNil(o.StatusEffectName.Get()) {
		var ret string
		return ret
	}
	return *o.StatusEffectName.Get()
}

// GetStatusEffectNameOk returns a tuple with the StatusEffectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetStatusEffectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusEffectName.Get(), o.StatusEffectName.IsSet()
}

// HasStatusEffectName returns a boolean if a field has been set.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) HasStatusEffectName() bool {
	if o != nil && o.StatusEffectName.IsSet() {
		return true
	}

	return false
}

// SetStatusEffectName gets a reference to the given NullableString and assigns it to the StatusEffectName field.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetStatusEffectName(v string) {
	o.StatusEffectName.Set(&v)
}
// SetStatusEffectNameNil sets the value for StatusEffectName to be an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetStatusEffectNameNil() {
	o.StatusEffectName.Set(nil)
}

// UnsetStatusEffectName ensures that no value is present for StatusEffectName, not even an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnsetStatusEffectName() {
	o.StatusEffectName.Unset()
}

// GetImportantPropertyIcon returns the ImportantPropertyIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetImportantPropertyIcon() string {
	if o == nil || IsNil(o.ImportantPropertyIcon.Get()) {
		var ret string
		return ret
	}
	return *o.ImportantPropertyIcon.Get()
}

// GetImportantPropertyIconOk returns a tuple with the ImportantPropertyIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) GetImportantPropertyIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImportantPropertyIcon.Get(), o.ImportantPropertyIcon.IsSet()
}

// HasImportantPropertyIcon returns a boolean if a field has been set.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) HasImportantPropertyIcon() bool {
	if o != nil && o.ImportantPropertyIcon.IsSet() {
		return true
	}

	return false
}

// SetImportantPropertyIcon gets a reference to the given NullableString and assigns it to the ImportantPropertyIcon field.
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetImportantPropertyIcon(v string) {
	o.ImportantPropertyIcon.Set(&v)
}
// SetImportantPropertyIconNil sets the value for ImportantPropertyIcon to be an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) SetImportantPropertyIconNil() {
	o.ImportantPropertyIcon.Set(nil)
}

// UnsetImportantPropertyIcon ensures that no value is present for ImportantPropertyIcon, not even an explicit nil
func (o *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnsetImportantPropertyIcon() {
	o.ImportantPropertyIcon.Unset()
}

func (o AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RequiresAbilityUpgrade.IsSet() {
		toSerialize["requires_ability_upgrade"] = o.RequiresAbilityUpgrade.Get()
	}
	if o.ShowPropertyValue.IsSet() {
		toSerialize["show_property_value"] = o.ShowPropertyValue.Get()
	}
	if o.ImportantProperty.IsSet() {
		toSerialize["important_property"] = o.ImportantProperty.Get()
	}
	if o.StatusEffectValue.IsSet() {
		toSerialize["status_effect_value"] = o.StatusEffectValue.Get()
	}
	if o.StatusEffectName.IsSet() {
		toSerialize["status_effect_name"] = o.StatusEffectName.Get()
	}
	if o.ImportantPropertyIcon.IsSet() {
		toSerialize["important_property_icon"] = o.ImportantPropertyIcon.Get()
	}
	return toSerialize, nil
}

type NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty struct {
	value *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
	isSet bool
}

func (v NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) Get() *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty {
	return v.value
}

func (v *NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) Set(val *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty(val *AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) *NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty {
	return &NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty{value: val, isSet: true}
}

func (v NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityV2TooltipDetailsInfoSectionPropertyBlockProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


