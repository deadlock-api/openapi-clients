/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WeaponV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeaponV2Output{}

// WeaponV2Output struct for WeaponV2Output
type WeaponV2Output struct {
	Id int32 `json:"id"`
	ClassName string `json:"class_name"`
	Name string `json:"name"`
	StartTrained NullableBool `json:"start_trained,omitempty"`
	Image NullableString `json:"image,omitempty"`
	ImageWebp NullableString `json:"image_webp,omitempty"`
	Hero NullableInt32 `json:"hero,omitempty"`
	Heroes []int32 `json:"heroes,omitempty"`
	UpdateTime NullableInt32 `json:"update_time,omitempty"`
	Properties map[string]ItemPropertyV2Output `json:"properties,omitempty"`
	WeaponInfo NullableRawWeaponInfoV2Output `json:"weapon_info,omitempty"`
	Type *string `json:"type,omitempty"`
}

type _WeaponV2Output WeaponV2Output

// NewWeaponV2Output instantiates a new WeaponV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeaponV2Output(id int32, className string, name string) *WeaponV2Output {
	this := WeaponV2Output{}
	this.Id = id
	this.ClassName = className
	this.Name = name
	var type_ string = "weapon"
	this.Type = &type_
	return &this
}

// NewWeaponV2OutputWithDefaults instantiates a new WeaponV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeaponV2OutputWithDefaults() *WeaponV2Output {
	this := WeaponV2Output{}
	var type_ string = "weapon"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value
func (o *WeaponV2Output) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WeaponV2Output) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WeaponV2Output) SetId(v int32) {
	o.Id = v
}

// GetClassName returns the ClassName field value
func (o *WeaponV2Output) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *WeaponV2Output) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *WeaponV2Output) SetClassName(v string) {
	o.ClassName = v
}

// GetName returns the Name field value
func (o *WeaponV2Output) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WeaponV2Output) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WeaponV2Output) SetName(v string) {
	o.Name = v
}

// GetStartTrained returns the StartTrained field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetStartTrained() bool {
	if o == nil || IsNil(o.StartTrained.Get()) {
		var ret bool
		return ret
	}
	return *o.StartTrained.Get()
}

// GetStartTrainedOk returns a tuple with the StartTrained field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetStartTrainedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTrained.Get(), o.StartTrained.IsSet()
}

// HasStartTrained returns a boolean if a field has been set.
func (o *WeaponV2Output) HasStartTrained() bool {
	if o != nil && o.StartTrained.IsSet() {
		return true
	}

	return false
}

// SetStartTrained gets a reference to the given NullableBool and assigns it to the StartTrained field.
func (o *WeaponV2Output) SetStartTrained(v bool) {
	o.StartTrained.Set(&v)
}
// SetStartTrainedNil sets the value for StartTrained to be an explicit nil
func (o *WeaponV2Output) SetStartTrainedNil() {
	o.StartTrained.Set(nil)
}

// UnsetStartTrained ensures that no value is present for StartTrained, not even an explicit nil
func (o *WeaponV2Output) UnsetStartTrained() {
	o.StartTrained.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetImage() string {
	if o == nil || IsNil(o.Image.Get()) {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *WeaponV2Output) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *WeaponV2Output) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *WeaponV2Output) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *WeaponV2Output) UnsetImage() {
	o.Image.Unset()
}

// GetImageWebp returns the ImageWebp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetImageWebp() string {
	if o == nil || IsNil(o.ImageWebp.Get()) {
		var ret string
		return ret
	}
	return *o.ImageWebp.Get()
}

// GetImageWebpOk returns a tuple with the ImageWebp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetImageWebpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageWebp.Get(), o.ImageWebp.IsSet()
}

// HasImageWebp returns a boolean if a field has been set.
func (o *WeaponV2Output) HasImageWebp() bool {
	if o != nil && o.ImageWebp.IsSet() {
		return true
	}

	return false
}

// SetImageWebp gets a reference to the given NullableString and assigns it to the ImageWebp field.
func (o *WeaponV2Output) SetImageWebp(v string) {
	o.ImageWebp.Set(&v)
}
// SetImageWebpNil sets the value for ImageWebp to be an explicit nil
func (o *WeaponV2Output) SetImageWebpNil() {
	o.ImageWebp.Set(nil)
}

// UnsetImageWebp ensures that no value is present for ImageWebp, not even an explicit nil
func (o *WeaponV2Output) UnsetImageWebp() {
	o.ImageWebp.Unset()
}

// GetHero returns the Hero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetHero() int32 {
	if o == nil || IsNil(o.Hero.Get()) {
		var ret int32
		return ret
	}
	return *o.Hero.Get()
}

// GetHeroOk returns a tuple with the Hero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetHeroOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hero.Get(), o.Hero.IsSet()
}

// HasHero returns a boolean if a field has been set.
func (o *WeaponV2Output) HasHero() bool {
	if o != nil && o.Hero.IsSet() {
		return true
	}

	return false
}

// SetHero gets a reference to the given NullableInt32 and assigns it to the Hero field.
func (o *WeaponV2Output) SetHero(v int32) {
	o.Hero.Set(&v)
}
// SetHeroNil sets the value for Hero to be an explicit nil
func (o *WeaponV2Output) SetHeroNil() {
	o.Hero.Set(nil)
}

// UnsetHero ensures that no value is present for Hero, not even an explicit nil
func (o *WeaponV2Output) UnsetHero() {
	o.Hero.Unset()
}

// GetHeroes returns the Heroes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetHeroes() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Heroes
}

// GetHeroesOk returns a tuple with the Heroes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetHeroesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Heroes) {
		return nil, false
	}
	return o.Heroes, true
}

// HasHeroes returns a boolean if a field has been set.
func (o *WeaponV2Output) HasHeroes() bool {
	if o != nil && !IsNil(o.Heroes) {
		return true
	}

	return false
}

// SetHeroes gets a reference to the given []int32 and assigns it to the Heroes field.
func (o *WeaponV2Output) SetHeroes(v []int32) {
	o.Heroes = v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetUpdateTime() int32 {
	if o == nil || IsNil(o.UpdateTime.Get()) {
		var ret int32
		return ret
	}
	return *o.UpdateTime.Get()
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetUpdateTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateTime.Get(), o.UpdateTime.IsSet()
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *WeaponV2Output) HasUpdateTime() bool {
	if o != nil && o.UpdateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given NullableInt32 and assigns it to the UpdateTime field.
func (o *WeaponV2Output) SetUpdateTime(v int32) {
	o.UpdateTime.Set(&v)
}
// SetUpdateTimeNil sets the value for UpdateTime to be an explicit nil
func (o *WeaponV2Output) SetUpdateTimeNil() {
	o.UpdateTime.Set(nil)
}

// UnsetUpdateTime ensures that no value is present for UpdateTime, not even an explicit nil
func (o *WeaponV2Output) UnsetUpdateTime() {
	o.UpdateTime.Unset()
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetProperties() map[string]ItemPropertyV2Output {
	if o == nil {
		var ret map[string]ItemPropertyV2Output
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetPropertiesOk() (map[string]ItemPropertyV2Output, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]ItemPropertyV2Output{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *WeaponV2Output) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]ItemPropertyV2Output and assigns it to the Properties field.
func (o *WeaponV2Output) SetProperties(v map[string]ItemPropertyV2Output) {
	o.Properties = v
}

// GetWeaponInfo returns the WeaponInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WeaponV2Output) GetWeaponInfo() RawWeaponInfoV2Output {
	if o == nil || IsNil(o.WeaponInfo.Get()) {
		var ret RawWeaponInfoV2Output
		return ret
	}
	return *o.WeaponInfo.Get()
}

// GetWeaponInfoOk returns a tuple with the WeaponInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeaponV2Output) GetWeaponInfoOk() (*RawWeaponInfoV2Output, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeaponInfo.Get(), o.WeaponInfo.IsSet()
}

// HasWeaponInfo returns a boolean if a field has been set.
func (o *WeaponV2Output) HasWeaponInfo() bool {
	if o != nil && o.WeaponInfo.IsSet() {
		return true
	}

	return false
}

// SetWeaponInfo gets a reference to the given NullableRawWeaponInfoV2Output and assigns it to the WeaponInfo field.
func (o *WeaponV2Output) SetWeaponInfo(v RawWeaponInfoV2Output) {
	o.WeaponInfo.Set(&v)
}
// SetWeaponInfoNil sets the value for WeaponInfo to be an explicit nil
func (o *WeaponV2Output) SetWeaponInfoNil() {
	o.WeaponInfo.Set(nil)
}

// UnsetWeaponInfo ensures that no value is present for WeaponInfo, not even an explicit nil
func (o *WeaponV2Output) UnsetWeaponInfo() {
	o.WeaponInfo.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WeaponV2Output) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeaponV2Output) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WeaponV2Output) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WeaponV2Output) SetType(v string) {
	o.Type = &v
}

func (o WeaponV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeaponV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["class_name"] = o.ClassName
	toSerialize["name"] = o.Name
	if o.StartTrained.IsSet() {
		toSerialize["start_trained"] = o.StartTrained.Get()
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.ImageWebp.IsSet() {
		toSerialize["image_webp"] = o.ImageWebp.Get()
	}
	if o.Hero.IsSet() {
		toSerialize["hero"] = o.Hero.Get()
	}
	if o.Heroes != nil {
		toSerialize["heroes"] = o.Heroes
	}
	if o.UpdateTime.IsSet() {
		toSerialize["update_time"] = o.UpdateTime.Get()
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.WeaponInfo.IsSet() {
		toSerialize["weapon_info"] = o.WeaponInfo.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *WeaponV2Output) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"class_name",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWeaponV2Output := _WeaponV2Output{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWeaponV2Output)

	if err != nil {
		return err
	}

	*o = WeaponV2Output(varWeaponV2Output)

	return err
}

type NullableWeaponV2Output struct {
	value *WeaponV2Output
	isSet bool
}

func (v NullableWeaponV2Output) Get() *WeaponV2Output {
	return v.value
}

func (v *NullableWeaponV2Output) Set(val *WeaponV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableWeaponV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableWeaponV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeaponV2Output(val *WeaponV2Output) *NullableWeaponV2Output {
	return &NullableWeaponV2Output{value: val, isSet: true}
}

func (v NullableWeaponV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeaponV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


