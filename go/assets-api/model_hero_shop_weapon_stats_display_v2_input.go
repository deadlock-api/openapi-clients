/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroShopWeaponStatsDisplayV2Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroShopWeaponStatsDisplayV2Input{}

// HeroShopWeaponStatsDisplayV2Input struct for HeroShopWeaponStatsDisplayV2Input
type HeroShopWeaponStatsDisplayV2Input struct {
	MVecDisplayStats []string `json:"m_vecDisplayStats"`
	MVecOtherDisplayStats []string `json:"m_vecOtherDisplayStats"`
	WeaponAttributes []string `json:"weapon_attributes,omitempty"`
	MStrWeaponImage NullableString `json:"m_strWeaponImage,omitempty"`
	WeaponImageWebp NullableString `json:"weapon_image_webp,omitempty"`
}

type _HeroShopWeaponStatsDisplayV2Input HeroShopWeaponStatsDisplayV2Input

// NewHeroShopWeaponStatsDisplayV2Input instantiates a new HeroShopWeaponStatsDisplayV2Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroShopWeaponStatsDisplayV2Input(mVecDisplayStats []string, mVecOtherDisplayStats []string) *HeroShopWeaponStatsDisplayV2Input {
	this := HeroShopWeaponStatsDisplayV2Input{}
	this.MVecDisplayStats = mVecDisplayStats
	this.MVecOtherDisplayStats = mVecOtherDisplayStats
	return &this
}

// NewHeroShopWeaponStatsDisplayV2InputWithDefaults instantiates a new HeroShopWeaponStatsDisplayV2Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroShopWeaponStatsDisplayV2InputWithDefaults() *HeroShopWeaponStatsDisplayV2Input {
	this := HeroShopWeaponStatsDisplayV2Input{}
	return &this
}

// GetMVecDisplayStats returns the MVecDisplayStats field value
func (o *HeroShopWeaponStatsDisplayV2Input) GetMVecDisplayStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecDisplayStats
}

// GetMVecDisplayStatsOk returns a tuple with the MVecDisplayStats field value
// and a boolean to check if the value has been set.
func (o *HeroShopWeaponStatsDisplayV2Input) GetMVecDisplayStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecDisplayStats, true
}

// SetMVecDisplayStats sets field value
func (o *HeroShopWeaponStatsDisplayV2Input) SetMVecDisplayStats(v []string) {
	o.MVecDisplayStats = v
}

// GetMVecOtherDisplayStats returns the MVecOtherDisplayStats field value
func (o *HeroShopWeaponStatsDisplayV2Input) GetMVecOtherDisplayStats() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MVecOtherDisplayStats
}

// GetMVecOtherDisplayStatsOk returns a tuple with the MVecOtherDisplayStats field value
// and a boolean to check if the value has been set.
func (o *HeroShopWeaponStatsDisplayV2Input) GetMVecOtherDisplayStatsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MVecOtherDisplayStats, true
}

// SetMVecOtherDisplayStats sets field value
func (o *HeroShopWeaponStatsDisplayV2Input) SetMVecOtherDisplayStats(v []string) {
	o.MVecOtherDisplayStats = v
}

// GetWeaponAttributes returns the WeaponAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroShopWeaponStatsDisplayV2Input) GetWeaponAttributes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.WeaponAttributes
}

// GetWeaponAttributesOk returns a tuple with the WeaponAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroShopWeaponStatsDisplayV2Input) GetWeaponAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.WeaponAttributes) {
		return nil, false
	}
	return o.WeaponAttributes, true
}

// HasWeaponAttributes returns a boolean if a field has been set.
func (o *HeroShopWeaponStatsDisplayV2Input) HasWeaponAttributes() bool {
	if o != nil && !IsNil(o.WeaponAttributes) {
		return true
	}

	return false
}

// SetWeaponAttributes gets a reference to the given []string and assigns it to the WeaponAttributes field.
func (o *HeroShopWeaponStatsDisplayV2Input) SetWeaponAttributes(v []string) {
	o.WeaponAttributes = v
}

// GetMStrWeaponImage returns the MStrWeaponImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroShopWeaponStatsDisplayV2Input) GetMStrWeaponImage() string {
	if o == nil || IsNil(o.MStrWeaponImage.Get()) {
		var ret string
		return ret
	}
	return *o.MStrWeaponImage.Get()
}

// GetMStrWeaponImageOk returns a tuple with the MStrWeaponImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroShopWeaponStatsDisplayV2Input) GetMStrWeaponImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MStrWeaponImage.Get(), o.MStrWeaponImage.IsSet()
}

// HasMStrWeaponImage returns a boolean if a field has been set.
func (o *HeroShopWeaponStatsDisplayV2Input) HasMStrWeaponImage() bool {
	if o != nil && o.MStrWeaponImage.IsSet() {
		return true
	}

	return false
}

// SetMStrWeaponImage gets a reference to the given NullableString and assigns it to the MStrWeaponImage field.
func (o *HeroShopWeaponStatsDisplayV2Input) SetMStrWeaponImage(v string) {
	o.MStrWeaponImage.Set(&v)
}
// SetMStrWeaponImageNil sets the value for MStrWeaponImage to be an explicit nil
func (o *HeroShopWeaponStatsDisplayV2Input) SetMStrWeaponImageNil() {
	o.MStrWeaponImage.Set(nil)
}

// UnsetMStrWeaponImage ensures that no value is present for MStrWeaponImage, not even an explicit nil
func (o *HeroShopWeaponStatsDisplayV2Input) UnsetMStrWeaponImage() {
	o.MStrWeaponImage.Unset()
}

// GetWeaponImageWebp returns the WeaponImageWebp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroShopWeaponStatsDisplayV2Input) GetWeaponImageWebp() string {
	if o == nil || IsNil(o.WeaponImageWebp.Get()) {
		var ret string
		return ret
	}
	return *o.WeaponImageWebp.Get()
}

// GetWeaponImageWebpOk returns a tuple with the WeaponImageWebp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroShopWeaponStatsDisplayV2Input) GetWeaponImageWebpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeaponImageWebp.Get(), o.WeaponImageWebp.IsSet()
}

// HasWeaponImageWebp returns a boolean if a field has been set.
func (o *HeroShopWeaponStatsDisplayV2Input) HasWeaponImageWebp() bool {
	if o != nil && o.WeaponImageWebp.IsSet() {
		return true
	}

	return false
}

// SetWeaponImageWebp gets a reference to the given NullableString and assigns it to the WeaponImageWebp field.
func (o *HeroShopWeaponStatsDisplayV2Input) SetWeaponImageWebp(v string) {
	o.WeaponImageWebp.Set(&v)
}
// SetWeaponImageWebpNil sets the value for WeaponImageWebp to be an explicit nil
func (o *HeroShopWeaponStatsDisplayV2Input) SetWeaponImageWebpNil() {
	o.WeaponImageWebp.Set(nil)
}

// UnsetWeaponImageWebp ensures that no value is present for WeaponImageWebp, not even an explicit nil
func (o *HeroShopWeaponStatsDisplayV2Input) UnsetWeaponImageWebp() {
	o.WeaponImageWebp.Unset()
}

func (o HeroShopWeaponStatsDisplayV2Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroShopWeaponStatsDisplayV2Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["m_vecDisplayStats"] = o.MVecDisplayStats
	toSerialize["m_vecOtherDisplayStats"] = o.MVecOtherDisplayStats
	if o.WeaponAttributes != nil {
		toSerialize["weapon_attributes"] = o.WeaponAttributes
	}
	if o.MStrWeaponImage.IsSet() {
		toSerialize["m_strWeaponImage"] = o.MStrWeaponImage.Get()
	}
	if o.WeaponImageWebp.IsSet() {
		toSerialize["weapon_image_webp"] = o.WeaponImageWebp.Get()
	}
	return toSerialize, nil
}

func (o *HeroShopWeaponStatsDisplayV2Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"m_vecDisplayStats",
		"m_vecOtherDisplayStats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroShopWeaponStatsDisplayV2Input := _HeroShopWeaponStatsDisplayV2Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroShopWeaponStatsDisplayV2Input)

	if err != nil {
		return err
	}

	*o = HeroShopWeaponStatsDisplayV2Input(varHeroShopWeaponStatsDisplayV2Input)

	return err
}

type NullableHeroShopWeaponStatsDisplayV2Input struct {
	value *HeroShopWeaponStatsDisplayV2Input
	isSet bool
}

func (v NullableHeroShopWeaponStatsDisplayV2Input) Get() *HeroShopWeaponStatsDisplayV2Input {
	return v.value
}

func (v *NullableHeroShopWeaponStatsDisplayV2Input) Set(val *HeroShopWeaponStatsDisplayV2Input) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroShopWeaponStatsDisplayV2Input) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroShopWeaponStatsDisplayV2Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroShopWeaponStatsDisplayV2Input(val *HeroShopWeaponStatsDisplayV2Input) *NullableHeroShopWeaponStatsDisplayV2Input {
	return &NullableHeroShopWeaponStatsDisplayV2Input{value: val, isSet: true}
}

func (v NullableHeroShopWeaponStatsDisplayV2Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroShopWeaponStatsDisplayV2Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


