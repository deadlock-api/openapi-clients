/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the ItemPropertyV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemPropertyV2Output{}

// ItemPropertyV2Output struct for ItemPropertyV2Output
type ItemPropertyV2Output struct {
	Value NullableValue1 `json:"value,omitempty"`
	CanSetTokenOverride NullableBool `json:"can_set_token_override,omitempty"`
	ProvidedPropertyType NullableString `json:"provided_property_type,omitempty"`
	CssClass NullableString `json:"css_class,omitempty"`
	UsageFlags NullableUsageFlags `json:"usage_flags,omitempty"`
	NegativeAttribute NullableBool `json:"negative_attribute,omitempty"`
	DisableValue NullableString `json:"disable_value,omitempty"`
	LocTokenOverride NullableString `json:"loc_token_override,omitempty"`
	DisplayUnits NullableString `json:"display_units,omitempty"`
	IconPath NullableString `json:"icon_path,omitempty"`
	ScaleFunction NullableRawItemPropertyScaleFunctionSubclassV2Output `json:"scale_function,omitempty"`
	Prefix NullableString `json:"prefix,omitempty"`
	Label NullableString `json:"label,omitempty"`
	Postfix NullableString `json:"postfix,omitempty"`
	PostvalueLabel NullableString `json:"postvalue_label,omitempty"`
	Conditional NullableString `json:"conditional,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
}

// NewItemPropertyV2Output instantiates a new ItemPropertyV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemPropertyV2Output() *ItemPropertyV2Output {
	this := ItemPropertyV2Output{}
	return &this
}

// NewItemPropertyV2OutputWithDefaults instantiates a new ItemPropertyV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemPropertyV2OutputWithDefaults() *ItemPropertyV2Output {
	this := ItemPropertyV2Output{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetValue() Value1 {
	if o == nil || IsNil(o.Value.Get()) {
		var ret Value1
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetValueOk() (*Value1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableValue1 and assigns it to the Value field.
func (o *ItemPropertyV2Output) SetValue(v Value1) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *ItemPropertyV2Output) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetValue() {
	o.Value.Unset()
}

// GetCanSetTokenOverride returns the CanSetTokenOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetCanSetTokenOverride() bool {
	if o == nil || IsNil(o.CanSetTokenOverride.Get()) {
		var ret bool
		return ret
	}
	return *o.CanSetTokenOverride.Get()
}

// GetCanSetTokenOverrideOk returns a tuple with the CanSetTokenOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetCanSetTokenOverrideOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanSetTokenOverride.Get(), o.CanSetTokenOverride.IsSet()
}

// HasCanSetTokenOverride returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasCanSetTokenOverride() bool {
	if o != nil && o.CanSetTokenOverride.IsSet() {
		return true
	}

	return false
}

// SetCanSetTokenOverride gets a reference to the given NullableBool and assigns it to the CanSetTokenOverride field.
func (o *ItemPropertyV2Output) SetCanSetTokenOverride(v bool) {
	o.CanSetTokenOverride.Set(&v)
}
// SetCanSetTokenOverrideNil sets the value for CanSetTokenOverride to be an explicit nil
func (o *ItemPropertyV2Output) SetCanSetTokenOverrideNil() {
	o.CanSetTokenOverride.Set(nil)
}

// UnsetCanSetTokenOverride ensures that no value is present for CanSetTokenOverride, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetCanSetTokenOverride() {
	o.CanSetTokenOverride.Unset()
}

// GetProvidedPropertyType returns the ProvidedPropertyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetProvidedPropertyType() string {
	if o == nil || IsNil(o.ProvidedPropertyType.Get()) {
		var ret string
		return ret
	}
	return *o.ProvidedPropertyType.Get()
}

// GetProvidedPropertyTypeOk returns a tuple with the ProvidedPropertyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetProvidedPropertyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProvidedPropertyType.Get(), o.ProvidedPropertyType.IsSet()
}

// HasProvidedPropertyType returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasProvidedPropertyType() bool {
	if o != nil && o.ProvidedPropertyType.IsSet() {
		return true
	}

	return false
}

// SetProvidedPropertyType gets a reference to the given NullableString and assigns it to the ProvidedPropertyType field.
func (o *ItemPropertyV2Output) SetProvidedPropertyType(v string) {
	o.ProvidedPropertyType.Set(&v)
}
// SetProvidedPropertyTypeNil sets the value for ProvidedPropertyType to be an explicit nil
func (o *ItemPropertyV2Output) SetProvidedPropertyTypeNil() {
	o.ProvidedPropertyType.Set(nil)
}

// UnsetProvidedPropertyType ensures that no value is present for ProvidedPropertyType, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetProvidedPropertyType() {
	o.ProvidedPropertyType.Unset()
}

// GetCssClass returns the CssClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetCssClass() string {
	if o == nil || IsNil(o.CssClass.Get()) {
		var ret string
		return ret
	}
	return *o.CssClass.Get()
}

// GetCssClassOk returns a tuple with the CssClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetCssClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CssClass.Get(), o.CssClass.IsSet()
}

// HasCssClass returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasCssClass() bool {
	if o != nil && o.CssClass.IsSet() {
		return true
	}

	return false
}

// SetCssClass gets a reference to the given NullableString and assigns it to the CssClass field.
func (o *ItemPropertyV2Output) SetCssClass(v string) {
	o.CssClass.Set(&v)
}
// SetCssClassNil sets the value for CssClass to be an explicit nil
func (o *ItemPropertyV2Output) SetCssClassNil() {
	o.CssClass.Set(nil)
}

// UnsetCssClass ensures that no value is present for CssClass, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetCssClass() {
	o.CssClass.Unset()
}

// GetUsageFlags returns the UsageFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetUsageFlags() UsageFlags {
	if o == nil || IsNil(o.UsageFlags.Get()) {
		var ret UsageFlags
		return ret
	}
	return *o.UsageFlags.Get()
}

// GetUsageFlagsOk returns a tuple with the UsageFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetUsageFlagsOk() (*UsageFlags, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageFlags.Get(), o.UsageFlags.IsSet()
}

// HasUsageFlags returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasUsageFlags() bool {
	if o != nil && o.UsageFlags.IsSet() {
		return true
	}

	return false
}

// SetUsageFlags gets a reference to the given NullableUsageFlags and assigns it to the UsageFlags field.
func (o *ItemPropertyV2Output) SetUsageFlags(v UsageFlags) {
	o.UsageFlags.Set(&v)
}
// SetUsageFlagsNil sets the value for UsageFlags to be an explicit nil
func (o *ItemPropertyV2Output) SetUsageFlagsNil() {
	o.UsageFlags.Set(nil)
}

// UnsetUsageFlags ensures that no value is present for UsageFlags, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetUsageFlags() {
	o.UsageFlags.Unset()
}

// GetNegativeAttribute returns the NegativeAttribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetNegativeAttribute() bool {
	if o == nil || IsNil(o.NegativeAttribute.Get()) {
		var ret bool
		return ret
	}
	return *o.NegativeAttribute.Get()
}

// GetNegativeAttributeOk returns a tuple with the NegativeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetNegativeAttributeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NegativeAttribute.Get(), o.NegativeAttribute.IsSet()
}

// HasNegativeAttribute returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasNegativeAttribute() bool {
	if o != nil && o.NegativeAttribute.IsSet() {
		return true
	}

	return false
}

// SetNegativeAttribute gets a reference to the given NullableBool and assigns it to the NegativeAttribute field.
func (o *ItemPropertyV2Output) SetNegativeAttribute(v bool) {
	o.NegativeAttribute.Set(&v)
}
// SetNegativeAttributeNil sets the value for NegativeAttribute to be an explicit nil
func (o *ItemPropertyV2Output) SetNegativeAttributeNil() {
	o.NegativeAttribute.Set(nil)
}

// UnsetNegativeAttribute ensures that no value is present for NegativeAttribute, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetNegativeAttribute() {
	o.NegativeAttribute.Unset()
}

// GetDisableValue returns the DisableValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetDisableValue() string {
	if o == nil || IsNil(o.DisableValue.Get()) {
		var ret string
		return ret
	}
	return *o.DisableValue.Get()
}

// GetDisableValueOk returns a tuple with the DisableValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetDisableValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableValue.Get(), o.DisableValue.IsSet()
}

// HasDisableValue returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasDisableValue() bool {
	if o != nil && o.DisableValue.IsSet() {
		return true
	}

	return false
}

// SetDisableValue gets a reference to the given NullableString and assigns it to the DisableValue field.
func (o *ItemPropertyV2Output) SetDisableValue(v string) {
	o.DisableValue.Set(&v)
}
// SetDisableValueNil sets the value for DisableValue to be an explicit nil
func (o *ItemPropertyV2Output) SetDisableValueNil() {
	o.DisableValue.Set(nil)
}

// UnsetDisableValue ensures that no value is present for DisableValue, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetDisableValue() {
	o.DisableValue.Unset()
}

// GetLocTokenOverride returns the LocTokenOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetLocTokenOverride() string {
	if o == nil || IsNil(o.LocTokenOverride.Get()) {
		var ret string
		return ret
	}
	return *o.LocTokenOverride.Get()
}

// GetLocTokenOverrideOk returns a tuple with the LocTokenOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetLocTokenOverrideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocTokenOverride.Get(), o.LocTokenOverride.IsSet()
}

// HasLocTokenOverride returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasLocTokenOverride() bool {
	if o != nil && o.LocTokenOverride.IsSet() {
		return true
	}

	return false
}

// SetLocTokenOverride gets a reference to the given NullableString and assigns it to the LocTokenOverride field.
func (o *ItemPropertyV2Output) SetLocTokenOverride(v string) {
	o.LocTokenOverride.Set(&v)
}
// SetLocTokenOverrideNil sets the value for LocTokenOverride to be an explicit nil
func (o *ItemPropertyV2Output) SetLocTokenOverrideNil() {
	o.LocTokenOverride.Set(nil)
}

// UnsetLocTokenOverride ensures that no value is present for LocTokenOverride, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetLocTokenOverride() {
	o.LocTokenOverride.Unset()
}

// GetDisplayUnits returns the DisplayUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetDisplayUnits() string {
	if o == nil || IsNil(o.DisplayUnits.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayUnits.Get()
}

// GetDisplayUnitsOk returns a tuple with the DisplayUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetDisplayUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayUnits.Get(), o.DisplayUnits.IsSet()
}

// HasDisplayUnits returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasDisplayUnits() bool {
	if o != nil && o.DisplayUnits.IsSet() {
		return true
	}

	return false
}

// SetDisplayUnits gets a reference to the given NullableString and assigns it to the DisplayUnits field.
func (o *ItemPropertyV2Output) SetDisplayUnits(v string) {
	o.DisplayUnits.Set(&v)
}
// SetDisplayUnitsNil sets the value for DisplayUnits to be an explicit nil
func (o *ItemPropertyV2Output) SetDisplayUnitsNil() {
	o.DisplayUnits.Set(nil)
}

// UnsetDisplayUnits ensures that no value is present for DisplayUnits, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetDisplayUnits() {
	o.DisplayUnits.Unset()
}

// GetIconPath returns the IconPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetIconPath() string {
	if o == nil || IsNil(o.IconPath.Get()) {
		var ret string
		return ret
	}
	return *o.IconPath.Get()
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetIconPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IconPath.Get(), o.IconPath.IsSet()
}

// HasIconPath returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasIconPath() bool {
	if o != nil && o.IconPath.IsSet() {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given NullableString and assigns it to the IconPath field.
func (o *ItemPropertyV2Output) SetIconPath(v string) {
	o.IconPath.Set(&v)
}
// SetIconPathNil sets the value for IconPath to be an explicit nil
func (o *ItemPropertyV2Output) SetIconPathNil() {
	o.IconPath.Set(nil)
}

// UnsetIconPath ensures that no value is present for IconPath, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetIconPath() {
	o.IconPath.Unset()
}

// GetScaleFunction returns the ScaleFunction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetScaleFunction() RawItemPropertyScaleFunctionSubclassV2Output {
	if o == nil || IsNil(o.ScaleFunction.Get()) {
		var ret RawItemPropertyScaleFunctionSubclassV2Output
		return ret
	}
	return *o.ScaleFunction.Get()
}

// GetScaleFunctionOk returns a tuple with the ScaleFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetScaleFunctionOk() (*RawItemPropertyScaleFunctionSubclassV2Output, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaleFunction.Get(), o.ScaleFunction.IsSet()
}

// HasScaleFunction returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasScaleFunction() bool {
	if o != nil && o.ScaleFunction.IsSet() {
		return true
	}

	return false
}

// SetScaleFunction gets a reference to the given NullableRawItemPropertyScaleFunctionSubclassV2Output and assigns it to the ScaleFunction field.
func (o *ItemPropertyV2Output) SetScaleFunction(v RawItemPropertyScaleFunctionSubclassV2Output) {
	o.ScaleFunction.Set(&v)
}
// SetScaleFunctionNil sets the value for ScaleFunction to be an explicit nil
func (o *ItemPropertyV2Output) SetScaleFunctionNil() {
	o.ScaleFunction.Set(nil)
}

// UnsetScaleFunction ensures that no value is present for ScaleFunction, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetScaleFunction() {
	o.ScaleFunction.Unset()
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetPrefix() string {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret string
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableString and assigns it to the Prefix field.
func (o *ItemPropertyV2Output) SetPrefix(v string) {
	o.Prefix.Set(&v)
}
// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *ItemPropertyV2Output) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *ItemPropertyV2Output) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *ItemPropertyV2Output) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetLabel() {
	o.Label.Unset()
}

// GetPostfix returns the Postfix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetPostfix() string {
	if o == nil || IsNil(o.Postfix.Get()) {
		var ret string
		return ret
	}
	return *o.Postfix.Get()
}

// GetPostfixOk returns a tuple with the Postfix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetPostfixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Postfix.Get(), o.Postfix.IsSet()
}

// HasPostfix returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasPostfix() bool {
	if o != nil && o.Postfix.IsSet() {
		return true
	}

	return false
}

// SetPostfix gets a reference to the given NullableString and assigns it to the Postfix field.
func (o *ItemPropertyV2Output) SetPostfix(v string) {
	o.Postfix.Set(&v)
}
// SetPostfixNil sets the value for Postfix to be an explicit nil
func (o *ItemPropertyV2Output) SetPostfixNil() {
	o.Postfix.Set(nil)
}

// UnsetPostfix ensures that no value is present for Postfix, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetPostfix() {
	o.Postfix.Unset()
}

// GetPostvalueLabel returns the PostvalueLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetPostvalueLabel() string {
	if o == nil || IsNil(o.PostvalueLabel.Get()) {
		var ret string
		return ret
	}
	return *o.PostvalueLabel.Get()
}

// GetPostvalueLabelOk returns a tuple with the PostvalueLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetPostvalueLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostvalueLabel.Get(), o.PostvalueLabel.IsSet()
}

// HasPostvalueLabel returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasPostvalueLabel() bool {
	if o != nil && o.PostvalueLabel.IsSet() {
		return true
	}

	return false
}

// SetPostvalueLabel gets a reference to the given NullableString and assigns it to the PostvalueLabel field.
func (o *ItemPropertyV2Output) SetPostvalueLabel(v string) {
	o.PostvalueLabel.Set(&v)
}
// SetPostvalueLabelNil sets the value for PostvalueLabel to be an explicit nil
func (o *ItemPropertyV2Output) SetPostvalueLabelNil() {
	o.PostvalueLabel.Set(nil)
}

// UnsetPostvalueLabel ensures that no value is present for PostvalueLabel, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetPostvalueLabel() {
	o.PostvalueLabel.Unset()
}

// GetConditional returns the Conditional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetConditional() string {
	if o == nil || IsNil(o.Conditional.Get()) {
		var ret string
		return ret
	}
	return *o.Conditional.Get()
}

// GetConditionalOk returns a tuple with the Conditional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetConditionalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditional.Get(), o.Conditional.IsSet()
}

// HasConditional returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasConditional() bool {
	if o != nil && o.Conditional.IsSet() {
		return true
	}

	return false
}

// SetConditional gets a reference to the given NullableString and assigns it to the Conditional field.
func (o *ItemPropertyV2Output) SetConditional(v string) {
	o.Conditional.Set(&v)
}
// SetConditionalNil sets the value for Conditional to be an explicit nil
func (o *ItemPropertyV2Output) SetConditionalNil() {
	o.Conditional.Set(nil)
}

// UnsetConditional ensures that no value is present for Conditional, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetConditional() {
	o.Conditional.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPropertyV2Output) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPropertyV2Output) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *ItemPropertyV2Output) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *ItemPropertyV2Output) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *ItemPropertyV2Output) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *ItemPropertyV2Output) UnsetIcon() {
	o.Icon.Unset()
}

func (o ItemPropertyV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemPropertyV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.CanSetTokenOverride.IsSet() {
		toSerialize["can_set_token_override"] = o.CanSetTokenOverride.Get()
	}
	if o.ProvidedPropertyType.IsSet() {
		toSerialize["provided_property_type"] = o.ProvidedPropertyType.Get()
	}
	if o.CssClass.IsSet() {
		toSerialize["css_class"] = o.CssClass.Get()
	}
	if o.UsageFlags.IsSet() {
		toSerialize["usage_flags"] = o.UsageFlags.Get()
	}
	if o.NegativeAttribute.IsSet() {
		toSerialize["negative_attribute"] = o.NegativeAttribute.Get()
	}
	if o.DisableValue.IsSet() {
		toSerialize["disable_value"] = o.DisableValue.Get()
	}
	if o.LocTokenOverride.IsSet() {
		toSerialize["loc_token_override"] = o.LocTokenOverride.Get()
	}
	if o.DisplayUnits.IsSet() {
		toSerialize["display_units"] = o.DisplayUnits.Get()
	}
	if o.IconPath.IsSet() {
		toSerialize["icon_path"] = o.IconPath.Get()
	}
	if o.ScaleFunction.IsSet() {
		toSerialize["scale_function"] = o.ScaleFunction.Get()
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Postfix.IsSet() {
		toSerialize["postfix"] = o.Postfix.Get()
	}
	if o.PostvalueLabel.IsSet() {
		toSerialize["postvalue_label"] = o.PostvalueLabel.Get()
	}
	if o.Conditional.IsSet() {
		toSerialize["conditional"] = o.Conditional.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	return toSerialize, nil
}

type NullableItemPropertyV2Output struct {
	value *ItemPropertyV2Output
	isSet bool
}

func (v NullableItemPropertyV2Output) Get() *ItemPropertyV2Output {
	return v.value
}

func (v *NullableItemPropertyV2Output) Set(val *ItemPropertyV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableItemPropertyV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableItemPropertyV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemPropertyV2Output(val *ItemPropertyV2Output) *NullableItemPropertyV2Output {
	return &NullableItemPropertyV2Output{value: val, isSet: true}
}

func (v NullableItemPropertyV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemPropertyV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


