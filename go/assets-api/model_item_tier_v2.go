/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// ItemTierV2 the model 'ItemTierV2'
type ItemTierV2 int32

// List of ItemTierV2
const (
	_1 ItemTierV2 = 1
	_2 ItemTierV2 = 2
	_3 ItemTierV2 = 3
	_4 ItemTierV2 = 4
)

// All allowed values of ItemTierV2 enum
var AllowedItemTierV2EnumValues = []ItemTierV2{
	1,
	2,
	3,
	4,
}

func (v *ItemTierV2) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ItemTierV2(value)
	for _, existing := range AllowedItemTierV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ItemTierV2", value)
}

// NewItemTierV2FromValue returns a pointer to a valid ItemTierV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewItemTierV2FromValue(v int32) (*ItemTierV2, error) {
	ev := ItemTierV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ItemTierV2: valid values are %v", v, AllowedItemTierV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ItemTierV2) IsValid() bool {
	for _, existing := range AllowedItemTierV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemTierV2 value
func (v ItemTierV2) Ptr() *ItemTierV2 {
	return &v
}

type NullableItemTierV2 struct {
	value *ItemTierV2
	isSet bool
}

func (v NullableItemTierV2) Get() *ItemTierV2 {
	return v.value
}

func (v *NullableItemTierV2) Set(val *ItemTierV2) {
	v.value = val
	v.isSet = true
}

func (v NullableItemTierV2) IsSet() bool {
	return v.isSet
}

func (v *NullableItemTierV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemTierV2(val *ItemTierV2) *NullableItemTierV2 {
	return &NullableItemTierV2{value: val, isSet: true}
}

func (v NullableItemTierV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemTierV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

