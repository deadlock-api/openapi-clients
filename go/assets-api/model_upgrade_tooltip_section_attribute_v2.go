/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the UpgradeTooltipSectionAttributeV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeTooltipSectionAttributeV2{}

// UpgradeTooltipSectionAttributeV2 struct for UpgradeTooltipSectionAttributeV2
type UpgradeTooltipSectionAttributeV2 struct {
	LocString NullableString `json:"loc_string,omitempty"`
	Properties []string `json:"properties,omitempty"`
	ElevatedProperties []string `json:"elevated_properties,omitempty"`
	ImportantProperties []string `json:"important_properties,omitempty"`
	ImportantPropertiesWithIcon []UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon `json:"important_properties_with_icon,omitempty"`
}

// NewUpgradeTooltipSectionAttributeV2 instantiates a new UpgradeTooltipSectionAttributeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeTooltipSectionAttributeV2() *UpgradeTooltipSectionAttributeV2 {
	this := UpgradeTooltipSectionAttributeV2{}
	return &this
}

// NewUpgradeTooltipSectionAttributeV2WithDefaults instantiates a new UpgradeTooltipSectionAttributeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeTooltipSectionAttributeV2WithDefaults() *UpgradeTooltipSectionAttributeV2 {
	this := UpgradeTooltipSectionAttributeV2{}
	return &this
}

// GetLocString returns the LocString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2) GetLocString() string {
	if o == nil || IsNil(o.LocString.Get()) {
		var ret string
		return ret
	}
	return *o.LocString.Get()
}

// GetLocStringOk returns a tuple with the LocString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2) GetLocStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocString.Get(), o.LocString.IsSet()
}

// HasLocString returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2) HasLocString() bool {
	if o != nil && o.LocString.IsSet() {
		return true
	}

	return false
}

// SetLocString gets a reference to the given NullableString and assigns it to the LocString field.
func (o *UpgradeTooltipSectionAttributeV2) SetLocString(v string) {
	o.LocString.Set(&v)
}
// SetLocStringNil sets the value for LocString to be an explicit nil
func (o *UpgradeTooltipSectionAttributeV2) SetLocStringNil() {
	o.LocString.Set(nil)
}

// UnsetLocString ensures that no value is present for LocString, not even an explicit nil
func (o *UpgradeTooltipSectionAttributeV2) UnsetLocString() {
	o.LocString.Unset()
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2) GetProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2) GetPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []string and assigns it to the Properties field.
func (o *UpgradeTooltipSectionAttributeV2) SetProperties(v []string) {
	o.Properties = v
}

// GetElevatedProperties returns the ElevatedProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2) GetElevatedProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ElevatedProperties
}

// GetElevatedPropertiesOk returns a tuple with the ElevatedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2) GetElevatedPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.ElevatedProperties) {
		return nil, false
	}
	return o.ElevatedProperties, true
}

// HasElevatedProperties returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2) HasElevatedProperties() bool {
	if o != nil && !IsNil(o.ElevatedProperties) {
		return true
	}

	return false
}

// SetElevatedProperties gets a reference to the given []string and assigns it to the ElevatedProperties field.
func (o *UpgradeTooltipSectionAttributeV2) SetElevatedProperties(v []string) {
	o.ElevatedProperties = v
}

// GetImportantProperties returns the ImportantProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2) GetImportantProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ImportantProperties
}

// GetImportantPropertiesOk returns a tuple with the ImportantProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2) GetImportantPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.ImportantProperties) {
		return nil, false
	}
	return o.ImportantProperties, true
}

// HasImportantProperties returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2) HasImportantProperties() bool {
	if o != nil && !IsNil(o.ImportantProperties) {
		return true
	}

	return false
}

// SetImportantProperties gets a reference to the given []string and assigns it to the ImportantProperties field.
func (o *UpgradeTooltipSectionAttributeV2) SetImportantProperties(v []string) {
	o.ImportantProperties = v
}

// GetImportantPropertiesWithIcon returns the ImportantPropertiesWithIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeTooltipSectionAttributeV2) GetImportantPropertiesWithIcon() []UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon {
	if o == nil {
		var ret []UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
		return ret
	}
	return o.ImportantPropertiesWithIcon
}

// GetImportantPropertiesWithIconOk returns a tuple with the ImportantPropertiesWithIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeTooltipSectionAttributeV2) GetImportantPropertiesWithIconOk() ([]UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon, bool) {
	if o == nil || IsNil(o.ImportantPropertiesWithIcon) {
		return nil, false
	}
	return o.ImportantPropertiesWithIcon, true
}

// HasImportantPropertiesWithIcon returns a boolean if a field has been set.
func (o *UpgradeTooltipSectionAttributeV2) HasImportantPropertiesWithIcon() bool {
	if o != nil && !IsNil(o.ImportantPropertiesWithIcon) {
		return true
	}

	return false
}

// SetImportantPropertiesWithIcon gets a reference to the given []UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon and assigns it to the ImportantPropertiesWithIcon field.
func (o *UpgradeTooltipSectionAttributeV2) SetImportantPropertiesWithIcon(v []UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon) {
	o.ImportantPropertiesWithIcon = v
}

func (o UpgradeTooltipSectionAttributeV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeTooltipSectionAttributeV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LocString.IsSet() {
		toSerialize["loc_string"] = o.LocString.Get()
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.ElevatedProperties != nil {
		toSerialize["elevated_properties"] = o.ElevatedProperties
	}
	if o.ImportantProperties != nil {
		toSerialize["important_properties"] = o.ImportantProperties
	}
	if o.ImportantPropertiesWithIcon != nil {
		toSerialize["important_properties_with_icon"] = o.ImportantPropertiesWithIcon
	}
	return toSerialize, nil
}

type NullableUpgradeTooltipSectionAttributeV2 struct {
	value *UpgradeTooltipSectionAttributeV2
	isSet bool
}

func (v NullableUpgradeTooltipSectionAttributeV2) Get() *UpgradeTooltipSectionAttributeV2 {
	return v.value
}

func (v *NullableUpgradeTooltipSectionAttributeV2) Set(val *UpgradeTooltipSectionAttributeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeTooltipSectionAttributeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeTooltipSectionAttributeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeTooltipSectionAttributeV2(val *UpgradeTooltipSectionAttributeV2) *NullableUpgradeTooltipSectionAttributeV2 {
	return &NullableUpgradeTooltipSectionAttributeV2{value: val, isSet: true}
}

func (v NullableUpgradeTooltipSectionAttributeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeTooltipSectionAttributeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


