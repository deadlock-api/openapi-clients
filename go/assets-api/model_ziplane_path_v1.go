/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZiplanePathV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZiplanePathV1{}

// ZiplanePathV1 struct for ZiplanePathV1
type ZiplanePathV1 struct {
	// The origin of the path.
	Origin []interface{} `json:"origin"`
	// The color of the path.
	Color string `json:"color"`
	// The P0 points of the path.
	P0Points [][]interface{} `json:"P0_points"`
	// The P1 points of the path.
	P1Points [][]interface{} `json:"P1_points"`
	// The P2 points of the path.
	P2Points [][]interface{} `json:"P2_points"`
}

type _ZiplanePathV1 ZiplanePathV1

// NewZiplanePathV1 instantiates a new ZiplanePathV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZiplanePathV1(origin []interface{}, color string, p0Points [][]interface{}, p1Points [][]interface{}, p2Points [][]interface{}) *ZiplanePathV1 {
	this := ZiplanePathV1{}
	this.Origin = origin
	this.Color = color
	this.P0Points = p0Points
	this.P1Points = p1Points
	this.P2Points = p2Points
	return &this
}

// NewZiplanePathV1WithDefaults instantiates a new ZiplanePathV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZiplanePathV1WithDefaults() *ZiplanePathV1 {
	this := ZiplanePathV1{}
	return &this
}

// GetOrigin returns the Origin field value
func (o *ZiplanePathV1) GetOrigin() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *ZiplanePathV1) GetOriginOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin, true
}

// SetOrigin sets field value
func (o *ZiplanePathV1) SetOrigin(v []interface{}) {
	o.Origin = v
}

// GetColor returns the Color field value
func (o *ZiplanePathV1) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ZiplanePathV1) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ZiplanePathV1) SetColor(v string) {
	o.Color = v
}

// GetP0Points returns the P0Points field value
func (o *ZiplanePathV1) GetP0Points() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.P0Points
}

// GetP0PointsOk returns a tuple with the P0Points field value
// and a boolean to check if the value has been set.
func (o *ZiplanePathV1) GetP0PointsOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.P0Points, true
}

// SetP0Points sets field value
func (o *ZiplanePathV1) SetP0Points(v [][]interface{}) {
	o.P0Points = v
}

// GetP1Points returns the P1Points field value
func (o *ZiplanePathV1) GetP1Points() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.P1Points
}

// GetP1PointsOk returns a tuple with the P1Points field value
// and a boolean to check if the value has been set.
func (o *ZiplanePathV1) GetP1PointsOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.P1Points, true
}

// SetP1Points sets field value
func (o *ZiplanePathV1) SetP1Points(v [][]interface{}) {
	o.P1Points = v
}

// GetP2Points returns the P2Points field value
func (o *ZiplanePathV1) GetP2Points() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.P2Points
}

// GetP2PointsOk returns a tuple with the P2Points field value
// and a boolean to check if the value has been set.
func (o *ZiplanePathV1) GetP2PointsOk() ([][]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.P2Points, true
}

// SetP2Points sets field value
func (o *ZiplanePathV1) SetP2Points(v [][]interface{}) {
	o.P2Points = v
}

func (o ZiplanePathV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZiplanePathV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["origin"] = o.Origin
	toSerialize["color"] = o.Color
	toSerialize["P0_points"] = o.P0Points
	toSerialize["P1_points"] = o.P1Points
	toSerialize["P2_points"] = o.P2Points
	return toSerialize, nil
}

func (o *ZiplanePathV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"origin",
		"color",
		"P0_points",
		"P1_points",
		"P2_points",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZiplanePathV1 := _ZiplanePathV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZiplanePathV1)

	if err != nil {
		return err
	}

	*o = ZiplanePathV1(varZiplanePathV1)

	return err
}

type NullableZiplanePathV1 struct {
	value *ZiplanePathV1
	isSet bool
}

func (v NullableZiplanePathV1) Get() *ZiplanePathV1 {
	return v.value
}

func (v *NullableZiplanePathV1) Set(val *ZiplanePathV1) {
	v.value = val
	v.isSet = true
}

func (v NullableZiplanePathV1) IsSet() bool {
	return v.isSet
}

func (v *NullableZiplanePathV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZiplanePathV1(val *ZiplanePathV1) *NullableZiplanePathV1 {
	return &NullableZiplanePathV1{value: val, isSet: true}
}

func (v NullableZiplanePathV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZiplanePathV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


