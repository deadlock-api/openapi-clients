/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroStartingStatV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroStartingStatV2{}

// HeroStartingStatV2 struct for HeroStartingStatV2
type HeroStartingStatV2 struct {
	Value Value `json:"value"`
	DisplayStatName string `json:"display_stat_name"`
}

type _HeroStartingStatV2 HeroStartingStatV2

// NewHeroStartingStatV2 instantiates a new HeroStartingStatV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroStartingStatV2(value Value, displayStatName string) *HeroStartingStatV2 {
	this := HeroStartingStatV2{}
	this.Value = value
	this.DisplayStatName = displayStatName
	return &this
}

// NewHeroStartingStatV2WithDefaults instantiates a new HeroStartingStatV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroStartingStatV2WithDefaults() *HeroStartingStatV2 {
	this := HeroStartingStatV2{}
	return &this
}

// GetValue returns the Value field value
func (o *HeroStartingStatV2) GetValue() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *HeroStartingStatV2) GetValueOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *HeroStartingStatV2) SetValue(v Value) {
	o.Value = v
}

// GetDisplayStatName returns the DisplayStatName field value
func (o *HeroStartingStatV2) GetDisplayStatName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayStatName
}

// GetDisplayStatNameOk returns a tuple with the DisplayStatName field value
// and a boolean to check if the value has been set.
func (o *HeroStartingStatV2) GetDisplayStatNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayStatName, true
}

// SetDisplayStatName sets field value
func (o *HeroStartingStatV2) SetDisplayStatName(v string) {
	o.DisplayStatName = v
}

func (o HeroStartingStatV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroStartingStatV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["display_stat_name"] = o.DisplayStatName
	return toSerialize, nil
}

func (o *HeroStartingStatV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"display_stat_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroStartingStatV2 := _HeroStartingStatV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroStartingStatV2)

	if err != nil {
		return err
	}

	*o = HeroStartingStatV2(varHeroStartingStatV2)

	return err
}

type NullableHeroStartingStatV2 struct {
	value *HeroStartingStatV2
	isSet bool
}

func (v NullableHeroStartingStatV2) Get() *HeroStartingStatV2 {
	return v.value
}

func (v *NullableHeroStartingStatV2) Set(val *HeroStartingStatV2) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroStartingStatV2) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroStartingStatV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroStartingStatV2(val *HeroStartingStatV2) *NullableHeroStartingStatV2 {
	return &NullableHeroStartingStatV2{value: val, isSet: true}
}

func (v NullableHeroStartingStatV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroStartingStatV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


