/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the AbilityDescriptionV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbilityDescriptionV2{}

// AbilityDescriptionV2 struct for AbilityDescriptionV2
type AbilityDescriptionV2 struct {
	Desc NullableString `json:"desc,omitempty"`
	Quip NullableString `json:"quip,omitempty"`
	T1Desc NullableString `json:"t1_desc,omitempty"`
	T2Desc NullableString `json:"t2_desc,omitempty"`
	T3Desc NullableString `json:"t3_desc,omitempty"`
	Active NullableString `json:"active,omitempty"`
	Passive NullableString `json:"passive,omitempty"`
}

// NewAbilityDescriptionV2 instantiates a new AbilityDescriptionV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbilityDescriptionV2() *AbilityDescriptionV2 {
	this := AbilityDescriptionV2{}
	return &this
}

// NewAbilityDescriptionV2WithDefaults instantiates a new AbilityDescriptionV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbilityDescriptionV2WithDefaults() *AbilityDescriptionV2 {
	this := AbilityDescriptionV2{}
	return &this
}

// GetDesc returns the Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetDesc() string {
	if o == nil || IsNil(o.Desc.Get()) {
		var ret string
		return ret
	}
	return *o.Desc.Get()
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Desc.Get(), o.Desc.IsSet()
}

// HasDesc returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasDesc() bool {
	if o != nil && o.Desc.IsSet() {
		return true
	}

	return false
}

// SetDesc gets a reference to the given NullableString and assigns it to the Desc field.
func (o *AbilityDescriptionV2) SetDesc(v string) {
	o.Desc.Set(&v)
}
// SetDescNil sets the value for Desc to be an explicit nil
func (o *AbilityDescriptionV2) SetDescNil() {
	o.Desc.Set(nil)
}

// UnsetDesc ensures that no value is present for Desc, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetDesc() {
	o.Desc.Unset()
}

// GetQuip returns the Quip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetQuip() string {
	if o == nil || IsNil(o.Quip.Get()) {
		var ret string
		return ret
	}
	return *o.Quip.Get()
}

// GetQuipOk returns a tuple with the Quip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetQuipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quip.Get(), o.Quip.IsSet()
}

// HasQuip returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasQuip() bool {
	if o != nil && o.Quip.IsSet() {
		return true
	}

	return false
}

// SetQuip gets a reference to the given NullableString and assigns it to the Quip field.
func (o *AbilityDescriptionV2) SetQuip(v string) {
	o.Quip.Set(&v)
}
// SetQuipNil sets the value for Quip to be an explicit nil
func (o *AbilityDescriptionV2) SetQuipNil() {
	o.Quip.Set(nil)
}

// UnsetQuip ensures that no value is present for Quip, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetQuip() {
	o.Quip.Unset()
}

// GetT1Desc returns the T1Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetT1Desc() string {
	if o == nil || IsNil(o.T1Desc.Get()) {
		var ret string
		return ret
	}
	return *o.T1Desc.Get()
}

// GetT1DescOk returns a tuple with the T1Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetT1DescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.T1Desc.Get(), o.T1Desc.IsSet()
}

// HasT1Desc returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasT1Desc() bool {
	if o != nil && o.T1Desc.IsSet() {
		return true
	}

	return false
}

// SetT1Desc gets a reference to the given NullableString and assigns it to the T1Desc field.
func (o *AbilityDescriptionV2) SetT1Desc(v string) {
	o.T1Desc.Set(&v)
}
// SetT1DescNil sets the value for T1Desc to be an explicit nil
func (o *AbilityDescriptionV2) SetT1DescNil() {
	o.T1Desc.Set(nil)
}

// UnsetT1Desc ensures that no value is present for T1Desc, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetT1Desc() {
	o.T1Desc.Unset()
}

// GetT2Desc returns the T2Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetT2Desc() string {
	if o == nil || IsNil(o.T2Desc.Get()) {
		var ret string
		return ret
	}
	return *o.T2Desc.Get()
}

// GetT2DescOk returns a tuple with the T2Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetT2DescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.T2Desc.Get(), o.T2Desc.IsSet()
}

// HasT2Desc returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasT2Desc() bool {
	if o != nil && o.T2Desc.IsSet() {
		return true
	}

	return false
}

// SetT2Desc gets a reference to the given NullableString and assigns it to the T2Desc field.
func (o *AbilityDescriptionV2) SetT2Desc(v string) {
	o.T2Desc.Set(&v)
}
// SetT2DescNil sets the value for T2Desc to be an explicit nil
func (o *AbilityDescriptionV2) SetT2DescNil() {
	o.T2Desc.Set(nil)
}

// UnsetT2Desc ensures that no value is present for T2Desc, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetT2Desc() {
	o.T2Desc.Unset()
}

// GetT3Desc returns the T3Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetT3Desc() string {
	if o == nil || IsNil(o.T3Desc.Get()) {
		var ret string
		return ret
	}
	return *o.T3Desc.Get()
}

// GetT3DescOk returns a tuple with the T3Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetT3DescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.T3Desc.Get(), o.T3Desc.IsSet()
}

// HasT3Desc returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasT3Desc() bool {
	if o != nil && o.T3Desc.IsSet() {
		return true
	}

	return false
}

// SetT3Desc gets a reference to the given NullableString and assigns it to the T3Desc field.
func (o *AbilityDescriptionV2) SetT3Desc(v string) {
	o.T3Desc.Set(&v)
}
// SetT3DescNil sets the value for T3Desc to be an explicit nil
func (o *AbilityDescriptionV2) SetT3DescNil() {
	o.T3Desc.Set(nil)
}

// UnsetT3Desc ensures that no value is present for T3Desc, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetT3Desc() {
	o.T3Desc.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetActive() string {
	if o == nil || IsNil(o.Active.Get()) {
		var ret string
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetActiveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableString and assigns it to the Active field.
func (o *AbilityDescriptionV2) SetActive(v string) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *AbilityDescriptionV2) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetActive() {
	o.Active.Unset()
}

// GetPassive returns the Passive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbilityDescriptionV2) GetPassive() string {
	if o == nil || IsNil(o.Passive.Get()) {
		var ret string
		return ret
	}
	return *o.Passive.Get()
}

// GetPassiveOk returns a tuple with the Passive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbilityDescriptionV2) GetPassiveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Passive.Get(), o.Passive.IsSet()
}

// HasPassive returns a boolean if a field has been set.
func (o *AbilityDescriptionV2) HasPassive() bool {
	if o != nil && o.Passive.IsSet() {
		return true
	}

	return false
}

// SetPassive gets a reference to the given NullableString and assigns it to the Passive field.
func (o *AbilityDescriptionV2) SetPassive(v string) {
	o.Passive.Set(&v)
}
// SetPassiveNil sets the value for Passive to be an explicit nil
func (o *AbilityDescriptionV2) SetPassiveNil() {
	o.Passive.Set(nil)
}

// UnsetPassive ensures that no value is present for Passive, not even an explicit nil
func (o *AbilityDescriptionV2) UnsetPassive() {
	o.Passive.Unset()
}

func (o AbilityDescriptionV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbilityDescriptionV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Desc.IsSet() {
		toSerialize["desc"] = o.Desc.Get()
	}
	if o.Quip.IsSet() {
		toSerialize["quip"] = o.Quip.Get()
	}
	if o.T1Desc.IsSet() {
		toSerialize["t1_desc"] = o.T1Desc.Get()
	}
	if o.T2Desc.IsSet() {
		toSerialize["t2_desc"] = o.T2Desc.Get()
	}
	if o.T3Desc.IsSet() {
		toSerialize["t3_desc"] = o.T3Desc.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Passive.IsSet() {
		toSerialize["passive"] = o.Passive.Get()
	}
	return toSerialize, nil
}

type NullableAbilityDescriptionV2 struct {
	value *AbilityDescriptionV2
	isSet bool
}

func (v NullableAbilityDescriptionV2) Get() *AbilityDescriptionV2 {
	return v.value
}

func (v *NullableAbilityDescriptionV2) Set(val *AbilityDescriptionV2) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityDescriptionV2) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityDescriptionV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityDescriptionV2(val *AbilityDescriptionV2) *NullableAbilityDescriptionV2 {
	return &NullableAbilityDescriptionV2{value: val, isSet: true}
}

func (v NullableAbilityDescriptionV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityDescriptionV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


