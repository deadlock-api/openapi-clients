/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ItemsAPIService ItemsAPI service
type ItemsAPIService service

type ApiGetItemV2ItemsIdOrClassNameGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	idOrClassName string
	language *Language
	clientVersion *ValidClientVersions
}

func (r ApiGetItemV2ItemsIdOrClassNameGetRequest) Language(language Language) ApiGetItemV2ItemsIdOrClassNameGetRequest {
	r.language = &language
	return r
}

func (r ApiGetItemV2ItemsIdOrClassNameGetRequest) ClientVersion(clientVersion ValidClientVersions) ApiGetItemV2ItemsIdOrClassNameGetRequest {
	r.clientVersion = &clientVersion
	return r
}

func (r ApiGetItemV2ItemsIdOrClassNameGetRequest) Execute() (*ResponseGetItemV2ItemsIdOrClassNameGet, *http.Response, error) {
	return r.ApiService.GetItemV2ItemsIdOrClassNameGetExecute(r)
}

/*
GetItemV2ItemsIdOrClassNameGet Get Item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param idOrClassName
 @return ApiGetItemV2ItemsIdOrClassNameGetRequest
*/
func (a *ItemsAPIService) GetItemV2ItemsIdOrClassNameGet(ctx context.Context, idOrClassName string) ApiGetItemV2ItemsIdOrClassNameGetRequest {
	return ApiGetItemV2ItemsIdOrClassNameGetRequest{
		ApiService: a,
		ctx: ctx,
		idOrClassName: idOrClassName,
	}
}

// Execute executes the request
//  @return ResponseGetItemV2ItemsIdOrClassNameGet
func (a *ItemsAPIService) GetItemV2ItemsIdOrClassNameGetExecute(r ApiGetItemV2ItemsIdOrClassNameGetRequest) (*ResponseGetItemV2ItemsIdOrClassNameGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseGetItemV2ItemsIdOrClassNameGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetItemV2ItemsIdOrClassNameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/items/{id_or_class_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"id_or_class_name"+"}", url.PathEscape(parameterValueToString(r.idOrClassName, "idOrClassName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.clientVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_version", r.clientVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	id int32
	language *Language
	clientVersion *ValidClientVersions
}

func (r ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest) Language(language Language) ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest {
	r.language = &language
	return r
}

func (r ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest) ClientVersion(clientVersion ValidClientVersions) ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest {
	r.clientVersion = &clientVersion
	return r
}

func (r ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest) Execute() ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	return r.ApiService.GetItemsByHeroIdV2ItemsByHeroIdIdGetExecute(r)
}

/*
GetItemsByHeroIdV2ItemsByHeroIdIdGet Get Items By Hero Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest
*/
func (a *ItemsAPIService) GetItemsByHeroIdV2ItemsByHeroIdIdGet(ctx context.Context, id int32) ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest {
	return ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []GetItemsV2ItemsGet200ResponseInner
func (a *ItemsAPIService) GetItemsByHeroIdV2ItemsByHeroIdIdGetExecute(r ApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest) ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetItemsV2ItemsGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetItemsByHeroIdV2ItemsByHeroIdIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/items/by-hero-id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.clientVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_version", r.clientVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	slotType ItemSlotTypeV2
	language *Language
	clientVersion *ValidClientVersions
}

func (r ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest) Language(language Language) ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest {
	r.language = &language
	return r
}

func (r ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest) ClientVersion(clientVersion ValidClientVersions) ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest {
	r.clientVersion = &clientVersion
	return r
}

func (r ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest) Execute() ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	return r.ApiService.GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetExecute(r)
}

/*
GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet Get Items By Slot Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slotType
 @return ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest
*/
func (a *ItemsAPIService) GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(ctx context.Context, slotType ItemSlotTypeV2) ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest {
	return ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest{
		ApiService: a,
		ctx: ctx,
		slotType: slotType,
	}
}

// Execute executes the request
//  @return []GetItemsV2ItemsGet200ResponseInner
func (a *ItemsAPIService) GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetExecute(r ApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest) ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetItemsV2ItemsGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/items/by-slot-type/{slot_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"slot_type"+"}", url.PathEscape(parameterValueToString(r.slotType, "slotType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.clientVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_version", r.clientVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	type_ ItemTypeV2
	language *Language
	clientVersion *ValidClientVersions
}

func (r ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest) Language(language Language) ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest {
	r.language = &language
	return r
}

func (r ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest) ClientVersion(clientVersion ValidClientVersions) ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest {
	r.clientVersion = &clientVersion
	return r
}

func (r ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest) Execute() ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	return r.ApiService.GetItemsByTypeV2ItemsByTypeTypeGetExecute(r)
}

/*
GetItemsByTypeV2ItemsByTypeTypeGet Get Items By Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_
 @return ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest
*/
func (a *ItemsAPIService) GetItemsByTypeV2ItemsByTypeTypeGet(ctx context.Context, type_ ItemTypeV2) ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest {
	return ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return []GetItemsV2ItemsGet200ResponseInner
func (a *ItemsAPIService) GetItemsByTypeV2ItemsByTypeTypeGetExecute(r ApiGetItemsByTypeV2ItemsByTypeTypeGetRequest) ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetItemsV2ItemsGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetItemsByTypeV2ItemsByTypeTypeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/items/by-type/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.clientVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_version", r.clientVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsV2ItemsGetRequest struct {
	ctx context.Context
	ApiService *ItemsAPIService
	language *Language
	clientVersion *ValidClientVersions
}

func (r ApiGetItemsV2ItemsGetRequest) Language(language Language) ApiGetItemsV2ItemsGetRequest {
	r.language = &language
	return r
}

func (r ApiGetItemsV2ItemsGetRequest) ClientVersion(clientVersion ValidClientVersions) ApiGetItemsV2ItemsGetRequest {
	r.clientVersion = &clientVersion
	return r
}

func (r ApiGetItemsV2ItemsGetRequest) Execute() ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	return r.ApiService.GetItemsV2ItemsGetExecute(r)
}

/*
GetItemsV2ItemsGet Get Items

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetItemsV2ItemsGetRequest
*/
func (a *ItemsAPIService) GetItemsV2ItemsGet(ctx context.Context) ApiGetItemsV2ItemsGetRequest {
	return ApiGetItemsV2ItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetItemsV2ItemsGet200ResponseInner
func (a *ItemsAPIService) GetItemsV2ItemsGetExecute(r ApiGetItemsV2ItemsGetRequest) ([]GetItemsV2ItemsGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetItemsV2ItemsGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetItemsV2ItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.clientVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_version", r.clientVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
