/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// AbilityTypeV2 the model 'AbilityTypeV2'
type AbilityTypeV2 string

// List of AbilityTypeV2
const (
	INNATE AbilityTypeV2 = "innate"
	ITEM AbilityTypeV2 = "item"
	SIGNATURE AbilityTypeV2 = "signature"
	ULTIMATE AbilityTypeV2 = "ultimate"
	WEAPON AbilityTypeV2 = "weapon"
	MELEE AbilityTypeV2 = "melee"
)

// All allowed values of AbilityTypeV2 enum
var AllowedAbilityTypeV2EnumValues = []AbilityTypeV2{
	"innate",
	"item",
	"signature",
	"ultimate",
	"weapon",
	"melee",
}

func (v *AbilityTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AbilityTypeV2(value)
	for _, existing := range AllowedAbilityTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AbilityTypeV2", value)
}

// NewAbilityTypeV2FromValue returns a pointer to a valid AbilityTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAbilityTypeV2FromValue(v string) (*AbilityTypeV2, error) {
	ev := AbilityTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AbilityTypeV2: valid values are %v", v, AllowedAbilityTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AbilityTypeV2) IsValid() bool {
	for _, existing := range AllowedAbilityTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AbilityTypeV2 value
func (v AbilityTypeV2) Ptr() *AbilityTypeV2 {
	return &v
}

type NullableAbilityTypeV2 struct {
	value *AbilityTypeV2
	isSet bool
}

func (v NullableAbilityTypeV2) Get() *AbilityTypeV2 {
	return v.value
}

func (v *NullableAbilityTypeV2) Set(val *AbilityTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityTypeV2(val *AbilityTypeV2) *NullableAbilityTypeV2 {
	return &NullableAbilityTypeV2{value: val, isSet: true}
}

func (v NullableAbilityTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

