/*
Assets - Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assets-deadlock-api-client

import (
	"encoding/json"
)

// checks if the HeroDescriptionV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroDescriptionV2{}

// HeroDescriptionV2 struct for HeroDescriptionV2
type HeroDescriptionV2 struct {
	Lore NullableString `json:"lore,omitempty"`
	Role NullableString `json:"role,omitempty"`
	Playstyle NullableString `json:"playstyle,omitempty"`
}

// NewHeroDescriptionV2 instantiates a new HeroDescriptionV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroDescriptionV2() *HeroDescriptionV2 {
	this := HeroDescriptionV2{}
	return &this
}

// NewHeroDescriptionV2WithDefaults instantiates a new HeroDescriptionV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroDescriptionV2WithDefaults() *HeroDescriptionV2 {
	this := HeroDescriptionV2{}
	return &this
}

// GetLore returns the Lore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroDescriptionV2) GetLore() string {
	if o == nil || IsNil(o.Lore.Get()) {
		var ret string
		return ret
	}
	return *o.Lore.Get()
}

// GetLoreOk returns a tuple with the Lore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroDescriptionV2) GetLoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lore.Get(), o.Lore.IsSet()
}

// HasLore returns a boolean if a field has been set.
func (o *HeroDescriptionV2) HasLore() bool {
	if o != nil && o.Lore.IsSet() {
		return true
	}

	return false
}

// SetLore gets a reference to the given NullableString and assigns it to the Lore field.
func (o *HeroDescriptionV2) SetLore(v string) {
	o.Lore.Set(&v)
}
// SetLoreNil sets the value for Lore to be an explicit nil
func (o *HeroDescriptionV2) SetLoreNil() {
	o.Lore.Set(nil)
}

// UnsetLore ensures that no value is present for Lore, not even an explicit nil
func (o *HeroDescriptionV2) UnsetLore() {
	o.Lore.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroDescriptionV2) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroDescriptionV2) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *HeroDescriptionV2) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *HeroDescriptionV2) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *HeroDescriptionV2) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *HeroDescriptionV2) UnsetRole() {
	o.Role.Unset()
}

// GetPlaystyle returns the Playstyle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeroDescriptionV2) GetPlaystyle() string {
	if o == nil || IsNil(o.Playstyle.Get()) {
		var ret string
		return ret
	}
	return *o.Playstyle.Get()
}

// GetPlaystyleOk returns a tuple with the Playstyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeroDescriptionV2) GetPlaystyleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Playstyle.Get(), o.Playstyle.IsSet()
}

// HasPlaystyle returns a boolean if a field has been set.
func (o *HeroDescriptionV2) HasPlaystyle() bool {
	if o != nil && o.Playstyle.IsSet() {
		return true
	}

	return false
}

// SetPlaystyle gets a reference to the given NullableString and assigns it to the Playstyle field.
func (o *HeroDescriptionV2) SetPlaystyle(v string) {
	o.Playstyle.Set(&v)
}
// SetPlaystyleNil sets the value for Playstyle to be an explicit nil
func (o *HeroDescriptionV2) SetPlaystyleNil() {
	o.Playstyle.Set(nil)
}

// UnsetPlaystyle ensures that no value is present for Playstyle, not even an explicit nil
func (o *HeroDescriptionV2) UnsetPlaystyle() {
	o.Playstyle.Unset()
}

func (o HeroDescriptionV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroDescriptionV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Lore.IsSet() {
		toSerialize["lore"] = o.Lore.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Playstyle.IsSet() {
		toSerialize["playstyle"] = o.Playstyle.Get()
	}
	return toSerialize, nil
}

type NullableHeroDescriptionV2 struct {
	value *HeroDescriptionV2
	isSet bool
}

func (v NullableHeroDescriptionV2) Get() *HeroDescriptionV2 {
	return v.value
}

func (v *NullableHeroDescriptionV2) Set(val *HeroDescriptionV2) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroDescriptionV2) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroDescriptionV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroDescriptionV2(val *HeroDescriptionV2) *NullableHeroDescriptionV2 {
	return &NullableHeroDescriptionV2{value: val, isSet: true}
}

func (v NullableHeroDescriptionV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroDescriptionV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


