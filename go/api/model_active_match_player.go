/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
)

// checks if the ActiveMatchPlayer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveMatchPlayer{}

// ActiveMatchPlayer struct for ActiveMatchPlayer
type ActiveMatchPlayer struct {
	Abandoned NullableBool `json:"abandoned,omitempty"`
	AccountId NullableInt32 `json:"account_id,omitempty"`
	// See more: <https://assets.deadlock-api.com/v2/heroes>
	HeroId NullableInt32 `json:"hero_id,omitempty"`
	Team NullableInt32 `json:"team,omitempty"`
	TeamParsed NullableActiveMatchTeam `json:"team_parsed,omitempty"`
}

// NewActiveMatchPlayer instantiates a new ActiveMatchPlayer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveMatchPlayer() *ActiveMatchPlayer {
	this := ActiveMatchPlayer{}
	return &this
}

// NewActiveMatchPlayerWithDefaults instantiates a new ActiveMatchPlayer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveMatchPlayerWithDefaults() *ActiveMatchPlayer {
	this := ActiveMatchPlayer{}
	return &this
}

// GetAbandoned returns the Abandoned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatchPlayer) GetAbandoned() bool {
	if o == nil || IsNil(o.Abandoned.Get()) {
		var ret bool
		return ret
	}
	return *o.Abandoned.Get()
}

// GetAbandonedOk returns a tuple with the Abandoned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatchPlayer) GetAbandonedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Abandoned.Get(), o.Abandoned.IsSet()
}

// HasAbandoned returns a boolean if a field has been set.
func (o *ActiveMatchPlayer) HasAbandoned() bool {
	if o != nil && o.Abandoned.IsSet() {
		return true
	}

	return false
}

// SetAbandoned gets a reference to the given NullableBool and assigns it to the Abandoned field.
func (o *ActiveMatchPlayer) SetAbandoned(v bool) {
	o.Abandoned.Set(&v)
}
// SetAbandonedNil sets the value for Abandoned to be an explicit nil
func (o *ActiveMatchPlayer) SetAbandonedNil() {
	o.Abandoned.Set(nil)
}

// UnsetAbandoned ensures that no value is present for Abandoned, not even an explicit nil
func (o *ActiveMatchPlayer) UnsetAbandoned() {
	o.Abandoned.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatchPlayer) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret int32
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatchPlayer) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *ActiveMatchPlayer) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableInt32 and assigns it to the AccountId field.
func (o *ActiveMatchPlayer) SetAccountId(v int32) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *ActiveMatchPlayer) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *ActiveMatchPlayer) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetHeroId returns the HeroId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatchPlayer) GetHeroId() int32 {
	if o == nil || IsNil(o.HeroId.Get()) {
		var ret int32
		return ret
	}
	return *o.HeroId.Get()
}

// GetHeroIdOk returns a tuple with the HeroId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatchPlayer) GetHeroIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeroId.Get(), o.HeroId.IsSet()
}

// HasHeroId returns a boolean if a field has been set.
func (o *ActiveMatchPlayer) HasHeroId() bool {
	if o != nil && o.HeroId.IsSet() {
		return true
	}

	return false
}

// SetHeroId gets a reference to the given NullableInt32 and assigns it to the HeroId field.
func (o *ActiveMatchPlayer) SetHeroId(v int32) {
	o.HeroId.Set(&v)
}
// SetHeroIdNil sets the value for HeroId to be an explicit nil
func (o *ActiveMatchPlayer) SetHeroIdNil() {
	o.HeroId.Set(nil)
}

// UnsetHeroId ensures that no value is present for HeroId, not even an explicit nil
func (o *ActiveMatchPlayer) UnsetHeroId() {
	o.HeroId.Unset()
}

// GetTeam returns the Team field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatchPlayer) GetTeam() int32 {
	if o == nil || IsNil(o.Team.Get()) {
		var ret int32
		return ret
	}
	return *o.Team.Get()
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatchPlayer) GetTeamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team.Get(), o.Team.IsSet()
}

// HasTeam returns a boolean if a field has been set.
func (o *ActiveMatchPlayer) HasTeam() bool {
	if o != nil && o.Team.IsSet() {
		return true
	}

	return false
}

// SetTeam gets a reference to the given NullableInt32 and assigns it to the Team field.
func (o *ActiveMatchPlayer) SetTeam(v int32) {
	o.Team.Set(&v)
}
// SetTeamNil sets the value for Team to be an explicit nil
func (o *ActiveMatchPlayer) SetTeamNil() {
	o.Team.Set(nil)
}

// UnsetTeam ensures that no value is present for Team, not even an explicit nil
func (o *ActiveMatchPlayer) UnsetTeam() {
	o.Team.Unset()
}

// GetTeamParsed returns the TeamParsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatchPlayer) GetTeamParsed() ActiveMatchTeam {
	if o == nil || IsNil(o.TeamParsed.Get()) {
		var ret ActiveMatchTeam
		return ret
	}
	return *o.TeamParsed.Get()
}

// GetTeamParsedOk returns a tuple with the TeamParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatchPlayer) GetTeamParsedOk() (*ActiveMatchTeam, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamParsed.Get(), o.TeamParsed.IsSet()
}

// HasTeamParsed returns a boolean if a field has been set.
func (o *ActiveMatchPlayer) HasTeamParsed() bool {
	if o != nil && o.TeamParsed.IsSet() {
		return true
	}

	return false
}

// SetTeamParsed gets a reference to the given NullableActiveMatchTeam and assigns it to the TeamParsed field.
func (o *ActiveMatchPlayer) SetTeamParsed(v ActiveMatchTeam) {
	o.TeamParsed.Set(&v)
}
// SetTeamParsedNil sets the value for TeamParsed to be an explicit nil
func (o *ActiveMatchPlayer) SetTeamParsedNil() {
	o.TeamParsed.Set(nil)
}

// UnsetTeamParsed ensures that no value is present for TeamParsed, not even an explicit nil
func (o *ActiveMatchPlayer) UnsetTeamParsed() {
	o.TeamParsed.Unset()
}

func (o ActiveMatchPlayer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveMatchPlayer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Abandoned.IsSet() {
		toSerialize["abandoned"] = o.Abandoned.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	if o.HeroId.IsSet() {
		toSerialize["hero_id"] = o.HeroId.Get()
	}
	if o.Team.IsSet() {
		toSerialize["team"] = o.Team.Get()
	}
	if o.TeamParsed.IsSet() {
		toSerialize["team_parsed"] = o.TeamParsed.Get()
	}
	return toSerialize, nil
}

type NullableActiveMatchPlayer struct {
	value *ActiveMatchPlayer
	isSet bool
}

func (v NullableActiveMatchPlayer) Get() *ActiveMatchPlayer {
	return v.value
}

func (v *NullableActiveMatchPlayer) Set(val *ActiveMatchPlayer) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveMatchPlayer) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveMatchPlayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveMatchPlayer(val *ActiveMatchPlayer) *NullableActiveMatchPlayer {
	return &NullableActiveMatchPlayer{value: val, isSet: true}
}

func (v NullableActiveMatchPlayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveMatchPlayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


