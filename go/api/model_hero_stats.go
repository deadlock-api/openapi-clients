/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroStats{}

// HeroStats struct for HeroStats
type HeroStats struct {
	AccountId int32 `json:"account_id"`
	Accuracy float64 `json:"accuracy"`
	Assists int64 `json:"assists"`
	AssistsPerMin float64 `json:"assists_per_min"`
	CreepsPerMin float64 `json:"creeps_per_min"`
	CritShotRate float64 `json:"crit_shot_rate"`
	// Deprecated
	DamageMitigatedPerMin float64 `json:"damage_mitigated_per_min"`
	DamagePerMin float64 `json:"damage_per_min"`
	DamagePerSoul float64 `json:"damage_per_soul"`
	DamageTakenPerMin float64 `json:"damage_taken_per_min"`
	DamageTakenPerSoul float64 `json:"damage_taken_per_soul"`
	Deaths int64 `json:"deaths"`
	DeathsPerMin float64 `json:"deaths_per_min"`
	DeniesPerMatch float64 `json:"denies_per_match"`
	DeniesPerMin float64 `json:"denies_per_min"`
	EndingLevel float64 `json:"ending_level"`
	// See more: <https://assets.deadlock-api.com/v2/heroes>
	HeroId int32 `json:"hero_id"`
	Kills int64 `json:"kills"`
	KillsPerMin float64 `json:"kills_per_min"`
	LastHitsPerMin float64 `json:"last_hits_per_min"`
	LastPlayed int32 `json:"last_played"`
	Matches []int64 `json:"matches"`
	MatchesPlayed int64 `json:"matches_played"`
	NetworthPerMin float64 `json:"networth_per_min"`
	ObjDamagePerMin float64 `json:"obj_damage_per_min"`
	ObjDamagePerSoul float64 `json:"obj_damage_per_soul"`
	TimePlayed int64 `json:"time_played"`
	Wins int64 `json:"wins"`
}

type _HeroStats HeroStats

// NewHeroStats instantiates a new HeroStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroStats(accountId int32, accuracy float64, assists int64, assistsPerMin float64, creepsPerMin float64, critShotRate float64, damageMitigatedPerMin float64, damagePerMin float64, damagePerSoul float64, damageTakenPerMin float64, damageTakenPerSoul float64, deaths int64, deathsPerMin float64, deniesPerMatch float64, deniesPerMin float64, endingLevel float64, heroId int32, kills int64, killsPerMin float64, lastHitsPerMin float64, lastPlayed int32, matches []int64, matchesPlayed int64, networthPerMin float64, objDamagePerMin float64, objDamagePerSoul float64, timePlayed int64, wins int64) *HeroStats {
	this := HeroStats{}
	this.AccountId = accountId
	this.Accuracy = accuracy
	this.Assists = assists
	this.AssistsPerMin = assistsPerMin
	this.CreepsPerMin = creepsPerMin
	this.CritShotRate = critShotRate
	this.DamageMitigatedPerMin = damageMitigatedPerMin
	this.DamagePerMin = damagePerMin
	this.DamagePerSoul = damagePerSoul
	this.DamageTakenPerMin = damageTakenPerMin
	this.DamageTakenPerSoul = damageTakenPerSoul
	this.Deaths = deaths
	this.DeathsPerMin = deathsPerMin
	this.DeniesPerMatch = deniesPerMatch
	this.DeniesPerMin = deniesPerMin
	this.EndingLevel = endingLevel
	this.HeroId = heroId
	this.Kills = kills
	this.KillsPerMin = killsPerMin
	this.LastHitsPerMin = lastHitsPerMin
	this.LastPlayed = lastPlayed
	this.Matches = matches
	this.MatchesPlayed = matchesPlayed
	this.NetworthPerMin = networthPerMin
	this.ObjDamagePerMin = objDamagePerMin
	this.ObjDamagePerSoul = objDamagePerSoul
	this.TimePlayed = timePlayed
	this.Wins = wins
	return &this
}

// NewHeroStatsWithDefaults instantiates a new HeroStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroStatsWithDefaults() *HeroStats {
	this := HeroStats{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *HeroStats) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *HeroStats) SetAccountId(v int32) {
	o.AccountId = v
}

// GetAccuracy returns the Accuracy field value
func (o *HeroStats) GetAccuracy() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Accuracy
}

// GetAccuracyOk returns a tuple with the Accuracy field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetAccuracyOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Accuracy, true
}

// SetAccuracy sets field value
func (o *HeroStats) SetAccuracy(v float64) {
	o.Accuracy = v
}

// GetAssists returns the Assists field value
func (o *HeroStats) GetAssists() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Assists
}

// GetAssistsOk returns a tuple with the Assists field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetAssistsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assists, true
}

// SetAssists sets field value
func (o *HeroStats) SetAssists(v int64) {
	o.Assists = v
}

// GetAssistsPerMin returns the AssistsPerMin field value
func (o *HeroStats) GetAssistsPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AssistsPerMin
}

// GetAssistsPerMinOk returns a tuple with the AssistsPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetAssistsPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistsPerMin, true
}

// SetAssistsPerMin sets field value
func (o *HeroStats) SetAssistsPerMin(v float64) {
	o.AssistsPerMin = v
}

// GetCreepsPerMin returns the CreepsPerMin field value
func (o *HeroStats) GetCreepsPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CreepsPerMin
}

// GetCreepsPerMinOk returns a tuple with the CreepsPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetCreepsPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreepsPerMin, true
}

// SetCreepsPerMin sets field value
func (o *HeroStats) SetCreepsPerMin(v float64) {
	o.CreepsPerMin = v
}

// GetCritShotRate returns the CritShotRate field value
func (o *HeroStats) GetCritShotRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CritShotRate
}

// GetCritShotRateOk returns a tuple with the CritShotRate field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetCritShotRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CritShotRate, true
}

// SetCritShotRate sets field value
func (o *HeroStats) SetCritShotRate(v float64) {
	o.CritShotRate = v
}

// GetDamageMitigatedPerMin returns the DamageMitigatedPerMin field value
// Deprecated
func (o *HeroStats) GetDamageMitigatedPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DamageMitigatedPerMin
}

// GetDamageMitigatedPerMinOk returns a tuple with the DamageMitigatedPerMin field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *HeroStats) GetDamageMitigatedPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DamageMitigatedPerMin, true
}

// SetDamageMitigatedPerMin sets field value
// Deprecated
func (o *HeroStats) SetDamageMitigatedPerMin(v float64) {
	o.DamageMitigatedPerMin = v
}

// GetDamagePerMin returns the DamagePerMin field value
func (o *HeroStats) GetDamagePerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DamagePerMin
}

// GetDamagePerMinOk returns a tuple with the DamagePerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDamagePerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DamagePerMin, true
}

// SetDamagePerMin sets field value
func (o *HeroStats) SetDamagePerMin(v float64) {
	o.DamagePerMin = v
}

// GetDamagePerSoul returns the DamagePerSoul field value
func (o *HeroStats) GetDamagePerSoul() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DamagePerSoul
}

// GetDamagePerSoulOk returns a tuple with the DamagePerSoul field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDamagePerSoulOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DamagePerSoul, true
}

// SetDamagePerSoul sets field value
func (o *HeroStats) SetDamagePerSoul(v float64) {
	o.DamagePerSoul = v
}

// GetDamageTakenPerMin returns the DamageTakenPerMin field value
func (o *HeroStats) GetDamageTakenPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DamageTakenPerMin
}

// GetDamageTakenPerMinOk returns a tuple with the DamageTakenPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDamageTakenPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DamageTakenPerMin, true
}

// SetDamageTakenPerMin sets field value
func (o *HeroStats) SetDamageTakenPerMin(v float64) {
	o.DamageTakenPerMin = v
}

// GetDamageTakenPerSoul returns the DamageTakenPerSoul field value
func (o *HeroStats) GetDamageTakenPerSoul() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DamageTakenPerSoul
}

// GetDamageTakenPerSoulOk returns a tuple with the DamageTakenPerSoul field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDamageTakenPerSoulOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DamageTakenPerSoul, true
}

// SetDamageTakenPerSoul sets field value
func (o *HeroStats) SetDamageTakenPerSoul(v float64) {
	o.DamageTakenPerSoul = v
}

// GetDeaths returns the Deaths field value
func (o *HeroStats) GetDeaths() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deaths
}

// GetDeathsOk returns a tuple with the Deaths field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDeathsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deaths, true
}

// SetDeaths sets field value
func (o *HeroStats) SetDeaths(v int64) {
	o.Deaths = v
}

// GetDeathsPerMin returns the DeathsPerMin field value
func (o *HeroStats) GetDeathsPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DeathsPerMin
}

// GetDeathsPerMinOk returns a tuple with the DeathsPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDeathsPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeathsPerMin, true
}

// SetDeathsPerMin sets field value
func (o *HeroStats) SetDeathsPerMin(v float64) {
	o.DeathsPerMin = v
}

// GetDeniesPerMatch returns the DeniesPerMatch field value
func (o *HeroStats) GetDeniesPerMatch() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DeniesPerMatch
}

// GetDeniesPerMatchOk returns a tuple with the DeniesPerMatch field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDeniesPerMatchOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeniesPerMatch, true
}

// SetDeniesPerMatch sets field value
func (o *HeroStats) SetDeniesPerMatch(v float64) {
	o.DeniesPerMatch = v
}

// GetDeniesPerMin returns the DeniesPerMin field value
func (o *HeroStats) GetDeniesPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DeniesPerMin
}

// GetDeniesPerMinOk returns a tuple with the DeniesPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetDeniesPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeniesPerMin, true
}

// SetDeniesPerMin sets field value
func (o *HeroStats) SetDeniesPerMin(v float64) {
	o.DeniesPerMin = v
}

// GetEndingLevel returns the EndingLevel field value
func (o *HeroStats) GetEndingLevel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.EndingLevel
}

// GetEndingLevelOk returns a tuple with the EndingLevel field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetEndingLevelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndingLevel, true
}

// SetEndingLevel sets field value
func (o *HeroStats) SetEndingLevel(v float64) {
	o.EndingLevel = v
}

// GetHeroId returns the HeroId field value
func (o *HeroStats) GetHeroId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetHeroIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroId, true
}

// SetHeroId sets field value
func (o *HeroStats) SetHeroId(v int32) {
	o.HeroId = v
}

// GetKills returns the Kills field value
func (o *HeroStats) GetKills() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Kills
}

// GetKillsOk returns a tuple with the Kills field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetKillsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kills, true
}

// SetKills sets field value
func (o *HeroStats) SetKills(v int64) {
	o.Kills = v
}

// GetKillsPerMin returns the KillsPerMin field value
func (o *HeroStats) GetKillsPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.KillsPerMin
}

// GetKillsPerMinOk returns a tuple with the KillsPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetKillsPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KillsPerMin, true
}

// SetKillsPerMin sets field value
func (o *HeroStats) SetKillsPerMin(v float64) {
	o.KillsPerMin = v
}

// GetLastHitsPerMin returns the LastHitsPerMin field value
func (o *HeroStats) GetLastHitsPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.LastHitsPerMin
}

// GetLastHitsPerMinOk returns a tuple with the LastHitsPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetLastHitsPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHitsPerMin, true
}

// SetLastHitsPerMin sets field value
func (o *HeroStats) SetLastHitsPerMin(v float64) {
	o.LastHitsPerMin = v
}

// GetLastPlayed returns the LastPlayed field value
func (o *HeroStats) GetLastPlayed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastPlayed
}

// GetLastPlayedOk returns a tuple with the LastPlayed field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetLastPlayedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastPlayed, true
}

// SetLastPlayed sets field value
func (o *HeroStats) SetLastPlayed(v int32) {
	o.LastPlayed = v
}

// GetMatches returns the Matches field value
func (o *HeroStats) GetMatches() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetMatchesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matches, true
}

// SetMatches sets field value
func (o *HeroStats) SetMatches(v []int64) {
	o.Matches = v
}

// GetMatchesPlayed returns the MatchesPlayed field value
func (o *HeroStats) GetMatchesPlayed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchesPlayed
}

// GetMatchesPlayedOk returns a tuple with the MatchesPlayed field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetMatchesPlayedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchesPlayed, true
}

// SetMatchesPlayed sets field value
func (o *HeroStats) SetMatchesPlayed(v int64) {
	o.MatchesPlayed = v
}

// GetNetworthPerMin returns the NetworthPerMin field value
func (o *HeroStats) GetNetworthPerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NetworthPerMin
}

// GetNetworthPerMinOk returns a tuple with the NetworthPerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetNetworthPerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworthPerMin, true
}

// SetNetworthPerMin sets field value
func (o *HeroStats) SetNetworthPerMin(v float64) {
	o.NetworthPerMin = v
}

// GetObjDamagePerMin returns the ObjDamagePerMin field value
func (o *HeroStats) GetObjDamagePerMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ObjDamagePerMin
}

// GetObjDamagePerMinOk returns a tuple with the ObjDamagePerMin field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetObjDamagePerMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjDamagePerMin, true
}

// SetObjDamagePerMin sets field value
func (o *HeroStats) SetObjDamagePerMin(v float64) {
	o.ObjDamagePerMin = v
}

// GetObjDamagePerSoul returns the ObjDamagePerSoul field value
func (o *HeroStats) GetObjDamagePerSoul() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ObjDamagePerSoul
}

// GetObjDamagePerSoulOk returns a tuple with the ObjDamagePerSoul field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetObjDamagePerSoulOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjDamagePerSoul, true
}

// SetObjDamagePerSoul sets field value
func (o *HeroStats) SetObjDamagePerSoul(v float64) {
	o.ObjDamagePerSoul = v
}

// GetTimePlayed returns the TimePlayed field value
func (o *HeroStats) GetTimePlayed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimePlayed
}

// GetTimePlayedOk returns a tuple with the TimePlayed field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetTimePlayedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimePlayed, true
}

// SetTimePlayed sets field value
func (o *HeroStats) SetTimePlayed(v int64) {
	o.TimePlayed = v
}

// GetWins returns the Wins field value
func (o *HeroStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *HeroStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *HeroStats) SetWins(v int64) {
	o.Wins = v
}

func (o HeroStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["accuracy"] = o.Accuracy
	toSerialize["assists"] = o.Assists
	toSerialize["assists_per_min"] = o.AssistsPerMin
	toSerialize["creeps_per_min"] = o.CreepsPerMin
	toSerialize["crit_shot_rate"] = o.CritShotRate
	toSerialize["damage_mitigated_per_min"] = o.DamageMitigatedPerMin
	toSerialize["damage_per_min"] = o.DamagePerMin
	toSerialize["damage_per_soul"] = o.DamagePerSoul
	toSerialize["damage_taken_per_min"] = o.DamageTakenPerMin
	toSerialize["damage_taken_per_soul"] = o.DamageTakenPerSoul
	toSerialize["deaths"] = o.Deaths
	toSerialize["deaths_per_min"] = o.DeathsPerMin
	toSerialize["denies_per_match"] = o.DeniesPerMatch
	toSerialize["denies_per_min"] = o.DeniesPerMin
	toSerialize["ending_level"] = o.EndingLevel
	toSerialize["hero_id"] = o.HeroId
	toSerialize["kills"] = o.Kills
	toSerialize["kills_per_min"] = o.KillsPerMin
	toSerialize["last_hits_per_min"] = o.LastHitsPerMin
	toSerialize["last_played"] = o.LastPlayed
	toSerialize["matches"] = o.Matches
	toSerialize["matches_played"] = o.MatchesPlayed
	toSerialize["networth_per_min"] = o.NetworthPerMin
	toSerialize["obj_damage_per_min"] = o.ObjDamagePerMin
	toSerialize["obj_damage_per_soul"] = o.ObjDamagePerSoul
	toSerialize["time_played"] = o.TimePlayed
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *HeroStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"accuracy",
		"assists",
		"assists_per_min",
		"creeps_per_min",
		"crit_shot_rate",
		"damage_mitigated_per_min",
		"damage_per_min",
		"damage_per_soul",
		"damage_taken_per_min",
		"damage_taken_per_soul",
		"deaths",
		"deaths_per_min",
		"denies_per_match",
		"denies_per_min",
		"ending_level",
		"hero_id",
		"kills",
		"kills_per_min",
		"last_hits_per_min",
		"last_played",
		"matches",
		"matches_played",
		"networth_per_min",
		"obj_damage_per_min",
		"obj_damage_per_soul",
		"time_played",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroStats := _HeroStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroStats)

	if err != nil {
		return err
	}

	*o = HeroStats(varHeroStats)

	return err
}

type NullableHeroStats struct {
	value *HeroStats
	isSet bool
}

func (v NullableHeroStats) Get() *HeroStats {
	return v.value
}

func (v *NullableHeroStats) Set(val *HeroStats) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroStats) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroStats(val *HeroStats) *NullableHeroStats {
	return &NullableHeroStats{value: val, isSet: true}
}

func (v NullableHeroStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


