/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
)

// checks if the PlayerCardSlotHero type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerCardSlotHero{}

// PlayerCardSlotHero struct for PlayerCardSlotHero
type PlayerCardSlotHero struct {
	// See more: <https://assets.deadlock-api.com/v2/heroes>
	Id NullableInt32 `json:"id,omitempty"`
	Kills NullableInt32 `json:"kills,omitempty"`
	Wins NullableInt32 `json:"wins,omitempty"`
}

// NewPlayerCardSlotHero instantiates a new PlayerCardSlotHero object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerCardSlotHero() *PlayerCardSlotHero {
	this := PlayerCardSlotHero{}
	return &this
}

// NewPlayerCardSlotHeroWithDefaults instantiates a new PlayerCardSlotHero object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerCardSlotHeroWithDefaults() *PlayerCardSlotHero {
	this := PlayerCardSlotHero{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlotHero) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlotHero) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PlayerCardSlotHero) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *PlayerCardSlotHero) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PlayerCardSlotHero) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PlayerCardSlotHero) UnsetId() {
	o.Id.Unset()
}

// GetKills returns the Kills field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlotHero) GetKills() int32 {
	if o == nil || IsNil(o.Kills.Get()) {
		var ret int32
		return ret
	}
	return *o.Kills.Get()
}

// GetKillsOk returns a tuple with the Kills field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlotHero) GetKillsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kills.Get(), o.Kills.IsSet()
}

// HasKills returns a boolean if a field has been set.
func (o *PlayerCardSlotHero) HasKills() bool {
	if o != nil && o.Kills.IsSet() {
		return true
	}

	return false
}

// SetKills gets a reference to the given NullableInt32 and assigns it to the Kills field.
func (o *PlayerCardSlotHero) SetKills(v int32) {
	o.Kills.Set(&v)
}
// SetKillsNil sets the value for Kills to be an explicit nil
func (o *PlayerCardSlotHero) SetKillsNil() {
	o.Kills.Set(nil)
}

// UnsetKills ensures that no value is present for Kills, not even an explicit nil
func (o *PlayerCardSlotHero) UnsetKills() {
	o.Kills.Unset()
}

// GetWins returns the Wins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlotHero) GetWins() int32 {
	if o == nil || IsNil(o.Wins.Get()) {
		var ret int32
		return ret
	}
	return *o.Wins.Get()
}

// GetWinsOk returns a tuple with the Wins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlotHero) GetWinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wins.Get(), o.Wins.IsSet()
}

// HasWins returns a boolean if a field has been set.
func (o *PlayerCardSlotHero) HasWins() bool {
	if o != nil && o.Wins.IsSet() {
		return true
	}

	return false
}

// SetWins gets a reference to the given NullableInt32 and assigns it to the Wins field.
func (o *PlayerCardSlotHero) SetWins(v int32) {
	o.Wins.Set(&v)
}
// SetWinsNil sets the value for Wins to be an explicit nil
func (o *PlayerCardSlotHero) SetWinsNil() {
	o.Wins.Set(nil)
}

// UnsetWins ensures that no value is present for Wins, not even an explicit nil
func (o *PlayerCardSlotHero) UnsetWins() {
	o.Wins.Unset()
}

func (o PlayerCardSlotHero) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerCardSlotHero) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Kills.IsSet() {
		toSerialize["kills"] = o.Kills.Get()
	}
	if o.Wins.IsSet() {
		toSerialize["wins"] = o.Wins.Get()
	}
	return toSerialize, nil
}

type NullablePlayerCardSlotHero struct {
	value *PlayerCardSlotHero
	isSet bool
}

func (v NullablePlayerCardSlotHero) Get() *PlayerCardSlotHero {
	return v.value
}

func (v *NullablePlayerCardSlotHero) Set(val *PlayerCardSlotHero) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerCardSlotHero) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerCardSlotHero) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerCardSlotHero(val *PlayerCardSlotHero) *NullablePlayerCardSlotHero {
	return &NullablePlayerCardSlotHero{value: val, isSet: true}
}

func (v NullablePlayerCardSlotHero) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerCardSlotHero) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


