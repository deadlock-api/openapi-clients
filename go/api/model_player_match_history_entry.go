/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlayerMatchHistoryEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerMatchHistoryEntry{}

// PlayerMatchHistoryEntry struct for PlayerMatchHistoryEntry
type PlayerMatchHistoryEntry struct {
	AbandonedTimeS NullableInt32 `json:"abandoned_time_s,omitempty"`
	AccountId int32 `json:"account_id"`
	Denies int32 `json:"denies"`
	GameMode int32 `json:"game_mode"`
	// See more: <https://assets.deadlock-api.com/v2/heroes>
	HeroId int32 `json:"hero_id"`
	HeroLevel int32 `json:"hero_level"`
	LastHits int32 `json:"last_hits"`
	MatchDurationS int32 `json:"match_duration_s"`
	MatchId int64 `json:"match_id"`
	MatchMode int32 `json:"match_mode"`
	MatchResult int32 `json:"match_result"`
	NetWorth int32 `json:"net_worth"`
	ObjectivesMaskTeam0 int32 `json:"objectives_mask_team0"`
	ObjectivesMaskTeam1 int32 `json:"objectives_mask_team1"`
	PlayerAssists int32 `json:"player_assists"`
	PlayerDeaths int32 `json:"player_deaths"`
	PlayerKills int32 `json:"player_kills"`
	PlayerTeam int32 `json:"player_team"`
	StartTime int32 `json:"start_time"`
	TeamAbandoned NullableBool `json:"team_abandoned,omitempty"`
}

type _PlayerMatchHistoryEntry PlayerMatchHistoryEntry

// NewPlayerMatchHistoryEntry instantiates a new PlayerMatchHistoryEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerMatchHistoryEntry(accountId int32, denies int32, gameMode int32, heroId int32, heroLevel int32, lastHits int32, matchDurationS int32, matchId int64, matchMode int32, matchResult int32, netWorth int32, objectivesMaskTeam0 int32, objectivesMaskTeam1 int32, playerAssists int32, playerDeaths int32, playerKills int32, playerTeam int32, startTime int32) *PlayerMatchHistoryEntry {
	this := PlayerMatchHistoryEntry{}
	this.AccountId = accountId
	this.Denies = denies
	this.GameMode = gameMode
	this.HeroId = heroId
	this.HeroLevel = heroLevel
	this.LastHits = lastHits
	this.MatchDurationS = matchDurationS
	this.MatchId = matchId
	this.MatchMode = matchMode
	this.MatchResult = matchResult
	this.NetWorth = netWorth
	this.ObjectivesMaskTeam0 = objectivesMaskTeam0
	this.ObjectivesMaskTeam1 = objectivesMaskTeam1
	this.PlayerAssists = playerAssists
	this.PlayerDeaths = playerDeaths
	this.PlayerKills = playerKills
	this.PlayerTeam = playerTeam
	this.StartTime = startTime
	return &this
}

// NewPlayerMatchHistoryEntryWithDefaults instantiates a new PlayerMatchHistoryEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerMatchHistoryEntryWithDefaults() *PlayerMatchHistoryEntry {
	this := PlayerMatchHistoryEntry{}
	return &this
}

// GetAbandonedTimeS returns the AbandonedTimeS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerMatchHistoryEntry) GetAbandonedTimeS() int32 {
	if o == nil || IsNil(o.AbandonedTimeS.Get()) {
		var ret int32
		return ret
	}
	return *o.AbandonedTimeS.Get()
}

// GetAbandonedTimeSOk returns a tuple with the AbandonedTimeS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerMatchHistoryEntry) GetAbandonedTimeSOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AbandonedTimeS.Get(), o.AbandonedTimeS.IsSet()
}

// HasAbandonedTimeS returns a boolean if a field has been set.
func (o *PlayerMatchHistoryEntry) HasAbandonedTimeS() bool {
	if o != nil && o.AbandonedTimeS.IsSet() {
		return true
	}

	return false
}

// SetAbandonedTimeS gets a reference to the given NullableInt32 and assigns it to the AbandonedTimeS field.
func (o *PlayerMatchHistoryEntry) SetAbandonedTimeS(v int32) {
	o.AbandonedTimeS.Set(&v)
}
// SetAbandonedTimeSNil sets the value for AbandonedTimeS to be an explicit nil
func (o *PlayerMatchHistoryEntry) SetAbandonedTimeSNil() {
	o.AbandonedTimeS.Set(nil)
}

// UnsetAbandonedTimeS ensures that no value is present for AbandonedTimeS, not even an explicit nil
func (o *PlayerMatchHistoryEntry) UnsetAbandonedTimeS() {
	o.AbandonedTimeS.Unset()
}

// GetAccountId returns the AccountId field value
func (o *PlayerMatchHistoryEntry) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *PlayerMatchHistoryEntry) SetAccountId(v int32) {
	o.AccountId = v
}

// GetDenies returns the Denies field value
func (o *PlayerMatchHistoryEntry) GetDenies() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Denies
}

// GetDeniesOk returns a tuple with the Denies field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetDeniesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Denies, true
}

// SetDenies sets field value
func (o *PlayerMatchHistoryEntry) SetDenies(v int32) {
	o.Denies = v
}

// GetGameMode returns the GameMode field value
func (o *PlayerMatchHistoryEntry) GetGameMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GameMode
}

// GetGameModeOk returns a tuple with the GameMode field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetGameModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameMode, true
}

// SetGameMode sets field value
func (o *PlayerMatchHistoryEntry) SetGameMode(v int32) {
	o.GameMode = v
}

// GetHeroId returns the HeroId field value
func (o *PlayerMatchHistoryEntry) GetHeroId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetHeroIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroId, true
}

// SetHeroId sets field value
func (o *PlayerMatchHistoryEntry) SetHeroId(v int32) {
	o.HeroId = v
}

// GetHeroLevel returns the HeroLevel field value
func (o *PlayerMatchHistoryEntry) GetHeroLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroLevel
}

// GetHeroLevelOk returns a tuple with the HeroLevel field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetHeroLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroLevel, true
}

// SetHeroLevel sets field value
func (o *PlayerMatchHistoryEntry) SetHeroLevel(v int32) {
	o.HeroLevel = v
}

// GetLastHits returns the LastHits field value
func (o *PlayerMatchHistoryEntry) GetLastHits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastHits
}

// GetLastHitsOk returns a tuple with the LastHits field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetLastHitsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHits, true
}

// SetLastHits sets field value
func (o *PlayerMatchHistoryEntry) SetLastHits(v int32) {
	o.LastHits = v
}

// GetMatchDurationS returns the MatchDurationS field value
func (o *PlayerMatchHistoryEntry) GetMatchDurationS() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MatchDurationS
}

// GetMatchDurationSOk returns a tuple with the MatchDurationS field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetMatchDurationSOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchDurationS, true
}

// SetMatchDurationS sets field value
func (o *PlayerMatchHistoryEntry) SetMatchDurationS(v int32) {
	o.MatchDurationS = v
}

// GetMatchId returns the MatchId field value
func (o *PlayerMatchHistoryEntry) GetMatchId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetMatchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *PlayerMatchHistoryEntry) SetMatchId(v int64) {
	o.MatchId = v
}

// GetMatchMode returns the MatchMode field value
func (o *PlayerMatchHistoryEntry) GetMatchMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MatchMode
}

// GetMatchModeOk returns a tuple with the MatchMode field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetMatchModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchMode, true
}

// SetMatchMode sets field value
func (o *PlayerMatchHistoryEntry) SetMatchMode(v int32) {
	o.MatchMode = v
}

// GetMatchResult returns the MatchResult field value
func (o *PlayerMatchHistoryEntry) GetMatchResult() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MatchResult
}

// GetMatchResultOk returns a tuple with the MatchResult field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetMatchResultOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchResult, true
}

// SetMatchResult sets field value
func (o *PlayerMatchHistoryEntry) SetMatchResult(v int32) {
	o.MatchResult = v
}

// GetNetWorth returns the NetWorth field value
func (o *PlayerMatchHistoryEntry) GetNetWorth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NetWorth
}

// GetNetWorthOk returns a tuple with the NetWorth field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetNetWorthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetWorth, true
}

// SetNetWorth sets field value
func (o *PlayerMatchHistoryEntry) SetNetWorth(v int32) {
	o.NetWorth = v
}

// GetObjectivesMaskTeam0 returns the ObjectivesMaskTeam0 field value
func (o *PlayerMatchHistoryEntry) GetObjectivesMaskTeam0() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ObjectivesMaskTeam0
}

// GetObjectivesMaskTeam0Ok returns a tuple with the ObjectivesMaskTeam0 field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetObjectivesMaskTeam0Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectivesMaskTeam0, true
}

// SetObjectivesMaskTeam0 sets field value
func (o *PlayerMatchHistoryEntry) SetObjectivesMaskTeam0(v int32) {
	o.ObjectivesMaskTeam0 = v
}

// GetObjectivesMaskTeam1 returns the ObjectivesMaskTeam1 field value
func (o *PlayerMatchHistoryEntry) GetObjectivesMaskTeam1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ObjectivesMaskTeam1
}

// GetObjectivesMaskTeam1Ok returns a tuple with the ObjectivesMaskTeam1 field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetObjectivesMaskTeam1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectivesMaskTeam1, true
}

// SetObjectivesMaskTeam1 sets field value
func (o *PlayerMatchHistoryEntry) SetObjectivesMaskTeam1(v int32) {
	o.ObjectivesMaskTeam1 = v
}

// GetPlayerAssists returns the PlayerAssists field value
func (o *PlayerMatchHistoryEntry) GetPlayerAssists() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlayerAssists
}

// GetPlayerAssistsOk returns a tuple with the PlayerAssists field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetPlayerAssistsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerAssists, true
}

// SetPlayerAssists sets field value
func (o *PlayerMatchHistoryEntry) SetPlayerAssists(v int32) {
	o.PlayerAssists = v
}

// GetPlayerDeaths returns the PlayerDeaths field value
func (o *PlayerMatchHistoryEntry) GetPlayerDeaths() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlayerDeaths
}

// GetPlayerDeathsOk returns a tuple with the PlayerDeaths field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetPlayerDeathsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerDeaths, true
}

// SetPlayerDeaths sets field value
func (o *PlayerMatchHistoryEntry) SetPlayerDeaths(v int32) {
	o.PlayerDeaths = v
}

// GetPlayerKills returns the PlayerKills field value
func (o *PlayerMatchHistoryEntry) GetPlayerKills() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlayerKills
}

// GetPlayerKillsOk returns a tuple with the PlayerKills field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetPlayerKillsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerKills, true
}

// SetPlayerKills sets field value
func (o *PlayerMatchHistoryEntry) SetPlayerKills(v int32) {
	o.PlayerKills = v
}

// GetPlayerTeam returns the PlayerTeam field value
func (o *PlayerMatchHistoryEntry) GetPlayerTeam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlayerTeam
}

// GetPlayerTeamOk returns a tuple with the PlayerTeam field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetPlayerTeamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerTeam, true
}

// SetPlayerTeam sets field value
func (o *PlayerMatchHistoryEntry) SetPlayerTeam(v int32) {
	o.PlayerTeam = v
}

// GetStartTime returns the StartTime field value
func (o *PlayerMatchHistoryEntry) GetStartTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *PlayerMatchHistoryEntry) GetStartTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *PlayerMatchHistoryEntry) SetStartTime(v int32) {
	o.StartTime = v
}

// GetTeamAbandoned returns the TeamAbandoned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerMatchHistoryEntry) GetTeamAbandoned() bool {
	if o == nil || IsNil(o.TeamAbandoned.Get()) {
		var ret bool
		return ret
	}
	return *o.TeamAbandoned.Get()
}

// GetTeamAbandonedOk returns a tuple with the TeamAbandoned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerMatchHistoryEntry) GetTeamAbandonedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamAbandoned.Get(), o.TeamAbandoned.IsSet()
}

// HasTeamAbandoned returns a boolean if a field has been set.
func (o *PlayerMatchHistoryEntry) HasTeamAbandoned() bool {
	if o != nil && o.TeamAbandoned.IsSet() {
		return true
	}

	return false
}

// SetTeamAbandoned gets a reference to the given NullableBool and assigns it to the TeamAbandoned field.
func (o *PlayerMatchHistoryEntry) SetTeamAbandoned(v bool) {
	o.TeamAbandoned.Set(&v)
}
// SetTeamAbandonedNil sets the value for TeamAbandoned to be an explicit nil
func (o *PlayerMatchHistoryEntry) SetTeamAbandonedNil() {
	o.TeamAbandoned.Set(nil)
}

// UnsetTeamAbandoned ensures that no value is present for TeamAbandoned, not even an explicit nil
func (o *PlayerMatchHistoryEntry) UnsetTeamAbandoned() {
	o.TeamAbandoned.Unset()
}

func (o PlayerMatchHistoryEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerMatchHistoryEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AbandonedTimeS.IsSet() {
		toSerialize["abandoned_time_s"] = o.AbandonedTimeS.Get()
	}
	toSerialize["account_id"] = o.AccountId
	toSerialize["denies"] = o.Denies
	toSerialize["game_mode"] = o.GameMode
	toSerialize["hero_id"] = o.HeroId
	toSerialize["hero_level"] = o.HeroLevel
	toSerialize["last_hits"] = o.LastHits
	toSerialize["match_duration_s"] = o.MatchDurationS
	toSerialize["match_id"] = o.MatchId
	toSerialize["match_mode"] = o.MatchMode
	toSerialize["match_result"] = o.MatchResult
	toSerialize["net_worth"] = o.NetWorth
	toSerialize["objectives_mask_team0"] = o.ObjectivesMaskTeam0
	toSerialize["objectives_mask_team1"] = o.ObjectivesMaskTeam1
	toSerialize["player_assists"] = o.PlayerAssists
	toSerialize["player_deaths"] = o.PlayerDeaths
	toSerialize["player_kills"] = o.PlayerKills
	toSerialize["player_team"] = o.PlayerTeam
	toSerialize["start_time"] = o.StartTime
	if o.TeamAbandoned.IsSet() {
		toSerialize["team_abandoned"] = o.TeamAbandoned.Get()
	}
	return toSerialize, nil
}

func (o *PlayerMatchHistoryEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"denies",
		"game_mode",
		"hero_id",
		"hero_level",
		"last_hits",
		"match_duration_s",
		"match_id",
		"match_mode",
		"match_result",
		"net_worth",
		"objectives_mask_team0",
		"objectives_mask_team1",
		"player_assists",
		"player_deaths",
		"player_kills",
		"player_team",
		"start_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlayerMatchHistoryEntry := _PlayerMatchHistoryEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlayerMatchHistoryEntry)

	if err != nil {
		return err
	}

	*o = PlayerMatchHistoryEntry(varPlayerMatchHistoryEntry)

	return err
}

type NullablePlayerMatchHistoryEntry struct {
	value *PlayerMatchHistoryEntry
	isSet bool
}

func (v NullablePlayerMatchHistoryEntry) Get() *PlayerMatchHistoryEntry {
	return v.value
}

func (v *NullablePlayerMatchHistoryEntry) Set(val *PlayerMatchHistoryEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerMatchHistoryEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerMatchHistoryEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerMatchHistoryEntry(val *PlayerMatchHistoryEntry) *NullablePlayerMatchHistoryEntry {
	return &NullablePlayerMatchHistoryEntry{value: val, isSet: true}
}

func (v NullablePlayerMatchHistoryEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerMatchHistoryEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


