/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroSynergyStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroSynergyStats{}

// HeroSynergyStats struct for HeroSynergyStats
type HeroSynergyStats struct {
	// The number of assists by `hero_id1` when playing with `hero_id2`.
	Assists1 int64 `json:"assists1"`
	// The number of assists by `hero_id2` when playing with `hero_id1`.
	Assists2 int64 `json:"assists2"`
	// The number of creeps killed by `hero_id1` when playing with `hero_id2`.
	Creeps1 int64 `json:"creeps1"`
	// The number of creeps killed by `hero_id2` when playing with `hero_id1`.
	Creeps2 int64 `json:"creeps2"`
	// The number of deaths by `hero_id1` when playing with `hero_id2`.
	Deaths1 int64 `json:"deaths1"`
	// The number of deaths by `hero_id2` when playing with `hero_id1`.
	Deaths2 int64 `json:"deaths2"`
	// The number of denies by `hero_id1` when playing with `hero_id2`.
	Denies1 int64 `json:"denies1"`
	// The number of denies by `hero_id2` when playing with `hero_id1`.
	Denies2 int64 `json:"denies2"`
	// The ID of the first hero in the pair.
	HeroId1 int32 `json:"hero_id1"`
	// The ID of the second hero in the pair.
	HeroId2 int32 `json:"hero_id2"`
	// The number of kills by `hero_id1` when playing with `hero_id2`.
	Kills1 int64 `json:"kills1"`
	// The number of kills by `hero_id2` when playing with `hero_id1`.
	Kills2 int64 `json:"kills2"`
	// The number of last hits by `hero_id1` when playing with `hero_id2`.
	LastHits1 int64 `json:"last_hits1"`
	// The number of last hits by `hero_id2` when playing with `hero_id1`.
	LastHits2 int64 `json:"last_hits2"`
	// The total number of matches played where `hero_id1` and `hero_id2` were on the same team, meeting the filter criteria.
	MatchesPlayed int64 `json:"matches_played"`
	// The net worth of `hero_id1` when playing with `hero_id2`.
	Networth1 int64 `json:"networth1"`
	// The net worth of `hero_id2` when playing with `hero_id1`.
	Networth2 int64 `json:"networth2"`
	// The amount of objective damage dealt by `hero_id1` when playing with `hero_id2`.
	ObjDamage1 int64 `json:"obj_damage1"`
	// The amount of objective damage dealt by `hero_id2` when playing with `hero_id1`.
	ObjDamage2 int64 `json:"obj_damage2"`
	// The number of times the team won when both `hero_id1` and `hero_id2` were on the same team.
	Wins int64 `json:"wins"`
}

type _HeroSynergyStats HeroSynergyStats

// NewHeroSynergyStats instantiates a new HeroSynergyStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroSynergyStats(assists1 int64, assists2 int64, creeps1 int64, creeps2 int64, deaths1 int64, deaths2 int64, denies1 int64, denies2 int64, heroId1 int32, heroId2 int32, kills1 int64, kills2 int64, lastHits1 int64, lastHits2 int64, matchesPlayed int64, networth1 int64, networth2 int64, objDamage1 int64, objDamage2 int64, wins int64) *HeroSynergyStats {
	this := HeroSynergyStats{}
	this.Assists1 = assists1
	this.Assists2 = assists2
	this.Creeps1 = creeps1
	this.Creeps2 = creeps2
	this.Deaths1 = deaths1
	this.Deaths2 = deaths2
	this.Denies1 = denies1
	this.Denies2 = denies2
	this.HeroId1 = heroId1
	this.HeroId2 = heroId2
	this.Kills1 = kills1
	this.Kills2 = kills2
	this.LastHits1 = lastHits1
	this.LastHits2 = lastHits2
	this.MatchesPlayed = matchesPlayed
	this.Networth1 = networth1
	this.Networth2 = networth2
	this.ObjDamage1 = objDamage1
	this.ObjDamage2 = objDamage2
	this.Wins = wins
	return &this
}

// NewHeroSynergyStatsWithDefaults instantiates a new HeroSynergyStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroSynergyStatsWithDefaults() *HeroSynergyStats {
	this := HeroSynergyStats{}
	return &this
}

// GetAssists1 returns the Assists1 field value
func (o *HeroSynergyStats) GetAssists1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Assists1
}

// GetAssists1Ok returns a tuple with the Assists1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetAssists1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assists1, true
}

// SetAssists1 sets field value
func (o *HeroSynergyStats) SetAssists1(v int64) {
	o.Assists1 = v
}

// GetAssists2 returns the Assists2 field value
func (o *HeroSynergyStats) GetAssists2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Assists2
}

// GetAssists2Ok returns a tuple with the Assists2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetAssists2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assists2, true
}

// SetAssists2 sets field value
func (o *HeroSynergyStats) SetAssists2(v int64) {
	o.Assists2 = v
}

// GetCreeps1 returns the Creeps1 field value
func (o *HeroSynergyStats) GetCreeps1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Creeps1
}

// GetCreeps1Ok returns a tuple with the Creeps1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetCreeps1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Creeps1, true
}

// SetCreeps1 sets field value
func (o *HeroSynergyStats) SetCreeps1(v int64) {
	o.Creeps1 = v
}

// GetCreeps2 returns the Creeps2 field value
func (o *HeroSynergyStats) GetCreeps2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Creeps2
}

// GetCreeps2Ok returns a tuple with the Creeps2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetCreeps2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Creeps2, true
}

// SetCreeps2 sets field value
func (o *HeroSynergyStats) SetCreeps2(v int64) {
	o.Creeps2 = v
}

// GetDeaths1 returns the Deaths1 field value
func (o *HeroSynergyStats) GetDeaths1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deaths1
}

// GetDeaths1Ok returns a tuple with the Deaths1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetDeaths1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deaths1, true
}

// SetDeaths1 sets field value
func (o *HeroSynergyStats) SetDeaths1(v int64) {
	o.Deaths1 = v
}

// GetDeaths2 returns the Deaths2 field value
func (o *HeroSynergyStats) GetDeaths2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deaths2
}

// GetDeaths2Ok returns a tuple with the Deaths2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetDeaths2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deaths2, true
}

// SetDeaths2 sets field value
func (o *HeroSynergyStats) SetDeaths2(v int64) {
	o.Deaths2 = v
}

// GetDenies1 returns the Denies1 field value
func (o *HeroSynergyStats) GetDenies1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Denies1
}

// GetDenies1Ok returns a tuple with the Denies1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetDenies1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Denies1, true
}

// SetDenies1 sets field value
func (o *HeroSynergyStats) SetDenies1(v int64) {
	o.Denies1 = v
}

// GetDenies2 returns the Denies2 field value
func (o *HeroSynergyStats) GetDenies2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Denies2
}

// GetDenies2Ok returns a tuple with the Denies2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetDenies2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Denies2, true
}

// SetDenies2 sets field value
func (o *HeroSynergyStats) SetDenies2(v int64) {
	o.Denies2 = v
}

// GetHeroId1 returns the HeroId1 field value
func (o *HeroSynergyStats) GetHeroId1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroId1
}

// GetHeroId1Ok returns a tuple with the HeroId1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetHeroId1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroId1, true
}

// SetHeroId1 sets field value
func (o *HeroSynergyStats) SetHeroId1(v int32) {
	o.HeroId1 = v
}

// GetHeroId2 returns the HeroId2 field value
func (o *HeroSynergyStats) GetHeroId2() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroId2
}

// GetHeroId2Ok returns a tuple with the HeroId2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetHeroId2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroId2, true
}

// SetHeroId2 sets field value
func (o *HeroSynergyStats) SetHeroId2(v int32) {
	o.HeroId2 = v
}

// GetKills1 returns the Kills1 field value
func (o *HeroSynergyStats) GetKills1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Kills1
}

// GetKills1Ok returns a tuple with the Kills1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetKills1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kills1, true
}

// SetKills1 sets field value
func (o *HeroSynergyStats) SetKills1(v int64) {
	o.Kills1 = v
}

// GetKills2 returns the Kills2 field value
func (o *HeroSynergyStats) GetKills2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Kills2
}

// GetKills2Ok returns a tuple with the Kills2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetKills2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kills2, true
}

// SetKills2 sets field value
func (o *HeroSynergyStats) SetKills2(v int64) {
	o.Kills2 = v
}

// GetLastHits1 returns the LastHits1 field value
func (o *HeroSynergyStats) GetLastHits1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastHits1
}

// GetLastHits1Ok returns a tuple with the LastHits1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetLastHits1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHits1, true
}

// SetLastHits1 sets field value
func (o *HeroSynergyStats) SetLastHits1(v int64) {
	o.LastHits1 = v
}

// GetLastHits2 returns the LastHits2 field value
func (o *HeroSynergyStats) GetLastHits2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastHits2
}

// GetLastHits2Ok returns a tuple with the LastHits2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetLastHits2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHits2, true
}

// SetLastHits2 sets field value
func (o *HeroSynergyStats) SetLastHits2(v int64) {
	o.LastHits2 = v
}

// GetMatchesPlayed returns the MatchesPlayed field value
func (o *HeroSynergyStats) GetMatchesPlayed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchesPlayed
}

// GetMatchesPlayedOk returns a tuple with the MatchesPlayed field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetMatchesPlayedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchesPlayed, true
}

// SetMatchesPlayed sets field value
func (o *HeroSynergyStats) SetMatchesPlayed(v int64) {
	o.MatchesPlayed = v
}

// GetNetworth1 returns the Networth1 field value
func (o *HeroSynergyStats) GetNetworth1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Networth1
}

// GetNetworth1Ok returns a tuple with the Networth1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetNetworth1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Networth1, true
}

// SetNetworth1 sets field value
func (o *HeroSynergyStats) SetNetworth1(v int64) {
	o.Networth1 = v
}

// GetNetworth2 returns the Networth2 field value
func (o *HeroSynergyStats) GetNetworth2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Networth2
}

// GetNetworth2Ok returns a tuple with the Networth2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetNetworth2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Networth2, true
}

// SetNetworth2 sets field value
func (o *HeroSynergyStats) SetNetworth2(v int64) {
	o.Networth2 = v
}

// GetObjDamage1 returns the ObjDamage1 field value
func (o *HeroSynergyStats) GetObjDamage1() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjDamage1
}

// GetObjDamage1Ok returns a tuple with the ObjDamage1 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetObjDamage1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjDamage1, true
}

// SetObjDamage1 sets field value
func (o *HeroSynergyStats) SetObjDamage1(v int64) {
	o.ObjDamage1 = v
}

// GetObjDamage2 returns the ObjDamage2 field value
func (o *HeroSynergyStats) GetObjDamage2() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjDamage2
}

// GetObjDamage2Ok returns a tuple with the ObjDamage2 field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetObjDamage2Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjDamage2, true
}

// SetObjDamage2 sets field value
func (o *HeroSynergyStats) SetObjDamage2(v int64) {
	o.ObjDamage2 = v
}

// GetWins returns the Wins field value
func (o *HeroSynergyStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *HeroSynergyStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *HeroSynergyStats) SetWins(v int64) {
	o.Wins = v
}

func (o HeroSynergyStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroSynergyStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assists1"] = o.Assists1
	toSerialize["assists2"] = o.Assists2
	toSerialize["creeps1"] = o.Creeps1
	toSerialize["creeps2"] = o.Creeps2
	toSerialize["deaths1"] = o.Deaths1
	toSerialize["deaths2"] = o.Deaths2
	toSerialize["denies1"] = o.Denies1
	toSerialize["denies2"] = o.Denies2
	toSerialize["hero_id1"] = o.HeroId1
	toSerialize["hero_id2"] = o.HeroId2
	toSerialize["kills1"] = o.Kills1
	toSerialize["kills2"] = o.Kills2
	toSerialize["last_hits1"] = o.LastHits1
	toSerialize["last_hits2"] = o.LastHits2
	toSerialize["matches_played"] = o.MatchesPlayed
	toSerialize["networth1"] = o.Networth1
	toSerialize["networth2"] = o.Networth2
	toSerialize["obj_damage1"] = o.ObjDamage1
	toSerialize["obj_damage2"] = o.ObjDamage2
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *HeroSynergyStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assists1",
		"assists2",
		"creeps1",
		"creeps2",
		"deaths1",
		"deaths2",
		"denies1",
		"denies2",
		"hero_id1",
		"hero_id2",
		"kills1",
		"kills2",
		"last_hits1",
		"last_hits2",
		"matches_played",
		"networth1",
		"networth2",
		"obj_damage1",
		"obj_damage2",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroSynergyStats := _HeroSynergyStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroSynergyStats)

	if err != nil {
		return err
	}

	*o = HeroSynergyStats(varHeroSynergyStats)

	return err
}

type NullableHeroSynergyStats struct {
	value *HeroSynergyStats
	isSet bool
}

func (v NullableHeroSynergyStats) Get() *HeroSynergyStats {
	return v.value
}

func (v *NullableHeroSynergyStats) Set(val *HeroSynergyStats) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroSynergyStats) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroSynergyStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroSynergyStats(val *HeroSynergyStats) *NullableHeroSynergyStats {
	return &NullableHeroSynergyStats{value: val, isSet: true}
}

func (v NullableHeroSynergyStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroSynergyStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


