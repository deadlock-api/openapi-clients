/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Patch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Patch{}

// Patch struct for Patch
type Patch struct {
	Author string `json:"author"`
	Category PatchCategory `json:"category"`
	ContentEncoded string `json:"content_encoded"`
	DcCreator string `json:"dc_creator"`
	Guid PatchGuid `json:"guid"`
	Link string `json:"link"`
	PubDate time.Time `json:"pub_date"`
	SlashComments string `json:"slash_comments"`
	Title string `json:"title"`
}

type _Patch Patch

// NewPatch instantiates a new Patch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatch(author string, category PatchCategory, contentEncoded string, dcCreator string, guid PatchGuid, link string, pubDate time.Time, slashComments string, title string) *Patch {
	this := Patch{}
	this.Author = author
	this.Category = category
	this.ContentEncoded = contentEncoded
	this.DcCreator = dcCreator
	this.Guid = guid
	this.Link = link
	this.PubDate = pubDate
	this.SlashComments = slashComments
	this.Title = title
	return &this
}

// NewPatchWithDefaults instantiates a new Patch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchWithDefaults() *Patch {
	this := Patch{}
	return &this
}

// GetAuthor returns the Author field value
func (o *Patch) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *Patch) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *Patch) SetAuthor(v string) {
	o.Author = v
}

// GetCategory returns the Category field value
func (o *Patch) GetCategory() PatchCategory {
	if o == nil {
		var ret PatchCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Patch) GetCategoryOk() (*PatchCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Patch) SetCategory(v PatchCategory) {
	o.Category = v
}

// GetContentEncoded returns the ContentEncoded field value
func (o *Patch) GetContentEncoded() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentEncoded
}

// GetContentEncodedOk returns a tuple with the ContentEncoded field value
// and a boolean to check if the value has been set.
func (o *Patch) GetContentEncodedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentEncoded, true
}

// SetContentEncoded sets field value
func (o *Patch) SetContentEncoded(v string) {
	o.ContentEncoded = v
}

// GetDcCreator returns the DcCreator field value
func (o *Patch) GetDcCreator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DcCreator
}

// GetDcCreatorOk returns a tuple with the DcCreator field value
// and a boolean to check if the value has been set.
func (o *Patch) GetDcCreatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DcCreator, true
}

// SetDcCreator sets field value
func (o *Patch) SetDcCreator(v string) {
	o.DcCreator = v
}

// GetGuid returns the Guid field value
func (o *Patch) GetGuid() PatchGuid {
	if o == nil {
		var ret PatchGuid
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *Patch) GetGuidOk() (*PatchGuid, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *Patch) SetGuid(v PatchGuid) {
	o.Guid = v
}

// GetLink returns the Link field value
func (o *Patch) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Patch) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Patch) SetLink(v string) {
	o.Link = v
}

// GetPubDate returns the PubDate field value
func (o *Patch) GetPubDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PubDate
}

// GetPubDateOk returns a tuple with the PubDate field value
// and a boolean to check if the value has been set.
func (o *Patch) GetPubDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PubDate, true
}

// SetPubDate sets field value
func (o *Patch) SetPubDate(v time.Time) {
	o.PubDate = v
}

// GetSlashComments returns the SlashComments field value
func (o *Patch) GetSlashComments() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SlashComments
}

// GetSlashCommentsOk returns a tuple with the SlashComments field value
// and a boolean to check if the value has been set.
func (o *Patch) GetSlashCommentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlashComments, true
}

// SetSlashComments sets field value
func (o *Patch) SetSlashComments(v string) {
	o.SlashComments = v
}

// GetTitle returns the Title field value
func (o *Patch) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Patch) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Patch) SetTitle(v string) {
	o.Title = v
}

func (o Patch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Patch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["author"] = o.Author
	toSerialize["category"] = o.Category
	toSerialize["content_encoded"] = o.ContentEncoded
	toSerialize["dc_creator"] = o.DcCreator
	toSerialize["guid"] = o.Guid
	toSerialize["link"] = o.Link
	toSerialize["pub_date"] = o.PubDate
	toSerialize["slash_comments"] = o.SlashComments
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *Patch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"category",
		"content_encoded",
		"dc_creator",
		"guid",
		"link",
		"pub_date",
		"slash_comments",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatch := _Patch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatch)

	if err != nil {
		return err
	}

	*o = Patch(varPatch)

	return err
}

type NullablePatch struct {
	value *Patch
	isSet bool
}

func (v NullablePatch) Get() *Patch {
	return v.value
}

func (v *NullablePatch) Set(val *Patch) {
	v.value = val
	v.isSet = true
}

func (v NullablePatch) IsSet() bool {
	return v.isSet
}

func (v *NullablePatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatch(val *Patch) *NullablePatch {
	return &NullablePatch{value: val, isSet: true}
}

func (v NullablePatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


