/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ItemStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemStats{}

// ItemStats struct for ItemStats
type ItemStats struct {
	Bucket NullableInt32 `json:"bucket,omitempty"`
	// See more: <https://assets.deadlock-api.com/v2/items>
	ItemId int32 `json:"item_id"`
	Losses int64 `json:"losses"`
	Matches int64 `json:"matches"`
	Players int64 `json:"players"`
	Wins int64 `json:"wins"`
}

type _ItemStats ItemStats

// NewItemStats instantiates a new ItemStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemStats(itemId int32, losses int64, matches int64, players int64, wins int64) *ItemStats {
	this := ItemStats{}
	this.ItemId = itemId
	this.Losses = losses
	this.Matches = matches
	this.Players = players
	this.Wins = wins
	return &this
}

// NewItemStatsWithDefaults instantiates a new ItemStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemStatsWithDefaults() *ItemStats {
	this := ItemStats{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemStats) GetBucket() int32 {
	if o == nil || IsNil(o.Bucket.Get()) {
		var ret int32
		return ret
	}
	return *o.Bucket.Get()
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemStats) GetBucketOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bucket.Get(), o.Bucket.IsSet()
}

// HasBucket returns a boolean if a field has been set.
func (o *ItemStats) HasBucket() bool {
	if o != nil && o.Bucket.IsSet() {
		return true
	}

	return false
}

// SetBucket gets a reference to the given NullableInt32 and assigns it to the Bucket field.
func (o *ItemStats) SetBucket(v int32) {
	o.Bucket.Set(&v)
}
// SetBucketNil sets the value for Bucket to be an explicit nil
func (o *ItemStats) SetBucketNil() {
	o.Bucket.Set(nil)
}

// UnsetBucket ensures that no value is present for Bucket, not even an explicit nil
func (o *ItemStats) UnsetBucket() {
	o.Bucket.Unset()
}

// GetItemId returns the ItemId field value
func (o *ItemStats) GetItemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *ItemStats) GetItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *ItemStats) SetItemId(v int32) {
	o.ItemId = v
}

// GetLosses returns the Losses field value
func (o *ItemStats) GetLosses() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *ItemStats) GetLossesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *ItemStats) SetLosses(v int64) {
	o.Losses = v
}

// GetMatches returns the Matches field value
func (o *ItemStats) GetMatches() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *ItemStats) GetMatchesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matches, true
}

// SetMatches sets field value
func (o *ItemStats) SetMatches(v int64) {
	o.Matches = v
}

// GetPlayers returns the Players field value
func (o *ItemStats) GetPlayers() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *ItemStats) GetPlayersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Players, true
}

// SetPlayers sets field value
func (o *ItemStats) SetPlayers(v int64) {
	o.Players = v
}

// GetWins returns the Wins field value
func (o *ItemStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *ItemStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *ItemStats) SetWins(v int64) {
	o.Wins = v
}

func (o ItemStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bucket.IsSet() {
		toSerialize["bucket"] = o.Bucket.Get()
	}
	toSerialize["item_id"] = o.ItemId
	toSerialize["losses"] = o.Losses
	toSerialize["matches"] = o.Matches
	toSerialize["players"] = o.Players
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *ItemStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item_id",
		"losses",
		"matches",
		"players",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemStats := _ItemStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemStats)

	if err != nil {
		return err
	}

	*o = ItemStats(varItemStats)

	return err
}

type NullableItemStats struct {
	value *ItemStats
	isSet bool
}

func (v NullableItemStats) Get() *ItemStats {
	return v.value
}

func (v *NullableItemStats) Set(val *ItemStats) {
	v.value = val
	v.isSet = true
}

func (v NullableItemStats) IsSet() bool {
	return v.isSet
}

func (v *NullableItemStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemStats(val *ItemStats) *NullableItemStats {
	return &NullableItemStats{value: val, isSet: true}
}

func (v NullableItemStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


