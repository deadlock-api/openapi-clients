/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClickhouseMatchInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClickhouseMatchInfo{}

// ClickhouseMatchInfo struct for ClickhouseMatchInfo
type ClickhouseMatchInfo struct {
	// See more: <https://assets.deadlock-api.com/v2/ranks>
	AverageBadgeTeam0 NullableInt32 `json:"average_badge_team0,omitempty"`
	// See more: <https://assets.deadlock-api.com/v2/ranks>
	AverageBadgeTeam1 NullableInt32 `json:"average_badge_team1,omitempty"`
	DurationS int32 `json:"duration_s"`
	MatchId int64 `json:"match_id"`
	MatchMode int32 `json:"match_mode"`
	StartTime int32 `json:"start_time"`
}

type _ClickhouseMatchInfo ClickhouseMatchInfo

// NewClickhouseMatchInfo instantiates a new ClickhouseMatchInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickhouseMatchInfo(durationS int32, matchId int64, matchMode int32, startTime int32) *ClickhouseMatchInfo {
	this := ClickhouseMatchInfo{}
	this.DurationS = durationS
	this.MatchId = matchId
	this.MatchMode = matchMode
	this.StartTime = startTime
	return &this
}

// NewClickhouseMatchInfoWithDefaults instantiates a new ClickhouseMatchInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickhouseMatchInfoWithDefaults() *ClickhouseMatchInfo {
	this := ClickhouseMatchInfo{}
	return &this
}

// GetAverageBadgeTeam0 returns the AverageBadgeTeam0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClickhouseMatchInfo) GetAverageBadgeTeam0() int32 {
	if o == nil || IsNil(o.AverageBadgeTeam0.Get()) {
		var ret int32
		return ret
	}
	return *o.AverageBadgeTeam0.Get()
}

// GetAverageBadgeTeam0Ok returns a tuple with the AverageBadgeTeam0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClickhouseMatchInfo) GetAverageBadgeTeam0Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AverageBadgeTeam0.Get(), o.AverageBadgeTeam0.IsSet()
}

// HasAverageBadgeTeam0 returns a boolean if a field has been set.
func (o *ClickhouseMatchInfo) HasAverageBadgeTeam0() bool {
	if o != nil && o.AverageBadgeTeam0.IsSet() {
		return true
	}

	return false
}

// SetAverageBadgeTeam0 gets a reference to the given NullableInt32 and assigns it to the AverageBadgeTeam0 field.
func (o *ClickhouseMatchInfo) SetAverageBadgeTeam0(v int32) {
	o.AverageBadgeTeam0.Set(&v)
}
// SetAverageBadgeTeam0Nil sets the value for AverageBadgeTeam0 to be an explicit nil
func (o *ClickhouseMatchInfo) SetAverageBadgeTeam0Nil() {
	o.AverageBadgeTeam0.Set(nil)
}

// UnsetAverageBadgeTeam0 ensures that no value is present for AverageBadgeTeam0, not even an explicit nil
func (o *ClickhouseMatchInfo) UnsetAverageBadgeTeam0() {
	o.AverageBadgeTeam0.Unset()
}

// GetAverageBadgeTeam1 returns the AverageBadgeTeam1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClickhouseMatchInfo) GetAverageBadgeTeam1() int32 {
	if o == nil || IsNil(o.AverageBadgeTeam1.Get()) {
		var ret int32
		return ret
	}
	return *o.AverageBadgeTeam1.Get()
}

// GetAverageBadgeTeam1Ok returns a tuple with the AverageBadgeTeam1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClickhouseMatchInfo) GetAverageBadgeTeam1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AverageBadgeTeam1.Get(), o.AverageBadgeTeam1.IsSet()
}

// HasAverageBadgeTeam1 returns a boolean if a field has been set.
func (o *ClickhouseMatchInfo) HasAverageBadgeTeam1() bool {
	if o != nil && o.AverageBadgeTeam1.IsSet() {
		return true
	}

	return false
}

// SetAverageBadgeTeam1 gets a reference to the given NullableInt32 and assigns it to the AverageBadgeTeam1 field.
func (o *ClickhouseMatchInfo) SetAverageBadgeTeam1(v int32) {
	o.AverageBadgeTeam1.Set(&v)
}
// SetAverageBadgeTeam1Nil sets the value for AverageBadgeTeam1 to be an explicit nil
func (o *ClickhouseMatchInfo) SetAverageBadgeTeam1Nil() {
	o.AverageBadgeTeam1.Set(nil)
}

// UnsetAverageBadgeTeam1 ensures that no value is present for AverageBadgeTeam1, not even an explicit nil
func (o *ClickhouseMatchInfo) UnsetAverageBadgeTeam1() {
	o.AverageBadgeTeam1.Unset()
}

// GetDurationS returns the DurationS field value
func (o *ClickhouseMatchInfo) GetDurationS() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationS
}

// GetDurationSOk returns a tuple with the DurationS field value
// and a boolean to check if the value has been set.
func (o *ClickhouseMatchInfo) GetDurationSOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationS, true
}

// SetDurationS sets field value
func (o *ClickhouseMatchInfo) SetDurationS(v int32) {
	o.DurationS = v
}

// GetMatchId returns the MatchId field value
func (o *ClickhouseMatchInfo) GetMatchId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *ClickhouseMatchInfo) GetMatchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *ClickhouseMatchInfo) SetMatchId(v int64) {
	o.MatchId = v
}

// GetMatchMode returns the MatchMode field value
func (o *ClickhouseMatchInfo) GetMatchMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MatchMode
}

// GetMatchModeOk returns a tuple with the MatchMode field value
// and a boolean to check if the value has been set.
func (o *ClickhouseMatchInfo) GetMatchModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchMode, true
}

// SetMatchMode sets field value
func (o *ClickhouseMatchInfo) SetMatchMode(v int32) {
	o.MatchMode = v
}

// GetStartTime returns the StartTime field value
func (o *ClickhouseMatchInfo) GetStartTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *ClickhouseMatchInfo) GetStartTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *ClickhouseMatchInfo) SetStartTime(v int32) {
	o.StartTime = v
}

func (o ClickhouseMatchInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClickhouseMatchInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AverageBadgeTeam0.IsSet() {
		toSerialize["average_badge_team0"] = o.AverageBadgeTeam0.Get()
	}
	if o.AverageBadgeTeam1.IsSet() {
		toSerialize["average_badge_team1"] = o.AverageBadgeTeam1.Get()
	}
	toSerialize["duration_s"] = o.DurationS
	toSerialize["match_id"] = o.MatchId
	toSerialize["match_mode"] = o.MatchMode
	toSerialize["start_time"] = o.StartTime
	return toSerialize, nil
}

func (o *ClickhouseMatchInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration_s",
		"match_id",
		"match_mode",
		"start_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClickhouseMatchInfo := _ClickhouseMatchInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClickhouseMatchInfo)

	if err != nil {
		return err
	}

	*o = ClickhouseMatchInfo(varClickhouseMatchInfo)

	return err
}

type NullableClickhouseMatchInfo struct {
	value *ClickhouseMatchInfo
	isSet bool
}

func (v NullableClickhouseMatchInfo) Get() *ClickhouseMatchInfo {
	return v.value
}

func (v *NullableClickhouseMatchInfo) Set(val *ClickhouseMatchInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableClickhouseMatchInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableClickhouseMatchInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickhouseMatchInfo(val *ClickhouseMatchInfo) *NullableClickhouseMatchInfo {
	return &NullableClickhouseMatchInfo{value: val, isSet: true}
}

func (v NullableClickhouseMatchInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickhouseMatchInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


