/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeroCounterStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroCounterStats{}

// HeroCounterStats struct for HeroCounterStats
type HeroCounterStats struct {
	// The number of assists by `hero_id` when facing `enemy_hero_id`.
	Assists int64 `json:"assists"`
	// The number of creeps killed by `hero_id` when facing `enemy_hero_id`.
	Creeps int64 `json:"creeps"`
	// The number of deaths by `hero_id` when facing `enemy_hero_id`.
	Deaths int64 `json:"deaths"`
	// The number of denies by `hero_id` when facing `enemy_hero_id`.
	Denies int64 `json:"denies"`
	// The number of assists by `enemy_hero_id` when facing `hero_id`.
	EnemyAssists int64 `json:"enemy_assists"`
	// The number of creeps killed by `enemy_hero_id` when facing `hero_id`.
	EnemyCreeps int64 `json:"enemy_creeps"`
	// The number of deaths by `enemy_hero_id` when facing `hero_id`.
	EnemyDeaths int64 `json:"enemy_deaths"`
	// The number of denies by `enemy_hero_id` when facing `hero_id`.
	EnemyDenies int64 `json:"enemy_denies"`
	// The ID of the opposing hero. See more: <https://assets.deadlock-api.com/v2/heroes>
	EnemyHeroId int32 `json:"enemy_hero_id"`
	// The number of kills by `enemy_hero_id` when facing `hero_id`.
	EnemyKills int64 `json:"enemy_kills"`
	// The number of last hits by `enemy_hero_id` when facing `hero_id`.
	EnemyLastHits int64 `json:"enemy_last_hits"`
	// The net worth of `enemy_hero_id` when facing `hero_id`.
	EnemyNetworth int64 `json:"enemy_networth"`
	// The amount of objective damage dealt by `enemy_hero_id` when facing `hero_id`.
	EnemyObjDamage int64 `json:"enemy_obj_damage"`
	// The ID of the hero. See more: <https://assets.deadlock-api.com/v2/heroes>
	HeroId int32 `json:"hero_id"`
	// The number of kills by `hero_id` when facing `enemy_hero_id`.
	Kills int64 `json:"kills"`
	// The number of last hits by `hero_id` when facing `enemy_hero_id`.
	LastHits int64 `json:"last_hits"`
	// The total number of matches played between `hero_id` and `enemy_hero_id` that meet the filter criteria.
	MatchesPlayed int64 `json:"matches_played"`
	// The net worth of `hero_id` when facing `enemy_hero_id`.
	Networth int64 `json:"networth"`
	// The amount of objective damage dealt by `hero_id` when facing `enemy_hero_id`.
	ObjDamage int64 `json:"obj_damage"`
	// The number of times `hero_id` won the match when facing `enemy_hero_id`.
	Wins int64 `json:"wins"`
}

type _HeroCounterStats HeroCounterStats

// NewHeroCounterStats instantiates a new HeroCounterStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroCounterStats(assists int64, creeps int64, deaths int64, denies int64, enemyAssists int64, enemyCreeps int64, enemyDeaths int64, enemyDenies int64, enemyHeroId int32, enemyKills int64, enemyLastHits int64, enemyNetworth int64, enemyObjDamage int64, heroId int32, kills int64, lastHits int64, matchesPlayed int64, networth int64, objDamage int64, wins int64) *HeroCounterStats {
	this := HeroCounterStats{}
	this.Assists = assists
	this.Creeps = creeps
	this.Deaths = deaths
	this.Denies = denies
	this.EnemyAssists = enemyAssists
	this.EnemyCreeps = enemyCreeps
	this.EnemyDeaths = enemyDeaths
	this.EnemyDenies = enemyDenies
	this.EnemyHeroId = enemyHeroId
	this.EnemyKills = enemyKills
	this.EnemyLastHits = enemyLastHits
	this.EnemyNetworth = enemyNetworth
	this.EnemyObjDamage = enemyObjDamage
	this.HeroId = heroId
	this.Kills = kills
	this.LastHits = lastHits
	this.MatchesPlayed = matchesPlayed
	this.Networth = networth
	this.ObjDamage = objDamage
	this.Wins = wins
	return &this
}

// NewHeroCounterStatsWithDefaults instantiates a new HeroCounterStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroCounterStatsWithDefaults() *HeroCounterStats {
	this := HeroCounterStats{}
	return &this
}

// GetAssists returns the Assists field value
func (o *HeroCounterStats) GetAssists() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Assists
}

// GetAssistsOk returns a tuple with the Assists field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetAssistsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assists, true
}

// SetAssists sets field value
func (o *HeroCounterStats) SetAssists(v int64) {
	o.Assists = v
}

// GetCreeps returns the Creeps field value
func (o *HeroCounterStats) GetCreeps() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Creeps
}

// GetCreepsOk returns a tuple with the Creeps field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetCreepsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Creeps, true
}

// SetCreeps sets field value
func (o *HeroCounterStats) SetCreeps(v int64) {
	o.Creeps = v
}

// GetDeaths returns the Deaths field value
func (o *HeroCounterStats) GetDeaths() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deaths
}

// GetDeathsOk returns a tuple with the Deaths field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetDeathsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deaths, true
}

// SetDeaths sets field value
func (o *HeroCounterStats) SetDeaths(v int64) {
	o.Deaths = v
}

// GetDenies returns the Denies field value
func (o *HeroCounterStats) GetDenies() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Denies
}

// GetDeniesOk returns a tuple with the Denies field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetDeniesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Denies, true
}

// SetDenies sets field value
func (o *HeroCounterStats) SetDenies(v int64) {
	o.Denies = v
}

// GetEnemyAssists returns the EnemyAssists field value
func (o *HeroCounterStats) GetEnemyAssists() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyAssists
}

// GetEnemyAssistsOk returns a tuple with the EnemyAssists field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyAssistsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyAssists, true
}

// SetEnemyAssists sets field value
func (o *HeroCounterStats) SetEnemyAssists(v int64) {
	o.EnemyAssists = v
}

// GetEnemyCreeps returns the EnemyCreeps field value
func (o *HeroCounterStats) GetEnemyCreeps() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyCreeps
}

// GetEnemyCreepsOk returns a tuple with the EnemyCreeps field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyCreepsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyCreeps, true
}

// SetEnemyCreeps sets field value
func (o *HeroCounterStats) SetEnemyCreeps(v int64) {
	o.EnemyCreeps = v
}

// GetEnemyDeaths returns the EnemyDeaths field value
func (o *HeroCounterStats) GetEnemyDeaths() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyDeaths
}

// GetEnemyDeathsOk returns a tuple with the EnemyDeaths field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyDeathsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyDeaths, true
}

// SetEnemyDeaths sets field value
func (o *HeroCounterStats) SetEnemyDeaths(v int64) {
	o.EnemyDeaths = v
}

// GetEnemyDenies returns the EnemyDenies field value
func (o *HeroCounterStats) GetEnemyDenies() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyDenies
}

// GetEnemyDeniesOk returns a tuple with the EnemyDenies field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyDeniesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyDenies, true
}

// SetEnemyDenies sets field value
func (o *HeroCounterStats) SetEnemyDenies(v int64) {
	o.EnemyDenies = v
}

// GetEnemyHeroId returns the EnemyHeroId field value
func (o *HeroCounterStats) GetEnemyHeroId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EnemyHeroId
}

// GetEnemyHeroIdOk returns a tuple with the EnemyHeroId field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyHeroIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyHeroId, true
}

// SetEnemyHeroId sets field value
func (o *HeroCounterStats) SetEnemyHeroId(v int32) {
	o.EnemyHeroId = v
}

// GetEnemyKills returns the EnemyKills field value
func (o *HeroCounterStats) GetEnemyKills() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyKills
}

// GetEnemyKillsOk returns a tuple with the EnemyKills field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyKillsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyKills, true
}

// SetEnemyKills sets field value
func (o *HeroCounterStats) SetEnemyKills(v int64) {
	o.EnemyKills = v
}

// GetEnemyLastHits returns the EnemyLastHits field value
func (o *HeroCounterStats) GetEnemyLastHits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyLastHits
}

// GetEnemyLastHitsOk returns a tuple with the EnemyLastHits field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyLastHitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyLastHits, true
}

// SetEnemyLastHits sets field value
func (o *HeroCounterStats) SetEnemyLastHits(v int64) {
	o.EnemyLastHits = v
}

// GetEnemyNetworth returns the EnemyNetworth field value
func (o *HeroCounterStats) GetEnemyNetworth() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyNetworth
}

// GetEnemyNetworthOk returns a tuple with the EnemyNetworth field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyNetworthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyNetworth, true
}

// SetEnemyNetworth sets field value
func (o *HeroCounterStats) SetEnemyNetworth(v int64) {
	o.EnemyNetworth = v
}

// GetEnemyObjDamage returns the EnemyObjDamage field value
func (o *HeroCounterStats) GetEnemyObjDamage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnemyObjDamage
}

// GetEnemyObjDamageOk returns a tuple with the EnemyObjDamage field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetEnemyObjDamageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnemyObjDamage, true
}

// SetEnemyObjDamage sets field value
func (o *HeroCounterStats) SetEnemyObjDamage(v int64) {
	o.EnemyObjDamage = v
}

// GetHeroId returns the HeroId field value
func (o *HeroCounterStats) GetHeroId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetHeroIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroId, true
}

// SetHeroId sets field value
func (o *HeroCounterStats) SetHeroId(v int32) {
	o.HeroId = v
}

// GetKills returns the Kills field value
func (o *HeroCounterStats) GetKills() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Kills
}

// GetKillsOk returns a tuple with the Kills field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetKillsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kills, true
}

// SetKills sets field value
func (o *HeroCounterStats) SetKills(v int64) {
	o.Kills = v
}

// GetLastHits returns the LastHits field value
func (o *HeroCounterStats) GetLastHits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastHits
}

// GetLastHitsOk returns a tuple with the LastHits field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetLastHitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHits, true
}

// SetLastHits sets field value
func (o *HeroCounterStats) SetLastHits(v int64) {
	o.LastHits = v
}

// GetMatchesPlayed returns the MatchesPlayed field value
func (o *HeroCounterStats) GetMatchesPlayed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchesPlayed
}

// GetMatchesPlayedOk returns a tuple with the MatchesPlayed field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetMatchesPlayedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchesPlayed, true
}

// SetMatchesPlayed sets field value
func (o *HeroCounterStats) SetMatchesPlayed(v int64) {
	o.MatchesPlayed = v
}

// GetNetworth returns the Networth field value
func (o *HeroCounterStats) GetNetworth() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Networth
}

// GetNetworthOk returns a tuple with the Networth field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetNetworthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Networth, true
}

// SetNetworth sets field value
func (o *HeroCounterStats) SetNetworth(v int64) {
	o.Networth = v
}

// GetObjDamage returns the ObjDamage field value
func (o *HeroCounterStats) GetObjDamage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjDamage
}

// GetObjDamageOk returns a tuple with the ObjDamage field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetObjDamageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjDamage, true
}

// SetObjDamage sets field value
func (o *HeroCounterStats) SetObjDamage(v int64) {
	o.ObjDamage = v
}

// GetWins returns the Wins field value
func (o *HeroCounterStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *HeroCounterStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *HeroCounterStats) SetWins(v int64) {
	o.Wins = v
}

func (o HeroCounterStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroCounterStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assists"] = o.Assists
	toSerialize["creeps"] = o.Creeps
	toSerialize["deaths"] = o.Deaths
	toSerialize["denies"] = o.Denies
	toSerialize["enemy_assists"] = o.EnemyAssists
	toSerialize["enemy_creeps"] = o.EnemyCreeps
	toSerialize["enemy_deaths"] = o.EnemyDeaths
	toSerialize["enemy_denies"] = o.EnemyDenies
	toSerialize["enemy_hero_id"] = o.EnemyHeroId
	toSerialize["enemy_kills"] = o.EnemyKills
	toSerialize["enemy_last_hits"] = o.EnemyLastHits
	toSerialize["enemy_networth"] = o.EnemyNetworth
	toSerialize["enemy_obj_damage"] = o.EnemyObjDamage
	toSerialize["hero_id"] = o.HeroId
	toSerialize["kills"] = o.Kills
	toSerialize["last_hits"] = o.LastHits
	toSerialize["matches_played"] = o.MatchesPlayed
	toSerialize["networth"] = o.Networth
	toSerialize["obj_damage"] = o.ObjDamage
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *HeroCounterStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assists",
		"creeps",
		"deaths",
		"denies",
		"enemy_assists",
		"enemy_creeps",
		"enemy_deaths",
		"enemy_denies",
		"enemy_hero_id",
		"enemy_kills",
		"enemy_last_hits",
		"enemy_networth",
		"enemy_obj_damage",
		"hero_id",
		"kills",
		"last_hits",
		"matches_played",
		"networth",
		"obj_damage",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroCounterStats := _HeroCounterStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeroCounterStats)

	if err != nil {
		return err
	}

	*o = HeroCounterStats(varHeroCounterStats)

	return err
}

type NullableHeroCounterStats struct {
	value *HeroCounterStats
	isSet bool
}

func (v NullableHeroCounterStats) Get() *HeroCounterStats {
	return v.value
}

func (v *NullableHeroCounterStats) Set(val *HeroCounterStats) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroCounterStats) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroCounterStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroCounterStats(val *HeroCounterStats) *NullableHeroCounterStats {
	return &NullableHeroCounterStats{value: val, isSet: true}
}

func (v NullableHeroCounterStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroCounterStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


