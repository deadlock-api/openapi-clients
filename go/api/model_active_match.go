/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActiveMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveMatch{}

// ActiveMatch struct for ActiveMatch
type ActiveMatch struct {
	CompatVersion NullableInt32 `json:"compat_version,omitempty"`
	DurationS NullableInt32 `json:"duration_s,omitempty"`
	GameMode NullableInt32 `json:"game_mode,omitempty"`
	GameModeParsed NullableActiveMatchGameMode `json:"game_mode_parsed,omitempty"`
	GameModeVersion NullableInt32 `json:"game_mode_version,omitempty"`
	LobbyId NullableInt64 `json:"lobby_id,omitempty"`
	MatchId NullableInt64 `json:"match_id,omitempty"`
	MatchMode NullableInt32 `json:"match_mode,omitempty"`
	MatchModeParsed NullableActiveMatchMode `json:"match_mode_parsed,omitempty"`
	MatchScore NullableInt32 `json:"match_score,omitempty"`
	NetWorthTeam0 NullableInt32 `json:"net_worth_team_0,omitempty"`
	NetWorthTeam1 NullableInt32 `json:"net_worth_team_1,omitempty"`
	ObjectivesMaskTeam0 NullableInt64 `json:"objectives_mask_team0,omitempty"`
	ObjectivesMaskTeam1 NullableInt64 `json:"objectives_mask_team1,omitempty"`
	OpenSpectatorSlots NullableInt32 `json:"open_spectator_slots,omitempty"`
	Players []ActiveMatchPlayer `json:"players"`
	RegionMode NullableInt32 `json:"region_mode,omitempty"`
	RegionModeParsed NullableActiveMatchRegionMode `json:"region_mode_parsed,omitempty"`
	Spectators NullableInt32 `json:"spectators,omitempty"`
	StartTime NullableInt32 `json:"start_time,omitempty"`
	WinningTeam NullableInt32 `json:"winning_team,omitempty"`
	WinningTeamParsed NullableActiveMatchTeam `json:"winning_team_parsed,omitempty"`
}

type _ActiveMatch ActiveMatch

// NewActiveMatch instantiates a new ActiveMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveMatch(players []ActiveMatchPlayer) *ActiveMatch {
	this := ActiveMatch{}
	this.Players = players
	return &this
}

// NewActiveMatchWithDefaults instantiates a new ActiveMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveMatchWithDefaults() *ActiveMatch {
	this := ActiveMatch{}
	return &this
}

// GetCompatVersion returns the CompatVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetCompatVersion() int32 {
	if o == nil || IsNil(o.CompatVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.CompatVersion.Get()
}

// GetCompatVersionOk returns a tuple with the CompatVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetCompatVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompatVersion.Get(), o.CompatVersion.IsSet()
}

// HasCompatVersion returns a boolean if a field has been set.
func (o *ActiveMatch) HasCompatVersion() bool {
	if o != nil && o.CompatVersion.IsSet() {
		return true
	}

	return false
}

// SetCompatVersion gets a reference to the given NullableInt32 and assigns it to the CompatVersion field.
func (o *ActiveMatch) SetCompatVersion(v int32) {
	o.CompatVersion.Set(&v)
}
// SetCompatVersionNil sets the value for CompatVersion to be an explicit nil
func (o *ActiveMatch) SetCompatVersionNil() {
	o.CompatVersion.Set(nil)
}

// UnsetCompatVersion ensures that no value is present for CompatVersion, not even an explicit nil
func (o *ActiveMatch) UnsetCompatVersion() {
	o.CompatVersion.Unset()
}

// GetDurationS returns the DurationS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetDurationS() int32 {
	if o == nil || IsNil(o.DurationS.Get()) {
		var ret int32
		return ret
	}
	return *o.DurationS.Get()
}

// GetDurationSOk returns a tuple with the DurationS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetDurationSOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationS.Get(), o.DurationS.IsSet()
}

// HasDurationS returns a boolean if a field has been set.
func (o *ActiveMatch) HasDurationS() bool {
	if o != nil && o.DurationS.IsSet() {
		return true
	}

	return false
}

// SetDurationS gets a reference to the given NullableInt32 and assigns it to the DurationS field.
func (o *ActiveMatch) SetDurationS(v int32) {
	o.DurationS.Set(&v)
}
// SetDurationSNil sets the value for DurationS to be an explicit nil
func (o *ActiveMatch) SetDurationSNil() {
	o.DurationS.Set(nil)
}

// UnsetDurationS ensures that no value is present for DurationS, not even an explicit nil
func (o *ActiveMatch) UnsetDurationS() {
	o.DurationS.Unset()
}

// GetGameMode returns the GameMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetGameMode() int32 {
	if o == nil || IsNil(o.GameMode.Get()) {
		var ret int32
		return ret
	}
	return *o.GameMode.Get()
}

// GetGameModeOk returns a tuple with the GameMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetGameModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GameMode.Get(), o.GameMode.IsSet()
}

// HasGameMode returns a boolean if a field has been set.
func (o *ActiveMatch) HasGameMode() bool {
	if o != nil && o.GameMode.IsSet() {
		return true
	}

	return false
}

// SetGameMode gets a reference to the given NullableInt32 and assigns it to the GameMode field.
func (o *ActiveMatch) SetGameMode(v int32) {
	o.GameMode.Set(&v)
}
// SetGameModeNil sets the value for GameMode to be an explicit nil
func (o *ActiveMatch) SetGameModeNil() {
	o.GameMode.Set(nil)
}

// UnsetGameMode ensures that no value is present for GameMode, not even an explicit nil
func (o *ActiveMatch) UnsetGameMode() {
	o.GameMode.Unset()
}

// GetGameModeParsed returns the GameModeParsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetGameModeParsed() ActiveMatchGameMode {
	if o == nil || IsNil(o.GameModeParsed.Get()) {
		var ret ActiveMatchGameMode
		return ret
	}
	return *o.GameModeParsed.Get()
}

// GetGameModeParsedOk returns a tuple with the GameModeParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetGameModeParsedOk() (*ActiveMatchGameMode, bool) {
	if o == nil {
		return nil, false
	}
	return o.GameModeParsed.Get(), o.GameModeParsed.IsSet()
}

// HasGameModeParsed returns a boolean if a field has been set.
func (o *ActiveMatch) HasGameModeParsed() bool {
	if o != nil && o.GameModeParsed.IsSet() {
		return true
	}

	return false
}

// SetGameModeParsed gets a reference to the given NullableActiveMatchGameMode and assigns it to the GameModeParsed field.
func (o *ActiveMatch) SetGameModeParsed(v ActiveMatchGameMode) {
	o.GameModeParsed.Set(&v)
}
// SetGameModeParsedNil sets the value for GameModeParsed to be an explicit nil
func (o *ActiveMatch) SetGameModeParsedNil() {
	o.GameModeParsed.Set(nil)
}

// UnsetGameModeParsed ensures that no value is present for GameModeParsed, not even an explicit nil
func (o *ActiveMatch) UnsetGameModeParsed() {
	o.GameModeParsed.Unset()
}

// GetGameModeVersion returns the GameModeVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetGameModeVersion() int32 {
	if o == nil || IsNil(o.GameModeVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.GameModeVersion.Get()
}

// GetGameModeVersionOk returns a tuple with the GameModeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetGameModeVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GameModeVersion.Get(), o.GameModeVersion.IsSet()
}

// HasGameModeVersion returns a boolean if a field has been set.
func (o *ActiveMatch) HasGameModeVersion() bool {
	if o != nil && o.GameModeVersion.IsSet() {
		return true
	}

	return false
}

// SetGameModeVersion gets a reference to the given NullableInt32 and assigns it to the GameModeVersion field.
func (o *ActiveMatch) SetGameModeVersion(v int32) {
	o.GameModeVersion.Set(&v)
}
// SetGameModeVersionNil sets the value for GameModeVersion to be an explicit nil
func (o *ActiveMatch) SetGameModeVersionNil() {
	o.GameModeVersion.Set(nil)
}

// UnsetGameModeVersion ensures that no value is present for GameModeVersion, not even an explicit nil
func (o *ActiveMatch) UnsetGameModeVersion() {
	o.GameModeVersion.Unset()
}

// GetLobbyId returns the LobbyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetLobbyId() int64 {
	if o == nil || IsNil(o.LobbyId.Get()) {
		var ret int64
		return ret
	}
	return *o.LobbyId.Get()
}

// GetLobbyIdOk returns a tuple with the LobbyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetLobbyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LobbyId.Get(), o.LobbyId.IsSet()
}

// HasLobbyId returns a boolean if a field has been set.
func (o *ActiveMatch) HasLobbyId() bool {
	if o != nil && o.LobbyId.IsSet() {
		return true
	}

	return false
}

// SetLobbyId gets a reference to the given NullableInt64 and assigns it to the LobbyId field.
func (o *ActiveMatch) SetLobbyId(v int64) {
	o.LobbyId.Set(&v)
}
// SetLobbyIdNil sets the value for LobbyId to be an explicit nil
func (o *ActiveMatch) SetLobbyIdNil() {
	o.LobbyId.Set(nil)
}

// UnsetLobbyId ensures that no value is present for LobbyId, not even an explicit nil
func (o *ActiveMatch) UnsetLobbyId() {
	o.LobbyId.Unset()
}

// GetMatchId returns the MatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetMatchId() int64 {
	if o == nil || IsNil(o.MatchId.Get()) {
		var ret int64
		return ret
	}
	return *o.MatchId.Get()
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetMatchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchId.Get(), o.MatchId.IsSet()
}

// HasMatchId returns a boolean if a field has been set.
func (o *ActiveMatch) HasMatchId() bool {
	if o != nil && o.MatchId.IsSet() {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given NullableInt64 and assigns it to the MatchId field.
func (o *ActiveMatch) SetMatchId(v int64) {
	o.MatchId.Set(&v)
}
// SetMatchIdNil sets the value for MatchId to be an explicit nil
func (o *ActiveMatch) SetMatchIdNil() {
	o.MatchId.Set(nil)
}

// UnsetMatchId ensures that no value is present for MatchId, not even an explicit nil
func (o *ActiveMatch) UnsetMatchId() {
	o.MatchId.Unset()
}

// GetMatchMode returns the MatchMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetMatchMode() int32 {
	if o == nil || IsNil(o.MatchMode.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchMode.Get()
}

// GetMatchModeOk returns a tuple with the MatchMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetMatchModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchMode.Get(), o.MatchMode.IsSet()
}

// HasMatchMode returns a boolean if a field has been set.
func (o *ActiveMatch) HasMatchMode() bool {
	if o != nil && o.MatchMode.IsSet() {
		return true
	}

	return false
}

// SetMatchMode gets a reference to the given NullableInt32 and assigns it to the MatchMode field.
func (o *ActiveMatch) SetMatchMode(v int32) {
	o.MatchMode.Set(&v)
}
// SetMatchModeNil sets the value for MatchMode to be an explicit nil
func (o *ActiveMatch) SetMatchModeNil() {
	o.MatchMode.Set(nil)
}

// UnsetMatchMode ensures that no value is present for MatchMode, not even an explicit nil
func (o *ActiveMatch) UnsetMatchMode() {
	o.MatchMode.Unset()
}

// GetMatchModeParsed returns the MatchModeParsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetMatchModeParsed() ActiveMatchMode {
	if o == nil || IsNil(o.MatchModeParsed.Get()) {
		var ret ActiveMatchMode
		return ret
	}
	return *o.MatchModeParsed.Get()
}

// GetMatchModeParsedOk returns a tuple with the MatchModeParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetMatchModeParsedOk() (*ActiveMatchMode, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchModeParsed.Get(), o.MatchModeParsed.IsSet()
}

// HasMatchModeParsed returns a boolean if a field has been set.
func (o *ActiveMatch) HasMatchModeParsed() bool {
	if o != nil && o.MatchModeParsed.IsSet() {
		return true
	}

	return false
}

// SetMatchModeParsed gets a reference to the given NullableActiveMatchMode and assigns it to the MatchModeParsed field.
func (o *ActiveMatch) SetMatchModeParsed(v ActiveMatchMode) {
	o.MatchModeParsed.Set(&v)
}
// SetMatchModeParsedNil sets the value for MatchModeParsed to be an explicit nil
func (o *ActiveMatch) SetMatchModeParsedNil() {
	o.MatchModeParsed.Set(nil)
}

// UnsetMatchModeParsed ensures that no value is present for MatchModeParsed, not even an explicit nil
func (o *ActiveMatch) UnsetMatchModeParsed() {
	o.MatchModeParsed.Unset()
}

// GetMatchScore returns the MatchScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetMatchScore() int32 {
	if o == nil || IsNil(o.MatchScore.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchScore.Get()
}

// GetMatchScoreOk returns a tuple with the MatchScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetMatchScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchScore.Get(), o.MatchScore.IsSet()
}

// HasMatchScore returns a boolean if a field has been set.
func (o *ActiveMatch) HasMatchScore() bool {
	if o != nil && o.MatchScore.IsSet() {
		return true
	}

	return false
}

// SetMatchScore gets a reference to the given NullableInt32 and assigns it to the MatchScore field.
func (o *ActiveMatch) SetMatchScore(v int32) {
	o.MatchScore.Set(&v)
}
// SetMatchScoreNil sets the value for MatchScore to be an explicit nil
func (o *ActiveMatch) SetMatchScoreNil() {
	o.MatchScore.Set(nil)
}

// UnsetMatchScore ensures that no value is present for MatchScore, not even an explicit nil
func (o *ActiveMatch) UnsetMatchScore() {
	o.MatchScore.Unset()
}

// GetNetWorthTeam0 returns the NetWorthTeam0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetNetWorthTeam0() int32 {
	if o == nil || IsNil(o.NetWorthTeam0.Get()) {
		var ret int32
		return ret
	}
	return *o.NetWorthTeam0.Get()
}

// GetNetWorthTeam0Ok returns a tuple with the NetWorthTeam0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetNetWorthTeam0Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetWorthTeam0.Get(), o.NetWorthTeam0.IsSet()
}

// HasNetWorthTeam0 returns a boolean if a field has been set.
func (o *ActiveMatch) HasNetWorthTeam0() bool {
	if o != nil && o.NetWorthTeam0.IsSet() {
		return true
	}

	return false
}

// SetNetWorthTeam0 gets a reference to the given NullableInt32 and assigns it to the NetWorthTeam0 field.
func (o *ActiveMatch) SetNetWorthTeam0(v int32) {
	o.NetWorthTeam0.Set(&v)
}
// SetNetWorthTeam0Nil sets the value for NetWorthTeam0 to be an explicit nil
func (o *ActiveMatch) SetNetWorthTeam0Nil() {
	o.NetWorthTeam0.Set(nil)
}

// UnsetNetWorthTeam0 ensures that no value is present for NetWorthTeam0, not even an explicit nil
func (o *ActiveMatch) UnsetNetWorthTeam0() {
	o.NetWorthTeam0.Unset()
}

// GetNetWorthTeam1 returns the NetWorthTeam1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetNetWorthTeam1() int32 {
	if o == nil || IsNil(o.NetWorthTeam1.Get()) {
		var ret int32
		return ret
	}
	return *o.NetWorthTeam1.Get()
}

// GetNetWorthTeam1Ok returns a tuple with the NetWorthTeam1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetNetWorthTeam1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetWorthTeam1.Get(), o.NetWorthTeam1.IsSet()
}

// HasNetWorthTeam1 returns a boolean if a field has been set.
func (o *ActiveMatch) HasNetWorthTeam1() bool {
	if o != nil && o.NetWorthTeam1.IsSet() {
		return true
	}

	return false
}

// SetNetWorthTeam1 gets a reference to the given NullableInt32 and assigns it to the NetWorthTeam1 field.
func (o *ActiveMatch) SetNetWorthTeam1(v int32) {
	o.NetWorthTeam1.Set(&v)
}
// SetNetWorthTeam1Nil sets the value for NetWorthTeam1 to be an explicit nil
func (o *ActiveMatch) SetNetWorthTeam1Nil() {
	o.NetWorthTeam1.Set(nil)
}

// UnsetNetWorthTeam1 ensures that no value is present for NetWorthTeam1, not even an explicit nil
func (o *ActiveMatch) UnsetNetWorthTeam1() {
	o.NetWorthTeam1.Unset()
}

// GetObjectivesMaskTeam0 returns the ObjectivesMaskTeam0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetObjectivesMaskTeam0() int64 {
	if o == nil || IsNil(o.ObjectivesMaskTeam0.Get()) {
		var ret int64
		return ret
	}
	return *o.ObjectivesMaskTeam0.Get()
}

// GetObjectivesMaskTeam0Ok returns a tuple with the ObjectivesMaskTeam0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetObjectivesMaskTeam0Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectivesMaskTeam0.Get(), o.ObjectivesMaskTeam0.IsSet()
}

// HasObjectivesMaskTeam0 returns a boolean if a field has been set.
func (o *ActiveMatch) HasObjectivesMaskTeam0() bool {
	if o != nil && o.ObjectivesMaskTeam0.IsSet() {
		return true
	}

	return false
}

// SetObjectivesMaskTeam0 gets a reference to the given NullableInt64 and assigns it to the ObjectivesMaskTeam0 field.
func (o *ActiveMatch) SetObjectivesMaskTeam0(v int64) {
	o.ObjectivesMaskTeam0.Set(&v)
}
// SetObjectivesMaskTeam0Nil sets the value for ObjectivesMaskTeam0 to be an explicit nil
func (o *ActiveMatch) SetObjectivesMaskTeam0Nil() {
	o.ObjectivesMaskTeam0.Set(nil)
}

// UnsetObjectivesMaskTeam0 ensures that no value is present for ObjectivesMaskTeam0, not even an explicit nil
func (o *ActiveMatch) UnsetObjectivesMaskTeam0() {
	o.ObjectivesMaskTeam0.Unset()
}

// GetObjectivesMaskTeam1 returns the ObjectivesMaskTeam1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetObjectivesMaskTeam1() int64 {
	if o == nil || IsNil(o.ObjectivesMaskTeam1.Get()) {
		var ret int64
		return ret
	}
	return *o.ObjectivesMaskTeam1.Get()
}

// GetObjectivesMaskTeam1Ok returns a tuple with the ObjectivesMaskTeam1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetObjectivesMaskTeam1Ok() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectivesMaskTeam1.Get(), o.ObjectivesMaskTeam1.IsSet()
}

// HasObjectivesMaskTeam1 returns a boolean if a field has been set.
func (o *ActiveMatch) HasObjectivesMaskTeam1() bool {
	if o != nil && o.ObjectivesMaskTeam1.IsSet() {
		return true
	}

	return false
}

// SetObjectivesMaskTeam1 gets a reference to the given NullableInt64 and assigns it to the ObjectivesMaskTeam1 field.
func (o *ActiveMatch) SetObjectivesMaskTeam1(v int64) {
	o.ObjectivesMaskTeam1.Set(&v)
}
// SetObjectivesMaskTeam1Nil sets the value for ObjectivesMaskTeam1 to be an explicit nil
func (o *ActiveMatch) SetObjectivesMaskTeam1Nil() {
	o.ObjectivesMaskTeam1.Set(nil)
}

// UnsetObjectivesMaskTeam1 ensures that no value is present for ObjectivesMaskTeam1, not even an explicit nil
func (o *ActiveMatch) UnsetObjectivesMaskTeam1() {
	o.ObjectivesMaskTeam1.Unset()
}

// GetOpenSpectatorSlots returns the OpenSpectatorSlots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetOpenSpectatorSlots() int32 {
	if o == nil || IsNil(o.OpenSpectatorSlots.Get()) {
		var ret int32
		return ret
	}
	return *o.OpenSpectatorSlots.Get()
}

// GetOpenSpectatorSlotsOk returns a tuple with the OpenSpectatorSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetOpenSpectatorSlotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenSpectatorSlots.Get(), o.OpenSpectatorSlots.IsSet()
}

// HasOpenSpectatorSlots returns a boolean if a field has been set.
func (o *ActiveMatch) HasOpenSpectatorSlots() bool {
	if o != nil && o.OpenSpectatorSlots.IsSet() {
		return true
	}

	return false
}

// SetOpenSpectatorSlots gets a reference to the given NullableInt32 and assigns it to the OpenSpectatorSlots field.
func (o *ActiveMatch) SetOpenSpectatorSlots(v int32) {
	o.OpenSpectatorSlots.Set(&v)
}
// SetOpenSpectatorSlotsNil sets the value for OpenSpectatorSlots to be an explicit nil
func (o *ActiveMatch) SetOpenSpectatorSlotsNil() {
	o.OpenSpectatorSlots.Set(nil)
}

// UnsetOpenSpectatorSlots ensures that no value is present for OpenSpectatorSlots, not even an explicit nil
func (o *ActiveMatch) UnsetOpenSpectatorSlots() {
	o.OpenSpectatorSlots.Unset()
}

// GetPlayers returns the Players field value
func (o *ActiveMatch) GetPlayers() []ActiveMatchPlayer {
	if o == nil {
		var ret []ActiveMatchPlayer
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *ActiveMatch) GetPlayersOk() ([]ActiveMatchPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Players, true
}

// SetPlayers sets field value
func (o *ActiveMatch) SetPlayers(v []ActiveMatchPlayer) {
	o.Players = v
}

// GetRegionMode returns the RegionMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetRegionMode() int32 {
	if o == nil || IsNil(o.RegionMode.Get()) {
		var ret int32
		return ret
	}
	return *o.RegionMode.Get()
}

// GetRegionModeOk returns a tuple with the RegionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetRegionModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionMode.Get(), o.RegionMode.IsSet()
}

// HasRegionMode returns a boolean if a field has been set.
func (o *ActiveMatch) HasRegionMode() bool {
	if o != nil && o.RegionMode.IsSet() {
		return true
	}

	return false
}

// SetRegionMode gets a reference to the given NullableInt32 and assigns it to the RegionMode field.
func (o *ActiveMatch) SetRegionMode(v int32) {
	o.RegionMode.Set(&v)
}
// SetRegionModeNil sets the value for RegionMode to be an explicit nil
func (o *ActiveMatch) SetRegionModeNil() {
	o.RegionMode.Set(nil)
}

// UnsetRegionMode ensures that no value is present for RegionMode, not even an explicit nil
func (o *ActiveMatch) UnsetRegionMode() {
	o.RegionMode.Unset()
}

// GetRegionModeParsed returns the RegionModeParsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetRegionModeParsed() ActiveMatchRegionMode {
	if o == nil || IsNil(o.RegionModeParsed.Get()) {
		var ret ActiveMatchRegionMode
		return ret
	}
	return *o.RegionModeParsed.Get()
}

// GetRegionModeParsedOk returns a tuple with the RegionModeParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetRegionModeParsedOk() (*ActiveMatchRegionMode, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionModeParsed.Get(), o.RegionModeParsed.IsSet()
}

// HasRegionModeParsed returns a boolean if a field has been set.
func (o *ActiveMatch) HasRegionModeParsed() bool {
	if o != nil && o.RegionModeParsed.IsSet() {
		return true
	}

	return false
}

// SetRegionModeParsed gets a reference to the given NullableActiveMatchRegionMode and assigns it to the RegionModeParsed field.
func (o *ActiveMatch) SetRegionModeParsed(v ActiveMatchRegionMode) {
	o.RegionModeParsed.Set(&v)
}
// SetRegionModeParsedNil sets the value for RegionModeParsed to be an explicit nil
func (o *ActiveMatch) SetRegionModeParsedNil() {
	o.RegionModeParsed.Set(nil)
}

// UnsetRegionModeParsed ensures that no value is present for RegionModeParsed, not even an explicit nil
func (o *ActiveMatch) UnsetRegionModeParsed() {
	o.RegionModeParsed.Unset()
}

// GetSpectators returns the Spectators field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetSpectators() int32 {
	if o == nil || IsNil(o.Spectators.Get()) {
		var ret int32
		return ret
	}
	return *o.Spectators.Get()
}

// GetSpectatorsOk returns a tuple with the Spectators field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetSpectatorsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spectators.Get(), o.Spectators.IsSet()
}

// HasSpectators returns a boolean if a field has been set.
func (o *ActiveMatch) HasSpectators() bool {
	if o != nil && o.Spectators.IsSet() {
		return true
	}

	return false
}

// SetSpectators gets a reference to the given NullableInt32 and assigns it to the Spectators field.
func (o *ActiveMatch) SetSpectators(v int32) {
	o.Spectators.Set(&v)
}
// SetSpectatorsNil sets the value for Spectators to be an explicit nil
func (o *ActiveMatch) SetSpectatorsNil() {
	o.Spectators.Set(nil)
}

// UnsetSpectators ensures that no value is present for Spectators, not even an explicit nil
func (o *ActiveMatch) UnsetSpectators() {
	o.Spectators.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret int32
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetStartTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *ActiveMatch) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableInt32 and assigns it to the StartTime field.
func (o *ActiveMatch) SetStartTime(v int32) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *ActiveMatch) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *ActiveMatch) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetWinningTeam returns the WinningTeam field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetWinningTeam() int32 {
	if o == nil || IsNil(o.WinningTeam.Get()) {
		var ret int32
		return ret
	}
	return *o.WinningTeam.Get()
}

// GetWinningTeamOk returns a tuple with the WinningTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetWinningTeamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WinningTeam.Get(), o.WinningTeam.IsSet()
}

// HasWinningTeam returns a boolean if a field has been set.
func (o *ActiveMatch) HasWinningTeam() bool {
	if o != nil && o.WinningTeam.IsSet() {
		return true
	}

	return false
}

// SetWinningTeam gets a reference to the given NullableInt32 and assigns it to the WinningTeam field.
func (o *ActiveMatch) SetWinningTeam(v int32) {
	o.WinningTeam.Set(&v)
}
// SetWinningTeamNil sets the value for WinningTeam to be an explicit nil
func (o *ActiveMatch) SetWinningTeamNil() {
	o.WinningTeam.Set(nil)
}

// UnsetWinningTeam ensures that no value is present for WinningTeam, not even an explicit nil
func (o *ActiveMatch) UnsetWinningTeam() {
	o.WinningTeam.Unset()
}

// GetWinningTeamParsed returns the WinningTeamParsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveMatch) GetWinningTeamParsed() ActiveMatchTeam {
	if o == nil || IsNil(o.WinningTeamParsed.Get()) {
		var ret ActiveMatchTeam
		return ret
	}
	return *o.WinningTeamParsed.Get()
}

// GetWinningTeamParsedOk returns a tuple with the WinningTeamParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveMatch) GetWinningTeamParsedOk() (*ActiveMatchTeam, bool) {
	if o == nil {
		return nil, false
	}
	return o.WinningTeamParsed.Get(), o.WinningTeamParsed.IsSet()
}

// HasWinningTeamParsed returns a boolean if a field has been set.
func (o *ActiveMatch) HasWinningTeamParsed() bool {
	if o != nil && o.WinningTeamParsed.IsSet() {
		return true
	}

	return false
}

// SetWinningTeamParsed gets a reference to the given NullableActiveMatchTeam and assigns it to the WinningTeamParsed field.
func (o *ActiveMatch) SetWinningTeamParsed(v ActiveMatchTeam) {
	o.WinningTeamParsed.Set(&v)
}
// SetWinningTeamParsedNil sets the value for WinningTeamParsed to be an explicit nil
func (o *ActiveMatch) SetWinningTeamParsedNil() {
	o.WinningTeamParsed.Set(nil)
}

// UnsetWinningTeamParsed ensures that no value is present for WinningTeamParsed, not even an explicit nil
func (o *ActiveMatch) UnsetWinningTeamParsed() {
	o.WinningTeamParsed.Unset()
}

func (o ActiveMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CompatVersion.IsSet() {
		toSerialize["compat_version"] = o.CompatVersion.Get()
	}
	if o.DurationS.IsSet() {
		toSerialize["duration_s"] = o.DurationS.Get()
	}
	if o.GameMode.IsSet() {
		toSerialize["game_mode"] = o.GameMode.Get()
	}
	if o.GameModeParsed.IsSet() {
		toSerialize["game_mode_parsed"] = o.GameModeParsed.Get()
	}
	if o.GameModeVersion.IsSet() {
		toSerialize["game_mode_version"] = o.GameModeVersion.Get()
	}
	if o.LobbyId.IsSet() {
		toSerialize["lobby_id"] = o.LobbyId.Get()
	}
	if o.MatchId.IsSet() {
		toSerialize["match_id"] = o.MatchId.Get()
	}
	if o.MatchMode.IsSet() {
		toSerialize["match_mode"] = o.MatchMode.Get()
	}
	if o.MatchModeParsed.IsSet() {
		toSerialize["match_mode_parsed"] = o.MatchModeParsed.Get()
	}
	if o.MatchScore.IsSet() {
		toSerialize["match_score"] = o.MatchScore.Get()
	}
	if o.NetWorthTeam0.IsSet() {
		toSerialize["net_worth_team_0"] = o.NetWorthTeam0.Get()
	}
	if o.NetWorthTeam1.IsSet() {
		toSerialize["net_worth_team_1"] = o.NetWorthTeam1.Get()
	}
	if o.ObjectivesMaskTeam0.IsSet() {
		toSerialize["objectives_mask_team0"] = o.ObjectivesMaskTeam0.Get()
	}
	if o.ObjectivesMaskTeam1.IsSet() {
		toSerialize["objectives_mask_team1"] = o.ObjectivesMaskTeam1.Get()
	}
	if o.OpenSpectatorSlots.IsSet() {
		toSerialize["open_spectator_slots"] = o.OpenSpectatorSlots.Get()
	}
	toSerialize["players"] = o.Players
	if o.RegionMode.IsSet() {
		toSerialize["region_mode"] = o.RegionMode.Get()
	}
	if o.RegionModeParsed.IsSet() {
		toSerialize["region_mode_parsed"] = o.RegionModeParsed.Get()
	}
	if o.Spectators.IsSet() {
		toSerialize["spectators"] = o.Spectators.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["start_time"] = o.StartTime.Get()
	}
	if o.WinningTeam.IsSet() {
		toSerialize["winning_team"] = o.WinningTeam.Get()
	}
	if o.WinningTeamParsed.IsSet() {
		toSerialize["winning_team_parsed"] = o.WinningTeamParsed.Get()
	}
	return toSerialize, nil
}

func (o *ActiveMatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"players",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveMatch := _ActiveMatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveMatch)

	if err != nil {
		return err
	}

	*o = ActiveMatch(varActiveMatch)

	return err
}

type NullableActiveMatch struct {
	value *ActiveMatch
	isSet bool
}

func (v NullableActiveMatch) Get() *ActiveMatch {
	return v.value
}

func (v *NullableActiveMatch) Set(val *ActiveMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveMatch(val *ActiveMatch) *NullableActiveMatch {
	return &NullableActiveMatch{value: val, isSet: true}
}

func (v NullableActiveMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


