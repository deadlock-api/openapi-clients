/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildHeroDetailsCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildHeroDetailsCategory{}

// BuildHeroDetailsCategory struct for BuildHeroDetailsCategory
type BuildHeroDetailsCategory struct {
	Description NullableString `json:"description,omitempty"`
	Height NullableFloat32 `json:"height,omitempty"`
	Mods []BuildHeroDetailsCategoryAbility `json:"mods,omitempty"`
	Name string `json:"name"`
	Optional NullableBool `json:"optional,omitempty"`
	Width NullableFloat32 `json:"width,omitempty"`
}

type _BuildHeroDetailsCategory BuildHeroDetailsCategory

// NewBuildHeroDetailsCategory instantiates a new BuildHeroDetailsCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildHeroDetailsCategory(name string) *BuildHeroDetailsCategory {
	this := BuildHeroDetailsCategory{}
	this.Name = name
	return &this
}

// NewBuildHeroDetailsCategoryWithDefaults instantiates a new BuildHeroDetailsCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildHeroDetailsCategoryWithDefaults() *BuildHeroDetailsCategory {
	this := BuildHeroDetailsCategory{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategory) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategory) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategory) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BuildHeroDetailsCategory) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BuildHeroDetailsCategory) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BuildHeroDetailsCategory) UnsetDescription() {
	o.Description.Unset()
}

// GetHeight returns the Height field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategory) GetHeight() float32 {
	if o == nil || IsNil(o.Height.Get()) {
		var ret float32
		return ret
	}
	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategory) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// HasHeight returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategory) HasHeight() bool {
	if o != nil && o.Height.IsSet() {
		return true
	}

	return false
}

// SetHeight gets a reference to the given NullableFloat32 and assigns it to the Height field.
func (o *BuildHeroDetailsCategory) SetHeight(v float32) {
	o.Height.Set(&v)
}
// SetHeightNil sets the value for Height to be an explicit nil
func (o *BuildHeroDetailsCategory) SetHeightNil() {
	o.Height.Set(nil)
}

// UnsetHeight ensures that no value is present for Height, not even an explicit nil
func (o *BuildHeroDetailsCategory) UnsetHeight() {
	o.Height.Unset()
}

// GetMods returns the Mods field value if set, zero value otherwise.
func (o *BuildHeroDetailsCategory) GetMods() []BuildHeroDetailsCategoryAbility {
	if o == nil || IsNil(o.Mods) {
		var ret []BuildHeroDetailsCategoryAbility
		return ret
	}
	return o.Mods
}

// GetModsOk returns a tuple with the Mods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildHeroDetailsCategory) GetModsOk() ([]BuildHeroDetailsCategoryAbility, bool) {
	if o == nil || IsNil(o.Mods) {
		return nil, false
	}
	return o.Mods, true
}

// HasMods returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategory) HasMods() bool {
	if o != nil && !IsNil(o.Mods) {
		return true
	}

	return false
}

// SetMods gets a reference to the given []BuildHeroDetailsCategoryAbility and assigns it to the Mods field.
func (o *BuildHeroDetailsCategory) SetMods(v []BuildHeroDetailsCategoryAbility) {
	o.Mods = v
}

// GetName returns the Name field value
func (o *BuildHeroDetailsCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BuildHeroDetailsCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BuildHeroDetailsCategory) SetName(v string) {
	o.Name = v
}

// GetOptional returns the Optional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategory) GetOptional() bool {
	if o == nil || IsNil(o.Optional.Get()) {
		var ret bool
		return ret
	}
	return *o.Optional.Get()
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategory) GetOptionalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Optional.Get(), o.Optional.IsSet()
}

// HasOptional returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategory) HasOptional() bool {
	if o != nil && o.Optional.IsSet() {
		return true
	}

	return false
}

// SetOptional gets a reference to the given NullableBool and assigns it to the Optional field.
func (o *BuildHeroDetailsCategory) SetOptional(v bool) {
	o.Optional.Set(&v)
}
// SetOptionalNil sets the value for Optional to be an explicit nil
func (o *BuildHeroDetailsCategory) SetOptionalNil() {
	o.Optional.Set(nil)
}

// UnsetOptional ensures that no value is present for Optional, not even an explicit nil
func (o *BuildHeroDetailsCategory) UnsetOptional() {
	o.Optional.Unset()
}

// GetWidth returns the Width field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategory) GetWidth() float32 {
	if o == nil || IsNil(o.Width.Get()) {
		var ret float32
		return ret
	}
	return *o.Width.Get()
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategory) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Width.Get(), o.Width.IsSet()
}

// HasWidth returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategory) HasWidth() bool {
	if o != nil && o.Width.IsSet() {
		return true
	}

	return false
}

// SetWidth gets a reference to the given NullableFloat32 and assigns it to the Width field.
func (o *BuildHeroDetailsCategory) SetWidth(v float32) {
	o.Width.Set(&v)
}
// SetWidthNil sets the value for Width to be an explicit nil
func (o *BuildHeroDetailsCategory) SetWidthNil() {
	o.Width.Set(nil)
}

// UnsetWidth ensures that no value is present for Width, not even an explicit nil
func (o *BuildHeroDetailsCategory) UnsetWidth() {
	o.Width.Unset()
}

func (o BuildHeroDetailsCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildHeroDetailsCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Height.IsSet() {
		toSerialize["height"] = o.Height.Get()
	}
	if !IsNil(o.Mods) {
		toSerialize["mods"] = o.Mods
	}
	toSerialize["name"] = o.Name
	if o.Optional.IsSet() {
		toSerialize["optional"] = o.Optional.Get()
	}
	if o.Width.IsSet() {
		toSerialize["width"] = o.Width.Get()
	}
	return toSerialize, nil
}

func (o *BuildHeroDetailsCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildHeroDetailsCategory := _BuildHeroDetailsCategory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildHeroDetailsCategory)

	if err != nil {
		return err
	}

	*o = BuildHeroDetailsCategory(varBuildHeroDetailsCategory)

	return err
}

type NullableBuildHeroDetailsCategory struct {
	value *BuildHeroDetailsCategory
	isSet bool
}

func (v NullableBuildHeroDetailsCategory) Get() *BuildHeroDetailsCategory {
	return v.value
}

func (v *NullableBuildHeroDetailsCategory) Set(val *BuildHeroDetailsCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildHeroDetailsCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildHeroDetailsCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildHeroDetailsCategory(val *BuildHeroDetailsCategory) *NullableBuildHeroDetailsCategory {
	return &NullableBuildHeroDetailsCategory{value: val, isSet: true}
}

func (v NullableBuildHeroDetailsCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildHeroDetailsCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


