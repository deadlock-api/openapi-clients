/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRHistory{}

// MMRHistory struct for MMRHistory
type MMRHistory struct {
	AccountId int32 `json:"account_id"`
	// Extracted from the rank the division (rank // 10)
	Division int32 `json:"division"`
	// Extracted from the rank the division tier (rank % 10)
	DivisionTier int32 `json:"division_tier"`
	MatchId int64 `json:"match_id"`
	// Player Score is the index for the rank array (internally used for the rank regression)
	PlayerScore float64 `json:"player_score"`
	// The Player Rank. See more: <https://assets.deadlock-api.com/v2/ranks>
	Rank int32 `json:"rank"`
	// Start time of the match
	StartTime int32 `json:"start_time"`
}

type _MMRHistory MMRHistory

// NewMMRHistory instantiates a new MMRHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRHistory(accountId int32, division int32, divisionTier int32, matchId int64, playerScore float64, rank int32, startTime int32) *MMRHistory {
	this := MMRHistory{}
	this.AccountId = accountId
	this.Division = division
	this.DivisionTier = divisionTier
	this.MatchId = matchId
	this.PlayerScore = playerScore
	this.Rank = rank
	this.StartTime = startTime
	return &this
}

// NewMMRHistoryWithDefaults instantiates a new MMRHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRHistoryWithDefaults() *MMRHistory {
	this := MMRHistory{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *MMRHistory) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *MMRHistory) SetAccountId(v int32) {
	o.AccountId = v
}

// GetDivision returns the Division field value
func (o *MMRHistory) GetDivision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Division
}

// GetDivisionOk returns a tuple with the Division field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetDivisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Division, true
}

// SetDivision sets field value
func (o *MMRHistory) SetDivision(v int32) {
	o.Division = v
}

// GetDivisionTier returns the DivisionTier field value
func (o *MMRHistory) GetDivisionTier() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DivisionTier
}

// GetDivisionTierOk returns a tuple with the DivisionTier field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetDivisionTierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionTier, true
}

// SetDivisionTier sets field value
func (o *MMRHistory) SetDivisionTier(v int32) {
	o.DivisionTier = v
}

// GetMatchId returns the MatchId field value
func (o *MMRHistory) GetMatchId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetMatchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *MMRHistory) SetMatchId(v int64) {
	o.MatchId = v
}

// GetPlayerScore returns the PlayerScore field value
func (o *MMRHistory) GetPlayerScore() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PlayerScore
}

// GetPlayerScoreOk returns a tuple with the PlayerScore field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetPlayerScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerScore, true
}

// SetPlayerScore sets field value
func (o *MMRHistory) SetPlayerScore(v float64) {
	o.PlayerScore = v
}

// GetRank returns the Rank field value
func (o *MMRHistory) GetRank() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rank
}

// GetRankOk returns a tuple with the Rank field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rank, true
}

// SetRank sets field value
func (o *MMRHistory) SetRank(v int32) {
	o.Rank = v
}

// GetStartTime returns the StartTime field value
func (o *MMRHistory) GetStartTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *MMRHistory) GetStartTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *MMRHistory) SetStartTime(v int32) {
	o.StartTime = v
}

func (o MMRHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["division"] = o.Division
	toSerialize["division_tier"] = o.DivisionTier
	toSerialize["match_id"] = o.MatchId
	toSerialize["player_score"] = o.PlayerScore
	toSerialize["rank"] = o.Rank
	toSerialize["start_time"] = o.StartTime
	return toSerialize, nil
}

func (o *MMRHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"division",
		"division_tier",
		"match_id",
		"player_score",
		"rank",
		"start_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRHistory := _MMRHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRHistory)

	if err != nil {
		return err
	}

	*o = MMRHistory(varMMRHistory)

	return err
}

type NullableMMRHistory struct {
	value *MMRHistory
	isSet bool
}

func (v NullableMMRHistory) Get() *MMRHistory {
	return v.value
}

func (v *NullableMMRHistory) Set(val *MMRHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRHistory(val *MMRHistory) *NullableMMRHistory {
	return &NullableMMRHistory{value: val, isSet: true}
}

func (v NullableMMRHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


