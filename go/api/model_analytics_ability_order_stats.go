/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyticsAbilityOrderStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsAbilityOrderStats{}

// AnalyticsAbilityOrderStats struct for AnalyticsAbilityOrderStats
type AnalyticsAbilityOrderStats struct {
	// See more: <https://assets.deadlock-api.com/v2/heroes>
	Abilities []int32 `json:"abilities"`
	Losses int64 `json:"losses"`
	Matches int64 `json:"matches"`
	Players int64 `json:"players"`
	TotalAssists int64 `json:"total_assists"`
	TotalDeaths int64 `json:"total_deaths"`
	TotalKills int64 `json:"total_kills"`
	Wins int64 `json:"wins"`
}

type _AnalyticsAbilityOrderStats AnalyticsAbilityOrderStats

// NewAnalyticsAbilityOrderStats instantiates a new AnalyticsAbilityOrderStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsAbilityOrderStats(abilities []int32, losses int64, matches int64, players int64, totalAssists int64, totalDeaths int64, totalKills int64, wins int64) *AnalyticsAbilityOrderStats {
	this := AnalyticsAbilityOrderStats{}
	this.Abilities = abilities
	this.Losses = losses
	this.Matches = matches
	this.Players = players
	this.TotalAssists = totalAssists
	this.TotalDeaths = totalDeaths
	this.TotalKills = totalKills
	this.Wins = wins
	return &this
}

// NewAnalyticsAbilityOrderStatsWithDefaults instantiates a new AnalyticsAbilityOrderStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsAbilityOrderStatsWithDefaults() *AnalyticsAbilityOrderStats {
	this := AnalyticsAbilityOrderStats{}
	return &this
}

// GetAbilities returns the Abilities field value
func (o *AnalyticsAbilityOrderStats) GetAbilities() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Abilities
}

// GetAbilitiesOk returns a tuple with the Abilities field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetAbilitiesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Abilities, true
}

// SetAbilities sets field value
func (o *AnalyticsAbilityOrderStats) SetAbilities(v []int32) {
	o.Abilities = v
}

// GetLosses returns the Losses field value
func (o *AnalyticsAbilityOrderStats) GetLosses() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetLossesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *AnalyticsAbilityOrderStats) SetLosses(v int64) {
	o.Losses = v
}

// GetMatches returns the Matches field value
func (o *AnalyticsAbilityOrderStats) GetMatches() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetMatchesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matches, true
}

// SetMatches sets field value
func (o *AnalyticsAbilityOrderStats) SetMatches(v int64) {
	o.Matches = v
}

// GetPlayers returns the Players field value
func (o *AnalyticsAbilityOrderStats) GetPlayers() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetPlayersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Players, true
}

// SetPlayers sets field value
func (o *AnalyticsAbilityOrderStats) SetPlayers(v int64) {
	o.Players = v
}

// GetTotalAssists returns the TotalAssists field value
func (o *AnalyticsAbilityOrderStats) GetTotalAssists() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalAssists
}

// GetTotalAssistsOk returns a tuple with the TotalAssists field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetTotalAssistsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAssists, true
}

// SetTotalAssists sets field value
func (o *AnalyticsAbilityOrderStats) SetTotalAssists(v int64) {
	o.TotalAssists = v
}

// GetTotalDeaths returns the TotalDeaths field value
func (o *AnalyticsAbilityOrderStats) GetTotalDeaths() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalDeaths
}

// GetTotalDeathsOk returns a tuple with the TotalDeaths field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetTotalDeathsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDeaths, true
}

// SetTotalDeaths sets field value
func (o *AnalyticsAbilityOrderStats) SetTotalDeaths(v int64) {
	o.TotalDeaths = v
}

// GetTotalKills returns the TotalKills field value
func (o *AnalyticsAbilityOrderStats) GetTotalKills() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalKills
}

// GetTotalKillsOk returns a tuple with the TotalKills field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetTotalKillsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalKills, true
}

// SetTotalKills sets field value
func (o *AnalyticsAbilityOrderStats) SetTotalKills(v int64) {
	o.TotalKills = v
}

// GetWins returns the Wins field value
func (o *AnalyticsAbilityOrderStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *AnalyticsAbilityOrderStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *AnalyticsAbilityOrderStats) SetWins(v int64) {
	o.Wins = v
}

func (o AnalyticsAbilityOrderStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsAbilityOrderStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["abilities"] = o.Abilities
	toSerialize["losses"] = o.Losses
	toSerialize["matches"] = o.Matches
	toSerialize["players"] = o.Players
	toSerialize["total_assists"] = o.TotalAssists
	toSerialize["total_deaths"] = o.TotalDeaths
	toSerialize["total_kills"] = o.TotalKills
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *AnalyticsAbilityOrderStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"abilities",
		"losses",
		"matches",
		"players",
		"total_assists",
		"total_deaths",
		"total_kills",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyticsAbilityOrderStats := _AnalyticsAbilityOrderStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyticsAbilityOrderStats)

	if err != nil {
		return err
	}

	*o = AnalyticsAbilityOrderStats(varAnalyticsAbilityOrderStats)

	return err
}

type NullableAnalyticsAbilityOrderStats struct {
	value *AnalyticsAbilityOrderStats
	isSet bool
}

func (v NullableAnalyticsAbilityOrderStats) Get() *AnalyticsAbilityOrderStats {
	return v.value
}

func (v *NullableAnalyticsAbilityOrderStats) Set(val *AnalyticsAbilityOrderStats) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsAbilityOrderStats) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsAbilityOrderStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsAbilityOrderStats(val *AnalyticsAbilityOrderStats) *NullableAnalyticsAbilityOrderStats {
	return &NullableAnalyticsAbilityOrderStats{value: val, isSet: true}
}

func (v NullableAnalyticsAbilityOrderStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsAbilityOrderStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


