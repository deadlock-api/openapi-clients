/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ESportsMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ESportsMatch{}

// ESportsMatch struct for ESportsMatch
type ESportsMatch struct {
	// Valve's match id of the match.
	MatchId NullableInt64 `json:"match_id,omitempty"`
	// The provider of the match data. Some string that identifies the source of the data.
	Provider string `json:"provider"`
	// The scheduled date of the match.
	ScheduledDate NullableTime `json:"scheduled_date,omitempty"`
	// The status of the match, e.g. live, completed, scheduled, cancelled.
	Status NullableESportsMatchStatus `json:"status,omitempty"`
	// The name of the first team.
	Team0Name NullableString `json:"team0_name,omitempty"`
	// The name of the second team.
	Team1Name NullableString `json:"team1_name,omitempty"`
	// The name of the tournament.
	TournamentName NullableString `json:"tournament_name,omitempty"`
	// The stage of the tournament.
	TournamentStage NullableString `json:"tournament_stage,omitempty"`
	// If you want to update an existing match, you can provide an update id.
	UpdateId NullableString `json:"update_id,omitempty"`
}

type _ESportsMatch ESportsMatch

// NewESportsMatch instantiates a new ESportsMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewESportsMatch(provider string) *ESportsMatch {
	this := ESportsMatch{}
	this.Provider = provider
	return &this
}

// NewESportsMatchWithDefaults instantiates a new ESportsMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewESportsMatchWithDefaults() *ESportsMatch {
	this := ESportsMatch{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetMatchId() int64 {
	if o == nil || IsNil(o.MatchId.Get()) {
		var ret int64
		return ret
	}
	return *o.MatchId.Get()
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetMatchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchId.Get(), o.MatchId.IsSet()
}

// HasMatchId returns a boolean if a field has been set.
func (o *ESportsMatch) HasMatchId() bool {
	if o != nil && o.MatchId.IsSet() {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given NullableInt64 and assigns it to the MatchId field.
func (o *ESportsMatch) SetMatchId(v int64) {
	o.MatchId.Set(&v)
}
// SetMatchIdNil sets the value for MatchId to be an explicit nil
func (o *ESportsMatch) SetMatchIdNil() {
	o.MatchId.Set(nil)
}

// UnsetMatchId ensures that no value is present for MatchId, not even an explicit nil
func (o *ESportsMatch) UnsetMatchId() {
	o.MatchId.Unset()
}

// GetProvider returns the Provider field value
func (o *ESportsMatch) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ESportsMatch) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ESportsMatch) SetProvider(v string) {
	o.Provider = v
}

// GetScheduledDate returns the ScheduledDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetScheduledDate() time.Time {
	if o == nil || IsNil(o.ScheduledDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledDate.Get()
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetScheduledDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduledDate.Get(), o.ScheduledDate.IsSet()
}

// HasScheduledDate returns a boolean if a field has been set.
func (o *ESportsMatch) HasScheduledDate() bool {
	if o != nil && o.ScheduledDate.IsSet() {
		return true
	}

	return false
}

// SetScheduledDate gets a reference to the given NullableTime and assigns it to the ScheduledDate field.
func (o *ESportsMatch) SetScheduledDate(v time.Time) {
	o.ScheduledDate.Set(&v)
}
// SetScheduledDateNil sets the value for ScheduledDate to be an explicit nil
func (o *ESportsMatch) SetScheduledDateNil() {
	o.ScheduledDate.Set(nil)
}

// UnsetScheduledDate ensures that no value is present for ScheduledDate, not even an explicit nil
func (o *ESportsMatch) UnsetScheduledDate() {
	o.ScheduledDate.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetStatus() ESportsMatchStatus {
	if o == nil || IsNil(o.Status.Get()) {
		var ret ESportsMatchStatus
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetStatusOk() (*ESportsMatchStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ESportsMatch) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableESportsMatchStatus and assigns it to the Status field.
func (o *ESportsMatch) SetStatus(v ESportsMatchStatus) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ESportsMatch) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ESportsMatch) UnsetStatus() {
	o.Status.Unset()
}

// GetTeam0Name returns the Team0Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetTeam0Name() string {
	if o == nil || IsNil(o.Team0Name.Get()) {
		var ret string
		return ret
	}
	return *o.Team0Name.Get()
}

// GetTeam0NameOk returns a tuple with the Team0Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetTeam0NameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team0Name.Get(), o.Team0Name.IsSet()
}

// HasTeam0Name returns a boolean if a field has been set.
func (o *ESportsMatch) HasTeam0Name() bool {
	if o != nil && o.Team0Name.IsSet() {
		return true
	}

	return false
}

// SetTeam0Name gets a reference to the given NullableString and assigns it to the Team0Name field.
func (o *ESportsMatch) SetTeam0Name(v string) {
	o.Team0Name.Set(&v)
}
// SetTeam0NameNil sets the value for Team0Name to be an explicit nil
func (o *ESportsMatch) SetTeam0NameNil() {
	o.Team0Name.Set(nil)
}

// UnsetTeam0Name ensures that no value is present for Team0Name, not even an explicit nil
func (o *ESportsMatch) UnsetTeam0Name() {
	o.Team0Name.Unset()
}

// GetTeam1Name returns the Team1Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetTeam1Name() string {
	if o == nil || IsNil(o.Team1Name.Get()) {
		var ret string
		return ret
	}
	return *o.Team1Name.Get()
}

// GetTeam1NameOk returns a tuple with the Team1Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetTeam1NameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team1Name.Get(), o.Team1Name.IsSet()
}

// HasTeam1Name returns a boolean if a field has been set.
func (o *ESportsMatch) HasTeam1Name() bool {
	if o != nil && o.Team1Name.IsSet() {
		return true
	}

	return false
}

// SetTeam1Name gets a reference to the given NullableString and assigns it to the Team1Name field.
func (o *ESportsMatch) SetTeam1Name(v string) {
	o.Team1Name.Set(&v)
}
// SetTeam1NameNil sets the value for Team1Name to be an explicit nil
func (o *ESportsMatch) SetTeam1NameNil() {
	o.Team1Name.Set(nil)
}

// UnsetTeam1Name ensures that no value is present for Team1Name, not even an explicit nil
func (o *ESportsMatch) UnsetTeam1Name() {
	o.Team1Name.Unset()
}

// GetTournamentName returns the TournamentName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetTournamentName() string {
	if o == nil || IsNil(o.TournamentName.Get()) {
		var ret string
		return ret
	}
	return *o.TournamentName.Get()
}

// GetTournamentNameOk returns a tuple with the TournamentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetTournamentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TournamentName.Get(), o.TournamentName.IsSet()
}

// HasTournamentName returns a boolean if a field has been set.
func (o *ESportsMatch) HasTournamentName() bool {
	if o != nil && o.TournamentName.IsSet() {
		return true
	}

	return false
}

// SetTournamentName gets a reference to the given NullableString and assigns it to the TournamentName field.
func (o *ESportsMatch) SetTournamentName(v string) {
	o.TournamentName.Set(&v)
}
// SetTournamentNameNil sets the value for TournamentName to be an explicit nil
func (o *ESportsMatch) SetTournamentNameNil() {
	o.TournamentName.Set(nil)
}

// UnsetTournamentName ensures that no value is present for TournamentName, not even an explicit nil
func (o *ESportsMatch) UnsetTournamentName() {
	o.TournamentName.Unset()
}

// GetTournamentStage returns the TournamentStage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetTournamentStage() string {
	if o == nil || IsNil(o.TournamentStage.Get()) {
		var ret string
		return ret
	}
	return *o.TournamentStage.Get()
}

// GetTournamentStageOk returns a tuple with the TournamentStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetTournamentStageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TournamentStage.Get(), o.TournamentStage.IsSet()
}

// HasTournamentStage returns a boolean if a field has been set.
func (o *ESportsMatch) HasTournamentStage() bool {
	if o != nil && o.TournamentStage.IsSet() {
		return true
	}

	return false
}

// SetTournamentStage gets a reference to the given NullableString and assigns it to the TournamentStage field.
func (o *ESportsMatch) SetTournamentStage(v string) {
	o.TournamentStage.Set(&v)
}
// SetTournamentStageNil sets the value for TournamentStage to be an explicit nil
func (o *ESportsMatch) SetTournamentStageNil() {
	o.TournamentStage.Set(nil)
}

// UnsetTournamentStage ensures that no value is present for TournamentStage, not even an explicit nil
func (o *ESportsMatch) UnsetTournamentStage() {
	o.TournamentStage.Unset()
}

// GetUpdateId returns the UpdateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ESportsMatch) GetUpdateId() string {
	if o == nil || IsNil(o.UpdateId.Get()) {
		var ret string
		return ret
	}
	return *o.UpdateId.Get()
}

// GetUpdateIdOk returns a tuple with the UpdateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESportsMatch) GetUpdateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateId.Get(), o.UpdateId.IsSet()
}

// HasUpdateId returns a boolean if a field has been set.
func (o *ESportsMatch) HasUpdateId() bool {
	if o != nil && o.UpdateId.IsSet() {
		return true
	}

	return false
}

// SetUpdateId gets a reference to the given NullableString and assigns it to the UpdateId field.
func (o *ESportsMatch) SetUpdateId(v string) {
	o.UpdateId.Set(&v)
}
// SetUpdateIdNil sets the value for UpdateId to be an explicit nil
func (o *ESportsMatch) SetUpdateIdNil() {
	o.UpdateId.Set(nil)
}

// UnsetUpdateId ensures that no value is present for UpdateId, not even an explicit nil
func (o *ESportsMatch) UnsetUpdateId() {
	o.UpdateId.Unset()
}

func (o ESportsMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ESportsMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MatchId.IsSet() {
		toSerialize["match_id"] = o.MatchId.Get()
	}
	toSerialize["provider"] = o.Provider
	if o.ScheduledDate.IsSet() {
		toSerialize["scheduled_date"] = o.ScheduledDate.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Team0Name.IsSet() {
		toSerialize["team0_name"] = o.Team0Name.Get()
	}
	if o.Team1Name.IsSet() {
		toSerialize["team1_name"] = o.Team1Name.Get()
	}
	if o.TournamentName.IsSet() {
		toSerialize["tournament_name"] = o.TournamentName.Get()
	}
	if o.TournamentStage.IsSet() {
		toSerialize["tournament_stage"] = o.TournamentStage.Get()
	}
	if o.UpdateId.IsSet() {
		toSerialize["update_id"] = o.UpdateId.Get()
	}
	return toSerialize, nil
}

func (o *ESportsMatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varESportsMatch := _ESportsMatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varESportsMatch)

	if err != nil {
		return err
	}

	*o = ESportsMatch(varESportsMatch)

	return err
}

type NullableESportsMatch struct {
	value *ESportsMatch
	isSet bool
}

func (v NullableESportsMatch) Get() *ESportsMatch {
	return v.value
}

func (v *NullableESportsMatch) Set(val *ESportsMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableESportsMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableESportsMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableESportsMatch(val *ESportsMatch) *NullableESportsMatch {
	return &NullableESportsMatch{value: val, isSet: true}
}

func (v NullableESportsMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableESportsMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


