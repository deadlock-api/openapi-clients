/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildHeroDetailsCategoryAbility type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildHeroDetailsCategoryAbility{}

// BuildHeroDetailsCategoryAbility struct for BuildHeroDetailsCategoryAbility
type BuildHeroDetailsCategoryAbility struct {
	AbilityId int32 `json:"ability_id"`
	Annotation NullableString `json:"annotation,omitempty"`
	ImbueTargetAbilityId NullableInt32 `json:"imbue_target_ability_id,omitempty"`
	RequiredFlexSlots NullableInt32 `json:"required_flex_slots,omitempty"`
	SellPriority NullableInt32 `json:"sell_priority,omitempty"`
}

type _BuildHeroDetailsCategoryAbility BuildHeroDetailsCategoryAbility

// NewBuildHeroDetailsCategoryAbility instantiates a new BuildHeroDetailsCategoryAbility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildHeroDetailsCategoryAbility(abilityId int32) *BuildHeroDetailsCategoryAbility {
	this := BuildHeroDetailsCategoryAbility{}
	this.AbilityId = abilityId
	return &this
}

// NewBuildHeroDetailsCategoryAbilityWithDefaults instantiates a new BuildHeroDetailsCategoryAbility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildHeroDetailsCategoryAbilityWithDefaults() *BuildHeroDetailsCategoryAbility {
	this := BuildHeroDetailsCategoryAbility{}
	return &this
}

// GetAbilityId returns the AbilityId field value
func (o *BuildHeroDetailsCategoryAbility) GetAbilityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AbilityId
}

// GetAbilityIdOk returns a tuple with the AbilityId field value
// and a boolean to check if the value has been set.
func (o *BuildHeroDetailsCategoryAbility) GetAbilityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbilityId, true
}

// SetAbilityId sets field value
func (o *BuildHeroDetailsCategoryAbility) SetAbilityId(v int32) {
	o.AbilityId = v
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategoryAbility) GetAnnotation() string {
	if o == nil || IsNil(o.Annotation.Get()) {
		var ret string
		return ret
	}
	return *o.Annotation.Get()
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategoryAbility) GetAnnotationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Annotation.Get(), o.Annotation.IsSet()
}

// HasAnnotation returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategoryAbility) HasAnnotation() bool {
	if o != nil && o.Annotation.IsSet() {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given NullableString and assigns it to the Annotation field.
func (o *BuildHeroDetailsCategoryAbility) SetAnnotation(v string) {
	o.Annotation.Set(&v)
}
// SetAnnotationNil sets the value for Annotation to be an explicit nil
func (o *BuildHeroDetailsCategoryAbility) SetAnnotationNil() {
	o.Annotation.Set(nil)
}

// UnsetAnnotation ensures that no value is present for Annotation, not even an explicit nil
func (o *BuildHeroDetailsCategoryAbility) UnsetAnnotation() {
	o.Annotation.Unset()
}

// GetImbueTargetAbilityId returns the ImbueTargetAbilityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategoryAbility) GetImbueTargetAbilityId() int32 {
	if o == nil || IsNil(o.ImbueTargetAbilityId.Get()) {
		var ret int32
		return ret
	}
	return *o.ImbueTargetAbilityId.Get()
}

// GetImbueTargetAbilityIdOk returns a tuple with the ImbueTargetAbilityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategoryAbility) GetImbueTargetAbilityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImbueTargetAbilityId.Get(), o.ImbueTargetAbilityId.IsSet()
}

// HasImbueTargetAbilityId returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategoryAbility) HasImbueTargetAbilityId() bool {
	if o != nil && o.ImbueTargetAbilityId.IsSet() {
		return true
	}

	return false
}

// SetImbueTargetAbilityId gets a reference to the given NullableInt32 and assigns it to the ImbueTargetAbilityId field.
func (o *BuildHeroDetailsCategoryAbility) SetImbueTargetAbilityId(v int32) {
	o.ImbueTargetAbilityId.Set(&v)
}
// SetImbueTargetAbilityIdNil sets the value for ImbueTargetAbilityId to be an explicit nil
func (o *BuildHeroDetailsCategoryAbility) SetImbueTargetAbilityIdNil() {
	o.ImbueTargetAbilityId.Set(nil)
}

// UnsetImbueTargetAbilityId ensures that no value is present for ImbueTargetAbilityId, not even an explicit nil
func (o *BuildHeroDetailsCategoryAbility) UnsetImbueTargetAbilityId() {
	o.ImbueTargetAbilityId.Unset()
}

// GetRequiredFlexSlots returns the RequiredFlexSlots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategoryAbility) GetRequiredFlexSlots() int32 {
	if o == nil || IsNil(o.RequiredFlexSlots.Get()) {
		var ret int32
		return ret
	}
	return *o.RequiredFlexSlots.Get()
}

// GetRequiredFlexSlotsOk returns a tuple with the RequiredFlexSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategoryAbility) GetRequiredFlexSlotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFlexSlots.Get(), o.RequiredFlexSlots.IsSet()
}

// HasRequiredFlexSlots returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategoryAbility) HasRequiredFlexSlots() bool {
	if o != nil && o.RequiredFlexSlots.IsSet() {
		return true
	}

	return false
}

// SetRequiredFlexSlots gets a reference to the given NullableInt32 and assigns it to the RequiredFlexSlots field.
func (o *BuildHeroDetailsCategoryAbility) SetRequiredFlexSlots(v int32) {
	o.RequiredFlexSlots.Set(&v)
}
// SetRequiredFlexSlotsNil sets the value for RequiredFlexSlots to be an explicit nil
func (o *BuildHeroDetailsCategoryAbility) SetRequiredFlexSlotsNil() {
	o.RequiredFlexSlots.Set(nil)
}

// UnsetRequiredFlexSlots ensures that no value is present for RequiredFlexSlots, not even an explicit nil
func (o *BuildHeroDetailsCategoryAbility) UnsetRequiredFlexSlots() {
	o.RequiredFlexSlots.Unset()
}

// GetSellPriority returns the SellPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetailsCategoryAbility) GetSellPriority() int32 {
	if o == nil || IsNil(o.SellPriority.Get()) {
		var ret int32
		return ret
	}
	return *o.SellPriority.Get()
}

// GetSellPriorityOk returns a tuple with the SellPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetailsCategoryAbility) GetSellPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellPriority.Get(), o.SellPriority.IsSet()
}

// HasSellPriority returns a boolean if a field has been set.
func (o *BuildHeroDetailsCategoryAbility) HasSellPriority() bool {
	if o != nil && o.SellPriority.IsSet() {
		return true
	}

	return false
}

// SetSellPriority gets a reference to the given NullableInt32 and assigns it to the SellPriority field.
func (o *BuildHeroDetailsCategoryAbility) SetSellPriority(v int32) {
	o.SellPriority.Set(&v)
}
// SetSellPriorityNil sets the value for SellPriority to be an explicit nil
func (o *BuildHeroDetailsCategoryAbility) SetSellPriorityNil() {
	o.SellPriority.Set(nil)
}

// UnsetSellPriority ensures that no value is present for SellPriority, not even an explicit nil
func (o *BuildHeroDetailsCategoryAbility) UnsetSellPriority() {
	o.SellPriority.Unset()
}

func (o BuildHeroDetailsCategoryAbility) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildHeroDetailsCategoryAbility) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ability_id"] = o.AbilityId
	if o.Annotation.IsSet() {
		toSerialize["annotation"] = o.Annotation.Get()
	}
	if o.ImbueTargetAbilityId.IsSet() {
		toSerialize["imbue_target_ability_id"] = o.ImbueTargetAbilityId.Get()
	}
	if o.RequiredFlexSlots.IsSet() {
		toSerialize["required_flex_slots"] = o.RequiredFlexSlots.Get()
	}
	if o.SellPriority.IsSet() {
		toSerialize["sell_priority"] = o.SellPriority.Get()
	}
	return toSerialize, nil
}

func (o *BuildHeroDetailsCategoryAbility) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ability_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildHeroDetailsCategoryAbility := _BuildHeroDetailsCategoryAbility{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildHeroDetailsCategoryAbility)

	if err != nil {
		return err
	}

	*o = BuildHeroDetailsCategoryAbility(varBuildHeroDetailsCategoryAbility)

	return err
}

type NullableBuildHeroDetailsCategoryAbility struct {
	value *BuildHeroDetailsCategoryAbility
	isSet bool
}

func (v NullableBuildHeroDetailsCategoryAbility) Get() *BuildHeroDetailsCategoryAbility {
	return v.value
}

func (v *NullableBuildHeroDetailsCategoryAbility) Set(val *BuildHeroDetailsCategoryAbility) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildHeroDetailsCategoryAbility) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildHeroDetailsCategoryAbility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildHeroDetailsCategoryAbility(val *BuildHeroDetailsCategoryAbility) *NullableBuildHeroDetailsCategoryAbility {
	return &NullableBuildHeroDetailsCategoryAbility{value: val, isSet: true}
}

func (v NullableBuildHeroDetailsCategoryAbility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildHeroDetailsCategoryAbility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


