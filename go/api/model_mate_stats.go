/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MateStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MateStats{}

// MateStats struct for MateStats
type MateStats struct {
	Matches []int64 `json:"matches"`
	MatchesPlayed int64 `json:"matches_played"`
	MateId int32 `json:"mate_id"`
	Wins int64 `json:"wins"`
}

type _MateStats MateStats

// NewMateStats instantiates a new MateStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMateStats(matches []int64, matchesPlayed int64, mateId int32, wins int64) *MateStats {
	this := MateStats{}
	this.Matches = matches
	this.MatchesPlayed = matchesPlayed
	this.MateId = mateId
	this.Wins = wins
	return &this
}

// NewMateStatsWithDefaults instantiates a new MateStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMateStatsWithDefaults() *MateStats {
	this := MateStats{}
	return &this
}

// GetMatches returns the Matches field value
func (o *MateStats) GetMatches() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *MateStats) GetMatchesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matches, true
}

// SetMatches sets field value
func (o *MateStats) SetMatches(v []int64) {
	o.Matches = v
}

// GetMatchesPlayed returns the MatchesPlayed field value
func (o *MateStats) GetMatchesPlayed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchesPlayed
}

// GetMatchesPlayedOk returns a tuple with the MatchesPlayed field value
// and a boolean to check if the value has been set.
func (o *MateStats) GetMatchesPlayedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchesPlayed, true
}

// SetMatchesPlayed sets field value
func (o *MateStats) SetMatchesPlayed(v int64) {
	o.MatchesPlayed = v
}

// GetMateId returns the MateId field value
func (o *MateStats) GetMateId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MateId
}

// GetMateIdOk returns a tuple with the MateId field value
// and a boolean to check if the value has been set.
func (o *MateStats) GetMateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MateId, true
}

// SetMateId sets field value
func (o *MateStats) SetMateId(v int32) {
	o.MateId = v
}

// GetWins returns the Wins field value
func (o *MateStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *MateStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *MateStats) SetWins(v int64) {
	o.Wins = v
}

func (o MateStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MateStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matches"] = o.Matches
	toSerialize["matches_played"] = o.MatchesPlayed
	toSerialize["mate_id"] = o.MateId
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *MateStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matches",
		"matches_played",
		"mate_id",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMateStats := _MateStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMateStats)

	if err != nil {
		return err
	}

	*o = MateStats(varMateStats)

	return err
}

type NullableMateStats struct {
	value *MateStats
	isSet bool
}

func (v NullableMateStats) Get() *MateStats {
	return v.value
}

func (v *NullableMateStats) Set(val *MateStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMateStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMateStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMateStats(val *MateStats) *NullableMateStats {
	return &NullableMateStats{value: val, isSet: true}
}

func (v NullableMateStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMateStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


