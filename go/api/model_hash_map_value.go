/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HashMapValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HashMapValue{}

// HashMapValue struct for HashMapValue
type HashMapValue struct {
	Avg float64 `json:"avg"`
	Percentile1 float64 `json:"percentile1"`
	Percentile10 float64 `json:"percentile10"`
	Percentile25 float64 `json:"percentile25"`
	Percentile5 float64 `json:"percentile5"`
	Percentile50 float64 `json:"percentile50"`
	Percentile75 float64 `json:"percentile75"`
	Percentile90 float64 `json:"percentile90"`
	Percentile95 float64 `json:"percentile95"`
	Percentile99 float64 `json:"percentile99"`
	Std float64 `json:"std"`
}

type _HashMapValue HashMapValue

// NewHashMapValue instantiates a new HashMapValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashMapValue(avg float64, percentile1 float64, percentile10 float64, percentile25 float64, percentile5 float64, percentile50 float64, percentile75 float64, percentile90 float64, percentile95 float64, percentile99 float64, std float64) *HashMapValue {
	this := HashMapValue{}
	this.Avg = avg
	this.Percentile1 = percentile1
	this.Percentile10 = percentile10
	this.Percentile25 = percentile25
	this.Percentile5 = percentile5
	this.Percentile50 = percentile50
	this.Percentile75 = percentile75
	this.Percentile90 = percentile90
	this.Percentile95 = percentile95
	this.Percentile99 = percentile99
	this.Std = std
	return &this
}

// NewHashMapValueWithDefaults instantiates a new HashMapValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashMapValueWithDefaults() *HashMapValue {
	this := HashMapValue{}
	return &this
}

// GetAvg returns the Avg field value
func (o *HashMapValue) GetAvg() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Avg
}

// GetAvgOk returns a tuple with the Avg field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetAvgOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avg, true
}

// SetAvg sets field value
func (o *HashMapValue) SetAvg(v float64) {
	o.Avg = v
}

// GetPercentile1 returns the Percentile1 field value
func (o *HashMapValue) GetPercentile1() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile1
}

// GetPercentile1Ok returns a tuple with the Percentile1 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile1Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile1, true
}

// SetPercentile1 sets field value
func (o *HashMapValue) SetPercentile1(v float64) {
	o.Percentile1 = v
}

// GetPercentile10 returns the Percentile10 field value
func (o *HashMapValue) GetPercentile10() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile10
}

// GetPercentile10Ok returns a tuple with the Percentile10 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile10Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile10, true
}

// SetPercentile10 sets field value
func (o *HashMapValue) SetPercentile10(v float64) {
	o.Percentile10 = v
}

// GetPercentile25 returns the Percentile25 field value
func (o *HashMapValue) GetPercentile25() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile25
}

// GetPercentile25Ok returns a tuple with the Percentile25 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile25Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile25, true
}

// SetPercentile25 sets field value
func (o *HashMapValue) SetPercentile25(v float64) {
	o.Percentile25 = v
}

// GetPercentile5 returns the Percentile5 field value
func (o *HashMapValue) GetPercentile5() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile5
}

// GetPercentile5Ok returns a tuple with the Percentile5 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile5Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile5, true
}

// SetPercentile5 sets field value
func (o *HashMapValue) SetPercentile5(v float64) {
	o.Percentile5 = v
}

// GetPercentile50 returns the Percentile50 field value
func (o *HashMapValue) GetPercentile50() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile50
}

// GetPercentile50Ok returns a tuple with the Percentile50 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile50Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile50, true
}

// SetPercentile50 sets field value
func (o *HashMapValue) SetPercentile50(v float64) {
	o.Percentile50 = v
}

// GetPercentile75 returns the Percentile75 field value
func (o *HashMapValue) GetPercentile75() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile75
}

// GetPercentile75Ok returns a tuple with the Percentile75 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile75Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile75, true
}

// SetPercentile75 sets field value
func (o *HashMapValue) SetPercentile75(v float64) {
	o.Percentile75 = v
}

// GetPercentile90 returns the Percentile90 field value
func (o *HashMapValue) GetPercentile90() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile90
}

// GetPercentile90Ok returns a tuple with the Percentile90 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile90Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile90, true
}

// SetPercentile90 sets field value
func (o *HashMapValue) SetPercentile90(v float64) {
	o.Percentile90 = v
}

// GetPercentile95 returns the Percentile95 field value
func (o *HashMapValue) GetPercentile95() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile95
}

// GetPercentile95Ok returns a tuple with the Percentile95 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile95Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile95, true
}

// SetPercentile95 sets field value
func (o *HashMapValue) SetPercentile95(v float64) {
	o.Percentile95 = v
}

// GetPercentile99 returns the Percentile99 field value
func (o *HashMapValue) GetPercentile99() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile99
}

// GetPercentile99Ok returns a tuple with the Percentile99 field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetPercentile99Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile99, true
}

// SetPercentile99 sets field value
func (o *HashMapValue) SetPercentile99(v float64) {
	o.Percentile99 = v
}

// GetStd returns the Std field value
func (o *HashMapValue) GetStd() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Std
}

// GetStdOk returns a tuple with the Std field value
// and a boolean to check if the value has been set.
func (o *HashMapValue) GetStdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Std, true
}

// SetStd sets field value
func (o *HashMapValue) SetStd(v float64) {
	o.Std = v
}

func (o HashMapValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HashMapValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avg"] = o.Avg
	toSerialize["percentile1"] = o.Percentile1
	toSerialize["percentile10"] = o.Percentile10
	toSerialize["percentile25"] = o.Percentile25
	toSerialize["percentile5"] = o.Percentile5
	toSerialize["percentile50"] = o.Percentile50
	toSerialize["percentile75"] = o.Percentile75
	toSerialize["percentile90"] = o.Percentile90
	toSerialize["percentile95"] = o.Percentile95
	toSerialize["percentile99"] = o.Percentile99
	toSerialize["std"] = o.Std
	return toSerialize, nil
}

func (o *HashMapValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avg",
		"percentile1",
		"percentile10",
		"percentile25",
		"percentile5",
		"percentile50",
		"percentile75",
		"percentile90",
		"percentile95",
		"percentile99",
		"std",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHashMapValue := _HashMapValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHashMapValue)

	if err != nil {
		return err
	}

	*o = HashMapValue(varHashMapValue)

	return err
}

type NullableHashMapValue struct {
	value *HashMapValue
	isSet bool
}

func (v NullableHashMapValue) Get() *HashMapValue {
	return v.value
}

func (v *NullableHashMapValue) Set(val *HashMapValue) {
	v.value = val
	v.isSet = true
}

func (v NullableHashMapValue) IsSet() bool {
	return v.isSet
}

func (v *NullableHashMapValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashMapValue(val *HashMapValue) *NullableHashMapValue {
	return &NullableHashMapValue{value: val, isSet: true}
}

func (v NullableHashMapValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashMapValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


