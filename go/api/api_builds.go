/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BuildsAPIService BuildsAPI service
type BuildsAPIService service

type ApiSearchBuildsRequest struct {
	ctx context.Context
	ApiService *BuildsAPIService
	minUnixTimestamp *int64
	maxUnixTimestamp *int64
	minPublishedUnixTimestamp *int64
	maxPublishedUnixTimestamp *int64
	sortBy *string
	start *int32
	limit *int32
	sortDirection *string
	searchName *string
	searchDescription *string
	onlyLatest *bool
	language *int32
	buildId *int32
	version *int32
	heroId *int32
	tag *int32
	rollupCategory *int32
	authorId *int32
}

// Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp).
func (r ApiSearchBuildsRequest) MinUnixTimestamp(minUnixTimestamp int64) ApiSearchBuildsRequest {
	r.minUnixTimestamp = &minUnixTimestamp
	return r
}

// Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp).
func (r ApiSearchBuildsRequest) MaxUnixTimestamp(maxUnixTimestamp int64) ApiSearchBuildsRequest {
	r.maxUnixTimestamp = &maxUnixTimestamp
	return r
}

// Filter builds based on their published time (Unix timestamp).
func (r ApiSearchBuildsRequest) MinPublishedUnixTimestamp(minPublishedUnixTimestamp int64) ApiSearchBuildsRequest {
	r.minPublishedUnixTimestamp = &minPublishedUnixTimestamp
	return r
}

// Filter builds based on their published time (Unix timestamp).
func (r ApiSearchBuildsRequest) MaxPublishedUnixTimestamp(maxPublishedUnixTimestamp int64) ApiSearchBuildsRequest {
	r.maxPublishedUnixTimestamp = &maxPublishedUnixTimestamp
	return r
}

// The field to sort the builds by.
func (r ApiSearchBuildsRequest) SortBy(sortBy string) ApiSearchBuildsRequest {
	r.sortBy = &sortBy
	return r
}

// The index of the first build to return.
func (r ApiSearchBuildsRequest) Start(start int32) ApiSearchBuildsRequest {
	r.start = &start
	return r
}

// The maximum number of builds to return.
func (r ApiSearchBuildsRequest) Limit(limit int32) ApiSearchBuildsRequest {
	r.limit = &limit
	return r
}

// The direction to sort the builds in.
func (r ApiSearchBuildsRequest) SortDirection(sortDirection string) ApiSearchBuildsRequest {
	r.sortDirection = &sortDirection
	return r
}

// Search for builds with a name containing this string.
func (r ApiSearchBuildsRequest) SearchName(searchName string) ApiSearchBuildsRequest {
	r.searchName = &searchName
	return r
}

// Search for builds with a description containing this string.
func (r ApiSearchBuildsRequest) SearchDescription(searchDescription string) ApiSearchBuildsRequest {
	r.searchDescription = &searchDescription
	return r
}

// Only return the latest version of each build.
func (r ApiSearchBuildsRequest) OnlyLatest(onlyLatest bool) ApiSearchBuildsRequest {
	r.onlyLatest = &onlyLatest
	return r
}

// Filter builds by language.
func (r ApiSearchBuildsRequest) Language(language int32) ApiSearchBuildsRequest {
	r.language = &language
	return r
}

// Filter builds by ID.
func (r ApiSearchBuildsRequest) BuildId(buildId int32) ApiSearchBuildsRequest {
	r.buildId = &buildId
	return r
}

// Filter builds by version.
func (r ApiSearchBuildsRequest) Version(version int32) ApiSearchBuildsRequest {
	r.version = &version
	return r
}

// Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt;
func (r ApiSearchBuildsRequest) HeroId(heroId int32) ApiSearchBuildsRequest {
	r.heroId = &heroId
	return r
}

// Filter builds by tag.
func (r ApiSearchBuildsRequest) Tag(tag int32) ApiSearchBuildsRequest {
	r.tag = &tag
	return r
}

// Filter builds by rollup category.
func (r ApiSearchBuildsRequest) RollupCategory(rollupCategory int32) ApiSearchBuildsRequest {
	r.rollupCategory = &rollupCategory
	return r
}

// The author&#39;s &#x60;SteamID3&#x60;
func (r ApiSearchBuildsRequest) AuthorId(authorId int32) ApiSearchBuildsRequest {
	r.authorId = &authorId
	return r
}

func (r ApiSearchBuildsRequest) Execute() ([]Build, *http.Response, error) {
	return r.ApiService.SearchBuildsExecute(r)
}

/*
SearchBuilds Search


Search for builds based on various criteria.

### Rate Limits:
| Type | Limit |
| ---- | ----- |
| IP | 100req/s |
| Key | - |
| Global | - |
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchBuildsRequest
*/
func (a *BuildsAPIService) SearchBuilds(ctx context.Context) ApiSearchBuildsRequest {
	return ApiSearchBuildsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Build
func (a *BuildsAPIService) SearchBuildsExecute(r ApiSearchBuildsRequest) ([]Build, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Build
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsAPIService.SearchBuilds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minUnixTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_unix_timestamp", r.minUnixTimestamp, "form", "")
	}
	if r.maxUnixTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_unix_timestamp", r.maxUnixTimestamp, "form", "")
	}
	if r.minPublishedUnixTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_published_unix_timestamp", r.minPublishedUnixTimestamp, "form", "")
	}
	if r.maxPublishedUnixTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_published_unix_timestamp", r.maxPublishedUnixTimestamp, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
        var defaultValue int32 = 100
        parameterAddToHeaderOrQuery(localVarQueryParams, "limit", defaultValue, "form", "")
        r.limit = &defaultValue
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_direction", r.sortDirection, "form", "")
	}
	if r.searchName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_name", r.searchName, "form", "")
	}
	if r.searchDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_description", r.searchDescription, "form", "")
	}
	if r.onlyLatest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "only_latest", r.onlyLatest, "form", "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "form", "")
	}
	if r.buildId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_id", r.buildId, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.heroId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hero_id", r.heroId, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.rollupCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rollup_category", r.rollupCategory, "form", "")
	}
	if r.authorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "author_id", r.authorId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
