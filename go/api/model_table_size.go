/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TableSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableSize{}

// TableSize struct for TableSize
type TableSize struct {
	// Compressed size of the table in bytes.
	DataCompressedBytes NullableInt64 `json:"data_compressed_bytes,omitempty"`
	// Uncompressed size of the table in bytes.
	DataUncompressedBytes NullableInt64 `json:"data_uncompressed_bytes,omitempty"`
	// Whether the table is a view.
	IsView bool `json:"is_view"`
	// Number of rows in the table.
	Rows NullableInt64 `json:"rows,omitempty"`
}

type _TableSize TableSize

// NewTableSize instantiates a new TableSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableSize(isView bool) *TableSize {
	this := TableSize{}
	this.IsView = isView
	return &this
}

// NewTableSizeWithDefaults instantiates a new TableSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableSizeWithDefaults() *TableSize {
	this := TableSize{}
	return &this
}

// GetDataCompressedBytes returns the DataCompressedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TableSize) GetDataCompressedBytes() int64 {
	if o == nil || IsNil(o.DataCompressedBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DataCompressedBytes.Get()
}

// GetDataCompressedBytesOk returns a tuple with the DataCompressedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TableSize) GetDataCompressedBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataCompressedBytes.Get(), o.DataCompressedBytes.IsSet()
}

// HasDataCompressedBytes returns a boolean if a field has been set.
func (o *TableSize) HasDataCompressedBytes() bool {
	if o != nil && o.DataCompressedBytes.IsSet() {
		return true
	}

	return false
}

// SetDataCompressedBytes gets a reference to the given NullableInt64 and assigns it to the DataCompressedBytes field.
func (o *TableSize) SetDataCompressedBytes(v int64) {
	o.DataCompressedBytes.Set(&v)
}
// SetDataCompressedBytesNil sets the value for DataCompressedBytes to be an explicit nil
func (o *TableSize) SetDataCompressedBytesNil() {
	o.DataCompressedBytes.Set(nil)
}

// UnsetDataCompressedBytes ensures that no value is present for DataCompressedBytes, not even an explicit nil
func (o *TableSize) UnsetDataCompressedBytes() {
	o.DataCompressedBytes.Unset()
}

// GetDataUncompressedBytes returns the DataUncompressedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TableSize) GetDataUncompressedBytes() int64 {
	if o == nil || IsNil(o.DataUncompressedBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DataUncompressedBytes.Get()
}

// GetDataUncompressedBytesOk returns a tuple with the DataUncompressedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TableSize) GetDataUncompressedBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataUncompressedBytes.Get(), o.DataUncompressedBytes.IsSet()
}

// HasDataUncompressedBytes returns a boolean if a field has been set.
func (o *TableSize) HasDataUncompressedBytes() bool {
	if o != nil && o.DataUncompressedBytes.IsSet() {
		return true
	}

	return false
}

// SetDataUncompressedBytes gets a reference to the given NullableInt64 and assigns it to the DataUncompressedBytes field.
func (o *TableSize) SetDataUncompressedBytes(v int64) {
	o.DataUncompressedBytes.Set(&v)
}
// SetDataUncompressedBytesNil sets the value for DataUncompressedBytes to be an explicit nil
func (o *TableSize) SetDataUncompressedBytesNil() {
	o.DataUncompressedBytes.Set(nil)
}

// UnsetDataUncompressedBytes ensures that no value is present for DataUncompressedBytes, not even an explicit nil
func (o *TableSize) UnsetDataUncompressedBytes() {
	o.DataUncompressedBytes.Unset()
}

// GetIsView returns the IsView field value
func (o *TableSize) GetIsView() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsView
}

// GetIsViewOk returns a tuple with the IsView field value
// and a boolean to check if the value has been set.
func (o *TableSize) GetIsViewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsView, true
}

// SetIsView sets field value
func (o *TableSize) SetIsView(v bool) {
	o.IsView = v
}

// GetRows returns the Rows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TableSize) GetRows() int64 {
	if o == nil || IsNil(o.Rows.Get()) {
		var ret int64
		return ret
	}
	return *o.Rows.Get()
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TableSize) GetRowsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rows.Get(), o.Rows.IsSet()
}

// HasRows returns a boolean if a field has been set.
func (o *TableSize) HasRows() bool {
	if o != nil && o.Rows.IsSet() {
		return true
	}

	return false
}

// SetRows gets a reference to the given NullableInt64 and assigns it to the Rows field.
func (o *TableSize) SetRows(v int64) {
	o.Rows.Set(&v)
}
// SetRowsNil sets the value for Rows to be an explicit nil
func (o *TableSize) SetRowsNil() {
	o.Rows.Set(nil)
}

// UnsetRows ensures that no value is present for Rows, not even an explicit nil
func (o *TableSize) UnsetRows() {
	o.Rows.Unset()
}

func (o TableSize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataCompressedBytes.IsSet() {
		toSerialize["data_compressed_bytes"] = o.DataCompressedBytes.Get()
	}
	if o.DataUncompressedBytes.IsSet() {
		toSerialize["data_uncompressed_bytes"] = o.DataUncompressedBytes.Get()
	}
	toSerialize["is_view"] = o.IsView
	if o.Rows.IsSet() {
		toSerialize["rows"] = o.Rows.Get()
	}
	return toSerialize, nil
}

func (o *TableSize) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_view",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTableSize := _TableSize{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTableSize)

	if err != nil {
		return err
	}

	*o = TableSize(varTableSize)

	return err
}

type NullableTableSize struct {
	value *TableSize
	isSet bool
}

func (v NullableTableSize) Get() *TableSize {
	return v.value
}

func (v *NullableTableSize) Set(val *TableSize) {
	v.value = val
	v.isSet = true
}

func (v NullableTableSize) IsSet() bool {
	return v.isSet
}

func (v *NullableTableSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableSize(val *TableSize) *NullableTableSize {
	return &NullableTableSize{value: val, isSet: true}
}

func (v NullableTableSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


