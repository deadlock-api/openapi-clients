/*
Deadlock API

Testing MatchesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package deadlock-api-client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_deadlock-api-client_MatchesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MatchesAPIService ActiveMatches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MatchesAPI.ActiveMatches(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService ActiveMatchesRaw", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MatchesAPI.ActiveMatchesRaw(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService BadgeDistribution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MatchesAPI.BadgeDistribution(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService BulkMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MatchesAPI.BulkMetadata(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService Metadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var matchId int64

		httpRes, err := apiClient.MatchesAPI.Metadata(context.Background(), matchId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService MetadataRaw", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var matchId int64

		resp, httpRes, err := apiClient.MatchesAPI.MetadataRaw(context.Background(), matchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService RecentlyFetched", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MatchesAPI.RecentlyFetched(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService Salts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var matchId int64

		resp, httpRes, err := apiClient.MatchesAPI.Salts(context.Background(), matchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatchesAPIService Url", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var matchId int64

		resp, httpRes, err := apiClient.MatchesAPI.Url(context.Background(), matchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
