/*
Deadlock API

Testing PlayersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package deadlock-api-client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_deadlock-api-client_PlayersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlayersAPIService Card", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId int32

		resp, httpRes, err := apiClient.PlayersAPI.Card(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService EnemyStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId int32

		resp, httpRes, err := apiClient.PlayersAPI.EnemyStats(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService MatchHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId int32

		resp, httpRes, err := apiClient.PlayersAPI.MatchHistory(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService MateStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId int32

		resp, httpRes, err := apiClient.PlayersAPI.MateStats(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService PartyStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId int32

		resp, httpRes, err := apiClient.PlayersAPI.PartyStats(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService PlayerHeroStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayersAPI.PlayerHeroStats(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService Steam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayersAPI.Steam(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayersAPIService SteamSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayersAPI.SteamSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
