/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Build type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Build{}

// Build struct for Build
type Build struct {
	HeroBuild BuildHero `json:"hero_build"`
	NumFavorites NullableInt32 `json:"num_favorites,omitempty"`
	NumIgnores NullableInt32 `json:"num_ignores,omitempty"`
	NumReports NullableInt32 `json:"num_reports,omitempty"`
	NumWeeklyFavorites NullableInt32 `json:"num_weekly_favorites,omitempty"`
	RollupCategory NullableInt32 `json:"rollup_category,omitempty"`
}

type _Build Build

// NewBuild instantiates a new Build object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuild(heroBuild BuildHero) *Build {
	this := Build{}
	this.HeroBuild = heroBuild
	return &this
}

// NewBuildWithDefaults instantiates a new Build object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildWithDefaults() *Build {
	this := Build{}
	return &this
}

// GetHeroBuild returns the HeroBuild field value
func (o *Build) GetHeroBuild() BuildHero {
	if o == nil {
		var ret BuildHero
		return ret
	}

	return o.HeroBuild
}

// GetHeroBuildOk returns a tuple with the HeroBuild field value
// and a boolean to check if the value has been set.
func (o *Build) GetHeroBuildOk() (*BuildHero, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroBuild, true
}

// SetHeroBuild sets field value
func (o *Build) SetHeroBuild(v BuildHero) {
	o.HeroBuild = v
}

// GetNumFavorites returns the NumFavorites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Build) GetNumFavorites() int32 {
	if o == nil || IsNil(o.NumFavorites.Get()) {
		var ret int32
		return ret
	}
	return *o.NumFavorites.Get()
}

// GetNumFavoritesOk returns a tuple with the NumFavorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Build) GetNumFavoritesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFavorites.Get(), o.NumFavorites.IsSet()
}

// HasNumFavorites returns a boolean if a field has been set.
func (o *Build) HasNumFavorites() bool {
	if o != nil && o.NumFavorites.IsSet() {
		return true
	}

	return false
}

// SetNumFavorites gets a reference to the given NullableInt32 and assigns it to the NumFavorites field.
func (o *Build) SetNumFavorites(v int32) {
	o.NumFavorites.Set(&v)
}
// SetNumFavoritesNil sets the value for NumFavorites to be an explicit nil
func (o *Build) SetNumFavoritesNil() {
	o.NumFavorites.Set(nil)
}

// UnsetNumFavorites ensures that no value is present for NumFavorites, not even an explicit nil
func (o *Build) UnsetNumFavorites() {
	o.NumFavorites.Unset()
}

// GetNumIgnores returns the NumIgnores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Build) GetNumIgnores() int32 {
	if o == nil || IsNil(o.NumIgnores.Get()) {
		var ret int32
		return ret
	}
	return *o.NumIgnores.Get()
}

// GetNumIgnoresOk returns a tuple with the NumIgnores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Build) GetNumIgnoresOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumIgnores.Get(), o.NumIgnores.IsSet()
}

// HasNumIgnores returns a boolean if a field has been set.
func (o *Build) HasNumIgnores() bool {
	if o != nil && o.NumIgnores.IsSet() {
		return true
	}

	return false
}

// SetNumIgnores gets a reference to the given NullableInt32 and assigns it to the NumIgnores field.
func (o *Build) SetNumIgnores(v int32) {
	o.NumIgnores.Set(&v)
}
// SetNumIgnoresNil sets the value for NumIgnores to be an explicit nil
func (o *Build) SetNumIgnoresNil() {
	o.NumIgnores.Set(nil)
}

// UnsetNumIgnores ensures that no value is present for NumIgnores, not even an explicit nil
func (o *Build) UnsetNumIgnores() {
	o.NumIgnores.Unset()
}

// GetNumReports returns the NumReports field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Build) GetNumReports() int32 {
	if o == nil || IsNil(o.NumReports.Get()) {
		var ret int32
		return ret
	}
	return *o.NumReports.Get()
}

// GetNumReportsOk returns a tuple with the NumReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Build) GetNumReportsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumReports.Get(), o.NumReports.IsSet()
}

// HasNumReports returns a boolean if a field has been set.
func (o *Build) HasNumReports() bool {
	if o != nil && o.NumReports.IsSet() {
		return true
	}

	return false
}

// SetNumReports gets a reference to the given NullableInt32 and assigns it to the NumReports field.
func (o *Build) SetNumReports(v int32) {
	o.NumReports.Set(&v)
}
// SetNumReportsNil sets the value for NumReports to be an explicit nil
func (o *Build) SetNumReportsNil() {
	o.NumReports.Set(nil)
}

// UnsetNumReports ensures that no value is present for NumReports, not even an explicit nil
func (o *Build) UnsetNumReports() {
	o.NumReports.Unset()
}

// GetNumWeeklyFavorites returns the NumWeeklyFavorites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Build) GetNumWeeklyFavorites() int32 {
	if o == nil || IsNil(o.NumWeeklyFavorites.Get()) {
		var ret int32
		return ret
	}
	return *o.NumWeeklyFavorites.Get()
}

// GetNumWeeklyFavoritesOk returns a tuple with the NumWeeklyFavorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Build) GetNumWeeklyFavoritesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumWeeklyFavorites.Get(), o.NumWeeklyFavorites.IsSet()
}

// HasNumWeeklyFavorites returns a boolean if a field has been set.
func (o *Build) HasNumWeeklyFavorites() bool {
	if o != nil && o.NumWeeklyFavorites.IsSet() {
		return true
	}

	return false
}

// SetNumWeeklyFavorites gets a reference to the given NullableInt32 and assigns it to the NumWeeklyFavorites field.
func (o *Build) SetNumWeeklyFavorites(v int32) {
	o.NumWeeklyFavorites.Set(&v)
}
// SetNumWeeklyFavoritesNil sets the value for NumWeeklyFavorites to be an explicit nil
func (o *Build) SetNumWeeklyFavoritesNil() {
	o.NumWeeklyFavorites.Set(nil)
}

// UnsetNumWeeklyFavorites ensures that no value is present for NumWeeklyFavorites, not even an explicit nil
func (o *Build) UnsetNumWeeklyFavorites() {
	o.NumWeeklyFavorites.Unset()
}

// GetRollupCategory returns the RollupCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Build) GetRollupCategory() int32 {
	if o == nil || IsNil(o.RollupCategory.Get()) {
		var ret int32
		return ret
	}
	return *o.RollupCategory.Get()
}

// GetRollupCategoryOk returns a tuple with the RollupCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Build) GetRollupCategoryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RollupCategory.Get(), o.RollupCategory.IsSet()
}

// HasRollupCategory returns a boolean if a field has been set.
func (o *Build) HasRollupCategory() bool {
	if o != nil && o.RollupCategory.IsSet() {
		return true
	}

	return false
}

// SetRollupCategory gets a reference to the given NullableInt32 and assigns it to the RollupCategory field.
func (o *Build) SetRollupCategory(v int32) {
	o.RollupCategory.Set(&v)
}
// SetRollupCategoryNil sets the value for RollupCategory to be an explicit nil
func (o *Build) SetRollupCategoryNil() {
	o.RollupCategory.Set(nil)
}

// UnsetRollupCategory ensures that no value is present for RollupCategory, not even an explicit nil
func (o *Build) UnsetRollupCategory() {
	o.RollupCategory.Unset()
}

func (o Build) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Build) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hero_build"] = o.HeroBuild
	if o.NumFavorites.IsSet() {
		toSerialize["num_favorites"] = o.NumFavorites.Get()
	}
	if o.NumIgnores.IsSet() {
		toSerialize["num_ignores"] = o.NumIgnores.Get()
	}
	if o.NumReports.IsSet() {
		toSerialize["num_reports"] = o.NumReports.Get()
	}
	if o.NumWeeklyFavorites.IsSet() {
		toSerialize["num_weekly_favorites"] = o.NumWeeklyFavorites.Get()
	}
	if o.RollupCategory.IsSet() {
		toSerialize["rollup_category"] = o.RollupCategory.Get()
	}
	return toSerialize, nil
}

func (o *Build) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hero_build",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuild := _Build{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuild)

	if err != nil {
		return err
	}

	*o = Build(varBuild)

	return err
}

type NullableBuild struct {
	value *Build
	isSet bool
}

func (v NullableBuild) Get() *Build {
	return v.value
}

func (v *NullableBuild) Set(val *Build) {
	v.value = val
	v.isSet = true
}

func (v NullableBuild) IsSet() bool {
	return v.isSet
}

func (v *NullableBuild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuild(val *Build) *NullableBuild {
	return &NullableBuild{value: val, isSet: true}
}

func (v NullableBuild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


