/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// ActiveMatchMode the model 'ActiveMatchMode'
type ActiveMatchMode string

// List of ActiveMatchMode
const (
	INVALID ActiveMatchMode = "Invalid"
	UNRANKED ActiveMatchMode = "Unranked"
	PRIVATE_LOBBY ActiveMatchMode = "PrivateLobby"
	COOP_BOT ActiveMatchMode = "CoopBot"
	RANKED ActiveMatchMode = "Ranked"
	SERVER_TEST ActiveMatchMode = "ServerTest"
	TUTORIAL ActiveMatchMode = "Tutorial"
	HERO_LABS ActiveMatchMode = "HeroLabs"
)

// All allowed values of ActiveMatchMode enum
var AllowedActiveMatchModeEnumValues = []ActiveMatchMode{
	"Invalid",
	"Unranked",
	"PrivateLobby",
	"CoopBot",
	"Ranked",
	"ServerTest",
	"Tutorial",
	"HeroLabs",
}

func (v *ActiveMatchMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActiveMatchMode(value)
	for _, existing := range AllowedActiveMatchModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActiveMatchMode", value)
}

// NewActiveMatchModeFromValue returns a pointer to a valid ActiveMatchMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActiveMatchModeFromValue(v string) (*ActiveMatchMode, error) {
	ev := ActiveMatchMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActiveMatchMode: valid values are %v", v, AllowedActiveMatchModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActiveMatchMode) IsValid() bool {
	for _, existing := range AllowedActiveMatchModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActiveMatchMode value
func (v ActiveMatchMode) Ptr() *ActiveMatchMode {
	return &v
}

type NullableActiveMatchMode struct {
	value *ActiveMatchMode
	isSet bool
}

func (v NullableActiveMatchMode) Get() *ActiveMatchMode {
	return v.value
}

func (v *NullableActiveMatchMode) Set(val *ActiveMatchMode) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveMatchMode) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveMatchMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveMatchMode(val *ActiveMatchMode) *NullableActiveMatchMode {
	return &NullableActiveMatchMode{value: val, isSet: true}
}

func (v NullableActiveMatchMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveMatchMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

