/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlayerCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerCard{}

// PlayerCard struct for PlayerCard
type PlayerCard struct {
	AccountId int32 `json:"account_id"`
	// See more: <https://assets.deadlock-api.com/v2/ranks>
	RankedBadgeLevel NullableInt32 `json:"ranked_badge_level,omitempty"`
	// See more: <https://assets.deadlock-api.com/v2/ranks>
	RankedRank NullableInt32 `json:"ranked_rank,omitempty"`
	// See more: <https://assets.deadlock-api.com/v2/ranks>
	RankedSubrank NullableInt32 `json:"ranked_subrank,omitempty"`
	Slots []PlayerCardSlot `json:"slots"`
}

type _PlayerCard PlayerCard

// NewPlayerCard instantiates a new PlayerCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerCard(accountId int32, slots []PlayerCardSlot) *PlayerCard {
	this := PlayerCard{}
	this.AccountId = accountId
	this.Slots = slots
	return &this
}

// NewPlayerCardWithDefaults instantiates a new PlayerCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerCardWithDefaults() *PlayerCard {
	this := PlayerCard{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *PlayerCard) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *PlayerCard) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *PlayerCard) SetAccountId(v int32) {
	o.AccountId = v
}

// GetRankedBadgeLevel returns the RankedBadgeLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCard) GetRankedBadgeLevel() int32 {
	if o == nil || IsNil(o.RankedBadgeLevel.Get()) {
		var ret int32
		return ret
	}
	return *o.RankedBadgeLevel.Get()
}

// GetRankedBadgeLevelOk returns a tuple with the RankedBadgeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCard) GetRankedBadgeLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankedBadgeLevel.Get(), o.RankedBadgeLevel.IsSet()
}

// HasRankedBadgeLevel returns a boolean if a field has been set.
func (o *PlayerCard) HasRankedBadgeLevel() bool {
	if o != nil && o.RankedBadgeLevel.IsSet() {
		return true
	}

	return false
}

// SetRankedBadgeLevel gets a reference to the given NullableInt32 and assigns it to the RankedBadgeLevel field.
func (o *PlayerCard) SetRankedBadgeLevel(v int32) {
	o.RankedBadgeLevel.Set(&v)
}
// SetRankedBadgeLevelNil sets the value for RankedBadgeLevel to be an explicit nil
func (o *PlayerCard) SetRankedBadgeLevelNil() {
	o.RankedBadgeLevel.Set(nil)
}

// UnsetRankedBadgeLevel ensures that no value is present for RankedBadgeLevel, not even an explicit nil
func (o *PlayerCard) UnsetRankedBadgeLevel() {
	o.RankedBadgeLevel.Unset()
}

// GetRankedRank returns the RankedRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCard) GetRankedRank() int32 {
	if o == nil || IsNil(o.RankedRank.Get()) {
		var ret int32
		return ret
	}
	return *o.RankedRank.Get()
}

// GetRankedRankOk returns a tuple with the RankedRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCard) GetRankedRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankedRank.Get(), o.RankedRank.IsSet()
}

// HasRankedRank returns a boolean if a field has been set.
func (o *PlayerCard) HasRankedRank() bool {
	if o != nil && o.RankedRank.IsSet() {
		return true
	}

	return false
}

// SetRankedRank gets a reference to the given NullableInt32 and assigns it to the RankedRank field.
func (o *PlayerCard) SetRankedRank(v int32) {
	o.RankedRank.Set(&v)
}
// SetRankedRankNil sets the value for RankedRank to be an explicit nil
func (o *PlayerCard) SetRankedRankNil() {
	o.RankedRank.Set(nil)
}

// UnsetRankedRank ensures that no value is present for RankedRank, not even an explicit nil
func (o *PlayerCard) UnsetRankedRank() {
	o.RankedRank.Unset()
}

// GetRankedSubrank returns the RankedSubrank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCard) GetRankedSubrank() int32 {
	if o == nil || IsNil(o.RankedSubrank.Get()) {
		var ret int32
		return ret
	}
	return *o.RankedSubrank.Get()
}

// GetRankedSubrankOk returns a tuple with the RankedSubrank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCard) GetRankedSubrankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankedSubrank.Get(), o.RankedSubrank.IsSet()
}

// HasRankedSubrank returns a boolean if a field has been set.
func (o *PlayerCard) HasRankedSubrank() bool {
	if o != nil && o.RankedSubrank.IsSet() {
		return true
	}

	return false
}

// SetRankedSubrank gets a reference to the given NullableInt32 and assigns it to the RankedSubrank field.
func (o *PlayerCard) SetRankedSubrank(v int32) {
	o.RankedSubrank.Set(&v)
}
// SetRankedSubrankNil sets the value for RankedSubrank to be an explicit nil
func (o *PlayerCard) SetRankedSubrankNil() {
	o.RankedSubrank.Set(nil)
}

// UnsetRankedSubrank ensures that no value is present for RankedSubrank, not even an explicit nil
func (o *PlayerCard) UnsetRankedSubrank() {
	o.RankedSubrank.Unset()
}

// GetSlots returns the Slots field value
func (o *PlayerCard) GetSlots() []PlayerCardSlot {
	if o == nil {
		var ret []PlayerCardSlot
		return ret
	}

	return o.Slots
}

// GetSlotsOk returns a tuple with the Slots field value
// and a boolean to check if the value has been set.
func (o *PlayerCard) GetSlotsOk() ([]PlayerCardSlot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slots, true
}

// SetSlots sets field value
func (o *PlayerCard) SetSlots(v []PlayerCardSlot) {
	o.Slots = v
}

func (o PlayerCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	if o.RankedBadgeLevel.IsSet() {
		toSerialize["ranked_badge_level"] = o.RankedBadgeLevel.Get()
	}
	if o.RankedRank.IsSet() {
		toSerialize["ranked_rank"] = o.RankedRank.Get()
	}
	if o.RankedSubrank.IsSet() {
		toSerialize["ranked_subrank"] = o.RankedSubrank.Get()
	}
	toSerialize["slots"] = o.Slots
	return toSerialize, nil
}

func (o *PlayerCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"slots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlayerCard := _PlayerCard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlayerCard)

	if err != nil {
		return err
	}

	*o = PlayerCard(varPlayerCard)

	return err
}

type NullablePlayerCard struct {
	value *PlayerCard
	isSet bool
}

func (v NullablePlayerCard) Get() *PlayerCard {
	return v.value
}

func (v *NullablePlayerCard) Set(val *PlayerCard) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerCard) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerCard(val *PlayerCard) *NullablePlayerCard {
	return &NullablePlayerCard{value: val, isSet: true}
}

func (v NullablePlayerCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


