/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// VariableCategory the model 'VariableCategory'
type VariableCategory string

// List of VariableCategory
const (
	GENERAL VariableCategory = "General"
	DAILY VariableCategory = "Daily"
	HERO VariableCategory = "Hero"
	ITEM VariableCategory = "Item"
	LEADERBOARD VariableCategory = "Leaderboard"
	OVERALL VariableCategory = "Overall"
)

// All allowed values of VariableCategory enum
var AllowedVariableCategoryEnumValues = []VariableCategory{
	"General",
	"Daily",
	"Hero",
	"Item",
	"Leaderboard",
	"Overall",
}

func (v *VariableCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariableCategory(value)
	for _, existing := range AllowedVariableCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariableCategory", value)
}

// NewVariableCategoryFromValue returns a pointer to a valid VariableCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariableCategoryFromValue(v string) (*VariableCategory, error) {
	ev := VariableCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariableCategory: valid values are %v", v, AllowedVariableCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariableCategory) IsValid() bool {
	for _, existing := range AllowedVariableCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariableCategory value
func (v VariableCategory) Ptr() *VariableCategory {
	return &v
}

type NullableVariableCategory struct {
	value *VariableCategory
	isSet bool
}

func (v NullableVariableCategory) Get() *VariableCategory {
	return v.value
}

func (v *NullableVariableCategory) Set(val *VariableCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableCategory(val *VariableCategory) *NullableVariableCategory {
	return &NullableVariableCategory{value: val, isSet: true}
}

func (v NullableVariableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

