/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VariableDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableDescription{}

// VariableDescription struct for VariableDescription
type VariableDescription struct {
	// The category of the variable.
	Category VariableCategory `json:"category"`
	// The default label for the variable.
	DefaultLabel NullableString `json:"default_label,omitempty"`
	// The description of the variable.
	Description string `json:"description"`
	// Extra arguments that can be passed to the variable.
	ExtraArgs []string `json:"extra_args"`
	// The name of the variable.
	Name string `json:"name"`
}

type _VariableDescription VariableDescription

// NewVariableDescription instantiates a new VariableDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableDescription(category VariableCategory, description string, extraArgs []string, name string) *VariableDescription {
	this := VariableDescription{}
	this.Category = category
	this.Description = description
	this.ExtraArgs = extraArgs
	this.Name = name
	return &this
}

// NewVariableDescriptionWithDefaults instantiates a new VariableDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableDescriptionWithDefaults() *VariableDescription {
	this := VariableDescription{}
	return &this
}

// GetCategory returns the Category field value
func (o *VariableDescription) GetCategory() VariableCategory {
	if o == nil {
		var ret VariableCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *VariableDescription) GetCategoryOk() (*VariableCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *VariableDescription) SetCategory(v VariableCategory) {
	o.Category = v
}

// GetDefaultLabel returns the DefaultLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableDescription) GetDefaultLabel() string {
	if o == nil || IsNil(o.DefaultLabel.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultLabel.Get()
}

// GetDefaultLabelOk returns a tuple with the DefaultLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableDescription) GetDefaultLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultLabel.Get(), o.DefaultLabel.IsSet()
}

// HasDefaultLabel returns a boolean if a field has been set.
func (o *VariableDescription) HasDefaultLabel() bool {
	if o != nil && o.DefaultLabel.IsSet() {
		return true
	}

	return false
}

// SetDefaultLabel gets a reference to the given NullableString and assigns it to the DefaultLabel field.
func (o *VariableDescription) SetDefaultLabel(v string) {
	o.DefaultLabel.Set(&v)
}
// SetDefaultLabelNil sets the value for DefaultLabel to be an explicit nil
func (o *VariableDescription) SetDefaultLabelNil() {
	o.DefaultLabel.Set(nil)
}

// UnsetDefaultLabel ensures that no value is present for DefaultLabel, not even an explicit nil
func (o *VariableDescription) UnsetDefaultLabel() {
	o.DefaultLabel.Unset()
}

// GetDescription returns the Description field value
func (o *VariableDescription) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VariableDescription) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VariableDescription) SetDescription(v string) {
	o.Description = v
}

// GetExtraArgs returns the ExtraArgs field value
func (o *VariableDescription) GetExtraArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExtraArgs
}

// GetExtraArgsOk returns a tuple with the ExtraArgs field value
// and a boolean to check if the value has been set.
func (o *VariableDescription) GetExtraArgsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraArgs, true
}

// SetExtraArgs sets field value
func (o *VariableDescription) SetExtraArgs(v []string) {
	o.ExtraArgs = v
}

// GetName returns the Name field value
func (o *VariableDescription) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VariableDescription) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VariableDescription) SetName(v string) {
	o.Name = v
}

func (o VariableDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	if o.DefaultLabel.IsSet() {
		toSerialize["default_label"] = o.DefaultLabel.Get()
	}
	toSerialize["description"] = o.Description
	toSerialize["extra_args"] = o.ExtraArgs
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *VariableDescription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"description",
		"extra_args",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableDescription := _VariableDescription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariableDescription)

	if err != nil {
		return err
	}

	*o = VariableDescription(varVariableDescription)

	return err
}

type NullableVariableDescription struct {
	value *VariableDescription
	isSet bool
}

func (v NullableVariableDescription) Get() *VariableDescription {
	return v.value
}

func (v *NullableVariableDescription) Set(val *VariableDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableDescription(val *VariableDescription) *NullableVariableDescription {
	return &NullableVariableDescription{value: val, isSet: true}
}

func (v NullableVariableDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


