/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClickhouseSalts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClickhouseSalts{}

// ClickhouseSalts struct for ClickhouseSalts
type ClickhouseSalts struct {
	ClusterId NullableInt32 `json:"cluster_id,omitempty"`
	MatchId int64 `json:"match_id"`
	MetadataSalt NullableInt32 `json:"metadata_salt,omitempty"`
	ReplaySalt NullableInt32 `json:"replay_salt,omitempty"`
	Username NullableString `json:"username,omitempty"`
}

type _ClickhouseSalts ClickhouseSalts

// NewClickhouseSalts instantiates a new ClickhouseSalts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickhouseSalts(matchId int64) *ClickhouseSalts {
	this := ClickhouseSalts{}
	this.MatchId = matchId
	return &this
}

// NewClickhouseSaltsWithDefaults instantiates a new ClickhouseSalts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickhouseSaltsWithDefaults() *ClickhouseSalts {
	this := ClickhouseSalts{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClickhouseSalts) GetClusterId() int32 {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret int32
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClickhouseSalts) GetClusterIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *ClickhouseSalts) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt32 and assigns it to the ClusterId field.
func (o *ClickhouseSalts) SetClusterId(v int32) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *ClickhouseSalts) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *ClickhouseSalts) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetMatchId returns the MatchId field value
func (o *ClickhouseSalts) GetMatchId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *ClickhouseSalts) GetMatchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *ClickhouseSalts) SetMatchId(v int64) {
	o.MatchId = v
}

// GetMetadataSalt returns the MetadataSalt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClickhouseSalts) GetMetadataSalt() int32 {
	if o == nil || IsNil(o.MetadataSalt.Get()) {
		var ret int32
		return ret
	}
	return *o.MetadataSalt.Get()
}

// GetMetadataSaltOk returns a tuple with the MetadataSalt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClickhouseSalts) GetMetadataSaltOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataSalt.Get(), o.MetadataSalt.IsSet()
}

// HasMetadataSalt returns a boolean if a field has been set.
func (o *ClickhouseSalts) HasMetadataSalt() bool {
	if o != nil && o.MetadataSalt.IsSet() {
		return true
	}

	return false
}

// SetMetadataSalt gets a reference to the given NullableInt32 and assigns it to the MetadataSalt field.
func (o *ClickhouseSalts) SetMetadataSalt(v int32) {
	o.MetadataSalt.Set(&v)
}
// SetMetadataSaltNil sets the value for MetadataSalt to be an explicit nil
func (o *ClickhouseSalts) SetMetadataSaltNil() {
	o.MetadataSalt.Set(nil)
}

// UnsetMetadataSalt ensures that no value is present for MetadataSalt, not even an explicit nil
func (o *ClickhouseSalts) UnsetMetadataSalt() {
	o.MetadataSalt.Unset()
}

// GetReplaySalt returns the ReplaySalt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClickhouseSalts) GetReplaySalt() int32 {
	if o == nil || IsNil(o.ReplaySalt.Get()) {
		var ret int32
		return ret
	}
	return *o.ReplaySalt.Get()
}

// GetReplaySaltOk returns a tuple with the ReplaySalt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClickhouseSalts) GetReplaySaltOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplaySalt.Get(), o.ReplaySalt.IsSet()
}

// HasReplaySalt returns a boolean if a field has been set.
func (o *ClickhouseSalts) HasReplaySalt() bool {
	if o != nil && o.ReplaySalt.IsSet() {
		return true
	}

	return false
}

// SetReplaySalt gets a reference to the given NullableInt32 and assigns it to the ReplaySalt field.
func (o *ClickhouseSalts) SetReplaySalt(v int32) {
	o.ReplaySalt.Set(&v)
}
// SetReplaySaltNil sets the value for ReplaySalt to be an explicit nil
func (o *ClickhouseSalts) SetReplaySaltNil() {
	o.ReplaySalt.Set(nil)
}

// UnsetReplaySalt ensures that no value is present for ReplaySalt, not even an explicit nil
func (o *ClickhouseSalts) UnsetReplaySalt() {
	o.ReplaySalt.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClickhouseSalts) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClickhouseSalts) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *ClickhouseSalts) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *ClickhouseSalts) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *ClickhouseSalts) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *ClickhouseSalts) UnsetUsername() {
	o.Username.Unset()
}

func (o ClickhouseSalts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClickhouseSalts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["cluster_id"] = o.ClusterId.Get()
	}
	toSerialize["match_id"] = o.MatchId
	if o.MetadataSalt.IsSet() {
		toSerialize["metadata_salt"] = o.MetadataSalt.Get()
	}
	if o.ReplaySalt.IsSet() {
		toSerialize["replay_salt"] = o.ReplaySalt.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

func (o *ClickhouseSalts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"match_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClickhouseSalts := _ClickhouseSalts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClickhouseSalts)

	if err != nil {
		return err
	}

	*o = ClickhouseSalts(varClickhouseSalts)

	return err
}

type NullableClickhouseSalts struct {
	value *ClickhouseSalts
	isSet bool
}

func (v NullableClickhouseSalts) Get() *ClickhouseSalts {
	return v.value
}

func (v *NullableClickhouseSalts) Set(val *ClickhouseSalts) {
	v.value = val
	v.isSet = true
}

func (v NullableClickhouseSalts) IsSet() bool {
	return v.isSet
}

func (v *NullableClickhouseSalts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickhouseSalts(val *ClickhouseSalts) *NullableClickhouseSalts {
	return &NullableClickhouseSalts{value: val, isSet: true}
}

func (v NullableClickhouseSalts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickhouseSalts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


