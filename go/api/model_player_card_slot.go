/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
)

// checks if the PlayerCardSlot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerCardSlot{}

// PlayerCardSlot struct for PlayerCardSlot
type PlayerCardSlot struct {
	Hero NullablePlayerCardSlotHero `json:"hero,omitempty"`
	SlotId NullableInt32 `json:"slot_id,omitempty"`
	Stat NullablePlayerCardSlotStat `json:"stat,omitempty"`
}

// NewPlayerCardSlot instantiates a new PlayerCardSlot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerCardSlot() *PlayerCardSlot {
	this := PlayerCardSlot{}
	return &this
}

// NewPlayerCardSlotWithDefaults instantiates a new PlayerCardSlot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerCardSlotWithDefaults() *PlayerCardSlot {
	this := PlayerCardSlot{}
	return &this
}

// GetHero returns the Hero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlot) GetHero() PlayerCardSlotHero {
	if o == nil || IsNil(o.Hero.Get()) {
		var ret PlayerCardSlotHero
		return ret
	}
	return *o.Hero.Get()
}

// GetHeroOk returns a tuple with the Hero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlot) GetHeroOk() (*PlayerCardSlotHero, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hero.Get(), o.Hero.IsSet()
}

// HasHero returns a boolean if a field has been set.
func (o *PlayerCardSlot) HasHero() bool {
	if o != nil && o.Hero.IsSet() {
		return true
	}

	return false
}

// SetHero gets a reference to the given NullablePlayerCardSlotHero and assigns it to the Hero field.
func (o *PlayerCardSlot) SetHero(v PlayerCardSlotHero) {
	o.Hero.Set(&v)
}
// SetHeroNil sets the value for Hero to be an explicit nil
func (o *PlayerCardSlot) SetHeroNil() {
	o.Hero.Set(nil)
}

// UnsetHero ensures that no value is present for Hero, not even an explicit nil
func (o *PlayerCardSlot) UnsetHero() {
	o.Hero.Unset()
}

// GetSlotId returns the SlotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlot) GetSlotId() int32 {
	if o == nil || IsNil(o.SlotId.Get()) {
		var ret int32
		return ret
	}
	return *o.SlotId.Get()
}

// GetSlotIdOk returns a tuple with the SlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlot) GetSlotIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlotId.Get(), o.SlotId.IsSet()
}

// HasSlotId returns a boolean if a field has been set.
func (o *PlayerCardSlot) HasSlotId() bool {
	if o != nil && o.SlotId.IsSet() {
		return true
	}

	return false
}

// SetSlotId gets a reference to the given NullableInt32 and assigns it to the SlotId field.
func (o *PlayerCardSlot) SetSlotId(v int32) {
	o.SlotId.Set(&v)
}
// SetSlotIdNil sets the value for SlotId to be an explicit nil
func (o *PlayerCardSlot) SetSlotIdNil() {
	o.SlotId.Set(nil)
}

// UnsetSlotId ensures that no value is present for SlotId, not even an explicit nil
func (o *PlayerCardSlot) UnsetSlotId() {
	o.SlotId.Unset()
}

// GetStat returns the Stat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlot) GetStat() PlayerCardSlotStat {
	if o == nil || IsNil(o.Stat.Get()) {
		var ret PlayerCardSlotStat
		return ret
	}
	return *o.Stat.Get()
}

// GetStatOk returns a tuple with the Stat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlot) GetStatOk() (*PlayerCardSlotStat, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stat.Get(), o.Stat.IsSet()
}

// HasStat returns a boolean if a field has been set.
func (o *PlayerCardSlot) HasStat() bool {
	if o != nil && o.Stat.IsSet() {
		return true
	}

	return false
}

// SetStat gets a reference to the given NullablePlayerCardSlotStat and assigns it to the Stat field.
func (o *PlayerCardSlot) SetStat(v PlayerCardSlotStat) {
	o.Stat.Set(&v)
}
// SetStatNil sets the value for Stat to be an explicit nil
func (o *PlayerCardSlot) SetStatNil() {
	o.Stat.Set(nil)
}

// UnsetStat ensures that no value is present for Stat, not even an explicit nil
func (o *PlayerCardSlot) UnsetStat() {
	o.Stat.Unset()
}

func (o PlayerCardSlot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerCardSlot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Hero.IsSet() {
		toSerialize["hero"] = o.Hero.Get()
	}
	if o.SlotId.IsSet() {
		toSerialize["slot_id"] = o.SlotId.Get()
	}
	if o.Stat.IsSet() {
		toSerialize["stat"] = o.Stat.Get()
	}
	return toSerialize, nil
}

type NullablePlayerCardSlot struct {
	value *PlayerCardSlot
	isSet bool
}

func (v NullablePlayerCardSlot) Get() *PlayerCardSlot {
	return v.value
}

func (v *NullablePlayerCardSlot) Set(val *PlayerCardSlot) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerCardSlot) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerCardSlot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerCardSlot(val *PlayerCardSlot) *NullablePlayerCardSlot {
	return &NullablePlayerCardSlot{value: val, isSet: true}
}

func (v NullablePlayerCardSlot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerCardSlot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


