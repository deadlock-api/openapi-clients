/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"fmt"
)

// ActiveMatchTeam the model 'ActiveMatchTeam'
type ActiveMatchTeam string

// List of ActiveMatchTeam
const (
	TEAM0 ActiveMatchTeam = "Team0"
	TEAM1 ActiveMatchTeam = "Team1"
	SPECTATOR ActiveMatchTeam = "Spectator"
)

// All allowed values of ActiveMatchTeam enum
var AllowedActiveMatchTeamEnumValues = []ActiveMatchTeam{
	"Team0",
	"Team1",
	"Spectator",
}

func (v *ActiveMatchTeam) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActiveMatchTeam(value)
	for _, existing := range AllowedActiveMatchTeamEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActiveMatchTeam", value)
}

// NewActiveMatchTeamFromValue returns a pointer to a valid ActiveMatchTeam
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActiveMatchTeamFromValue(v string) (*ActiveMatchTeam, error) {
	ev := ActiveMatchTeam(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActiveMatchTeam: valid values are %v", v, AllowedActiveMatchTeamEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActiveMatchTeam) IsValid() bool {
	for _, existing := range AllowedActiveMatchTeamEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActiveMatchTeam value
func (v ActiveMatchTeam) Ptr() *ActiveMatchTeam {
	return &v
}

type NullableActiveMatchTeam struct {
	value *ActiveMatchTeam
	isSet bool
}

func (v NullableActiveMatchTeam) Get() *ActiveMatchTeam {
	return v.value
}

func (v *NullableActiveMatchTeam) Set(val *ActiveMatchTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveMatchTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveMatchTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveMatchTeam(val *ActiveMatchTeam) *NullableActiveMatchTeam {
	return &NullableActiveMatchTeam{value: val, isSet: true}
}

func (v NullableActiveMatchTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveMatchTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

