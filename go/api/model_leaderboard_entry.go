/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
)

// checks if the LeaderboardEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeaderboardEntry{}

// LeaderboardEntry struct for LeaderboardEntry
type LeaderboardEntry struct {
	// The account name of the player.
	AccountName NullableString `json:"account_name,omitempty"`
	// The badge level of the player. See more: <https://assets.deadlock-api.com/v2/ranks>
	BadgeLevel NullableInt32 `json:"badge_level,omitempty"`
	// The possible account IDs of the player. **CAVEAT: This is not always correct, as Steam account names are not unique.**
	PossibleAccountIds []int32 `json:"possible_account_ids,omitempty"`
	// The rank of the player. See more: <https://assets.deadlock-api.com/v2/ranks>
	Rank NullableInt32 `json:"rank,omitempty"`
	// The ranked rank of the player. See more: <https://assets.deadlock-api.com/v2/ranks>
	RankedRank NullableInt32 `json:"ranked_rank,omitempty"`
	// The ranked subrank of the player. See more: <https://assets.deadlock-api.com/v2/ranks>
	RankedSubrank NullableInt32 `json:"ranked_subrank,omitempty"`
	// The top hero IDs of the player. See more: <https://assets.deadlock-api.com/v2/heroes>
	TopHeroIds []int32 `json:"top_hero_ids,omitempty"`
}

// NewLeaderboardEntry instantiates a new LeaderboardEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaderboardEntry() *LeaderboardEntry {
	this := LeaderboardEntry{}
	return &this
}

// NewLeaderboardEntryWithDefaults instantiates a new LeaderboardEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaderboardEntryWithDefaults() *LeaderboardEntry {
	this := LeaderboardEntry{}
	return &this
}

// GetAccountName returns the AccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LeaderboardEntry) GetAccountName() string {
	if o == nil || IsNil(o.AccountName.Get()) {
		var ret string
		return ret
	}
	return *o.AccountName.Get()
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LeaderboardEntry) GetAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountName.Get(), o.AccountName.IsSet()
}

// HasAccountName returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasAccountName() bool {
	if o != nil && o.AccountName.IsSet() {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given NullableString and assigns it to the AccountName field.
func (o *LeaderboardEntry) SetAccountName(v string) {
	o.AccountName.Set(&v)
}
// SetAccountNameNil sets the value for AccountName to be an explicit nil
func (o *LeaderboardEntry) SetAccountNameNil() {
	o.AccountName.Set(nil)
}

// UnsetAccountName ensures that no value is present for AccountName, not even an explicit nil
func (o *LeaderboardEntry) UnsetAccountName() {
	o.AccountName.Unset()
}

// GetBadgeLevel returns the BadgeLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LeaderboardEntry) GetBadgeLevel() int32 {
	if o == nil || IsNil(o.BadgeLevel.Get()) {
		var ret int32
		return ret
	}
	return *o.BadgeLevel.Get()
}

// GetBadgeLevelOk returns a tuple with the BadgeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LeaderboardEntry) GetBadgeLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BadgeLevel.Get(), o.BadgeLevel.IsSet()
}

// HasBadgeLevel returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasBadgeLevel() bool {
	if o != nil && o.BadgeLevel.IsSet() {
		return true
	}

	return false
}

// SetBadgeLevel gets a reference to the given NullableInt32 and assigns it to the BadgeLevel field.
func (o *LeaderboardEntry) SetBadgeLevel(v int32) {
	o.BadgeLevel.Set(&v)
}
// SetBadgeLevelNil sets the value for BadgeLevel to be an explicit nil
func (o *LeaderboardEntry) SetBadgeLevelNil() {
	o.BadgeLevel.Set(nil)
}

// UnsetBadgeLevel ensures that no value is present for BadgeLevel, not even an explicit nil
func (o *LeaderboardEntry) UnsetBadgeLevel() {
	o.BadgeLevel.Unset()
}

// GetPossibleAccountIds returns the PossibleAccountIds field value if set, zero value otherwise.
func (o *LeaderboardEntry) GetPossibleAccountIds() []int32 {
	if o == nil || IsNil(o.PossibleAccountIds) {
		var ret []int32
		return ret
	}
	return o.PossibleAccountIds
}

// GetPossibleAccountIdsOk returns a tuple with the PossibleAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderboardEntry) GetPossibleAccountIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.PossibleAccountIds) {
		return nil, false
	}
	return o.PossibleAccountIds, true
}

// HasPossibleAccountIds returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasPossibleAccountIds() bool {
	if o != nil && !IsNil(o.PossibleAccountIds) {
		return true
	}

	return false
}

// SetPossibleAccountIds gets a reference to the given []int32 and assigns it to the PossibleAccountIds field.
func (o *LeaderboardEntry) SetPossibleAccountIds(v []int32) {
	o.PossibleAccountIds = v
}

// GetRank returns the Rank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LeaderboardEntry) GetRank() int32 {
	if o == nil || IsNil(o.Rank.Get()) {
		var ret int32
		return ret
	}
	return *o.Rank.Get()
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LeaderboardEntry) GetRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rank.Get(), o.Rank.IsSet()
}

// HasRank returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasRank() bool {
	if o != nil && o.Rank.IsSet() {
		return true
	}

	return false
}

// SetRank gets a reference to the given NullableInt32 and assigns it to the Rank field.
func (o *LeaderboardEntry) SetRank(v int32) {
	o.Rank.Set(&v)
}
// SetRankNil sets the value for Rank to be an explicit nil
func (o *LeaderboardEntry) SetRankNil() {
	o.Rank.Set(nil)
}

// UnsetRank ensures that no value is present for Rank, not even an explicit nil
func (o *LeaderboardEntry) UnsetRank() {
	o.Rank.Unset()
}

// GetRankedRank returns the RankedRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LeaderboardEntry) GetRankedRank() int32 {
	if o == nil || IsNil(o.RankedRank.Get()) {
		var ret int32
		return ret
	}
	return *o.RankedRank.Get()
}

// GetRankedRankOk returns a tuple with the RankedRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LeaderboardEntry) GetRankedRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankedRank.Get(), o.RankedRank.IsSet()
}

// HasRankedRank returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasRankedRank() bool {
	if o != nil && o.RankedRank.IsSet() {
		return true
	}

	return false
}

// SetRankedRank gets a reference to the given NullableInt32 and assigns it to the RankedRank field.
func (o *LeaderboardEntry) SetRankedRank(v int32) {
	o.RankedRank.Set(&v)
}
// SetRankedRankNil sets the value for RankedRank to be an explicit nil
func (o *LeaderboardEntry) SetRankedRankNil() {
	o.RankedRank.Set(nil)
}

// UnsetRankedRank ensures that no value is present for RankedRank, not even an explicit nil
func (o *LeaderboardEntry) UnsetRankedRank() {
	o.RankedRank.Unset()
}

// GetRankedSubrank returns the RankedSubrank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LeaderboardEntry) GetRankedSubrank() int32 {
	if o == nil || IsNil(o.RankedSubrank.Get()) {
		var ret int32
		return ret
	}
	return *o.RankedSubrank.Get()
}

// GetRankedSubrankOk returns a tuple with the RankedSubrank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LeaderboardEntry) GetRankedSubrankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankedSubrank.Get(), o.RankedSubrank.IsSet()
}

// HasRankedSubrank returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasRankedSubrank() bool {
	if o != nil && o.RankedSubrank.IsSet() {
		return true
	}

	return false
}

// SetRankedSubrank gets a reference to the given NullableInt32 and assigns it to the RankedSubrank field.
func (o *LeaderboardEntry) SetRankedSubrank(v int32) {
	o.RankedSubrank.Set(&v)
}
// SetRankedSubrankNil sets the value for RankedSubrank to be an explicit nil
func (o *LeaderboardEntry) SetRankedSubrankNil() {
	o.RankedSubrank.Set(nil)
}

// UnsetRankedSubrank ensures that no value is present for RankedSubrank, not even an explicit nil
func (o *LeaderboardEntry) UnsetRankedSubrank() {
	o.RankedSubrank.Unset()
}

// GetTopHeroIds returns the TopHeroIds field value if set, zero value otherwise.
func (o *LeaderboardEntry) GetTopHeroIds() []int32 {
	if o == nil || IsNil(o.TopHeroIds) {
		var ret []int32
		return ret
	}
	return o.TopHeroIds
}

// GetTopHeroIdsOk returns a tuple with the TopHeroIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderboardEntry) GetTopHeroIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.TopHeroIds) {
		return nil, false
	}
	return o.TopHeroIds, true
}

// HasTopHeroIds returns a boolean if a field has been set.
func (o *LeaderboardEntry) HasTopHeroIds() bool {
	if o != nil && !IsNil(o.TopHeroIds) {
		return true
	}

	return false
}

// SetTopHeroIds gets a reference to the given []int32 and assigns it to the TopHeroIds field.
func (o *LeaderboardEntry) SetTopHeroIds(v []int32) {
	o.TopHeroIds = v
}

func (o LeaderboardEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeaderboardEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountName.IsSet() {
		toSerialize["account_name"] = o.AccountName.Get()
	}
	if o.BadgeLevel.IsSet() {
		toSerialize["badge_level"] = o.BadgeLevel.Get()
	}
	if !IsNil(o.PossibleAccountIds) {
		toSerialize["possible_account_ids"] = o.PossibleAccountIds
	}
	if o.Rank.IsSet() {
		toSerialize["rank"] = o.Rank.Get()
	}
	if o.RankedRank.IsSet() {
		toSerialize["ranked_rank"] = o.RankedRank.Get()
	}
	if o.RankedSubrank.IsSet() {
		toSerialize["ranked_subrank"] = o.RankedSubrank.Get()
	}
	if !IsNil(o.TopHeroIds) {
		toSerialize["top_hero_ids"] = o.TopHeroIds
	}
	return toSerialize, nil
}

type NullableLeaderboardEntry struct {
	value *LeaderboardEntry
	isSet bool
}

func (v NullableLeaderboardEntry) Get() *LeaderboardEntry {
	return v.value
}

func (v *NullableLeaderboardEntry) Set(val *LeaderboardEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaderboardEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaderboardEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaderboardEntry(val *LeaderboardEntry) *NullableLeaderboardEntry {
	return &NullableLeaderboardEntry{value: val, isSet: true}
}

func (v NullableLeaderboardEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaderboardEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


