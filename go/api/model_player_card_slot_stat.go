/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
)

// checks if the PlayerCardSlotStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerCardSlotStat{}

// PlayerCardSlotStat struct for PlayerCardSlotStat
type PlayerCardSlotStat struct {
	StatId NullableInt32 `json:"stat_id,omitempty"`
	StatScore NullableInt32 `json:"stat_score,omitempty"`
}

// NewPlayerCardSlotStat instantiates a new PlayerCardSlotStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerCardSlotStat() *PlayerCardSlotStat {
	this := PlayerCardSlotStat{}
	return &this
}

// NewPlayerCardSlotStatWithDefaults instantiates a new PlayerCardSlotStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerCardSlotStatWithDefaults() *PlayerCardSlotStat {
	this := PlayerCardSlotStat{}
	return &this
}

// GetStatId returns the StatId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlotStat) GetStatId() int32 {
	if o == nil || IsNil(o.StatId.Get()) {
		var ret int32
		return ret
	}
	return *o.StatId.Get()
}

// GetStatIdOk returns a tuple with the StatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlotStat) GetStatIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatId.Get(), o.StatId.IsSet()
}

// HasStatId returns a boolean if a field has been set.
func (o *PlayerCardSlotStat) HasStatId() bool {
	if o != nil && o.StatId.IsSet() {
		return true
	}

	return false
}

// SetStatId gets a reference to the given NullableInt32 and assigns it to the StatId field.
func (o *PlayerCardSlotStat) SetStatId(v int32) {
	o.StatId.Set(&v)
}
// SetStatIdNil sets the value for StatId to be an explicit nil
func (o *PlayerCardSlotStat) SetStatIdNil() {
	o.StatId.Set(nil)
}

// UnsetStatId ensures that no value is present for StatId, not even an explicit nil
func (o *PlayerCardSlotStat) UnsetStatId() {
	o.StatId.Unset()
}

// GetStatScore returns the StatScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerCardSlotStat) GetStatScore() int32 {
	if o == nil || IsNil(o.StatScore.Get()) {
		var ret int32
		return ret
	}
	return *o.StatScore.Get()
}

// GetStatScoreOk returns a tuple with the StatScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerCardSlotStat) GetStatScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatScore.Get(), o.StatScore.IsSet()
}

// HasStatScore returns a boolean if a field has been set.
func (o *PlayerCardSlotStat) HasStatScore() bool {
	if o != nil && o.StatScore.IsSet() {
		return true
	}

	return false
}

// SetStatScore gets a reference to the given NullableInt32 and assigns it to the StatScore field.
func (o *PlayerCardSlotStat) SetStatScore(v int32) {
	o.StatScore.Set(&v)
}
// SetStatScoreNil sets the value for StatScore to be an explicit nil
func (o *PlayerCardSlotStat) SetStatScoreNil() {
	o.StatScore.Set(nil)
}

// UnsetStatScore ensures that no value is present for StatScore, not even an explicit nil
func (o *PlayerCardSlotStat) UnsetStatScore() {
	o.StatScore.Unset()
}

func (o PlayerCardSlotStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerCardSlotStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StatId.IsSet() {
		toSerialize["stat_id"] = o.StatId.Get()
	}
	if o.StatScore.IsSet() {
		toSerialize["stat_score"] = o.StatScore.Get()
	}
	return toSerialize, nil
}

type NullablePlayerCardSlotStat struct {
	value *PlayerCardSlotStat
	isSet bool
}

func (v NullablePlayerCardSlotStat) Get() *PlayerCardSlotStat {
	return v.value
}

func (v *NullablePlayerCardSlotStat) Set(val *PlayerCardSlotStat) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerCardSlotStat) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerCardSlotStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerCardSlotStat(val *PlayerCardSlotStat) *NullablePlayerCardSlotStat {
	return &NullablePlayerCardSlotStat{value: val, isSet: true}
}

func (v NullablePlayerCardSlotStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerCardSlotStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


