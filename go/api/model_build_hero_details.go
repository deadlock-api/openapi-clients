/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildHeroDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildHeroDetails{}

// BuildHeroDetails struct for BuildHeroDetails
type BuildHeroDetails struct {
	AbilityOrder NullableBuildHeroDetailsAbilityOrder `json:"ability_order,omitempty"`
	ModCategories []BuildHeroDetailsCategory `json:"mod_categories"`
}

type _BuildHeroDetails BuildHeroDetails

// NewBuildHeroDetails instantiates a new BuildHeroDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildHeroDetails(modCategories []BuildHeroDetailsCategory) *BuildHeroDetails {
	this := BuildHeroDetails{}
	this.ModCategories = modCategories
	return &this
}

// NewBuildHeroDetailsWithDefaults instantiates a new BuildHeroDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildHeroDetailsWithDefaults() *BuildHeroDetails {
	this := BuildHeroDetails{}
	return &this
}

// GetAbilityOrder returns the AbilityOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildHeroDetails) GetAbilityOrder() BuildHeroDetailsAbilityOrder {
	if o == nil || IsNil(o.AbilityOrder.Get()) {
		var ret BuildHeroDetailsAbilityOrder
		return ret
	}
	return *o.AbilityOrder.Get()
}

// GetAbilityOrderOk returns a tuple with the AbilityOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildHeroDetails) GetAbilityOrderOk() (*BuildHeroDetailsAbilityOrder, bool) {
	if o == nil {
		return nil, false
	}
	return o.AbilityOrder.Get(), o.AbilityOrder.IsSet()
}

// HasAbilityOrder returns a boolean if a field has been set.
func (o *BuildHeroDetails) HasAbilityOrder() bool {
	if o != nil && o.AbilityOrder.IsSet() {
		return true
	}

	return false
}

// SetAbilityOrder gets a reference to the given NullableBuildHeroDetailsAbilityOrder and assigns it to the AbilityOrder field.
func (o *BuildHeroDetails) SetAbilityOrder(v BuildHeroDetailsAbilityOrder) {
	o.AbilityOrder.Set(&v)
}
// SetAbilityOrderNil sets the value for AbilityOrder to be an explicit nil
func (o *BuildHeroDetails) SetAbilityOrderNil() {
	o.AbilityOrder.Set(nil)
}

// UnsetAbilityOrder ensures that no value is present for AbilityOrder, not even an explicit nil
func (o *BuildHeroDetails) UnsetAbilityOrder() {
	o.AbilityOrder.Unset()
}

// GetModCategories returns the ModCategories field value
func (o *BuildHeroDetails) GetModCategories() []BuildHeroDetailsCategory {
	if o == nil {
		var ret []BuildHeroDetailsCategory
		return ret
	}

	return o.ModCategories
}

// GetModCategoriesOk returns a tuple with the ModCategories field value
// and a boolean to check if the value has been set.
func (o *BuildHeroDetails) GetModCategoriesOk() ([]BuildHeroDetailsCategory, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModCategories, true
}

// SetModCategories sets field value
func (o *BuildHeroDetails) SetModCategories(v []BuildHeroDetailsCategory) {
	o.ModCategories = v
}

func (o BuildHeroDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildHeroDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AbilityOrder.IsSet() {
		toSerialize["ability_order"] = o.AbilityOrder.Get()
	}
	toSerialize["mod_categories"] = o.ModCategories
	return toSerialize, nil
}

func (o *BuildHeroDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mod_categories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildHeroDetails := _BuildHeroDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildHeroDetails)

	if err != nil {
		return err
	}

	*o = BuildHeroDetails(varBuildHeroDetails)

	return err
}

type NullableBuildHeroDetails struct {
	value *BuildHeroDetails
	isSet bool
}

func (v NullableBuildHeroDetails) Get() *BuildHeroDetails {
	return v.value
}

func (v *NullableBuildHeroDetails) Set(val *BuildHeroDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildHeroDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildHeroDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildHeroDetails(val *BuildHeroDetails) *NullableBuildHeroDetails {
	return &NullableBuildHeroDetails{value: val, isSet: true}
}

func (v NullableBuildHeroDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildHeroDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


