/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SteamProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SteamProfile{}

// SteamProfile struct for SteamProfile
type SteamProfile struct {
	AccountId int32 `json:"account_id"`
	Avatar string `json:"avatar"`
	Avatarfull string `json:"avatarfull"`
	Avatarmedium string `json:"avatarmedium"`
	Countrycode NullableString `json:"countrycode,omitempty"`
	LastUpdated time.Time `json:"last_updated"`
	Personaname string `json:"personaname"`
	Profileurl string `json:"profileurl"`
	Realname NullableString `json:"realname,omitempty"`
}

type _SteamProfile SteamProfile

// NewSteamProfile instantiates a new SteamProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSteamProfile(accountId int32, avatar string, avatarfull string, avatarmedium string, lastUpdated time.Time, personaname string, profileurl string) *SteamProfile {
	this := SteamProfile{}
	this.AccountId = accountId
	this.Avatar = avatar
	this.Avatarfull = avatarfull
	this.Avatarmedium = avatarmedium
	this.LastUpdated = lastUpdated
	this.Personaname = personaname
	this.Profileurl = profileurl
	return &this
}

// NewSteamProfileWithDefaults instantiates a new SteamProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSteamProfileWithDefaults() *SteamProfile {
	this := SteamProfile{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *SteamProfile) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *SteamProfile) SetAccountId(v int32) {
	o.AccountId = v
}

// GetAvatar returns the Avatar field value
func (o *SteamProfile) GetAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatar, true
}

// SetAvatar sets field value
func (o *SteamProfile) SetAvatar(v string) {
	o.Avatar = v
}

// GetAvatarfull returns the Avatarfull field value
func (o *SteamProfile) GetAvatarfull() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avatarfull
}

// GetAvatarfullOk returns a tuple with the Avatarfull field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetAvatarfullOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatarfull, true
}

// SetAvatarfull sets field value
func (o *SteamProfile) SetAvatarfull(v string) {
	o.Avatarfull = v
}

// GetAvatarmedium returns the Avatarmedium field value
func (o *SteamProfile) GetAvatarmedium() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avatarmedium
}

// GetAvatarmediumOk returns a tuple with the Avatarmedium field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetAvatarmediumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatarmedium, true
}

// SetAvatarmedium sets field value
func (o *SteamProfile) SetAvatarmedium(v string) {
	o.Avatarmedium = v
}

// GetCountrycode returns the Countrycode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SteamProfile) GetCountrycode() string {
	if o == nil || IsNil(o.Countrycode.Get()) {
		var ret string
		return ret
	}
	return *o.Countrycode.Get()
}

// GetCountrycodeOk returns a tuple with the Countrycode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SteamProfile) GetCountrycodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Countrycode.Get(), o.Countrycode.IsSet()
}

// HasCountrycode returns a boolean if a field has been set.
func (o *SteamProfile) HasCountrycode() bool {
	if o != nil && o.Countrycode.IsSet() {
		return true
	}

	return false
}

// SetCountrycode gets a reference to the given NullableString and assigns it to the Countrycode field.
func (o *SteamProfile) SetCountrycode(v string) {
	o.Countrycode.Set(&v)
}
// SetCountrycodeNil sets the value for Countrycode to be an explicit nil
func (o *SteamProfile) SetCountrycodeNil() {
	o.Countrycode.Set(nil)
}

// UnsetCountrycode ensures that no value is present for Countrycode, not even an explicit nil
func (o *SteamProfile) UnsetCountrycode() {
	o.Countrycode.Unset()
}

// GetLastUpdated returns the LastUpdated field value
func (o *SteamProfile) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *SteamProfile) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

// GetPersonaname returns the Personaname field value
func (o *SteamProfile) GetPersonaname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Personaname
}

// GetPersonanameOk returns a tuple with the Personaname field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetPersonanameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Personaname, true
}

// SetPersonaname sets field value
func (o *SteamProfile) SetPersonaname(v string) {
	o.Personaname = v
}

// GetProfileurl returns the Profileurl field value
func (o *SteamProfile) GetProfileurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Profileurl
}

// GetProfileurlOk returns a tuple with the Profileurl field value
// and a boolean to check if the value has been set.
func (o *SteamProfile) GetProfileurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Profileurl, true
}

// SetProfileurl sets field value
func (o *SteamProfile) SetProfileurl(v string) {
	o.Profileurl = v
}

// GetRealname returns the Realname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SteamProfile) GetRealname() string {
	if o == nil || IsNil(o.Realname.Get()) {
		var ret string
		return ret
	}
	return *o.Realname.Get()
}

// GetRealnameOk returns a tuple with the Realname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SteamProfile) GetRealnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Realname.Get(), o.Realname.IsSet()
}

// HasRealname returns a boolean if a field has been set.
func (o *SteamProfile) HasRealname() bool {
	if o != nil && o.Realname.IsSet() {
		return true
	}

	return false
}

// SetRealname gets a reference to the given NullableString and assigns it to the Realname field.
func (o *SteamProfile) SetRealname(v string) {
	o.Realname.Set(&v)
}
// SetRealnameNil sets the value for Realname to be an explicit nil
func (o *SteamProfile) SetRealnameNil() {
	o.Realname.Set(nil)
}

// UnsetRealname ensures that no value is present for Realname, not even an explicit nil
func (o *SteamProfile) UnsetRealname() {
	o.Realname.Unset()
}

func (o SteamProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SteamProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["avatar"] = o.Avatar
	toSerialize["avatarfull"] = o.Avatarfull
	toSerialize["avatarmedium"] = o.Avatarmedium
	if o.Countrycode.IsSet() {
		toSerialize["countrycode"] = o.Countrycode.Get()
	}
	toSerialize["last_updated"] = o.LastUpdated
	toSerialize["personaname"] = o.Personaname
	toSerialize["profileurl"] = o.Profileurl
	if o.Realname.IsSet() {
		toSerialize["realname"] = o.Realname.Get()
	}
	return toSerialize, nil
}

func (o *SteamProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"avatar",
		"avatarfull",
		"avatarmedium",
		"last_updated",
		"personaname",
		"profileurl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSteamProfile := _SteamProfile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSteamProfile)

	if err != nil {
		return err
	}

	*o = SteamProfile(varSteamProfile)

	return err
}

type NullableSteamProfile struct {
	value *SteamProfile
	isSet bool
}

func (v NullableSteamProfile) Get() *SteamProfile {
	return v.value
}

func (v *NullableSteamProfile) Set(val *SteamProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableSteamProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableSteamProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSteamProfile(val *SteamProfile) *NullableSteamProfile {
	return &NullableSteamProfile{value: val, isSet: true}
}

func (v NullableSteamProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSteamProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


