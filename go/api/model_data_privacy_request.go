/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataPrivacyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataPrivacyRequest{}

// DataPrivacyRequest struct for DataPrivacyRequest
type DataPrivacyRequest struct {
	OpenIdParams map[string]string `json:"open_id_params"`
	SteamId int32 `json:"steam_id"`
}

type _DataPrivacyRequest DataPrivacyRequest

// NewDataPrivacyRequest instantiates a new DataPrivacyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataPrivacyRequest(openIdParams map[string]string, steamId int32) *DataPrivacyRequest {
	this := DataPrivacyRequest{}
	this.OpenIdParams = openIdParams
	this.SteamId = steamId
	return &this
}

// NewDataPrivacyRequestWithDefaults instantiates a new DataPrivacyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataPrivacyRequestWithDefaults() *DataPrivacyRequest {
	this := DataPrivacyRequest{}
	return &this
}

// GetOpenIdParams returns the OpenIdParams field value
func (o *DataPrivacyRequest) GetOpenIdParams() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.OpenIdParams
}

// GetOpenIdParamsOk returns a tuple with the OpenIdParams field value
// and a boolean to check if the value has been set.
func (o *DataPrivacyRequest) GetOpenIdParamsOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.OpenIdParams, true
}

// SetOpenIdParams sets field value
func (o *DataPrivacyRequest) SetOpenIdParams(v map[string]string) {
	o.OpenIdParams = v
}

// GetSteamId returns the SteamId field value
func (o *DataPrivacyRequest) GetSteamId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SteamId
}

// GetSteamIdOk returns a tuple with the SteamId field value
// and a boolean to check if the value has been set.
func (o *DataPrivacyRequest) GetSteamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SteamId, true
}

// SetSteamId sets field value
func (o *DataPrivacyRequest) SetSteamId(v int32) {
	o.SteamId = v
}

func (o DataPrivacyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataPrivacyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["open_id_params"] = o.OpenIdParams
	toSerialize["steam_id"] = o.SteamId
	return toSerialize, nil
}

func (o *DataPrivacyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"open_id_params",
		"steam_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataPrivacyRequest := _DataPrivacyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataPrivacyRequest)

	if err != nil {
		return err
	}

	*o = DataPrivacyRequest(varDataPrivacyRequest)

	return err
}

type NullableDataPrivacyRequest struct {
	value *DataPrivacyRequest
	isSet bool
}

func (v NullableDataPrivacyRequest) Get() *DataPrivacyRequest {
	return v.value
}

func (v *NullableDataPrivacyRequest) Set(val *DataPrivacyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataPrivacyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataPrivacyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataPrivacyRequest(val *DataPrivacyRequest) *NullableDataPrivacyRequest {
	return &NullableDataPrivacyRequest{value: val, isSet: true}
}

func (v NullableDataPrivacyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataPrivacyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


