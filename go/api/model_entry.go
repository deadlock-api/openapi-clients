/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Entry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entry{}

// Entry struct for Entry
type Entry struct {
	// See more: <https://assets.deadlock-api.com/v2/heroes>
	HeroId int32 `json:"hero_id"`
	Matches int64 `json:"matches"`
	// See more: <https://assets.deadlock-api.com/v2/ranks>
	Rank int64 `json:"rank"`
	Value float64 `json:"value"`
}

type _Entry Entry

// NewEntry instantiates a new Entry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntry(heroId int32, matches int64, rank int64, value float64) *Entry {
	this := Entry{}
	this.HeroId = heroId
	this.Matches = matches
	this.Rank = rank
	this.Value = value
	return &this
}

// NewEntryWithDefaults instantiates a new Entry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryWithDefaults() *Entry {
	this := Entry{}
	return &this
}

// GetHeroId returns the HeroId field value
func (o *Entry) GetHeroId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value
// and a boolean to check if the value has been set.
func (o *Entry) GetHeroIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeroId, true
}

// SetHeroId sets field value
func (o *Entry) SetHeroId(v int32) {
	o.HeroId = v
}

// GetMatches returns the Matches field value
func (o *Entry) GetMatches() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *Entry) GetMatchesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matches, true
}

// SetMatches sets field value
func (o *Entry) SetMatches(v int64) {
	o.Matches = v
}

// GetRank returns the Rank field value
func (o *Entry) GetRank() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Rank
}

// GetRankOk returns a tuple with the Rank field value
// and a boolean to check if the value has been set.
func (o *Entry) GetRankOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rank, true
}

// SetRank sets field value
func (o *Entry) SetRank(v int64) {
	o.Rank = v
}

// GetValue returns the Value field value
func (o *Entry) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Entry) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Entry) SetValue(v float64) {
	o.Value = v
}

func (o Entry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hero_id"] = o.HeroId
	toSerialize["matches"] = o.Matches
	toSerialize["rank"] = o.Rank
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *Entry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hero_id",
		"matches",
		"rank",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntry := _Entry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntry)

	if err != nil {
		return err
	}

	*o = Entry(varEntry)

	return err
}

type NullableEntry struct {
	value *Entry
	isSet bool
}

func (v NullableEntry) Get() *Entry {
	return v.value
}

func (v *NullableEntry) Set(val *Entry) {
	v.value = val
	v.isSet = true
}

func (v NullableEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntry(val *Entry) *NullableEntry {
	return &NullableEntry{value: val, isSet: true}
}

func (v NullableEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


