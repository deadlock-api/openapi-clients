/*
Deadlock API

 ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_         

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deadlock-api-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ItemPermutationStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemPermutationStats{}

// ItemPermutationStats struct for ItemPermutationStats
type ItemPermutationStats struct {
	// See more: <https://assets.deadlock-api.com/v2/items>
	ItemIds []int32 `json:"item_ids"`
	Losses int64 `json:"losses"`
	Matches int64 `json:"matches"`
	Wins int64 `json:"wins"`
}

type _ItemPermutationStats ItemPermutationStats

// NewItemPermutationStats instantiates a new ItemPermutationStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemPermutationStats(itemIds []int32, losses int64, matches int64, wins int64) *ItemPermutationStats {
	this := ItemPermutationStats{}
	this.ItemIds = itemIds
	this.Losses = losses
	this.Matches = matches
	this.Wins = wins
	return &this
}

// NewItemPermutationStatsWithDefaults instantiates a new ItemPermutationStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemPermutationStatsWithDefaults() *ItemPermutationStats {
	this := ItemPermutationStats{}
	return &this
}

// GetItemIds returns the ItemIds field value
func (o *ItemPermutationStats) GetItemIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value
// and a boolean to check if the value has been set.
func (o *ItemPermutationStats) GetItemIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemIds, true
}

// SetItemIds sets field value
func (o *ItemPermutationStats) SetItemIds(v []int32) {
	o.ItemIds = v
}

// GetLosses returns the Losses field value
func (o *ItemPermutationStats) GetLosses() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *ItemPermutationStats) GetLossesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *ItemPermutationStats) SetLosses(v int64) {
	o.Losses = v
}

// GetMatches returns the Matches field value
func (o *ItemPermutationStats) GetMatches() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *ItemPermutationStats) GetMatchesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matches, true
}

// SetMatches sets field value
func (o *ItemPermutationStats) SetMatches(v int64) {
	o.Matches = v
}

// GetWins returns the Wins field value
func (o *ItemPermutationStats) GetWins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *ItemPermutationStats) GetWinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *ItemPermutationStats) SetWins(v int64) {
	o.Wins = v
}

func (o ItemPermutationStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemPermutationStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item_ids"] = o.ItemIds
	toSerialize["losses"] = o.Losses
	toSerialize["matches"] = o.Matches
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *ItemPermutationStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item_ids",
		"losses",
		"matches",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemPermutationStats := _ItemPermutationStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemPermutationStats)

	if err != nil {
		return err
	}

	*o = ItemPermutationStats(varItemPermutationStats)

	return err
}

type NullableItemPermutationStats struct {
	value *ItemPermutationStats
	isSet bool
}

func (v NullableItemPermutationStats) Get() *ItemPermutationStats {
	return v.value
}

func (v *NullableItemPermutationStats) Set(val *ItemPermutationStats) {
	v.value = val
	v.isSet = true
}

func (v NullableItemPermutationStats) IsSet() bool {
	return v.isSet
}

func (v *NullableItemPermutationStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemPermutationStats(val *ItemPermutationStats) *NullableItemPermutationStats {
	return &NullableItemPermutationStats{value: val, isSet: true}
}

func (v NullableItemPermutationStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemPermutationStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


