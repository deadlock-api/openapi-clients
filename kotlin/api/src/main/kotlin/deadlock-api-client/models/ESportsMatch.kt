/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.models

import deadlock-api-client.models.ESportsMatchStatus

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param provider The provider of the match data. Some string that identifies the source of the data.
 * @param matchId Valve's match id of the match.
 * @param scheduledDate The scheduled date of the match.
 * @param status The status of the match, e.g. live, completed, scheduled, cancelled.
 * @param team0Name The name of the first team.
 * @param team1Name The name of the second team.
 * @param tournamentName The name of the tournament.
 * @param tournamentStage The stage of the tournament.
 * @param updateId If you want to update an existing match, you can provide an update id.
 */


data class ESportsMatch (

    /* The provider of the match data. Some string that identifies the source of the data. */
    @Json(name = "provider")
    val provider: kotlin.String,

    /* Valve's match id of the match. */
    @Json(name = "match_id")
    val matchId: kotlin.Long? = null,

    /* The scheduled date of the match. */
    @Json(name = "scheduled_date")
    val scheduledDate: java.time.OffsetDateTime? = null,

    /* The status of the match, e.g. live, completed, scheduled, cancelled. */
    @Json(name = "status")
    val status: ESportsMatchStatus? = null,

    /* The name of the first team. */
    @Json(name = "team0_name")
    val team0Name: kotlin.String? = null,

    /* The name of the second team. */
    @Json(name = "team1_name")
    val team1Name: kotlin.String? = null,

    /* The name of the tournament. */
    @Json(name = "tournament_name")
    val tournamentName: kotlin.String? = null,

    /* The stage of the tournament. */
    @Json(name = "tournament_stage")
    val tournamentStage: kotlin.String? = null,

    /* If you want to update an existing match, you can provide an update id. */
    @Json(name = "update_id")
    val updateId: java.util.UUID? = null

)

