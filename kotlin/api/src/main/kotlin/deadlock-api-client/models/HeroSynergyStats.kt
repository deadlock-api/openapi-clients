/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param assists1 The number of assists by `hero_id1` when playing with `hero_id2`.
 * @param assists2 The number of assists by `hero_id2` when playing with `hero_id1`.
 * @param creeps1 The number of creeps killed by `hero_id1` when playing with `hero_id2`.
 * @param creeps2 The number of creeps killed by `hero_id2` when playing with `hero_id1`.
 * @param deaths1 The number of deaths by `hero_id1` when playing with `hero_id2`.
 * @param deaths2 The number of deaths by `hero_id2` when playing with `hero_id1`.
 * @param denies1 The number of denies by `hero_id1` when playing with `hero_id2`.
 * @param denies2 The number of denies by `hero_id2` when playing with `hero_id1`.
 * @param heroId1 The ID of the first hero in the pair.
 * @param heroId2 The ID of the second hero in the pair.
 * @param kills1 The number of kills by `hero_id1` when playing with `hero_id2`.
 * @param kills2 The number of kills by `hero_id2` when playing with `hero_id1`.
 * @param lastHits1 The number of last hits by `hero_id1` when playing with `hero_id2`.
 * @param lastHits2 The number of last hits by `hero_id2` when playing with `hero_id1`.
 * @param matchesPlayed The total number of matches played where `hero_id1` and `hero_id2` were on the same team, meeting the filter criteria.
 * @param networth1 The net worth of `hero_id1` when playing with `hero_id2`.
 * @param networth2 The net worth of `hero_id2` when playing with `hero_id1`.
 * @param objDamage1 The amount of objective damage dealt by `hero_id1` when playing with `hero_id2`.
 * @param objDamage2 The amount of objective damage dealt by `hero_id2` when playing with `hero_id1`.
 * @param wins The number of times the team won when both `hero_id1` and `hero_id2` were on the same team.
 */


data class HeroSynergyStats (

    /* The number of assists by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "assists1")
    val assists1: kotlin.Long,

    /* The number of assists by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "assists2")
    val assists2: kotlin.Long,

    /* The number of creeps killed by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "creeps1")
    val creeps1: kotlin.Long,

    /* The number of creeps killed by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "creeps2")
    val creeps2: kotlin.Long,

    /* The number of deaths by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "deaths1")
    val deaths1: kotlin.Long,

    /* The number of deaths by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "deaths2")
    val deaths2: kotlin.Long,

    /* The number of denies by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "denies1")
    val denies1: kotlin.Long,

    /* The number of denies by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "denies2")
    val denies2: kotlin.Long,

    /* The ID of the first hero in the pair. */
    @Json(name = "hero_id1")
    val heroId1: kotlin.Int,

    /* The ID of the second hero in the pair. */
    @Json(name = "hero_id2")
    val heroId2: kotlin.Int,

    /* The number of kills by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "kills1")
    val kills1: kotlin.Long,

    /* The number of kills by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "kills2")
    val kills2: kotlin.Long,

    /* The number of last hits by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "last_hits1")
    val lastHits1: kotlin.Long,

    /* The number of last hits by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "last_hits2")
    val lastHits2: kotlin.Long,

    /* The total number of matches played where `hero_id1` and `hero_id2` were on the same team, meeting the filter criteria. */
    @Json(name = "matches_played")
    val matchesPlayed: kotlin.Long,

    /* The net worth of `hero_id1` when playing with `hero_id2`. */
    @Json(name = "networth1")
    val networth1: kotlin.Long,

    /* The net worth of `hero_id2` when playing with `hero_id1`. */
    @Json(name = "networth2")
    val networth2: kotlin.Long,

    /* The amount of objective damage dealt by `hero_id1` when playing with `hero_id2`. */
    @Json(name = "obj_damage1")
    val objDamage1: kotlin.Long,

    /* The amount of objective damage dealt by `hero_id2` when playing with `hero_id1`. */
    @Json(name = "obj_damage2")
    val objDamage2: kotlin.Long,

    /* The number of times the team won when both `hero_id1` and `hero_id2` were on the same team. */
    @Json(name = "wins")
    val wins: kotlin.Long

) {


}

