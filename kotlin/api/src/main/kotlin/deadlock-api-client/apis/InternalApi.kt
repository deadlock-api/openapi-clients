/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import deadlock-api-client.models.ClickhouseSalts

import com.squareup.moshi.Json

import deadlock-api-client.infrastructure.ApiClient
import deadlock-api-client.infrastructure.ApiResponse
import deadlock-api-client.infrastructure.ClientException
import deadlock-api-client.infrastructure.ClientError
import deadlock-api-client.infrastructure.ServerException
import deadlock-api-client.infrastructure.ServerError
import deadlock-api-client.infrastructure.MultiValueMap
import deadlock-api-client.infrastructure.PartConfig
import deadlock-api-client.infrastructure.RequestConfig
import deadlock-api-client.infrastructure.RequestMethod
import deadlock-api-client.infrastructure.ResponseType
import deadlock-api-client.infrastructure.Success
import deadlock-api-client.infrastructure.toMultiValue

class InternalApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.deadlock-api.com")
        }
    }

    /**
     * POST /v1/matches/salts
     * Match Salts Ingest
     *  You can use this endpoint to help us collecting data.  The endpoint accepts a list of MatchSalts objects, which contain the following fields:  - &#x60;match_id&#x60;: The match ID - &#x60;cluster_id&#x60;: The cluster ID - &#x60;metadata_salt&#x60;: The metadata salt - &#x60;replay_salt&#x60;: The replay salt - &#x60;username&#x60;: The username of the person who submitted the match  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     
     * @param clickhouseSalts 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ingestSalts(clickhouseSalts: kotlin.collections.List<ClickhouseSalts>) : Unit {
        val localVarResponse = ingestSaltsWithHttpInfo(clickhouseSalts = clickhouseSalts)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /v1/matches/salts
     * Match Salts Ingest
     *  You can use this endpoint to help us collecting data.  The endpoint accepts a list of MatchSalts objects, which contain the following fields:  - &#x60;match_id&#x60;: The match ID - &#x60;cluster_id&#x60;: The cluster ID - &#x60;metadata_salt&#x60;: The metadata salt - &#x60;replay_salt&#x60;: The replay salt - &#x60;username&#x60;: The username of the person who submitted the match  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     
     * @param clickhouseSalts 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun ingestSaltsWithHttpInfo(clickhouseSalts: kotlin.collections.List<ClickhouseSalts>) : ApiResponse<Unit?> {
        val localVariableConfig = ingestSaltsRequestConfig(clickhouseSalts = clickhouseSalts)

        return request<kotlin.collections.List<ClickhouseSalts>, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ingestSalts
     *
     * @param clickhouseSalts 
     * @return RequestConfig
     */
    fun ingestSaltsRequestConfig(clickhouseSalts: kotlin.collections.List<ClickhouseSalts>) : RequestConfig<kotlin.collections.List<ClickhouseSalts>> {
        val localVariableBody = clickhouseSalts
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/matches/salts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
