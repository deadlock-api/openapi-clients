/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import deadlock-api-client.models.Build

import com.squareup.moshi.Json

import deadlock-api-client.infrastructure.ApiClient
import deadlock-api-client.infrastructure.ApiResponse
import deadlock-api-client.infrastructure.ClientException
import deadlock-api-client.infrastructure.ClientError
import deadlock-api-client.infrastructure.ServerException
import deadlock-api-client.infrastructure.ServerError
import deadlock-api-client.infrastructure.MultiValueMap
import deadlock-api-client.infrastructure.PartConfig
import deadlock-api-client.infrastructure.RequestConfig
import deadlock-api-client.infrastructure.RequestMethod
import deadlock-api-client.infrastructure.ResponseType
import deadlock-api-client.infrastructure.Success
import deadlock-api-client.infrastructure.toMultiValue

class BuildsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.deadlock-api.com")
        }
    }

    /**
     * enum for parameter sortBy
     */
     enum class SortBySearchBuilds(val value: kotlin.String) {
         @Json(name = "weekly_favorites") weekly_favorites("weekly_favorites"),
         @Json(name = "favorites") favorites("favorites"),
         @Json(name = "ignores") ignores("ignores"),
         @Json(name = "reports") reports("reports"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "published_at") published_at("published_at"),
         @Json(name = "version") version("version")
     }

    /**
     * enum for parameter sortDirection
     */
     enum class SortDirectionSearchBuilds(val value: kotlin.String) {
         @Json(name = "desc") desc("desc"),
         @Json(name = "asc") asc("asc")
     }

    /**
     * Search
     *  Search for builds based on various criteria.  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     
     * @param minUnixTimestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param maxUnixTimestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param minPublishedUnixTimestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param maxPublishedUnixTimestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param sortBy The field to sort the builds by. (optional)
     * @param start The index of the first build to return. (optional)
     * @param limit The maximum number of builds to return. (optional, default to 100)
     * @param sortDirection The direction to sort the builds in. (optional)
     * @param searchName Search for builds with a name containing this string. (optional)
     * @param searchDescription Search for builds with a description containing this string. (optional)
     * @param onlyLatest Only return the latest version of each build. (optional)
     * @param language Filter builds by language. (optional)
     * @param buildId Filter builds by ID. (optional)
     * @param version Filter builds by version. (optional)
     * @param heroId Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param tag Filter builds by tag. (optional)
     * @param rollupCategory Filter builds by rollup category. (optional)
     * @param authorId The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @return kotlin.collections.List<Build>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchBuilds(minUnixTimestamp: kotlin.Long? = null, maxUnixTimestamp: kotlin.Long? = null, minPublishedUnixTimestamp: kotlin.Long? = null, maxPublishedUnixTimestamp: kotlin.Long? = null, sortBy: SortBySearchBuilds? = null, start: kotlin.Int? = null, limit: kotlin.Int? = 100, sortDirection: SortDirectionSearchBuilds? = null, searchName: kotlin.String? = null, searchDescription: kotlin.String? = null, onlyLatest: kotlin.Boolean? = null, language: kotlin.Int? = null, buildId: kotlin.Int? = null, version: kotlin.Int? = null, heroId: kotlin.Int? = null, tag: kotlin.Int? = null, rollupCategory: kotlin.Int? = null, authorId: kotlin.Int? = null) : kotlin.collections.List<Build> {
        val localVarResponse = searchBuildsWithHttpInfo(minUnixTimestamp = minUnixTimestamp, maxUnixTimestamp = maxUnixTimestamp, minPublishedUnixTimestamp = minPublishedUnixTimestamp, maxPublishedUnixTimestamp = maxPublishedUnixTimestamp, sortBy = sortBy, start = start, limit = limit, sortDirection = sortDirection, searchName = searchName, searchDescription = searchDescription, onlyLatest = onlyLatest, language = language, buildId = buildId, version = version, heroId = heroId, tag = tag, rollupCategory = rollupCategory, authorId = authorId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Build>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search
     *  Search for builds based on various criteria.  ### Rate Limits: | Type | Limit | | ---- | ----- | | IP | 100req/s | | Key | - | | Global | - |     
     * @param minUnixTimestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param maxUnixTimestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param minPublishedUnixTimestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param maxPublishedUnixTimestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param sortBy The field to sort the builds by. (optional)
     * @param start The index of the first build to return. (optional)
     * @param limit The maximum number of builds to return. (optional, default to 100)
     * @param sortDirection The direction to sort the builds in. (optional)
     * @param searchName Search for builds with a name containing this string. (optional)
     * @param searchDescription Search for builds with a description containing this string. (optional)
     * @param onlyLatest Only return the latest version of each build. (optional)
     * @param language Filter builds by language. (optional)
     * @param buildId Filter builds by ID. (optional)
     * @param version Filter builds by version. (optional)
     * @param heroId Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param tag Filter builds by tag. (optional)
     * @param rollupCategory Filter builds by rollup category. (optional)
     * @param authorId The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @return ApiResponse<kotlin.collections.List<Build>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchBuildsWithHttpInfo(minUnixTimestamp: kotlin.Long?, maxUnixTimestamp: kotlin.Long?, minPublishedUnixTimestamp: kotlin.Long?, maxPublishedUnixTimestamp: kotlin.Long?, sortBy: SortBySearchBuilds?, start: kotlin.Int?, limit: kotlin.Int?, sortDirection: SortDirectionSearchBuilds?, searchName: kotlin.String?, searchDescription: kotlin.String?, onlyLatest: kotlin.Boolean?, language: kotlin.Int?, buildId: kotlin.Int?, version: kotlin.Int?, heroId: kotlin.Int?, tag: kotlin.Int?, rollupCategory: kotlin.Int?, authorId: kotlin.Int?) : ApiResponse<kotlin.collections.List<Build>?> {
        val localVariableConfig = searchBuildsRequestConfig(minUnixTimestamp = minUnixTimestamp, maxUnixTimestamp = maxUnixTimestamp, minPublishedUnixTimestamp = minPublishedUnixTimestamp, maxPublishedUnixTimestamp = maxPublishedUnixTimestamp, sortBy = sortBy, start = start, limit = limit, sortDirection = sortDirection, searchName = searchName, searchDescription = searchDescription, onlyLatest = onlyLatest, language = language, buildId = buildId, version = version, heroId = heroId, tag = tag, rollupCategory = rollupCategory, authorId = authorId)

        return request<Unit, kotlin.collections.List<Build>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchBuilds
     *
     * @param minUnixTimestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param maxUnixTimestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param minPublishedUnixTimestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param maxPublishedUnixTimestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param sortBy The field to sort the builds by. (optional)
     * @param start The index of the first build to return. (optional)
     * @param limit The maximum number of builds to return. (optional, default to 100)
     * @param sortDirection The direction to sort the builds in. (optional)
     * @param searchName Search for builds with a name containing this string. (optional)
     * @param searchDescription Search for builds with a description containing this string. (optional)
     * @param onlyLatest Only return the latest version of each build. (optional)
     * @param language Filter builds by language. (optional)
     * @param buildId Filter builds by ID. (optional)
     * @param version Filter builds by version. (optional)
     * @param heroId Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param tag Filter builds by tag. (optional)
     * @param rollupCategory Filter builds by rollup category. (optional)
     * @param authorId The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @return RequestConfig
     */
    fun searchBuildsRequestConfig(minUnixTimestamp: kotlin.Long?, maxUnixTimestamp: kotlin.Long?, minPublishedUnixTimestamp: kotlin.Long?, maxPublishedUnixTimestamp: kotlin.Long?, sortBy: SortBySearchBuilds?, start: kotlin.Int?, limit: kotlin.Int?, sortDirection: SortDirectionSearchBuilds?, searchName: kotlin.String?, searchDescription: kotlin.String?, onlyLatest: kotlin.Boolean?, language: kotlin.Int?, buildId: kotlin.Int?, version: kotlin.Int?, heroId: kotlin.Int?, tag: kotlin.Int?, rollupCategory: kotlin.Int?, authorId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (minUnixTimestamp != null) {
                    put("min_unix_timestamp", listOf(minUnixTimestamp.toString()))
                }
                if (maxUnixTimestamp != null) {
                    put("max_unix_timestamp", listOf(maxUnixTimestamp.toString()))
                }
                if (minPublishedUnixTimestamp != null) {
                    put("min_published_unix_timestamp", listOf(minPublishedUnixTimestamp.toString()))
                }
                if (maxPublishedUnixTimestamp != null) {
                    put("max_published_unix_timestamp", listOf(maxPublishedUnixTimestamp.toString()))
                }
                if (sortBy != null) {
                    put("sort_by", listOf(sortBy.value))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (sortDirection != null) {
                    put("sort_direction", listOf(sortDirection.value))
                }
                if (searchName != null) {
                    put("search_name", listOf(searchName.toString()))
                }
                if (searchDescription != null) {
                    put("search_description", listOf(searchDescription.toString()))
                }
                if (onlyLatest != null) {
                    put("only_latest", listOf(onlyLatest.toString()))
                }
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (buildId != null) {
                    put("build_id", listOf(buildId.toString()))
                }
                if (version != null) {
                    put("version", listOf(version.toString()))
                }
                if (heroId != null) {
                    put("hero_id", listOf(heroId.toString()))
                }
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (rollupCategory != null) {
                    put("rollup_category", listOf(rollupCategory.toString()))
                }
                if (authorId != null) {
                    put("author_id", listOf(authorId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/builds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
