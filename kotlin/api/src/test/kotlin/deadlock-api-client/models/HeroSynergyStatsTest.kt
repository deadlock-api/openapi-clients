/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import deadlock-api-client.models.HeroSynergyStats

class HeroSynergyStatsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of HeroSynergyStats
        //val modelInstance = HeroSynergyStats()

        // to test the property `assists1` - The number of assists by `hero_id1` when playing with `hero_id2`.
        should("test assists1") {
            // uncomment below to test the property
            //modelInstance.assists1 shouldBe ("TODO")
        }

        // to test the property `assists2` - The number of assists by `hero_id2` when playing with `hero_id1`.
        should("test assists2") {
            // uncomment below to test the property
            //modelInstance.assists2 shouldBe ("TODO")
        }

        // to test the property `creeps1` - The number of creeps killed by `hero_id1` when playing with `hero_id2`.
        should("test creeps1") {
            // uncomment below to test the property
            //modelInstance.creeps1 shouldBe ("TODO")
        }

        // to test the property `creeps2` - The number of creeps killed by `hero_id2` when playing with `hero_id1`.
        should("test creeps2") {
            // uncomment below to test the property
            //modelInstance.creeps2 shouldBe ("TODO")
        }

        // to test the property `deaths1` - The number of deaths by `hero_id1` when playing with `hero_id2`.
        should("test deaths1") {
            // uncomment below to test the property
            //modelInstance.deaths1 shouldBe ("TODO")
        }

        // to test the property `deaths2` - The number of deaths by `hero_id2` when playing with `hero_id1`.
        should("test deaths2") {
            // uncomment below to test the property
            //modelInstance.deaths2 shouldBe ("TODO")
        }

        // to test the property `denies1` - The number of denies by `hero_id1` when playing with `hero_id2`.
        should("test denies1") {
            // uncomment below to test the property
            //modelInstance.denies1 shouldBe ("TODO")
        }

        // to test the property `denies2` - The number of denies by `hero_id2` when playing with `hero_id1`.
        should("test denies2") {
            // uncomment below to test the property
            //modelInstance.denies2 shouldBe ("TODO")
        }

        // to test the property `heroId1` - The ID of the first hero in the pair.
        should("test heroId1") {
            // uncomment below to test the property
            //modelInstance.heroId1 shouldBe ("TODO")
        }

        // to test the property `heroId2` - The ID of the second hero in the pair.
        should("test heroId2") {
            // uncomment below to test the property
            //modelInstance.heroId2 shouldBe ("TODO")
        }

        // to test the property `kills1` - The number of kills by `hero_id1` when playing with `hero_id2`.
        should("test kills1") {
            // uncomment below to test the property
            //modelInstance.kills1 shouldBe ("TODO")
        }

        // to test the property `kills2` - The number of kills by `hero_id2` when playing with `hero_id1`.
        should("test kills2") {
            // uncomment below to test the property
            //modelInstance.kills2 shouldBe ("TODO")
        }

        // to test the property `lastHits1` - The number of last hits by `hero_id1` when playing with `hero_id2`.
        should("test lastHits1") {
            // uncomment below to test the property
            //modelInstance.lastHits1 shouldBe ("TODO")
        }

        // to test the property `lastHits2` - The number of last hits by `hero_id2` when playing with `hero_id1`.
        should("test lastHits2") {
            // uncomment below to test the property
            //modelInstance.lastHits2 shouldBe ("TODO")
        }

        // to test the property `matchesPlayed` - The total number of matches played where `hero_id1` and `hero_id2` were on the same team, meeting the filter criteria.
        should("test matchesPlayed") {
            // uncomment below to test the property
            //modelInstance.matchesPlayed shouldBe ("TODO")
        }

        // to test the property `networth1` - The net worth of `hero_id1` when playing with `hero_id2`.
        should("test networth1") {
            // uncomment below to test the property
            //modelInstance.networth1 shouldBe ("TODO")
        }

        // to test the property `networth2` - The net worth of `hero_id2` when playing with `hero_id1`.
        should("test networth2") {
            // uncomment below to test the property
            //modelInstance.networth2 shouldBe ("TODO")
        }

        // to test the property `objDamage1` - The amount of objective damage dealt by `hero_id1` when playing with `hero_id2`.
        should("test objDamage1") {
            // uncomment below to test the property
            //modelInstance.objDamage1 shouldBe ("TODO")
        }

        // to test the property `objDamage2` - The amount of objective damage dealt by `hero_id2` when playing with `hero_id1`.
        should("test objDamage2") {
            // uncomment below to test the property
            //modelInstance.objDamage2 shouldBe ("TODO")
        }

        // to test the property `wins` - The number of times the team won when both `hero_id1` and `hero_id2` were on the same team.
        should("test wins") {
            // uncomment below to test the property
            //modelInstance.wins shouldBe ("TODO")
        }

    }
}
