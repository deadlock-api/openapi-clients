/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import deadlock-api-client.apis.PlayersApi
import deadlock-api-client.models.EnemyStats
import deadlock-api-client.models.HeroStats
import deadlock-api-client.models.MateStats
import deadlock-api-client.models.PartyStats
import deadlock-api-client.models.PlayerCard
import deadlock-api-client.models.PlayerMatchHistoryEntry
import deadlock-api-client.models.SteamProfile

class PlayersApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PlayersApi
        //val apiInstance = PlayersApi()

        // to test card
        should("test card") {
            // uncomment below to test card
            //val accountId : kotlin.Int = 56 // kotlin.Int | The players `SteamID3`
            //val result : kotlin.collections.List<PlayerCard> = apiInstance.card(accountId)
            //result shouldBe ("TODO")
        }

        // to test enemyStats
        should("test enemyStats") {
            // uncomment below to test enemyStats
            //val accountId : kotlin.Int = 56 // kotlin.Int | The players `SteamID3`
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val minMatchesPlayed : kotlin.Long = 789 // kotlin.Long | Filter based on the number of matches played.
            //val maxMatchesPlayed : kotlin.Long = 789 // kotlin.Long | Filter based on the number of matches played.
            //val result : kotlin.collections.List<EnemyStats> = apiInstance.enemyStats(accountId, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minMatchId, maxMatchId, minMatchesPlayed, maxMatchesPlayed)
            //result shouldBe ("TODO")
        }

        // to test matchHistory
        should("test matchHistory") {
            // uncomment below to test matchHistory
            //val accountId : kotlin.Int = 56 // kotlin.Int | The players `SteamID3`
            //val forceRefetch : kotlin.Boolean = true // kotlin.Boolean | Refetch the match history from Steam, even if it is already cached in `ClickHouse`. Only use this if you are sure that the data in `ClickHouse` is outdated. Enabling this flag results in a strict rate limit.
            //val onlyStoredHistory : kotlin.Boolean = true // kotlin.Boolean | Return only the already stored match history from `ClickHouse`. There is no rate limit for this option, so if you need a lot of data, you can use this option. This option is not compatible with `force_refetch`.
            //val result : kotlin.collections.List<PlayerMatchHistoryEntry> = apiInstance.matchHistory(accountId, forceRefetch, onlyStoredHistory)
            //result shouldBe ("TODO")
        }

        // to test mateStats
        should("test mateStats") {
            // uncomment below to test mateStats
            //val accountId : kotlin.Int = 56 // kotlin.Int | The players `SteamID3`
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val minMatchesPlayed : kotlin.Long = 789 // kotlin.Long | Filter based on the number of matches played.
            //val maxMatchesPlayed : kotlin.Long = 789 // kotlin.Long | Filter based on the number of matches played.
            //val result : kotlin.collections.List<MateStats> = apiInstance.mateStats(accountId, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minMatchId, maxMatchId, minMatchesPlayed, maxMatchesPlayed)
            //result shouldBe ("TODO")
        }

        // to test partyStats
        should("test partyStats") {
            // uncomment below to test partyStats
            //val accountId : kotlin.Int = 56 // kotlin.Int | The players `SteamID3`
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val result : kotlin.collections.List<PartyStats> = apiInstance.partyStats(accountId, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minMatchId, maxMatchId)
            //result shouldBe ("TODO")
        }

        // to test playerHeroStats
        should("test playerHeroStats") {
            // uncomment below to test playerHeroStats
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids, Account IDs are in `SteamID3` format.
            //val heroIds : kotlin.String = heroIds_example // kotlin.String | Filter matches based on the hero IDs. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val result : kotlin.collections.List<HeroStats> = apiInstance.playerHeroStats(accountIds, heroIds, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId)
            //result shouldBe ("TODO")
        }

        // to test steam
        should("test steam") {
            // uncomment below to test steam
            //val accountIds : kotlin.collections.List<kotlin.Long> =  // kotlin.collections.List<kotlin.Long> | Comma separated list of account ids, Account IDs are in `SteamID3` format.
            //val result : kotlin.collections.List<SteamProfile> = apiInstance.steam(accountIds)
            //result shouldBe ("TODO")
        }

        // to test steamSearch
        should("test steamSearch") {
            // uncomment below to test steamSearch
            //val searchQuery : kotlin.String = searchQuery_example // kotlin.String | Search query for Steam profiles.
            //val result : kotlin.collections.List<SteamProfile> = apiInstance.steamSearch(searchQuery)
            //result shouldBe ("TODO")
        }

    }
}
