/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import deadlock-api-client.apis.AnalyticsApi
import deadlock-api-client.models.AnalyticsAbilityOrderStats
import deadlock-api-client.models.AnalyticsHeroStats
import deadlock-api-client.models.BadgeDistribution
import deadlock-api-client.models.BuildItemStats
import deadlock-api-client.models.Entry
import deadlock-api-client.models.HashMapValue
import deadlock-api-client.models.HeroCombStats
import deadlock-api-client.models.HeroCounterStats
import deadlock-api-client.models.HeroSynergyStats
import deadlock-api-client.models.ItemPermutationStats
import deadlock-api-client.models.ItemStats

class AnalyticsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AnalyticsApi
        //val apiInstance = AnalyticsApi()

        // to test abilityOrderStats
        should("test abilityOrderStats") {
            // uncomment below to test abilityOrderStats
            //val heroId : kotlin.Int = 56 // kotlin.Int | See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minAbilityUpgrades : kotlin.Long = 789 // kotlin.Long | Filter players based on their minimum number of ability upgrades over the whole match.
            //val maxAbilityUpgrades : kotlin.Long = 789 // kotlin.Long | Filter players based on their maximum number of ability upgrades over the whole match.
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val minMatches : kotlin.Int = 56 // kotlin.Int | The minimum number of matches played for an ability order to be included in the response.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<AnalyticsAbilityOrderStats> = apiInstance.abilityOrderStats(heroId, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minAbilityUpgrades, maxAbilityUpgrades, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, minMatches, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test badgeDistribution
        should("test badgeDistribution") {
            // uncomment below to test badgeDistribution
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val isHighSkillRangeParties : kotlin.Boolean = true // kotlin.Boolean | Filter matches based on whether they are in the high skill range.
            //val isLowPriPool : kotlin.Boolean = true // kotlin.Boolean | Filter matches based on whether they are in the low priority pool.
            //val isNewPlayerPool : kotlin.Boolean = true // kotlin.Boolean | Filter matches based on whether they are in the new player pool.
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val result : kotlin.collections.List<BadgeDistribution> = apiInstance.badgeDistribution(minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, isHighSkillRangeParties, isLowPriPool, isNewPlayerPool, minMatchId, maxMatchId)
            //result shouldBe ("TODO")
        }

        // to test buildItemStats
        should("test buildItemStats") {
            // uncomment below to test buildItemStats
            //val heroId : kotlin.Int = 56 // kotlin.Int | Filter builds based on the hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minLastUpdatedUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter builds based on their last updated time (Unix timestamp). **Default:** 30 days ago.
            //val maxLastUpdatedUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter builds based on their last updated time (Unix timestamp).
            //val result : kotlin.collections.List<BuildItemStats> = apiInstance.buildItemStats(heroId, minLastUpdatedUnixTimestamp, maxLastUpdatedUnixTimestamp)
            //result shouldBe ("TODO")
        }

        // to test heroCombStats
        should("test heroCombStats") {
            // uncomment below to test heroCombStats
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val includeHeroIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of hero ids to include. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val excludeHeroIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of hero ids to exclude. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minMatches : kotlin.Int = 56 // kotlin.Int | The minimum number of matches played for a hero combination to be included in the response.
            //val maxMatches : kotlin.Int = 56 // kotlin.Int | The maximum number of matches played for a hero combination to be included in the response.
            //val combSize : kotlin.Int = 56 // kotlin.Int | The combination size to return.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<HeroCombStats> = apiInstance.heroCombStats(minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, includeHeroIds, excludeHeroIds, minMatches, maxMatches, combSize, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test heroCountersStats
        should("test heroCountersStats") {
            // uncomment below to test heroCountersStats
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minEnemyNetworth : kotlin.Long = 789 // kotlin.Long | Filter enemy players based on their net worth.
            //val maxEnemyNetworth : kotlin.Long = 789 // kotlin.Long | Filter enemy players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val sameLaneFilter : kotlin.Boolean = true // kotlin.Boolean | When `true`, only considers matchups where both `hero_id` and `enemy_hero_id` were assigned to the same lane (e.g., both Mid Lane). When `false`, considers all matchups regardless of assigned lane.
            //val minMatches : kotlin.Long = 789 // kotlin.Long | The minimum number of matches played for a hero combination to be included in the response.
            //val maxMatches : kotlin.Int = 56 // kotlin.Int | The maximum number of matches played for a hero combination to be included in the response.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<HeroCounterStats> = apiInstance.heroCountersStats(minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minEnemyNetworth, maxEnemyNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, sameLaneFilter, minMatches, maxMatches, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test heroScoreboard
        should("test heroScoreboard") {
            // uncomment below to test heroScoreboard
            //val sortBy : kotlin.String = sortBy_example // kotlin.String | The field to sort by.
            //val sortDirection : kotlin.String = sortDirection_example // kotlin.String | The direction to sort heroes in.
            //val minMatches : kotlin.Int = 56 // kotlin.Int | Filter by min number of matches played.
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<Entry> = apiInstance.heroScoreboard(sortBy, sortDirection, minMatches, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test heroStats
        should("test heroStats") {
            // uncomment below to test heroStats
            //val bucket : kotlin.String = bucket_example // kotlin.String | Bucket allows you to group the stats by a specific field.
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val minHeroMatches : kotlin.Long = 789 // kotlin.Long | Filter players based on the number of matches they have played with a specific hero.
            //val maxHeroMatches : kotlin.Long = 789 // kotlin.Long | Filter players based on the number of matches they have played with a specific hero.
            //val includeItemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids to include (only heroes who have purchased these items). See more: <https://assets.deadlock-api.com/v2/items>
            //val excludeItemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids to exclude (only heroes who have not purchased these items). See more: <https://assets.deadlock-api.com/v2/items>
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<AnalyticsHeroStats> = apiInstance.heroStats(bucket, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, minHeroMatches, maxHeroMatches, includeItemIds, excludeItemIds, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test heroSynergiesStats
        should("test heroSynergiesStats") {
            // uncomment below to test heroSynergiesStats
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val sameLaneFilter : kotlin.Boolean = true // kotlin.Boolean | When `true`, only considers matchups where both `hero_id1` and `hero_id2` were assigned to the same lane (e.g., both Mid Lane). When `false`, considers all matchups regardless of assigned lane.
            //val samePartyFilter : kotlin.Boolean = true // kotlin.Boolean | When `true`, only considers matchups where both `hero_id` and `hero_id2` were on the same party. When `false`, considers all matchups regardless of party affiliation.
            //val minMatches : kotlin.Long = 789 // kotlin.Long | The minimum number of matches played for a hero combination to be included in the response.
            //val maxMatches : kotlin.Int = 56 // kotlin.Int | The maximum number of matches played for a hero combination to be included in the response.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<HeroSynergyStats> = apiInstance.heroSynergiesStats(minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, sameLaneFilter, samePartyFilter, minMatches, maxMatches, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test itemPermutationStats
        should("test itemPermutationStats") {
            // uncomment below to test itemPermutationStats
            //val itemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids. See more: <https://assets.deadlock-api.com/v2/items>
            //val combSize : kotlin.Int = 56 // kotlin.Int | The combination size to return.
            //val heroIds : kotlin.String = heroIds_example // kotlin.String | Filter matches based on the hero IDs. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val heroId : kotlin.Int = 56 // kotlin.Int | Filter matches based on the hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<ItemPermutationStats> = apiInstance.itemPermutationStats(itemIds, combSize, heroIds, heroId, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test itemStats
        should("test itemStats") {
            // uncomment below to test itemStats
            //val bucket : kotlin.String = bucket_example // kotlin.String | Bucket allows you to group the stats by a specific field.
            //val heroIds : kotlin.String = heroIds_example // kotlin.String | Filter matches based on the hero IDs. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val heroId : kotlin.Int = 56 // kotlin.Int | Filter matches based on the hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val includeItemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids to include. See more: <https://assets.deadlock-api.com/v2/items>
            //val excludeItemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids to exclude. See more: <https://assets.deadlock-api.com/v2/items>
            //val minMatches : kotlin.Int = 56 // kotlin.Int | The minimum number of matches played for an item to be included in the response.
            //val maxMatches : kotlin.Int = 56 // kotlin.Int | The maximum number of matches played for a hero combination to be included in the response.
            //val accountId : kotlin.Int = 56 // kotlin.Int | Filter for matches with a specific player account ID.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<ItemStats> = apiInstance.itemStats(bucket, heroIds, heroId, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, includeItemIds, excludeItemIds, minMatches, maxMatches, accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test playerScoreboard
        should("test playerScoreboard") {
            // uncomment below to test playerScoreboard
            //val sortBy : kotlin.String = sortBy_example // kotlin.String | The field to sort by.
            //val sortDirection : kotlin.String = sortDirection_example // kotlin.String | The direction to sort players in.
            //val heroId : kotlin.Int = 56 // kotlin.Int | Filter matches based on the hero ID. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minMatches : kotlin.Int = 56 // kotlin.Int | The minimum number of matches played for a player to be included in the scoreboard.
            //val maxMatches : kotlin.Int = 56 // kotlin.Int | The maximum number of matches played for a hero combination to be included in the response.
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val start : kotlin.Int = 56 // kotlin.Int | The offset to start fetching players from.
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of players to fetch.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<Entry> = apiInstance.playerScoreboard(sortBy, sortDirection, heroId, minMatches, maxMatches, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, start, limit, accountIds)
            //result shouldBe ("TODO")
        }

        // to test playerStatsMetrics
        should("test playerStatsMetrics") {
            // uncomment below to test playerStatsMetrics
            //val heroIds : kotlin.String = heroIds_example // kotlin.String | Filter matches based on the hero IDs. See more: <https://assets.deadlock-api.com/v2/heroes>
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp). **Default:** 30 days ago.
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val maxNetworth : kotlin.Long = 789 // kotlin.Long | Filter players based on their net worth.
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatches : kotlin.Int = 56 // kotlin.Int | The maximum number of matches to analyze.
            //val includeItemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids to include (only heroes who have purchased these items). See more: <https://assets.deadlock-api.com/v2/items>
            //val excludeItemIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of item ids to exclude (only heroes who have not purchased these items). See more: <https://assets.deadlock-api.com/v2/items>
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.Map<kotlin.String, HashMapValue> = apiInstance.playerStatsMetrics(heroIds, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minNetworth, maxNetworth, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, maxMatches, includeItemIds, excludeItemIds, accountIds)
            //result shouldBe ("TODO")
        }

    }
}
