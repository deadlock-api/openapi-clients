/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package deadlock-api-client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import deadlock-api-client.apis.MatchesApi
import deadlock-api-client.models.ActiveMatch
import deadlock-api-client.models.BadgeDistribution
import deadlock-api-client.models.ClickhouseMatchInfo
import deadlock-api-client.models.MatchSaltsResponse
import deadlock-api-client.models.MatchSpectateResponse

class MatchesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MatchesApi
        //val apiInstance = MatchesApi()

        // to test activeMatches
        should("test activeMatches") {
            // uncomment below to test activeMatches
            //val accountId : kotlin.Int = 56 // kotlin.Int | The account ID to filter active matches by (`SteamID3`)
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Comma separated list of account ids to include
            //val result : kotlin.collections.List<ActiveMatch> = apiInstance.activeMatches(accountId, accountIds)
            //result shouldBe ("TODO")
        }

        // to test activeMatchesRaw
        should("test activeMatchesRaw") {
            // uncomment below to test activeMatchesRaw
            //val result : kotlin.collections.List<kotlin.Int> = apiInstance.activeMatchesRaw()
            //result shouldBe ("TODO")
        }

        // to test badgeDistribution
        should("test badgeDistribution") {
            // uncomment below to test badgeDistribution
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val result : kotlin.collections.List<BadgeDistribution> = apiInstance.badgeDistribution(minUnixTimestamp, maxUnixTimestamp, minMatchId, maxMatchId)
            //result shouldBe ("TODO")
        }

        // to test bulkMetadata
        should("test bulkMetadata") {
            // uncomment below to test bulkMetadata
            //val includeInfo : kotlin.Boolean = true // kotlin.Boolean | Include match info in the response.
            //val includeObjectives : kotlin.Boolean = true // kotlin.Boolean | Include objectives in the response.
            //val includeMidBoss : kotlin.Boolean = true // kotlin.Boolean | Include midboss in the response.
            //val includePlayerInfo : kotlin.Boolean = true // kotlin.Boolean | Include player info in the response.
            //val includePlayerItems : kotlin.Boolean = true // kotlin.Boolean | Include player items in the response.
            //val includePlayerStats : kotlin.Boolean = true // kotlin.Boolean | Include player stats in the response.
            //val includePlayerDeathDetails : kotlin.Boolean = true // kotlin.Boolean | Include player death details in the response.
            //val matchIds : kotlin.collections.List<kotlin.Long> =  // kotlin.collections.List<kotlin.Long> | Comma separated list of match ids, limited by `limit`
            //val minUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val maxUnixTimestamp : kotlin.Long = 789 // kotlin.Long | Filter matches based on their start time (Unix timestamp).
            //val minDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val maxDurationS : kotlin.Long = 789 // kotlin.Long | Filter matches based on their duration in seconds (up to 7000s).
            //val minAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val maxAverageBadge : kotlin.Int = 56 // kotlin.Int | Filter matches based on the average badge level (0-116) of *both* teams involved. See more: <https://assets.deadlock-api.com/v2/ranks>
            //val minMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val maxMatchId : kotlin.Long = 789 // kotlin.Long | Filter matches based on their ID.
            //val isHighSkillRangeParties : kotlin.Boolean = true // kotlin.Boolean | Filter matches based on whether they are in the high skill range.
            //val isLowPriPool : kotlin.Boolean = true // kotlin.Boolean | Filter matches based on whether they are in the low priority pool.
            //val isNewPlayerPool : kotlin.Boolean = true // kotlin.Boolean | Filter matches based on whether they are in the new player pool.
            //val accountIds : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Filter matches by account IDs of players that participated in the match.
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | The field to order the results by.
            //val orderDirection : kotlin.String = orderDirection_example // kotlin.String | The direction to order the results by.
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of matches to return.
            //val result : kotlin.collections.List<kotlin.Int> = apiInstance.bulkMetadata(includeInfo, includeObjectives, includeMidBoss, includePlayerInfo, includePlayerItems, includePlayerStats, includePlayerDeathDetails, matchIds, minUnixTimestamp, maxUnixTimestamp, minDurationS, maxDurationS, minAverageBadge, maxAverageBadge, minMatchId, maxMatchId, isHighSkillRangeParties, isLowPriPool, isNewPlayerPool, accountIds, orderBy, orderDirection, limit)
            //result shouldBe ("TODO")
        }

        // to test metadata
        should("test metadata") {
            // uncomment below to test metadata
            //val matchId : kotlin.Long = 789 // kotlin.Long | The match ID
            //val isCustom : kotlin.Boolean = true // kotlin.Boolean | 
            //apiInstance.metadata(matchId, isCustom)
        }

        // to test metadataRaw
        should("test metadataRaw") {
            // uncomment below to test metadataRaw
            //val matchId : kotlin.Long = 789 // kotlin.Long | The match ID
            //val isCustom : kotlin.Boolean = true // kotlin.Boolean | 
            //val result : kotlin.collections.List<kotlin.Int> = apiInstance.metadataRaw(matchId, isCustom)
            //result shouldBe ("TODO")
        }

        // to test recentlyFetched
        should("test recentlyFetched") {
            // uncomment below to test recentlyFetched
            //val result : kotlin.collections.List<ClickhouseMatchInfo> = apiInstance.recentlyFetched()
            //result shouldBe ("TODO")
        }

        // to test salts
        should("test salts") {
            // uncomment below to test salts
            //val matchId : kotlin.Long = 789 // kotlin.Long | The match ID
            //val result : MatchSaltsResponse = apiInstance.salts(matchId)
            //result shouldBe ("TODO")
        }

        // to test url
        should("test url") {
            // uncomment below to test url
            //val matchId : kotlin.Long = 789 // kotlin.Long | The match ID
            //val result : MatchSpectateResponse = apiInstance.url(matchId)
            //result shouldBe ("TODO")
        }

    }
}
