/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package assets-deadlock-api-client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: brazilian,bulgarian,czech,danish,dutch,english,finnish,french,german,greek,hungarian,indonesian,italian,japanese,koreana,latam,norwegian,polish,portuguese,romanian,russian,schinese,spanish,swedish,tchinese,thai,turkish,ukrainian,vietnamese
 */

@JsonClass(generateAdapter = false)
enum class Language(val value: kotlin.String) {

    @Json(name = "brazilian")
    brazilian("brazilian"),

    @Json(name = "bulgarian")
    bulgarian("bulgarian"),

    @Json(name = "czech")
    czech("czech"),

    @Json(name = "danish")
    danish("danish"),

    @Json(name = "dutch")
    dutch("dutch"),

    @Json(name = "english")
    english("english"),

    @Json(name = "finnish")
    finnish("finnish"),

    @Json(name = "french")
    french("french"),

    @Json(name = "german")
    german("german"),

    @Json(name = "greek")
    greek("greek"),

    @Json(name = "hungarian")
    hungarian("hungarian"),

    @Json(name = "indonesian")
    indonesian("indonesian"),

    @Json(name = "italian")
    italian("italian"),

    @Json(name = "japanese")
    japanese("japanese"),

    @Json(name = "koreana")
    koreana("koreana"),

    @Json(name = "latam")
    latam("latam"),

    @Json(name = "norwegian")
    norwegian("norwegian"),

    @Json(name = "polish")
    polish("polish"),

    @Json(name = "portuguese")
    portuguese("portuguese"),

    @Json(name = "romanian")
    romanian("romanian"),

    @Json(name = "russian")
    russian("russian"),

    @Json(name = "schinese")
    schinese("schinese"),

    @Json(name = "spanish")
    spanish("spanish"),

    @Json(name = "swedish")
    swedish("swedish"),

    @Json(name = "tchinese")
    tchinese("tchinese"),

    @Json(name = "thai")
    thai("thai"),

    @Json(name = "turkish")
    turkish("turkish"),

    @Json(name = "ukrainian")
    ukrainian("ukrainian"),

    @Json(name = "vietnamese")
    vietnamese("vietnamese");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is Language) "$data" else null

        /**
         * Returns a valid [Language] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): Language? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

