/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package assets-deadlock-api-client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import assets-deadlock-api-client.models.GetItemsV2ItemsGet200ResponseInner
import assets-deadlock-api-client.models.HTTPValidationError
import assets-deadlock-api-client.models.ItemSlotTypeV2
import assets-deadlock-api-client.models.ItemTypeV2
import assets-deadlock-api-client.models.Language
import assets-deadlock-api-client.models.ResponseGetItemV2ItemsIdOrClassNameGet
import assets-deadlock-api-client.models.ValidClientVersions

import com.squareup.moshi.Json

import assets-deadlock-api-client.infrastructure.ApiClient
import assets-deadlock-api-client.infrastructure.ApiResponse
import assets-deadlock-api-client.infrastructure.ClientException
import assets-deadlock-api-client.infrastructure.ClientError
import assets-deadlock-api-client.infrastructure.ServerException
import assets-deadlock-api-client.infrastructure.ServerError
import assets-deadlock-api-client.infrastructure.MultiValueMap
import assets-deadlock-api-client.infrastructure.PartConfig
import assets-deadlock-api-client.infrastructure.RequestConfig
import assets-deadlock-api-client.infrastructure.RequestMethod
import assets-deadlock-api-client.infrastructure.ResponseType
import assets-deadlock-api-client.infrastructure.Success
import assets-deadlock-api-client.infrastructure.toMultiValue

class ItemsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://assets.deadlock-api.com")
        }
    }

    /**
     * Get Item
     * 
     * @param idOrClassName 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return ResponseGetItemV2ItemsIdOrClassNameGet
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getItemV2ItemsIdOrClassNameGet(idOrClassName: kotlin.String, language: Language? = null, clientVersion: ValidClientVersions? = null) : ResponseGetItemV2ItemsIdOrClassNameGet {
        val localVarResponse = getItemV2ItemsIdOrClassNameGetWithHttpInfo(idOrClassName = idOrClassName, language = language, clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ResponseGetItemV2ItemsIdOrClassNameGet
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Item
     * 
     * @param idOrClassName 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return ApiResponse<ResponseGetItemV2ItemsIdOrClassNameGet?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getItemV2ItemsIdOrClassNameGetWithHttpInfo(idOrClassName: kotlin.String, language: Language?, clientVersion: ValidClientVersions?) : ApiResponse<ResponseGetItemV2ItemsIdOrClassNameGet?> {
        val localVariableConfig = getItemV2ItemsIdOrClassNameGetRequestConfig(idOrClassName = idOrClassName, language = language, clientVersion = clientVersion)

        return request<Unit, ResponseGetItemV2ItemsIdOrClassNameGet>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getItemV2ItemsIdOrClassNameGet
     *
     * @param idOrClassName 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getItemV2ItemsIdOrClassNameGetRequestConfig(idOrClassName: kotlin.String, language: Language?, clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/items/{id_or_class_name}".replace("{"+"id_or_class_name"+"}", encodeURIComponent(idOrClassName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Items By Hero Id
     * 
     * @param id 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getItemsByHeroIdV2ItemsByHeroIdIdGet(id: kotlin.Int, language: Language? = null, clientVersion: ValidClientVersions? = null) : kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner> {
        val localVarResponse = getItemsByHeroIdV2ItemsByHeroIdIdGetWithHttpInfo(id = id, language = language, clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Items By Hero Id
     * 
     * @param id 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getItemsByHeroIdV2ItemsByHeroIdIdGetWithHttpInfo(id: kotlin.Int, language: Language?, clientVersion: ValidClientVersions?) : ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?> {
        val localVariableConfig = getItemsByHeroIdV2ItemsByHeroIdIdGetRequestConfig(id = id, language = language, clientVersion = clientVersion)

        return request<Unit, kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getItemsByHeroIdV2ItemsByHeroIdIdGet
     *
     * @param id 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getItemsByHeroIdV2ItemsByHeroIdIdGetRequestConfig(id: kotlin.Int, language: Language?, clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/items/by-hero-id/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Items By Slot Type
     * 
     * @param slotType 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(slotType: ItemSlotTypeV2, language: Language? = null, clientVersion: ValidClientVersions? = null) : kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner> {
        val localVarResponse = getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetWithHttpInfo(slotType = slotType, language = language, clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Items By Slot Type
     * 
     * @param slotType 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetWithHttpInfo(slotType: ItemSlotTypeV2, language: Language?, clientVersion: ValidClientVersions?) : ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?> {
        val localVariableConfig = getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequestConfig(slotType = slotType, language = language, clientVersion = clientVersion)

        return request<Unit, kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet
     *
     * @param slotType 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequestConfig(slotType: ItemSlotTypeV2, language: Language?, clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/items/by-slot-type/{slot_type}".replace("{"+"slot_type"+"}", encodeURIComponent(slotType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Items By Type
     * 
     * @param type 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getItemsByTypeV2ItemsByTypeTypeGet(type: ItemTypeV2, language: Language? = null, clientVersion: ValidClientVersions? = null) : kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner> {
        val localVarResponse = getItemsByTypeV2ItemsByTypeTypeGetWithHttpInfo(type = type, language = language, clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Items By Type
     * 
     * @param type 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getItemsByTypeV2ItemsByTypeTypeGetWithHttpInfo(type: ItemTypeV2, language: Language?, clientVersion: ValidClientVersions?) : ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?> {
        val localVariableConfig = getItemsByTypeV2ItemsByTypeTypeGetRequestConfig(type = type, language = language, clientVersion = clientVersion)

        return request<Unit, kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getItemsByTypeV2ItemsByTypeTypeGet
     *
     * @param type 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getItemsByTypeV2ItemsByTypeTypeGetRequestConfig(type: ItemTypeV2, language: Language?, clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/items/by-type/{type}".replace("{"+"type"+"}", encodeURIComponent(type.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Items
     * 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getItemsV2ItemsGet(language: Language? = null, clientVersion: ValidClientVersions? = null) : kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner> {
        val localVarResponse = getItemsV2ItemsGetWithHttpInfo(language = language, clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Items
     * 
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getItemsV2ItemsGetWithHttpInfo(language: Language?, clientVersion: ValidClientVersions?) : ApiResponse<kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>?> {
        val localVariableConfig = getItemsV2ItemsGetRequestConfig(language = language, clientVersion = clientVersion)

        return request<Unit, kotlin.collections.List<GetItemsV2ItemsGet200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getItemsV2ItemsGet
     *
     * @param language  (optional)
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getItemsV2ItemsGetRequestConfig(language: Language?, clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
