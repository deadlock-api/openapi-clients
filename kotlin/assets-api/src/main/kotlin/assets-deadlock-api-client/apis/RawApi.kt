/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package assets-deadlock-api-client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import assets-deadlock-api-client.models.HTTPValidationError
import assets-deadlock-api-client.models.ValidClientVersions

import com.squareup.moshi.Json

import assets-deadlock-api-client.infrastructure.ApiClient
import assets-deadlock-api-client.infrastructure.ApiResponse
import assets-deadlock-api-client.infrastructure.ClientException
import assets-deadlock-api-client.infrastructure.ClientError
import assets-deadlock-api-client.infrastructure.ServerException
import assets-deadlock-api-client.infrastructure.ServerError
import assets-deadlock-api-client.infrastructure.MultiValueMap
import assets-deadlock-api-client.infrastructure.PartConfig
import assets-deadlock-api-client.infrastructure.RequestConfig
import assets-deadlock-api-client.infrastructure.RequestMethod
import assets-deadlock-api-client.infrastructure.ResponseType
import assets-deadlock-api-client.infrastructure.Success
import assets-deadlock-api-client.infrastructure.toMultiValue

class RawApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://assets.deadlock-api.com")
        }
    }

    /**
     * Get Generic Data
     * 
     * @param clientVersion  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGenericDataRawGenericDataGet(clientVersion: ValidClientVersions? = null) : kotlin.Any {
        val localVarResponse = getGenericDataRawGenericDataGetWithHttpInfo(clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Generic Data
     * 
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGenericDataRawGenericDataGetWithHttpInfo(clientVersion: ValidClientVersions?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getGenericDataRawGenericDataGetRequestConfig(clientVersion = clientVersion)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGenericDataRawGenericDataGet
     *
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getGenericDataRawGenericDataGetRequestConfig(clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/raw/generic_data",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Raw Heroes
     * 
     * @param clientVersion  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRawHeroesRawHeroesGet(clientVersion: ValidClientVersions? = null) : kotlin.Any {
        val localVarResponse = getRawHeroesRawHeroesGetWithHttpInfo(clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Raw Heroes
     * 
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRawHeroesRawHeroesGetWithHttpInfo(clientVersion: ValidClientVersions?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getRawHeroesRawHeroesGetRequestConfig(clientVersion = clientVersion)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRawHeroesRawHeroesGet
     *
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getRawHeroesRawHeroesGetRequestConfig(clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/raw/heroes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Raw Items
     * 
     * @param clientVersion  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRawItemsRawItemsGet(clientVersion: ValidClientVersions? = null) : kotlin.Any {
        val localVarResponse = getRawItemsRawItemsGetWithHttpInfo(clientVersion = clientVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Raw Items
     * 
     * @param clientVersion  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRawItemsRawItemsGetWithHttpInfo(clientVersion: ValidClientVersions?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getRawItemsRawItemsGetRequestConfig(clientVersion = clientVersion)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRawItemsRawItemsGet
     *
     * @param clientVersion  (optional)
     * @return RequestConfig
     */
    fun getRawItemsRawItemsGetRequestConfig(clientVersion: ValidClientVersions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (clientVersion != null) {
                    put("client_version", listOf(clientVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/raw/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
