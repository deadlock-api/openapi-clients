/* tslint:disable */
/* eslint-disable */
/**
 * Assets - Deadlock API
 *  ## Support the Deadlock API  Whether you\'re building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_ 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbilityDescriptionV2
 */
export interface AbilityDescriptionV2 {
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    'desc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    'quip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    't1_desc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    't2_desc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    't3_desc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    'active'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityDescriptionV2
     */
    'passive'?: string | null;
}
/**
 * 
 * @export
 * @interface AbilityTooltipDetailsInfoSectionPropertyBlockV2
 */
export interface AbilityTooltipDetailsInfoSectionPropertyBlockV2 {
    /**
     * 
     * @type {string}
     * @memberof AbilityTooltipDetailsInfoSectionPropertyBlockV2
     */
    'loc_string'?: string | null;
    /**
     * 
     * @type {Array<AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty>}
     * @memberof AbilityTooltipDetailsInfoSectionPropertyBlockV2
     */
    'properties'?: Array<AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty> | null;
}
/**
 * 
 * @export
 * @interface AbilityTooltipDetailsInfoSectionV2
 */
export interface AbilityTooltipDetailsInfoSectionV2 {
    /**
     * 
     * @type {string}
     * @memberof AbilityTooltipDetailsInfoSectionV2
     */
    'loc_string'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityTooltipDetailsInfoSectionV2
     */
    'property_upgrade_required'?: string | null;
    /**
     * 
     * @type {Array<AbilityTooltipDetailsInfoSectionPropertyBlockV2>}
     * @memberof AbilityTooltipDetailsInfoSectionV2
     */
    'properties_block'?: Array<AbilityTooltipDetailsInfoSectionPropertyBlockV2> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AbilityTooltipDetailsInfoSectionV2
     */
    'basic_properties'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface AbilityTooltipDetailsV2
 */
export interface AbilityTooltipDetailsV2 {
    /**
     * 
     * @type {Array<AbilityTooltipDetailsInfoSectionV2>}
     * @memberof AbilityTooltipDetailsV2
     */
    'info_sections'?: Array<AbilityTooltipDetailsInfoSectionV2> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AbilityTooltipDetailsV2
     */
    'additional_header_properties'?: Array<string> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AbilityTypeV2 = {
    Innate: 'innate',
    Item: 'item',
    Signature: 'signature',
    Ultimate: 'ultimate',
    Weapon: 'weapon',
    Melee: 'melee'
} as const;

export type AbilityTypeV2 = typeof AbilityTypeV2[keyof typeof AbilityTypeV2];


/**
 * 
 * @export
 * @interface AbilityV2
 */
export interface AbilityV2 {
    /**
     * 
     * @type {number}
     * @memberof AbilityV2
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2
     */
    'class_name': string;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof AbilityV2
     */
    'start_trained'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2
     */
    'image_webp'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AbilityV2
     */
    'hero'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AbilityV2
     */
    'heroes'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof AbilityV2
     */
    'update_time'?: number | null;
    /**
     * 
     * @type {{ [key: string]: ItemPropertyV2; }}
     * @memberof AbilityV2
     */
    'properties'?: { [key: string]: ItemPropertyV2; } | null;
    /**
     * 
     * @type {RawItemWeaponInfoV2}
     * @memberof AbilityV2
     */
    'weapon_info'?: RawItemWeaponInfoV2 | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2
     */
    'type'?: AbilityV2TypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AbilityV2
     */
    'behaviours'?: Array<string> | null;
    /**
     * 
     * @type {AbilityDescriptionV2}
     * @memberof AbilityV2
     */
    'description': AbilityDescriptionV2;
    /**
     * 
     * @type {AbilityTooltipDetailsV2}
     * @memberof AbilityV2
     */
    'tooltip_details'?: AbilityTooltipDetailsV2 | null;
    /**
     * 
     * @type {Array<RawAbilityUpgradeV2>}
     * @memberof AbilityV2
     */
    'upgrades'?: Array<RawAbilityUpgradeV2> | null;
    /**
     * 
     * @type {AbilityTypeV2}
     * @memberof AbilityV2
     */
    'ability_type'?: AbilityTypeV2 | null;
    /**
     * 
     * @type {number}
     * @memberof AbilityV2
     */
    'boss_damage_scale'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AbilityV2
     */
    'dependant_abilities'?: Array<string> | null;
    /**
     * 
     * @type {AbilityVideosV2}
     * @memberof AbilityV2
     */
    'videos'?: AbilityVideosV2 | null;
}

export const AbilityV2TypeEnum = {
    Ability: 'ability'
} as const;

export type AbilityV2TypeEnum = typeof AbilityV2TypeEnum[keyof typeof AbilityV2TypeEnum];

/**
 * 
 * @export
 * @interface AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
 */
export interface AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty {
    /**
     * 
     * @type {boolean}
     * @memberof AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
     */
    'requires_ability_upgrade'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
     */
    'show_property_value'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
     */
    'important_property'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
     */
    'status_effect_value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
     */
    'status_effect_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityV2TooltipDetailsInfoSectionPropertyBlockProperty
     */
    'important_property_icon'?: string | null;
}
/**
 * 
 * @export
 * @interface AbilityVideosV2
 */
export interface AbilityVideosV2 {
    /**
     * 
     * @type {string}
     * @memberof AbilityVideosV2
     */
    'webm'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AbilityVideosV2
     */
    'mp4'?: string | null;
}
/**
 * 
 * @export
 * @interface AimingShotSpreadPenalty
 */
export interface AimingShotSpreadPenalty {
}
/**
 * 
 * @export
 * @interface Bonus
 */
export interface Bonus {
}
/**
 * 
 * @export
 * @interface BuildTagV2
 */
export interface BuildTagV2 {
    /**
     * 
     * @type {string}
     * @memberof BuildTagV2
     */
    'class_name': string;
    /**
     * 
     * @type {string}
     * @memberof BuildTagV2
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof BuildTagV2
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BuildTagV2
     */
    'icon': string;
}
/**
 * 
 * @export
 * @interface ColorV1
 */
export interface ColorV1 {
    /**
     * The red value of the color.
     * @type {number}
     * @memberof ColorV1
     */
    'red': number;
    /**
     * The green value of the color.
     * @type {number}
     * @memberof ColorV1
     */
    'green': number;
    /**
     * The blue value of the color.
     * @type {number}
     * @memberof ColorV1
     */
    'blue': number;
    /**
     * The alpha value of the color.
     * @type {number}
     * @memberof ColorV1
     */
    'alpha': number;
}
/**
 * @type GetItemsV2ItemsGet200ResponseInner
 * @export
 */
export type GetItemsV2ItemsGet200ResponseInner = { type: 'ability' } & AbilityV2 | { type: 'upgrade' } & UpgradeV2 | { type: 'weapon' } & WeaponV2;

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HeroColorsV2
 */
export interface HeroColorsV2 {
    /**
     * 
     * @type {Array<any>}
     * @memberof HeroColorsV2
     */
    'glow_enemy': Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof HeroColorsV2
     */
    'glow_friendly': Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof HeroColorsV2
     */
    'glow_team1': Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof HeroColorsV2
     */
    'glow_team2': Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof HeroColorsV2
     */
    'ui': Array<any>;
}
/**
 * 
 * @export
 * @interface HeroDescriptionV2
 */
export interface HeroDescriptionV2 {
    /**
     * 
     * @type {string}
     * @memberof HeroDescriptionV2
     */
    'lore'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroDescriptionV2
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroDescriptionV2
     */
    'playstyle'?: string | null;
}
/**
 * 
 * @export
 * @interface HeroImagesV2
 */
export interface HeroImagesV2 {
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'icon_hero_card'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'icon_hero_card_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'icon_image_small'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'icon_image_small_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'minimap_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'minimap_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'selection_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'selection_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'top_bar_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'top_bar_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'top_bar_vertical_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'top_bar_vertical_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'weapon_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'weapon_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'background_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'background_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroImagesV2
     */
    'name_image'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const HeroItemTypeV2 = {
    WeaponPrimary: 'weapon_primary',
    WeaponSecondary: 'weapon_secondary',
    WeaponMelee: 'weapon_melee',
    AbilityMantle: 'ability_mantle',
    AbilityJump: 'ability_jump',
    AbilitySlide: 'ability_slide',
    AbilityZipLine: 'ability_zip_line',
    AbilityZipLineBoost: 'ability_zip_line_boost',
    AbilityClimbRope: 'ability_climb_rope',
    AbilityInnate1: 'ability_innate1',
    AbilityInnate2: 'ability_innate2',
    AbilityInnate3: 'ability_innate3',
    Signature1: 'signature1',
    Signature2: 'signature2',
    Signature3: 'signature3',
    Signature4: 'signature4'
} as const;

export type HeroItemTypeV2 = typeof HeroItemTypeV2[keyof typeof HeroItemTypeV2];


/**
 * 
 * @export
 * @interface HeroLevelInfoV2
 */
export interface HeroLevelInfoV2 {
    /**
     * 
     * @type {boolean}
     * @memberof HeroLevelInfoV2
     */
    'use_standard_upgrade'?: boolean | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroLevelInfoV2
     */
    'bonus_currencies'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof HeroLevelInfoV2
     */
    'required_gold': number;
}
/**
 * 
 * @export
 * @interface HeroPhysicsV2
 */
export interface HeroPhysicsV2 {
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'collision_height': number;
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'collision_radius': number;
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'stealth_speed_meters_per_second': number;
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'step_height': number;
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'footstep_sound_travel_distance_meters'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'step_sound_time'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HeroPhysicsV2
     */
    'step_sound_time_sprinting'?: number | null;
}
/**
 * 
 * @export
 * @interface HeroShopStatDisplayV2
 */
export interface HeroShopStatDisplayV2 {
    /**
     * 
     * @type {RawHeroShopSpiritStatsDisplayV2}
     * @memberof HeroShopStatDisplayV2
     */
    'spirit_stats_display': RawHeroShopSpiritStatsDisplayV2;
    /**
     * 
     * @type {RawHeroShopVitalityStatsDisplayV2}
     * @memberof HeroShopStatDisplayV2
     */
    'vitality_stats_display': RawHeroShopVitalityStatsDisplayV2;
    /**
     * 
     * @type {HeroShopWeaponStatsDisplayV2}
     * @memberof HeroShopStatDisplayV2
     */
    'weapon_stats_display': HeroShopWeaponStatsDisplayV2;
}
/**
 * 
 * @export
 * @interface HeroShopWeaponStatsDisplayV2
 */
export interface HeroShopWeaponStatsDisplayV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroShopWeaponStatsDisplayV2
     */
    'display_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroShopWeaponStatsDisplayV2
     */
    'other_display_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroShopWeaponStatsDisplayV2
     */
    'weapon_attributes'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof HeroShopWeaponStatsDisplayV2
     */
    'weapon_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroShopWeaponStatsDisplayV2
     */
    'weapon_image_webp'?: string | null;
}
/**
 * 
 * @export
 * @interface HeroStartingStatV2
 */
export interface HeroStartingStatV2 {
    /**
     * 
     * @type {Value}
     * @memberof HeroStartingStatV2
     */
    'value': Value;
    /**
     * 
     * @type {string}
     * @memberof HeroStartingStatV2
     */
    'display_stat_name': string;
}
/**
 * 
 * @export
 * @interface HeroStartingStatsV2
 */
export interface HeroStartingStatsV2 {
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'max_move_speed': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'sprint_speed': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'crouch_speed': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'move_acceleration': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'light_melee_damage': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'heavy_melee_damage': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'max_health': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'weapon_power': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'reload_speed': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'weapon_power_scale': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'proc_build_up_rate_scale': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'stamina': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'base_health_regen': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'stamina_regen_per_second': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'ability_resource_max': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'ability_resource_regen_per_second': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'crit_damage_received_scale': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'tech_duration': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'tech_armor_damage_reduction'?: HeroStartingStatV2 | null;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'tech_range': HeroStartingStatV2;
    /**
     * 
     * @type {HeroStartingStatV2}
     * @memberof HeroStartingStatsV2
     */
    'bullet_armor_damage_reduction'?: HeroStartingStatV2 | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const HeroTypeV2 = {
    Assassin: 'assassin',
    Brawler: 'brawler',
    Marksman: 'marksman',
    Mystic: 'mystic'
} as const;

export type HeroTypeV2 = typeof HeroTypeV2[keyof typeof HeroTypeV2];


/**
 * 
 * @export
 * @interface HeroV2
 */
export interface HeroV2 {
    /**
     * 
     * @type {number}
     * @memberof HeroV2
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof HeroV2
     */
    'class_name': string;
    /**
     * 
     * @type {string}
     * @memberof HeroV2
     */
    'name': string;
    /**
     * 
     * @type {HeroDescriptionV2}
     * @memberof HeroV2
     */
    'description': HeroDescriptionV2;
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroV2
     */
    'recommended_upgrades'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroV2
     */
    'recommended_ability_order'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'player_selectable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'disabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'in_development': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'needs_testing': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'assigned_players_only': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroV2
     */
    'tags'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof HeroV2
     */
    'gun_tag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HeroV2
     */
    'hideout_rich_presence'?: string | null;
    /**
     * 
     * @type {HeroTypeV2}
     * @memberof HeroV2
     */
    'hero_type'?: HeroTypeV2 | null;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'prerelease_only'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof HeroV2
     */
    'limited_testing': boolean;
    /**
     * 
     * @type {number}
     * @memberof HeroV2
     */
    'complexity': number;
    /**
     * 
     * @type {number}
     * @memberof HeroV2
     */
    'skin': number;
    /**
     * 
     * @type {HeroImagesV2}
     * @memberof HeroV2
     */
    'images': HeroImagesV2;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HeroV2
     */
    'items': { [key: string]: string; };
    /**
     * 
     * @type {HeroStartingStatsV2}
     * @memberof HeroV2
     */
    'starting_stats': HeroStartingStatsV2;
    /**
     * 
     * @type {{ [key: string]: RawHeroItemSlotInfoValueV2; }}
     * @memberof HeroV2
     */
    'item_slot_info': { [key: string]: RawHeroItemSlotInfoValueV2; };
    /**
     * 
     * @type {HeroPhysicsV2}
     * @memberof HeroV2
     */
    'physics': HeroPhysicsV2;
    /**
     * 
     * @type {HeroColorsV2}
     * @memberof HeroV2
     */
    'colors': HeroColorsV2;
    /**
     * 
     * @type {HeroShopStatDisplayV2}
     * @memberof HeroV2
     */
    'shop_stat_display': HeroShopStatDisplayV2;
    /**
     * 
     * @type {{ [key: string]: Array<RawHeroMapModCostBonusesV2>; }}
     * @memberof HeroV2
     */
    'cost_bonuses'?: { [key: string]: Array<RawHeroMapModCostBonusesV2>; } | null;
    /**
     * 
     * @type {RawHeroStatsDisplayV2}
     * @memberof HeroV2
     */
    'stats_display': RawHeroStatsDisplayV2;
    /**
     * 
     * @type {RawHeroStatsUIV2}
     * @memberof HeroV2
     */
    'hero_stats_ui': RawHeroStatsUIV2;
    /**
     * 
     * @type {{ [key: string]: HeroLevelInfoV2; }}
     * @memberof HeroV2
     */
    'level_info': { [key: string]: HeroLevelInfoV2; };
    /**
     * 
     * @type {{ [key: string]: RawHeroScalingStatV2; }}
     * @memberof HeroV2
     */
    'scaling_stats': { [key: string]: RawHeroScalingStatV2; };
    /**
     * 
     * @type {{ [key: string]: Array<RawHeroPurchaseBonusV2>; }}
     * @memberof HeroV2
     */
    'purchase_bonuses': { [key: string]: Array<RawHeroPurchaseBonusV2>; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof HeroV2
     */
    'standard_level_up_upgrades': { [key: string]: number; };
}


/**
 * 
 * @export
 * @interface ItemPropertyV2
 */
export interface ItemPropertyV2 {
    /**
     * 
     * @type {Value1}
     * @memberof ItemPropertyV2
     */
    'value'?: Value1 | null;
    /**
     * 
     * @type {boolean}
     * @memberof ItemPropertyV2
     */
    'can_set_token_override'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'provided_property_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'css_class'?: string | null;
    /**
     * 
     * @type {UsageFlags}
     * @memberof ItemPropertyV2
     */
    'usage_flags'?: UsageFlags | null;
    /**
     * 
     * @type {boolean}
     * @memberof ItemPropertyV2
     */
    'negative_attribute'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'disable_value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'loc_token_override'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'display_units'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'icon_path'?: string | null;
    /**
     * 
     * @type {RawItemPropertyScaleFunctionSubclassV2}
     * @memberof ItemPropertyV2
     */
    'scale_function'?: RawItemPropertyScaleFunctionSubclassV2 | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'prefix'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'postfix'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'postvalue_label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'conditional'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyV2
     */
    'icon'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ItemSlotTypeV2 = {
    Weapon: 'weapon',
    Spirit: 'spirit',
    Vitality: 'vitality'
} as const;

export type ItemSlotTypeV2 = typeof ItemSlotTypeV2[keyof typeof ItemSlotTypeV2];


/**
 * 
 * @export
 * @enum {number}
 */

export const ItemTierV2 = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type ItemTierV2 = typeof ItemTierV2[keyof typeof ItemTierV2];


/**
 * 
 * @export
 * @enum {string}
 */

export const ItemTypeV2 = {
    Weapon: 'weapon',
    Ability: 'ability',
    Upgrade: 'upgrade',
    Tech: 'tech',
    Armor: 'armor'
} as const;

export type ItemTypeV2 = typeof ItemTypeV2[keyof typeof ItemTypeV2];


/**
 * 
 * @export
 * @enum {string}
 */

export const Language = {
    Brazilian: 'brazilian',
    Bulgarian: 'bulgarian',
    Czech: 'czech',
    Danish: 'danish',
    Dutch: 'dutch',
    English: 'english',
    Finnish: 'finnish',
    French: 'french',
    German: 'german',
    Greek: 'greek',
    Hungarian: 'hungarian',
    Indonesian: 'indonesian',
    Italian: 'italian',
    Japanese: 'japanese',
    Koreana: 'koreana',
    Latam: 'latam',
    Norwegian: 'norwegian',
    Polish: 'polish',
    Portuguese: 'portuguese',
    Romanian: 'romanian',
    Russian: 'russian',
    Schinese: 'schinese',
    Spanish: 'spanish',
    Swedish: 'swedish',
    Tchinese: 'tchinese',
    Thai: 'thai',
    Turkish: 'turkish',
    Ukrainian: 'ukrainian',
    Vietnamese: 'vietnamese'
} as const;

export type Language = typeof Language[keyof typeof Language];


/**
 * 
 * @export
 * @interface MapImagesV1
 */
export interface MapImagesV1 {
    /**
     * The minimap image of the map.
     * @type {string}
     * @memberof MapImagesV1
     */
    'minimap': string;
    /**
     * The minimap image of the map without background image and frame image.
     * @type {string}
     * @memberof MapImagesV1
     */
    'plain': string;
    /**
     * The background image of the map.
     * @type {string}
     * @memberof MapImagesV1
     */
    'background': string;
    /**
     * The frame image of the map.
     * @type {string}
     * @memberof MapImagesV1
     */
    'frame': string;
    /**
     * The mid image of the map.
     * @type {string}
     * @memberof MapImagesV1
     */
    'mid': string;
}
/**
 * 
 * @export
 * @interface MapV1
 */
export interface MapV1 {
    /**
     * The radius of the map.
     * @type {number}
     * @memberof MapV1
     */
    'radius'?: number;
    /**
     * The images of the map.
     * @type {MapImagesV1}
     * @memberof MapV1
     */
    'images': MapImagesV1;
    /**
     * 
     * @type {ObjectivePositionsV1}
     * @memberof MapV1
     */
    'objective_positions': ObjectivePositionsV1;
    /**
     * The ziplane paths of the map. Each path is a list of P0, P1, and P2 points, describing the cubic spline.
     * @type {Array<ZiplanePathV1>}
     * @memberof MapV1
     */
    'zipline_paths': Array<ZiplanePathV1>;
}
/**
 * 
 * @export
 * @interface ObjectivePositionV1
 */
export interface ObjectivePositionV1 {
    /**
     * The relative margin left of the map image.
     * @type {number}
     * @memberof ObjectivePositionV1
     */
    'left_relative': number;
    /**
     * The relative margin top of the map image.
     * @type {number}
     * @memberof ObjectivePositionV1
     */
    'top_relative': number;
}
/**
 * 
 * @export
 * @interface ObjectivePositionsV1
 */
export interface ObjectivePositionsV1 {
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_core': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_core': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_titan': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_titan': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier2_1': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier2_2'?: ObjectivePositionV1 | null;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier2_3': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier2_4': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier2_1': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier2_2'?: ObjectivePositionV1 | null;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier2_3': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier2_4': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier1_1': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier1_2'?: ObjectivePositionV1 | null;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier1_3': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team0_tier1_4': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier1_1': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier1_2'?: ObjectivePositionV1 | null;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier1_3': ObjectivePositionV1;
    /**
     * 
     * @type {ObjectivePositionV1}
     * @memberof ObjectivePositionsV1
     */
    'team1_tier1_4': ObjectivePositionV1;
}
/**
 * 
 * @export
 * @interface Range
 */
export interface Range {
}
/**
 * 
 * @export
 * @interface RankImagesV2
 */
export interface RankImagesV2 {
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank1_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank2_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank3'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank3_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank4'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank4_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank5_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank6'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'large_subrank6_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank1_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank2_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank3'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank3_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank4'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank4_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank5_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank6'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RankImagesV2
     */
    'small_subrank6_webp'?: string | null;
}
/**
 * 
 * @export
 * @interface RankV2
 */
export interface RankV2 {
    /**
     * 
     * @type {number}
     * @memberof RankV2
     */
    'tier': number;
    /**
     * 
     * @type {string}
     * @memberof RankV2
     */
    'name': string;
    /**
     * 
     * @type {RankImagesV2}
     * @memberof RankV2
     */
    'images': RankImagesV2;
    /**
     * 
     * @type {string}
     * @memberof RankV2
     */
    'color': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RawAbilityActivationV2 = {
    HoldToggle: 'hold_toggle',
    InstantCast: 'instant_cast',
    OnButtonIsDown: 'on_button_is_down',
    Passive: 'passive',
    Press: 'press',
    PressToggle: 'press_toggle'
} as const;

export type RawAbilityActivationV2 = typeof RawAbilityActivationV2[keyof typeof RawAbilityActivationV2];


/**
 * 
 * @export
 * @enum {string}
 */

export const RawAbilityImbueV2 = {
    ImbueActive: 'imbue_active',
    ImbueActiveNonUlt: 'imbue_active_non_ult',
    ImbueModifierValue: 'imbue_modifier_value'
} as const;

export type RawAbilityImbueV2 = typeof RawAbilityImbueV2[keyof typeof RawAbilityImbueV2];


/**
 * 
 * @export
 * @enum {string}
 */

export const RawAbilitySectionTypeV2 = {
    Innate: 'innate',
    Active: 'active',
    Passive: 'passive'
} as const;

export type RawAbilitySectionTypeV2 = typeof RawAbilitySectionTypeV2[keyof typeof RawAbilitySectionTypeV2];


/**
 * 
 * @export
 * @interface RawAbilityUpgradePropertyUpgradeV2
 */
export interface RawAbilityUpgradePropertyUpgradeV2 {
    /**
     * 
     * @type {string}
     * @memberof RawAbilityUpgradePropertyUpgradeV2
     */
    'name': string;
    /**
     * 
     * @type {Bonus}
     * @memberof RawAbilityUpgradePropertyUpgradeV2
     */
    'bonus': Bonus;
    /**
     * 
     * @type {string}
     * @memberof RawAbilityUpgradePropertyUpgradeV2
     */
    'scale_stat_filter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RawAbilityUpgradePropertyUpgradeV2
     */
    'upgrade_type'?: string | null;
}
/**
 * 
 * @export
 * @interface RawAbilityUpgradeV2
 */
export interface RawAbilityUpgradeV2 {
    /**
     * 
     * @type {Array<RawAbilityUpgradePropertyUpgradeV2>}
     * @memberof RawAbilityUpgradeV2
     */
    'property_upgrades'?: Array<RawAbilityUpgradePropertyUpgradeV2>;
}
/**
 * 
 * @export
 * @interface RawHeroItemSlotInfoValueV2
 */
export interface RawHeroItemSlotInfoValueV2 {
    /**
     * 
     * @type {Array<number>}
     * @memberof RawHeroItemSlotInfoValueV2
     */
    'max_purchases_for_tier': Array<number>;
}
/**
 * 
 * @export
 * @interface RawHeroMapModCostBonusesV2
 */
export interface RawHeroMapModCostBonusesV2 {
    /**
     * 
     * @type {number}
     * @memberof RawHeroMapModCostBonusesV2
     */
    'gold_threshold': number;
    /**
     * 
     * @type {number}
     * @memberof RawHeroMapModCostBonusesV2
     */
    'bonus': number;
    /**
     * 
     * @type {number}
     * @memberof RawHeroMapModCostBonusesV2
     */
    'percent_on_graph': number;
}
/**
 * 
 * @export
 * @interface RawHeroPurchaseBonusV2
 */
export interface RawHeroPurchaseBonusV2 {
    /**
     * 
     * @type {string}
     * @memberof RawHeroPurchaseBonusV2
     */
    'value_type': string;
    /**
     * 
     * @type {number}
     * @memberof RawHeroPurchaseBonusV2
     */
    'tier': number;
    /**
     * 
     * @type {string}
     * @memberof RawHeroPurchaseBonusV2
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface RawHeroScalingStatV2
 */
export interface RawHeroScalingStatV2 {
    /**
     * 
     * @type {string}
     * @memberof RawHeroScalingStatV2
     */
    'scaling_stat': string;
    /**
     * 
     * @type {number}
     * @memberof RawHeroScalingStatV2
     */
    'scale': number;
}
/**
 * 
 * @export
 * @interface RawHeroShopSpiritStatsDisplayV2
 */
export interface RawHeroShopSpiritStatsDisplayV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroShopSpiritStatsDisplayV2
     */
    'display_stats': Array<string>;
}
/**
 * 
 * @export
 * @interface RawHeroShopVitalityStatsDisplayV2
 */
export interface RawHeroShopVitalityStatsDisplayV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroShopVitalityStatsDisplayV2
     */
    'display_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroShopVitalityStatsDisplayV2
     */
    'other_display_stats': Array<string>;
}
/**
 * 
 * @export
 * @interface RawHeroStatsDisplayV2
 */
export interface RawHeroStatsDisplayV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroStatsDisplayV2
     */
    'health_header_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroStatsDisplayV2
     */
    'health_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroStatsDisplayV2
     */
    'magic_header_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroStatsDisplayV2
     */
    'magic_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroStatsDisplayV2
     */
    'weapon_header_stats': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawHeroStatsDisplayV2
     */
    'weapon_stats': Array<string>;
}
/**
 * 
 * @export
 * @interface RawHeroStatsUIDisplayV2
 */
export interface RawHeroStatsUIDisplayV2 {
    /**
     * 
     * @type {string}
     * @memberof RawHeroStatsUIDisplayV2
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof RawHeroStatsUIDisplayV2
     */
    'stat_type': string;
}
/**
 * 
 * @export
 * @interface RawHeroStatsUIV2
 */
export interface RawHeroStatsUIV2 {
    /**
     * 
     * @type {string}
     * @memberof RawHeroStatsUIV2
     */
    'weapon_stat_display': string;
    /**
     * 
     * @type {Array<RawHeroStatsUIDisplayV2>}
     * @memberof RawHeroStatsUIV2
     */
    'display_stats': Array<RawHeroStatsUIDisplayV2>;
}
/**
 * 
 * @export
 * @interface RawItemPropertyScaleFunctionSubclassV2
 */
export interface RawItemPropertyScaleFunctionSubclassV2 {
    /**
     * 
     * @type {string}
     * @memberof RawItemPropertyScaleFunctionSubclassV2
     */
    'class_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RawItemPropertyScaleFunctionSubclassV2
     */
    'subclass_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RawItemPropertyScaleFunctionSubclassV2
     */
    'specific_stat_scale_type'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawItemPropertyScaleFunctionSubclassV2
     */
    'scaling_stats'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof RawItemPropertyScaleFunctionSubclassV2
     */
    'stat_scale'?: number | null;
}
/**
 * 
 * @export
 * @interface RawItemWeaponInfoBulletSpeedCurveSplineV2
 */
export interface RawItemWeaponInfoBulletSpeedCurveSplineV2 {
    /**
     * 
     * @type {number}
     * @memberof RawItemWeaponInfoBulletSpeedCurveSplineV2
     */
    'slope_incoming': number;
    /**
     * 
     * @type {number}
     * @memberof RawItemWeaponInfoBulletSpeedCurveSplineV2
     */
    'slope_outgoing': number;
    /**
     * 
     * @type {number}
     * @memberof RawItemWeaponInfoBulletSpeedCurveSplineV2
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof RawItemWeaponInfoBulletSpeedCurveSplineV2
     */
    'y': number;
}
/**
 * 
 * @export
 * @interface RawItemWeaponInfoBulletSpeedCurveV2
 */
export interface RawItemWeaponInfoBulletSpeedCurveV2 {
    /**
     * 
     * @type {Array<RawItemWeaponInfoBulletSpeedCurveSplineV2>}
     * @memberof RawItemWeaponInfoBulletSpeedCurveV2
     */
    'spline'?: Array<RawItemWeaponInfoBulletSpeedCurveSplineV2>;
    /**
     * 
     * @type {Array<number>}
     * @memberof RawItemWeaponInfoBulletSpeedCurveV2
     */
    'domain_maxs': Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof RawItemWeaponInfoBulletSpeedCurveV2
     */
    'domain_mins': Array<number>;
}
/**
 * 
 * @export
 * @interface RawItemWeaponInfoV2
 */
export interface RawItemWeaponInfoV2 {
    /**
     * 
     * @type {RawItemWeaponInfoBulletSpeedCurveV2}
     * @memberof RawItemWeaponInfoV2
     */
    'bullet_speed_curve'?: RawItemWeaponInfoBulletSpeedCurveV2 | null;
}
/**
 * 
 * @export
 * @interface RawWeaponInfoHorizontalRecoilV2
 */
export interface RawWeaponInfoHorizontalRecoilV2 {
    /**
     * 
     * @type {Range}
     * @memberof RawWeaponInfoHorizontalRecoilV2
     */
    'range'?: Range | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoHorizontalRecoilV2
     */
    'burst_exponent'?: number | null;
}
/**
 * 
 * @export
 * @interface RawWeaponInfoV2
 */
export interface RawWeaponInfoV2 {
    /**
     * 
     * @type {boolean}
     * @memberof RawWeaponInfoV2
     */
    'can_zoom'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_damage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_gravity_scale'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_inherit_shooter_velocity_scale'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_lifetime'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_radius'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_radius_vs_world'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_reflect_amount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_reflect_scale'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullet_whiz_distance'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'burst_shot_cooldown'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'crit_bonus_against_npcs'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'crit_bonus_end'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'crit_bonus_end_range'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'crit_bonus_start'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'crit_bonus_start_range'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'cycle_time'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'intra_burst_cycle_time'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'max_spin_cycle_time'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'damage_falloff_bias'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'damage_falloff_end_range'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'damage_falloff_end_scale'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'damage_falloff_start_range'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'damage_falloff_start_scale'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'horizontal_punch'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'range'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'recoil_recovery_delay_factor'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'recoil_recovery_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'recoil_shot_index_recovery_time_factor'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'recoil_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'reload_move_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'scatter_yaw_scale'?: number | null;
    /**
     * 
     * @type {AimingShotSpreadPenalty}
     * @memberof RawWeaponInfoV2
     */
    'aiming_shot_spread_penalty'?: AimingShotSpreadPenalty | null;
    /**
     * 
     * @type {StandingShotSpreadPenalty}
     * @memberof RawWeaponInfoV2
     */
    'standing_shot_spread_penalty'?: StandingShotSpreadPenalty | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'shoot_move_speed_percent'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'shoot_spread_penalty_decay'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'shoot_spread_penalty_decay_delay'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'shoot_spread_penalty_per_shot'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'shooting_up_spread_penalty'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'vertical_punch'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'zoom_fov'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'zoom_move_speed_percent'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'bullets'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'burst_shot_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'clip_size'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'spread'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'standing_spread'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'low_ammo_indicator_threshold'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'recoil_seed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoV2
     */
    'reload_duration'?: number | null;
    /**
     * 
     * @type {RawItemWeaponInfoBulletSpeedCurveV2}
     * @memberof RawWeaponInfoV2
     */
    'bullet_speed_curve'?: RawItemWeaponInfoBulletSpeedCurveV2 | null;
    /**
     * 
     * @type {RawWeaponInfoHorizontalRecoilV2}
     * @memberof RawWeaponInfoV2
     */
    'horizontal_recoil'?: RawWeaponInfoHorizontalRecoilV2 | null;
    /**
     * 
     * @type {RawWeaponInfoVerticalRecoilV2}
     * @memberof RawWeaponInfoV2
     */
    'vertical_recoil'?: RawWeaponInfoVerticalRecoilV2 | null;
}
/**
 * 
 * @export
 * @interface RawWeaponInfoVerticalRecoilV2
 */
export interface RawWeaponInfoVerticalRecoilV2 {
    /**
     * 
     * @type {Range}
     * @memberof RawWeaponInfoVerticalRecoilV2
     */
    'range'?: Range | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoVerticalRecoilV2
     */
    'burst_exponent'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoVerticalRecoilV2
     */
    'burst_constant'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RawWeaponInfoVerticalRecoilV2
     */
    'burst_slope'?: number | null;
}
/**
 * @type ResponseGetItemV2ItemsIdOrClassNameGet
 * @export
 */
export type ResponseGetItemV2ItemsIdOrClassNameGet = { type: 'ability' } & AbilityV2 | { type: 'upgrade' } & UpgradeV2 | { type: 'weapon' } & WeaponV2;

/**
 * 
 * @export
 * @interface StandingShotSpreadPenalty
 */
export interface StandingShotSpreadPenalty {
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StatsUsageFlagV2 = {
    ConditionallyApplied: 'ConditionallyApplied',
    ConditionallyEnemyApplied: 'ConditionallyEnemyApplied',
    IntrinsicallyProvidedInAbility: 'IntrinsicallyProvidedInAbility',
    IntrinsicallyProvidedInModifier: 'IntrinsicallyProvidedInModifier'
} as const;

export type StatsUsageFlagV2 = typeof StatsUsageFlagV2[keyof typeof StatsUsageFlagV2];


/**
 * 
 * @export
 * @interface UpgradeDescriptionV2
 */
export interface UpgradeDescriptionV2 {
    /**
     * 
     * @type {string}
     * @memberof UpgradeDescriptionV2
     */
    'desc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeDescriptionV2
     */
    'active'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeDescriptionV2
     */
    'passive'?: string | null;
}
/**
 * 
 * @export
 * @interface UpgradePropertyV2
 */
export interface UpgradePropertyV2 {
    /**
     * 
     * @type {Value1}
     * @memberof UpgradePropertyV2
     */
    'value'?: Value1 | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradePropertyV2
     */
    'can_set_token_override'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'provided_property_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'css_class'?: string | null;
    /**
     * 
     * @type {UsageFlags}
     * @memberof UpgradePropertyV2
     */
    'usage_flags'?: UsageFlags | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradePropertyV2
     */
    'negative_attribute'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'disable_value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'loc_token_override'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'display_units'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'icon_path'?: string | null;
    /**
     * 
     * @type {RawItemPropertyScaleFunctionSubclassV2}
     * @memberof UpgradePropertyV2
     */
    'scale_function'?: RawItemPropertyScaleFunctionSubclassV2 | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'prefix'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'postfix'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'postvalue_label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'conditional'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradePropertyV2
     */
    'icon'?: string | null;
    /**
     * 
     * @type {RawAbilitySectionTypeV2}
     * @memberof UpgradePropertyV2
     */
    'tooltip_section'?: RawAbilitySectionTypeV2 | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradePropertyV2
     */
    'tooltip_is_elevated'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradePropertyV2
     */
    'tooltip_is_important'?: boolean | null;
}


/**
 * 
 * @export
 * @interface UpgradeTooltipSectionAttributeV2
 */
export interface UpgradeTooltipSectionAttributeV2 {
    /**
     * 
     * @type {string}
     * @memberof UpgradeTooltipSectionAttributeV2
     */
    'loc_string'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpgradeTooltipSectionAttributeV2
     */
    'properties'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpgradeTooltipSectionAttributeV2
     */
    'elevated_properties'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpgradeTooltipSectionAttributeV2
     */
    'important_properties'?: Array<string> | null;
    /**
     * 
     * @type {Array<UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon>}
     * @memberof UpgradeTooltipSectionAttributeV2
     */
    'important_properties_with_icon'?: Array<UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon> | null;
}
/**
 * 
 * @export
 * @interface UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
 */
export interface UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon {
    /**
     * 
     * @type {string}
     * @memberof UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
     */
    'icon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeTooltipSectionAttributeV2ImportantPropertyWithIcon
     */
    'localized_name'?: string | null;
}
/**
 * 
 * @export
 * @interface UpgradeTooltipSectionV2
 */
export interface UpgradeTooltipSectionV2 {
    /**
     * 
     * @type {RawAbilitySectionTypeV2}
     * @memberof UpgradeTooltipSectionV2
     */
    'section_type'?: RawAbilitySectionTypeV2 | null;
    /**
     * 
     * @type {Array<UpgradeTooltipSectionAttributeV2>}
     * @memberof UpgradeTooltipSectionV2
     */
    'section_attributes'?: Array<UpgradeTooltipSectionAttributeV2> | null;
}


/**
 * 
 * @export
 * @interface UpgradeV2
 */
export interface UpgradeV2 {
    /**
     * 
     * @type {number}
     * @memberof UpgradeV2
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'class_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradeV2
     */
    'start_trained'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'image_webp'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpgradeV2
     */
    'hero'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpgradeV2
     */
    'heroes'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof UpgradeV2
     */
    'update_time'?: number | null;
    /**
     * 
     * @type {{ [key: string]: UpgradePropertyV2; }}
     * @memberof UpgradeV2
     */
    'properties'?: { [key: string]: UpgradePropertyV2; } | null;
    /**
     * 
     * @type {RawItemWeaponInfoV2}
     * @memberof UpgradeV2
     */
    'weapon_info'?: RawItemWeaponInfoV2 | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'type'?: UpgradeV2TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'shop_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'shop_image_webp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'shop_image_small'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpgradeV2
     */
    'shop_image_small_webp'?: string | null;
    /**
     * 
     * @type {ItemSlotTypeV2}
     * @memberof UpgradeV2
     */
    'item_slot_type': ItemSlotTypeV2;
    /**
     * 
     * @type {ItemTierV2}
     * @memberof UpgradeV2
     */
    'item_tier': ItemTierV2;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradeV2
     */
    'disabled'?: boolean | null;
    /**
     * 
     * @type {UpgradeDescriptionV2}
     * @memberof UpgradeV2
     */
    'description'?: UpgradeDescriptionV2 | null;
    /**
     * 
     * @type {RawAbilityActivationV2}
     * @memberof UpgradeV2
     */
    'activation': RawAbilityActivationV2;
    /**
     * 
     * @type {RawAbilityImbueV2}
     * @memberof UpgradeV2
     */
    'imbue'?: RawAbilityImbueV2 | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpgradeV2
     */
    'component_items'?: Array<string> | null;
    /**
     * 
     * @type {Array<UpgradeTooltipSectionV2>}
     * @memberof UpgradeV2
     */
    'tooltip_sections'?: Array<UpgradeTooltipSectionV2> | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradeV2
     */
    'is_active_item': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpgradeV2
     */
    'shopable': boolean;
    /**
     * 
     * @type {number}
     * @memberof UpgradeV2
     */
    'cost': number | null;
}

export const UpgradeV2TypeEnum = {
    Upgrade: 'upgrade'
} as const;

export type UpgradeV2TypeEnum = typeof UpgradeV2TypeEnum[keyof typeof UpgradeV2TypeEnum];

/**
 * 
 * @export
 * @interface UsageFlags
 */
export interface UsageFlags {
}
/**
 * 
 * @export
 * @enum {number}
 */

export const ValidClientVersions = {
    NUMBER_5945: 5945,
    NUMBER_5920: 5920,
    NUMBER_5902: 5902,
    NUMBER_5885: 5885,
    NUMBER_5878: 5878,
    NUMBER_5869: 5869,
    NUMBER_5852: 5852,
    NUMBER_5831: 5831,
    NUMBER_5826: 5826,
    NUMBER_5818: 5818,
    NUMBER_5789: 5789,
    NUMBER_5748: 5748,
    NUMBER_5723: 5723,
    NUMBER_5712: 5712,
    NUMBER_5710: 5710,
    NUMBER_5690: 5690,
    NUMBER_5675: 5675,
    NUMBER_5668: 5668,
    NUMBER_5664: 5664,
    NUMBER_5658: 5658,
    NUMBER_5650: 5650,
    NUMBER_5636: 5636,
    NUMBER_5624: 5624,
    NUMBER_5615: 5615,
    NUMBER_5602: 5602,
    NUMBER_5583: 5583,
    NUMBER_5554: 5554,
    NUMBER_5538: 5538,
    NUMBER_5533: 5533,
    NUMBER_5529: 5529,
    NUMBER_5527: 5527
} as const;

export type ValidClientVersions = typeof ValidClientVersions[keyof typeof ValidClientVersions];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface Value
 */
export interface Value {
}
/**
 * 
 * @export
 * @interface Value1
 */
export interface Value1 {
}
/**
 * 
 * @export
 * @interface WeaponV2
 */
export interface WeaponV2 {
    /**
     * 
     * @type {number}
     * @memberof WeaponV2
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof WeaponV2
     */
    'class_name': string;
    /**
     * 
     * @type {string}
     * @memberof WeaponV2
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof WeaponV2
     */
    'start_trained'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof WeaponV2
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WeaponV2
     */
    'image_webp'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WeaponV2
     */
    'hero'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof WeaponV2
     */
    'heroes'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof WeaponV2
     */
    'update_time'?: number | null;
    /**
     * 
     * @type {{ [key: string]: ItemPropertyV2; }}
     * @memberof WeaponV2
     */
    'properties'?: { [key: string]: ItemPropertyV2; } | null;
    /**
     * 
     * @type {RawWeaponInfoV2}
     * @memberof WeaponV2
     */
    'weapon_info'?: RawWeaponInfoV2 | null;
    /**
     * 
     * @type {string}
     * @memberof WeaponV2
     */
    'type'?: WeaponV2TypeEnum;
}

export const WeaponV2TypeEnum = {
    Weapon: 'weapon'
} as const;

export type WeaponV2TypeEnum = typeof WeaponV2TypeEnum[keyof typeof WeaponV2TypeEnum];

/**
 * 
 * @export
 * @interface ZiplanePathV1
 */
export interface ZiplanePathV1 {
    /**
     * The origin of the path.
     * @type {Array<any>}
     * @memberof ZiplanePathV1
     */
    'origin': Array<any>;
    /**
     * The color of the path.
     * @type {string}
     * @memberof ZiplanePathV1
     */
    'color': string;
    /**
     * The P0 points of the path.
     * @type {Array<Array<any>>}
     * @memberof ZiplanePathV1
     */
    'P0_points': Array<Array<any>>;
    /**
     * The P1 points of the path.
     * @type {Array<Array<any>>}
     * @memberof ZiplanePathV1
     */
    'P1_points': Array<Array<any>>;
    /**
     * The P2 points of the path.
     * @type {Array<Array<any>>}
     * @memberof ZiplanePathV1
     */
    'P2_points': Array<Array<any>>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Build Tags
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildTagsV2BuildTagsGet: async (language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/build-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Client Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientVersionsV2ClientVersionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/client-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Colors
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getColorsV1ColorsGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/colors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Icons
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconsV1IconsGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/icons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Map
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapV1MapGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Ranks
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanksV2RanksGet: async (language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/ranks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sounds
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoundsV1SoundsGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sounds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Steam Info
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSteamInfoV1SteamInfoGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/steam-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Build Tags
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildTagsV2BuildTagsGet(language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildTagV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildTagsV2BuildTagsGet(language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBuildTagsV2BuildTagsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Client Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientVersionsV2ClientVersionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientVersionsV2ClientVersionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getClientVersionsV2ClientVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Colors
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getColorsV1ColorsGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: ColorV1; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getColorsV1ColorsGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getColorsV1ColorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Icons
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIconsV1IconsGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIconsV1IconsGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIconsV1IconsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Map
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMapV1MapGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMapV1MapGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMapV1MapGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Ranks
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRanksV2RanksGet(language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RankV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRanksV2RanksGet(language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRanksV2RanksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Sounds
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSoundsV1SoundsGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSoundsV1SoundsGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSoundsV1SoundsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Steam Info
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSteamInfoV1SteamInfoGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSteamInfoV1SteamInfoGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSteamInfoV1SteamInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Build Tags
         * @param {DefaultApiGetBuildTagsV2BuildTagsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildTagsV2BuildTagsGet(requestParameters: DefaultApiGetBuildTagsV2BuildTagsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<BuildTagV2>> {
            return localVarFp.getBuildTagsV2BuildTagsGet(requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Client Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientVersionsV2ClientVersionsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getClientVersionsV2ClientVersionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Colors
         * @param {DefaultApiGetColorsV1ColorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getColorsV1ColorsGet(requestParameters: DefaultApiGetColorsV1ColorsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: ColorV1; }> {
            return localVarFp.getColorsV1ColorsGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Icons
         * @param {DefaultApiGetIconsV1IconsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconsV1IconsGet(requestParameters: DefaultApiGetIconsV1IconsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.getIconsV1IconsGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Map
         * @param {DefaultApiGetMapV1MapGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapV1MapGet(requestParameters: DefaultApiGetMapV1MapGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MapV1> {
            return localVarFp.getMapV1MapGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Ranks
         * @param {DefaultApiGetRanksV2RanksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanksV2RanksGet(requestParameters: DefaultApiGetRanksV2RanksGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<RankV2>> {
            return localVarFp.getRanksV2RanksGet(requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sounds
         * @param {DefaultApiGetSoundsV1SoundsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoundsV1SoundsGet(requestParameters: DefaultApiGetSoundsV1SoundsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getSoundsV1SoundsGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Steam Info
         * @param {DefaultApiGetSteamInfoV1SteamInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSteamInfoV1SteamInfoGet(requestParameters: DefaultApiGetSteamInfoV1SteamInfoGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getSteamInfoV1SteamInfoGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBuildTagsV2BuildTagsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBuildTagsV2BuildTagsGetRequest
 */
export interface DefaultApiGetBuildTagsV2BuildTagsGetRequest {
    /**
     * 
     * @type {Language}
     * @memberof DefaultApiGetBuildTagsV2BuildTagsGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetBuildTagsV2BuildTagsGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getColorsV1ColorsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetColorsV1ColorsGetRequest
 */
export interface DefaultApiGetColorsV1ColorsGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetColorsV1ColorsGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getIconsV1IconsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIconsV1IconsGetRequest
 */
export interface DefaultApiGetIconsV1IconsGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetIconsV1IconsGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getMapV1MapGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMapV1MapGetRequest
 */
export interface DefaultApiGetMapV1MapGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetMapV1MapGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getRanksV2RanksGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetRanksV2RanksGetRequest
 */
export interface DefaultApiGetRanksV2RanksGetRequest {
    /**
     * 
     * @type {Language}
     * @memberof DefaultApiGetRanksV2RanksGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetRanksV2RanksGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getSoundsV1SoundsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetSoundsV1SoundsGetRequest
 */
export interface DefaultApiGetSoundsV1SoundsGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetSoundsV1SoundsGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getSteamInfoV1SteamInfoGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGetSteamInfoV1SteamInfoGetRequest
 */
export interface DefaultApiGetSteamInfoV1SteamInfoGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof DefaultApiGetSteamInfoV1SteamInfoGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get Build Tags
     * @param {DefaultApiGetBuildTagsV2BuildTagsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBuildTagsV2BuildTagsGet(requestParameters: DefaultApiGetBuildTagsV2BuildTagsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBuildTagsV2BuildTagsGet(requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Client Versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientVersionsV2ClientVersionsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClientVersionsV2ClientVersionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Colors
     * @param {DefaultApiGetColorsV1ColorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getColorsV1ColorsGet(requestParameters: DefaultApiGetColorsV1ColorsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getColorsV1ColorsGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Icons
     * @param {DefaultApiGetIconsV1IconsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIconsV1IconsGet(requestParameters: DefaultApiGetIconsV1IconsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIconsV1IconsGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Map
     * @param {DefaultApiGetMapV1MapGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMapV1MapGet(requestParameters: DefaultApiGetMapV1MapGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMapV1MapGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Ranks
     * @param {DefaultApiGetRanksV2RanksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRanksV2RanksGet(requestParameters: DefaultApiGetRanksV2RanksGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRanksV2RanksGet(requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sounds
     * @param {DefaultApiGetSoundsV1SoundsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSoundsV1SoundsGet(requestParameters: DefaultApiGetSoundsV1SoundsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSoundsV1SoundsGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Steam Info
     * @param {DefaultApiGetSteamInfoV1SteamInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSteamInfoV1SteamInfoGet(requestParameters: DefaultApiGetSteamInfoV1SteamInfoGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSteamInfoV1SteamInfoGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HeroesApi - axios parameter creator
 * @export
 */
export const HeroesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Hero By Name
         * @param {string} name 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroByNameV2HeroesByNameNameGet: async (name: string, language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getHeroByNameV2HeroesByNameNameGet', 'name', name)
            const localVarPath = `/v2/heroes/by-name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Hero
         * @param {number} id 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroV2HeroesIdGet: async (id: number, language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHeroV2HeroesIdGet', 'id', id)
            const localVarPath = `/v2/heroes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Heroes
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {boolean | null} [onlyActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesV2HeroesGet: async (language?: Language | null, clientVersion?: ValidClientVersions | null, onlyActive?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/heroes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }

            if (onlyActive !== undefined) {
                localVarQueryParameter['only_active'] = onlyActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HeroesApi - functional programming interface
 * @export
 */
export const HeroesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HeroesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Hero By Name
         * @param {string} name 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroByNameV2HeroesByNameNameGet(name: string, language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeroV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroByNameV2HeroesByNameNameGet(name, language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroesApi.getHeroByNameV2HeroesByNameNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Hero
         * @param {number} id 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroV2HeroesIdGet(id: number, language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeroV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroV2HeroesIdGet(id, language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroesApi.getHeroV2HeroesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Heroes
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {boolean | null} [onlyActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesV2HeroesGet(language?: Language | null, clientVersion?: ValidClientVersions | null, onlyActive?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HeroV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesV2HeroesGet(language, clientVersion, onlyActive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroesApi.getHeroesV2HeroesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HeroesApi - factory interface
 * @export
 */
export const HeroesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HeroesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Hero By Name
         * @param {HeroesApiGetHeroByNameV2HeroesByNameNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroByNameV2HeroesByNameNameGet(requestParameters: HeroesApiGetHeroByNameV2HeroesByNameNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<HeroV2> {
            return localVarFp.getHeroByNameV2HeroesByNameNameGet(requestParameters.name, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Hero
         * @param {HeroesApiGetHeroV2HeroesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroV2HeroesIdGet(requestParameters: HeroesApiGetHeroV2HeroesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<HeroV2> {
            return localVarFp.getHeroV2HeroesIdGet(requestParameters.id, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Heroes
         * @param {HeroesApiGetHeroesV2HeroesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesV2HeroesGet(requestParameters: HeroesApiGetHeroesV2HeroesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<HeroV2>> {
            return localVarFp.getHeroesV2HeroesGet(requestParameters.language, requestParameters.clientVersion, requestParameters.onlyActive, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHeroByNameV2HeroesByNameNameGet operation in HeroesApi.
 * @export
 * @interface HeroesApiGetHeroByNameV2HeroesByNameNameGetRequest
 */
export interface HeroesApiGetHeroByNameV2HeroesByNameNameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof HeroesApiGetHeroByNameV2HeroesByNameNameGet
     */
    readonly name: string

    /**
     * 
     * @type {Language}
     * @memberof HeroesApiGetHeroByNameV2HeroesByNameNameGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof HeroesApiGetHeroByNameV2HeroesByNameNameGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getHeroV2HeroesIdGet operation in HeroesApi.
 * @export
 * @interface HeroesApiGetHeroV2HeroesIdGetRequest
 */
export interface HeroesApiGetHeroV2HeroesIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof HeroesApiGetHeroV2HeroesIdGet
     */
    readonly id: number

    /**
     * 
     * @type {Language}
     * @memberof HeroesApiGetHeroV2HeroesIdGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof HeroesApiGetHeroV2HeroesIdGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getHeroesV2HeroesGet operation in HeroesApi.
 * @export
 * @interface HeroesApiGetHeroesV2HeroesGetRequest
 */
export interface HeroesApiGetHeroesV2HeroesGetRequest {
    /**
     * 
     * @type {Language}
     * @memberof HeroesApiGetHeroesV2HeroesGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof HeroesApiGetHeroesV2HeroesGet
     */
    readonly clientVersion?: ValidClientVersions | null

    /**
     * 
     * @type {boolean}
     * @memberof HeroesApiGetHeroesV2HeroesGet
     */
    readonly onlyActive?: boolean | null
}

/**
 * HeroesApi - object-oriented interface
 * @export
 * @class HeroesApi
 * @extends {BaseAPI}
 */
export class HeroesApi extends BaseAPI {
    /**
     * 
     * @summary Get Hero By Name
     * @param {HeroesApiGetHeroByNameV2HeroesByNameNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public getHeroByNameV2HeroesByNameNameGet(requestParameters: HeroesApiGetHeroByNameV2HeroesByNameNameGetRequest, options?: RawAxiosRequestConfig) {
        return HeroesApiFp(this.configuration).getHeroByNameV2HeroesByNameNameGet(requestParameters.name, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Hero
     * @param {HeroesApiGetHeroV2HeroesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public getHeroV2HeroesIdGet(requestParameters: HeroesApiGetHeroV2HeroesIdGetRequest, options?: RawAxiosRequestConfig) {
        return HeroesApiFp(this.configuration).getHeroV2HeroesIdGet(requestParameters.id, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Heroes
     * @param {HeroesApiGetHeroesV2HeroesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public getHeroesV2HeroesGet(requestParameters: HeroesApiGetHeroesV2HeroesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return HeroesApiFp(this.configuration).getHeroesV2HeroesGet(requestParameters.language, requestParameters.clientVersion, requestParameters.onlyActive, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Item
         * @param {string} idOrClassName 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemV2ItemsIdOrClassNameGet: async (idOrClassName: string, language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrClassName' is not null or undefined
            assertParamExists('getItemV2ItemsIdOrClassNameGet', 'idOrClassName', idOrClassName)
            const localVarPath = `/v2/items/{id_or_class_name}`
                .replace(`{${"id_or_class_name"}}`, encodeURIComponent(String(idOrClassName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Items By Hero Id
         * @param {number} id 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByHeroIdV2ItemsByHeroIdIdGet: async (id: number, language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemsByHeroIdV2ItemsByHeroIdIdGet', 'id', id)
            const localVarPath = `/v2/items/by-hero-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Items By Slot Type
         * @param {ItemSlotTypeV2} slotType 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet: async (slotType: ItemSlotTypeV2, language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slotType' is not null or undefined
            assertParamExists('getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet', 'slotType', slotType)
            const localVarPath = `/v2/items/by-slot-type/{slot_type}`
                .replace(`{${"slot_type"}}`, encodeURIComponent(String(slotType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Items By Type
         * @param {ItemTypeV2} type 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByTypeV2ItemsByTypeTypeGet: async (type: ItemTypeV2, language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getItemsByTypeV2ItemsByTypeTypeGet', 'type', type)
            const localVarPath = `/v2/items/by-type/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Items
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsV2ItemsGet: async (language?: Language | null, clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Item
         * @param {string} idOrClassName 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemV2ItemsIdOrClassNameGet(idOrClassName: string, language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetItemV2ItemsIdOrClassNameGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemV2ItemsIdOrClassNameGet(idOrClassName, language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.getItemV2ItemsIdOrClassNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Items By Hero Id
         * @param {number} id 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByHeroIdV2ItemsByHeroIdIdGet(id: number, language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsByHeroIdV2ItemsByHeroIdIdGet(id, language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.getItemsByHeroIdV2ItemsByHeroIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Items By Slot Type
         * @param {ItemSlotTypeV2} slotType 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(slotType: ItemSlotTypeV2, language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(slotType, language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Items By Type
         * @param {ItemTypeV2} type 
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByTypeV2ItemsByTypeTypeGet(type: ItemTypeV2, language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsByTypeV2ItemsByTypeTypeGet(type, language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.getItemsByTypeV2ItemsByTypeTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Items
         * @param {Language | null} [language] 
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsV2ItemsGet(language?: Language | null, clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsV2ItemsGet(language, clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.getItemsV2ItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Item
         * @param {ItemsApiGetItemV2ItemsIdOrClassNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemV2ItemsIdOrClassNameGet(requestParameters: ItemsApiGetItemV2ItemsIdOrClassNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseGetItemV2ItemsIdOrClassNameGet> {
            return localVarFp.getItemV2ItemsIdOrClassNameGet(requestParameters.idOrClassName, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Items By Hero Id
         * @param {ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByHeroIdV2ItemsByHeroIdIdGet(requestParameters: ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>> {
            return localVarFp.getItemsByHeroIdV2ItemsByHeroIdIdGet(requestParameters.id, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Items By Slot Type
         * @param {ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(requestParameters: ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>> {
            return localVarFp.getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(requestParameters.slotType, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Items By Type
         * @param {ItemsApiGetItemsByTypeV2ItemsByTypeTypeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByTypeV2ItemsByTypeTypeGet(requestParameters: ItemsApiGetItemsByTypeV2ItemsByTypeTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>> {
            return localVarFp.getItemsByTypeV2ItemsByTypeTypeGet(requestParameters.type, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Items
         * @param {ItemsApiGetItemsV2ItemsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsV2ItemsGet(requestParameters: ItemsApiGetItemsV2ItemsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetItemsV2ItemsGet200ResponseInner>> {
            return localVarFp.getItemsV2ItemsGet(requestParameters.language, requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getItemV2ItemsIdOrClassNameGet operation in ItemsApi.
 * @export
 * @interface ItemsApiGetItemV2ItemsIdOrClassNameGetRequest
 */
export interface ItemsApiGetItemV2ItemsIdOrClassNameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemsApiGetItemV2ItemsIdOrClassNameGet
     */
    readonly idOrClassName: string

    /**
     * 
     * @type {Language}
     * @memberof ItemsApiGetItemV2ItemsIdOrClassNameGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof ItemsApiGetItemV2ItemsIdOrClassNameGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getItemsByHeroIdV2ItemsByHeroIdIdGet operation in ItemsApi.
 * @export
 * @interface ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest
 */
export interface ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGet
     */
    readonly id: number

    /**
     * 
     * @type {Language}
     * @memberof ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet operation in ItemsApi.
 * @export
 * @interface ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest
 */
export interface ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest {
    /**
     * 
     * @type {ItemSlotTypeV2}
     * @memberof ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet
     */
    readonly slotType: ItemSlotTypeV2

    /**
     * 
     * @type {Language}
     * @memberof ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getItemsByTypeV2ItemsByTypeTypeGet operation in ItemsApi.
 * @export
 * @interface ItemsApiGetItemsByTypeV2ItemsByTypeTypeGetRequest
 */
export interface ItemsApiGetItemsByTypeV2ItemsByTypeTypeGetRequest {
    /**
     * 
     * @type {ItemTypeV2}
     * @memberof ItemsApiGetItemsByTypeV2ItemsByTypeTypeGet
     */
    readonly type: ItemTypeV2

    /**
     * 
     * @type {Language}
     * @memberof ItemsApiGetItemsByTypeV2ItemsByTypeTypeGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof ItemsApiGetItemsByTypeV2ItemsByTypeTypeGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getItemsV2ItemsGet operation in ItemsApi.
 * @export
 * @interface ItemsApiGetItemsV2ItemsGetRequest
 */
export interface ItemsApiGetItemsV2ItemsGetRequest {
    /**
     * 
     * @type {Language}
     * @memberof ItemsApiGetItemsV2ItemsGet
     */
    readonly language?: Language | null

    /**
     * 
     * @type {ValidClientVersions}
     * @memberof ItemsApiGetItemsV2ItemsGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * 
     * @summary Get Item
     * @param {ItemsApiGetItemV2ItemsIdOrClassNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemV2ItemsIdOrClassNameGet(requestParameters: ItemsApiGetItemV2ItemsIdOrClassNameGetRequest, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemV2ItemsIdOrClassNameGet(requestParameters.idOrClassName, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Items By Hero Id
     * @param {ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemsByHeroIdV2ItemsByHeroIdIdGet(requestParameters: ItemsApiGetItemsByHeroIdV2ItemsByHeroIdIdGetRequest, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemsByHeroIdV2ItemsByHeroIdIdGet(requestParameters.id, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Items By Slot Type
     * @param {ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(requestParameters: ItemsApiGetItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet(requestParameters.slotType, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Items By Type
     * @param {ItemsApiGetItemsByTypeV2ItemsByTypeTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemsByTypeV2ItemsByTypeTypeGet(requestParameters: ItemsApiGetItemsByTypeV2ItemsByTypeTypeGetRequest, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemsByTypeV2ItemsByTypeTypeGet(requestParameters.type, requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Items
     * @param {ItemsApiGetItemsV2ItemsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemsV2ItemsGet(requestParameters: ItemsApiGetItemsV2ItemsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemsV2ItemsGet(requestParameters.language, requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RawApi - axios parameter creator
 * @export
 */
export const RawApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Generic Data
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenericDataRawGenericDataGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/raw/generic_data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Raw Heroes
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawHeroesRawHeroesGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/raw/heroes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Raw Items
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawItemsRawItemsGet: async (clientVersion?: ValidClientVersions | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/raw/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientVersion !== undefined) {
                localVarQueryParameter['client_version'] = clientVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RawApi - functional programming interface
 * @export
 */
export const RawApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RawApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Generic Data
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenericDataRawGenericDataGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenericDataRawGenericDataGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RawApi.getGenericDataRawGenericDataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Raw Heroes
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRawHeroesRawHeroesGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRawHeroesRawHeroesGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RawApi.getRawHeroesRawHeroesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Raw Items
         * @param {ValidClientVersions | null} [clientVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRawItemsRawItemsGet(clientVersion?: ValidClientVersions | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRawItemsRawItemsGet(clientVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RawApi.getRawItemsRawItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RawApi - factory interface
 * @export
 */
export const RawApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RawApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Generic Data
         * @param {RawApiGetGenericDataRawGenericDataGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenericDataRawGenericDataGet(requestParameters: RawApiGetGenericDataRawGenericDataGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getGenericDataRawGenericDataGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Raw Heroes
         * @param {RawApiGetRawHeroesRawHeroesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawHeroesRawHeroesGet(requestParameters: RawApiGetRawHeroesRawHeroesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getRawHeroesRawHeroesGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Raw Items
         * @param {RawApiGetRawItemsRawItemsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawItemsRawItemsGet(requestParameters: RawApiGetRawItemsRawItemsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getRawItemsRawItemsGet(requestParameters.clientVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGenericDataRawGenericDataGet operation in RawApi.
 * @export
 * @interface RawApiGetGenericDataRawGenericDataGetRequest
 */
export interface RawApiGetGenericDataRawGenericDataGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof RawApiGetGenericDataRawGenericDataGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getRawHeroesRawHeroesGet operation in RawApi.
 * @export
 * @interface RawApiGetRawHeroesRawHeroesGetRequest
 */
export interface RawApiGetRawHeroesRawHeroesGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof RawApiGetRawHeroesRawHeroesGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * Request parameters for getRawItemsRawItemsGet operation in RawApi.
 * @export
 * @interface RawApiGetRawItemsRawItemsGetRequest
 */
export interface RawApiGetRawItemsRawItemsGetRequest {
    /**
     * 
     * @type {ValidClientVersions}
     * @memberof RawApiGetRawItemsRawItemsGet
     */
    readonly clientVersion?: ValidClientVersions | null
}

/**
 * RawApi - object-oriented interface
 * @export
 * @class RawApi
 * @extends {BaseAPI}
 */
export class RawApi extends BaseAPI {
    /**
     * 
     * @summary Get Generic Data
     * @param {RawApiGetGenericDataRawGenericDataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RawApi
     */
    public getGenericDataRawGenericDataGet(requestParameters: RawApiGetGenericDataRawGenericDataGetRequest = {}, options?: RawAxiosRequestConfig) {
        return RawApiFp(this.configuration).getGenericDataRawGenericDataGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Raw Heroes
     * @param {RawApiGetRawHeroesRawHeroesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RawApi
     */
    public getRawHeroesRawHeroesGet(requestParameters: RawApiGetRawHeroesRawHeroesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return RawApiFp(this.configuration).getRawHeroesRawHeroesGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Raw Items
     * @param {RawApiGetRawItemsRawItemsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RawApi
     */
    public getRawItemsRawItemsGet(requestParameters: RawApiGetRawItemsRawItemsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return RawApiFp(this.configuration).getRawItemsRawItemsGet(requestParameters.clientVersion, options).then((request) => request(this.axios, this.basePath));
    }
}



