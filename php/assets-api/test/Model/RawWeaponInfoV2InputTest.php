<?php
/**
 * RawWeaponInfoV2InputTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * RawWeaponInfoV2InputTest Class Doc Comment
 *
 * @category    Class
 * @description RawWeaponInfoV2Input
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RawWeaponInfoV2InputTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "RawWeaponInfoV2Input"
     */
    public function testRawWeaponInfoV2Input()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_b_can_zoom"
     */
    public function testPropertyMBCanZoom()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_damage"
     */
    public function testPropertyMFlBulletDamage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_gravity_scale"
     */
    public function testPropertyMFlBulletGravityScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_inherit_shooter_velocity_scale"
     */
    public function testPropertyMFlBulletInheritShooterVelocityScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_lifetime"
     */
    public function testPropertyMFlBulletLifetime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_radius"
     */
    public function testPropertyMFlBulletRadius()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_radius_vs_world"
     */
    public function testPropertyMFlBulletRadiusVsWorld()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_reflect_amount"
     */
    public function testPropertyMFlBulletReflectAmount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_reflect_scale"
     */
    public function testPropertyMFlBulletReflectScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_bullet_whiz_distance"
     */
    public function testPropertyMFlBulletWhizDistance()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_burst_shot_cooldown"
     */
    public function testPropertyMFlBurstShotCooldown()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_crit_bonus_against_npcs"
     */
    public function testPropertyMFlCritBonusAgainstNpcs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_crit_bonus_end"
     */
    public function testPropertyMFlCritBonusEnd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_crit_bonus_end_range"
     */
    public function testPropertyMFlCritBonusEndRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_crit_bonus_start"
     */
    public function testPropertyMFlCritBonusStart()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_crit_bonus_start_range"
     */
    public function testPropertyMFlCritBonusStartRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_cycle_time"
     */
    public function testPropertyMFlCycleTime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_intra_burst_cycle_time"
     */
    public function testPropertyMFlIntraBurstCycleTime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_max_spin_cycle_time"
     */
    public function testPropertyMFlMaxSpinCycleTime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_damage_falloff_bias"
     */
    public function testPropertyMFlDamageFalloffBias()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_damage_falloff_end_range"
     */
    public function testPropertyMFlDamageFalloffEndRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_damage_falloff_end_scale"
     */
    public function testPropertyMFlDamageFalloffEndScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_damage_falloff_start_range"
     */
    public function testPropertyMFlDamageFalloffStartRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_damage_falloff_start_scale"
     */
    public function testPropertyMFlDamageFalloffStartScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_horizontal_punch"
     */
    public function testPropertyMFlHorizontalPunch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_range"
     */
    public function testPropertyMFlRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_recoil_recovery_delay_factor"
     */
    public function testPropertyMFlRecoilRecoveryDelayFactor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_recoil_recovery_speed"
     */
    public function testPropertyMFlRecoilRecoverySpeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_recoil_shot_index_recovery_time_factor"
     */
    public function testPropertyMFlRecoilShotIndexRecoveryTimeFactor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_recoil_speed"
     */
    public function testPropertyMFlRecoilSpeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_reload_move_speed"
     */
    public function testPropertyMFlReloadMoveSpeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_scatter_yaw_scale"
     */
    public function testPropertyMFlScatterYawScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_aiming_shoot_spread_penalty"
     */
    public function testPropertyMAimingShootSpreadPenalty()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_standing_shoot_spread_penalty"
     */
    public function testPropertyMStandingShootSpreadPenalty()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_shoot_move_speed_percent"
     */
    public function testPropertyMFlShootMoveSpeedPercent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_shoot_spread_penalty_decay"
     */
    public function testPropertyMFlShootSpreadPenaltyDecay()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_shoot_spread_penalty_decay_delay"
     */
    public function testPropertyMFlShootSpreadPenaltyDecayDelay()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_shoot_spread_penalty_per_shot"
     */
    public function testPropertyMFlShootSpreadPenaltyPerShot()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_shooting_up_spread_penalty"
     */
    public function testPropertyMFlShootingUpSpreadPenalty()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_vertical_punch"
     */
    public function testPropertyMFlVerticalPunch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_zoom_fov"
     */
    public function testPropertyMFlZoomFov()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_zoom_move_speed_percent"
     */
    public function testPropertyMFlZoomMoveSpeedPercent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_i_bullets"
     */
    public function testPropertyMIBullets()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_i_burst_shot_count"
     */
    public function testPropertyMIBurstShotCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_i_clip_size"
     */
    public function testPropertyMIClipSize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_spread"
     */
    public function testPropertyMFlSpread()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_standing_spread"
     */
    public function testPropertyMFlStandingSpread()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_low_ammo_indicator_threshold"
     */
    public function testPropertyMFlLowAmmoIndicatorThreshold()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_recoil_seed"
     */
    public function testPropertyMFlRecoilSeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_fl_reload_duration"
     */
    public function testPropertyMFlReloadDuration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_bullet_speed_curve"
     */
    public function testPropertyMBulletSpeedCurve()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_horizontal_recoil"
     */
    public function testPropertyMHorizontalRecoil()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "m_vertical_recoil"
     */
    public function testPropertyMVerticalRecoil()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
