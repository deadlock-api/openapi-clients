<?php
/**
 * RawWeaponInfoV2OutputTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * RawWeaponInfoV2OutputTest Class Doc Comment
 *
 * @category    Class
 * @description RawWeaponInfoV2Output
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RawWeaponInfoV2OutputTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "RawWeaponInfoV2Output"
     */
    public function testRawWeaponInfoV2Output()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "can_zoom"
     */
    public function testPropertyCanZoom()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_damage"
     */
    public function testPropertyBulletDamage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_gravity_scale"
     */
    public function testPropertyBulletGravityScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_inherit_shooter_velocity_scale"
     */
    public function testPropertyBulletInheritShooterVelocityScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_lifetime"
     */
    public function testPropertyBulletLifetime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_radius"
     */
    public function testPropertyBulletRadius()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_radius_vs_world"
     */
    public function testPropertyBulletRadiusVsWorld()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_reflect_amount"
     */
    public function testPropertyBulletReflectAmount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_reflect_scale"
     */
    public function testPropertyBulletReflectScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_whiz_distance"
     */
    public function testPropertyBulletWhizDistance()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "burst_shot_cooldown"
     */
    public function testPropertyBurstShotCooldown()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "crit_bonus_against_npcs"
     */
    public function testPropertyCritBonusAgainstNpcs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "crit_bonus_end"
     */
    public function testPropertyCritBonusEnd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "crit_bonus_end_range"
     */
    public function testPropertyCritBonusEndRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "crit_bonus_start"
     */
    public function testPropertyCritBonusStart()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "crit_bonus_start_range"
     */
    public function testPropertyCritBonusStartRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cycle_time"
     */
    public function testPropertyCycleTime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "intra_burst_cycle_time"
     */
    public function testPropertyIntraBurstCycleTime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_spin_cycle_time"
     */
    public function testPropertyMaxSpinCycleTime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "damage_falloff_bias"
     */
    public function testPropertyDamageFalloffBias()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "damage_falloff_end_range"
     */
    public function testPropertyDamageFalloffEndRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "damage_falloff_end_scale"
     */
    public function testPropertyDamageFalloffEndScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "damage_falloff_start_range"
     */
    public function testPropertyDamageFalloffStartRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "damage_falloff_start_scale"
     */
    public function testPropertyDamageFalloffStartScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "horizontal_punch"
     */
    public function testPropertyHorizontalPunch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "range"
     */
    public function testPropertyRange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recoil_recovery_delay_factor"
     */
    public function testPropertyRecoilRecoveryDelayFactor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recoil_recovery_speed"
     */
    public function testPropertyRecoilRecoverySpeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recoil_shot_index_recovery_time_factor"
     */
    public function testPropertyRecoilShotIndexRecoveryTimeFactor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recoil_speed"
     */
    public function testPropertyRecoilSpeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reload_move_speed"
     */
    public function testPropertyReloadMoveSpeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "scatter_yaw_scale"
     */
    public function testPropertyScatterYawScale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "aiming_shot_spread_penalty"
     */
    public function testPropertyAimingShotSpreadPenalty()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "standing_shot_spread_penalty"
     */
    public function testPropertyStandingShotSpreadPenalty()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shoot_move_speed_percent"
     */
    public function testPropertyShootMoveSpeedPercent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shoot_spread_penalty_decay"
     */
    public function testPropertyShootSpreadPenaltyDecay()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shoot_spread_penalty_decay_delay"
     */
    public function testPropertyShootSpreadPenaltyDecayDelay()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shoot_spread_penalty_per_shot"
     */
    public function testPropertyShootSpreadPenaltyPerShot()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shooting_up_spread_penalty"
     */
    public function testPropertyShootingUpSpreadPenalty()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "vertical_punch"
     */
    public function testPropertyVerticalPunch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "zoom_fov"
     */
    public function testPropertyZoomFov()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "zoom_move_speed_percent"
     */
    public function testPropertyZoomMoveSpeedPercent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullets"
     */
    public function testPropertyBullets()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "burst_shot_count"
     */
    public function testPropertyBurstShotCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "clip_size"
     */
    public function testPropertyClipSize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "spread"
     */
    public function testPropertySpread()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "standing_spread"
     */
    public function testPropertyStandingSpread()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "low_ammo_indicator_threshold"
     */
    public function testPropertyLowAmmoIndicatorThreshold()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recoil_seed"
     */
    public function testPropertyRecoilSeed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reload_duration"
     */
    public function testPropertyReloadDuration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bullet_speed_curve"
     */
    public function testPropertyBulletSpeedCurve()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "horizontal_recoil"
     */
    public function testPropertyHorizontalRecoil()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "vertical_recoil"
     */
    public function testPropertyVerticalRecoil()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
