<?php
/**
 * HeroesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HeroesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeroesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getHeroByNameV2HeroesByNameNameGet' => [
            'application/json',
        ],
        'getHeroV2HeroesIdGet' => [
            'application/json',
        ],
        'getHeroesV2HeroesGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHeroByNameV2HeroesByNameNameGet
     *
     * Get Hero By Name
     *
     * @param  string $name name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroByNameV2HeroesByNameNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HeroV2|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getHeroByNameV2HeroesByNameNameGet($name, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroByNameV2HeroesByNameNameGet'][0])
    {
        list($response) = $this->getHeroByNameV2HeroesByNameNameGetWithHttpInfo($name, $language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getHeroByNameV2HeroesByNameNameGetWithHttpInfo
     *
     * Get Hero By Name
     *
     * @param  string $name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroByNameV2HeroesByNameNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HeroV2|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeroByNameV2HeroesByNameNameGetWithHttpInfo($name, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroByNameV2HeroesByNameNameGet'][0])
    {
        $request = $this->getHeroByNameV2HeroesByNameNameGetRequest($name, $language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HeroV2',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HeroV2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HeroV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHeroByNameV2HeroesByNameNameGetAsync
     *
     * Get Hero By Name
     *
     * @param  string $name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroByNameV2HeroesByNameNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeroByNameV2HeroesByNameNameGetAsync($name, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroByNameV2HeroesByNameNameGet'][0])
    {
        return $this->getHeroByNameV2HeroesByNameNameGetAsyncWithHttpInfo($name, $language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHeroByNameV2HeroesByNameNameGetAsyncWithHttpInfo
     *
     * Get Hero By Name
     *
     * @param  string $name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroByNameV2HeroesByNameNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeroByNameV2HeroesByNameNameGetAsyncWithHttpInfo($name, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroByNameV2HeroesByNameNameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HeroV2';
        $request = $this->getHeroByNameV2HeroesByNameNameGetRequest($name, $language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHeroByNameV2HeroesByNameNameGet'
     *
     * @param  string $name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroByNameV2HeroesByNameNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHeroByNameV2HeroesByNameNameGetRequest($name, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroByNameV2HeroesByNameNameGet'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getHeroByNameV2HeroesByNameNameGet'
            );
        }




        $resourcePath = '/v2/heroes/by-name/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHeroV2HeroesIdGet
     *
     * Get Hero
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroV2HeroesIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HeroV2|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getHeroV2HeroesIdGet($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroV2HeroesIdGet'][0])
    {
        list($response) = $this->getHeroV2HeroesIdGetWithHttpInfo($id, $language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getHeroV2HeroesIdGetWithHttpInfo
     *
     * Get Hero
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroV2HeroesIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HeroV2|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeroV2HeroesIdGetWithHttpInfo($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroV2HeroesIdGet'][0])
    {
        $request = $this->getHeroV2HeroesIdGetRequest($id, $language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HeroV2',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HeroV2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HeroV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHeroV2HeroesIdGetAsync
     *
     * Get Hero
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroV2HeroesIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeroV2HeroesIdGetAsync($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroV2HeroesIdGet'][0])
    {
        return $this->getHeroV2HeroesIdGetAsyncWithHttpInfo($id, $language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHeroV2HeroesIdGetAsyncWithHttpInfo
     *
     * Get Hero
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroV2HeroesIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeroV2HeroesIdGetAsyncWithHttpInfo($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroV2HeroesIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HeroV2';
        $request = $this->getHeroV2HeroesIdGetRequest($id, $language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHeroV2HeroesIdGet'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroV2HeroesIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHeroV2HeroesIdGetRequest($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getHeroV2HeroesIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHeroV2HeroesIdGet'
            );
        }




        $resourcePath = '/v2/heroes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHeroesV2HeroesGet
     *
     * Get Heroes
     *
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  bool|null $only_active only_active (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroesV2HeroesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HeroV2[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getHeroesV2HeroesGet($language = null, $client_version = null, $only_active = null, string $contentType = self::contentTypes['getHeroesV2HeroesGet'][0])
    {
        list($response) = $this->getHeroesV2HeroesGetWithHttpInfo($language, $client_version, $only_active, $contentType);
        return $response;
    }

    /**
     * Operation getHeroesV2HeroesGetWithHttpInfo
     *
     * Get Heroes
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  bool|null $only_active (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroesV2HeroesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HeroV2[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeroesV2HeroesGetWithHttpInfo($language = null, $client_version = null, $only_active = null, string $contentType = self::contentTypes['getHeroesV2HeroesGet'][0])
    {
        $request = $this->getHeroesV2HeroesGetRequest($language, $client_version, $only_active, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HeroV2[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HeroV2[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HeroV2[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHeroesV2HeroesGetAsync
     *
     * Get Heroes
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  bool|null $only_active (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroesV2HeroesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeroesV2HeroesGetAsync($language = null, $client_version = null, $only_active = null, string $contentType = self::contentTypes['getHeroesV2HeroesGet'][0])
    {
        return $this->getHeroesV2HeroesGetAsyncWithHttpInfo($language, $client_version, $only_active, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHeroesV2HeroesGetAsyncWithHttpInfo
     *
     * Get Heroes
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  bool|null $only_active (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroesV2HeroesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeroesV2HeroesGetAsyncWithHttpInfo($language = null, $client_version = null, $only_active = null, string $contentType = self::contentTypes['getHeroesV2HeroesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HeroV2[]';
        $request = $this->getHeroesV2HeroesGetRequest($language, $client_version, $only_active, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHeroesV2HeroesGet'
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  bool|null $only_active (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHeroesV2HeroesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHeroesV2HeroesGetRequest($language = null, $client_version = null, $only_active = null, string $contentType = self::contentTypes['getHeroesV2HeroesGet'][0])
    {





        $resourcePath = '/v2/heroes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_active,
            'only_active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
