<?php
/**
 * ItemsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ItemsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getItemV2ItemsIdOrClassNameGet' => [
            'application/json',
        ],
        'getItemsByHeroIdV2ItemsByHeroIdIdGet' => [
            'application/json',
        ],
        'getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet' => [
            'application/json',
        ],
        'getItemsByTypeV2ItemsByTypeTypeGet' => [
            'application/json',
        ],
        'getItemsV2ItemsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getItemV2ItemsIdOrClassNameGet
     *
     * Get Item
     *
     * @param  string $id_or_class_name id_or_class_name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemV2ItemsIdOrClassNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResponseGetItemV2ItemsIdOrClassNameGet|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getItemV2ItemsIdOrClassNameGet($id_or_class_name, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemV2ItemsIdOrClassNameGet'][0])
    {
        list($response) = $this->getItemV2ItemsIdOrClassNameGetWithHttpInfo($id_or_class_name, $language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getItemV2ItemsIdOrClassNameGetWithHttpInfo
     *
     * Get Item
     *
     * @param  string $id_or_class_name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemV2ItemsIdOrClassNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResponseGetItemV2ItemsIdOrClassNameGet|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemV2ItemsIdOrClassNameGetWithHttpInfo($id_or_class_name, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemV2ItemsIdOrClassNameGet'][0])
    {
        $request = $this->getItemV2ItemsIdOrClassNameGetRequest($id_or_class_name, $language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseGetItemV2ItemsIdOrClassNameGet',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ResponseGetItemV2ItemsIdOrClassNameGet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseGetItemV2ItemsIdOrClassNameGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getItemV2ItemsIdOrClassNameGetAsync
     *
     * Get Item
     *
     * @param  string $id_or_class_name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemV2ItemsIdOrClassNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemV2ItemsIdOrClassNameGetAsync($id_or_class_name, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemV2ItemsIdOrClassNameGet'][0])
    {
        return $this->getItemV2ItemsIdOrClassNameGetAsyncWithHttpInfo($id_or_class_name, $language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemV2ItemsIdOrClassNameGetAsyncWithHttpInfo
     *
     * Get Item
     *
     * @param  string $id_or_class_name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemV2ItemsIdOrClassNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemV2ItemsIdOrClassNameGetAsyncWithHttpInfo($id_or_class_name, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemV2ItemsIdOrClassNameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResponseGetItemV2ItemsIdOrClassNameGet';
        $request = $this->getItemV2ItemsIdOrClassNameGetRequest($id_or_class_name, $language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemV2ItemsIdOrClassNameGet'
     *
     * @param  string $id_or_class_name (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemV2ItemsIdOrClassNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemV2ItemsIdOrClassNameGetRequest($id_or_class_name, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemV2ItemsIdOrClassNameGet'][0])
    {

        // verify the required parameter 'id_or_class_name' is set
        if ($id_or_class_name === null || (is_array($id_or_class_name) && count($id_or_class_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_class_name when calling getItemV2ItemsIdOrClassNameGet'
            );
        }




        $resourcePath = '/v2/items/{id_or_class_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_or_class_name !== null) {
            $resourcePath = str_replace(
                '{' . 'id_or_class_name' . '}',
                ObjectSerializer::toPathValue($id_or_class_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByHeroIdV2ItemsByHeroIdIdGet
     *
     * Get Items By Hero Id
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getItemsByHeroIdV2ItemsByHeroIdIdGet($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'][0])
    {
        list($response) = $this->getItemsByHeroIdV2ItemsByHeroIdIdGetWithHttpInfo($id, $language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getItemsByHeroIdV2ItemsByHeroIdIdGetWithHttpInfo
     *
     * Get Items By Hero Id
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByHeroIdV2ItemsByHeroIdIdGetWithHttpInfo($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'][0])
    {
        $request = $this->getItemsByHeroIdV2ItemsByHeroIdIdGetRequest($id, $language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getItemsByHeroIdV2ItemsByHeroIdIdGetAsync
     *
     * Get Items By Hero Id
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByHeroIdV2ItemsByHeroIdIdGetAsync($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'][0])
    {
        return $this->getItemsByHeroIdV2ItemsByHeroIdIdGetAsyncWithHttpInfo($id, $language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByHeroIdV2ItemsByHeroIdIdGetAsyncWithHttpInfo
     *
     * Get Items By Hero Id
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByHeroIdV2ItemsByHeroIdIdGetAsyncWithHttpInfo($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]';
        $request = $this->getItemsByHeroIdV2ItemsByHeroIdIdGetRequest($id, $language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByHeroIdV2ItemsByHeroIdIdGet'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByHeroIdV2ItemsByHeroIdIdGetRequest($id, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByHeroIdV2ItemsByHeroIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getItemsByHeroIdV2ItemsByHeroIdIdGet'
            );
        }




        $resourcePath = '/v2/items/by-hero-id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet
     *
     * Get Items By Slot Type
     *
     * @param  \OpenAPI\Client\Model\ItemSlotTypeV2 $slot_type slot_type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet($slot_type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'][0])
    {
        list($response) = $this->getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetWithHttpInfo($slot_type, $language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetWithHttpInfo
     *
     * Get Items By Slot Type
     *
     * @param  \OpenAPI\Client\Model\ItemSlotTypeV2 $slot_type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetWithHttpInfo($slot_type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'][0])
    {
        $request = $this->getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest($slot_type, $language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetAsync
     *
     * Get Items By Slot Type
     *
     * @param  \OpenAPI\Client\Model\ItemSlotTypeV2 $slot_type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetAsync($slot_type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'][0])
    {
        return $this->getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetAsyncWithHttpInfo($slot_type, $language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetAsyncWithHttpInfo
     *
     * Get Items By Slot Type
     *
     * @param  \OpenAPI\Client\Model\ItemSlotTypeV2 $slot_type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetAsyncWithHttpInfo($slot_type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]';
        $request = $this->getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest($slot_type, $language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'
     *
     * @param  \OpenAPI\Client\Model\ItemSlotTypeV2 $slot_type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGetRequest($slot_type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'][0])
    {

        // verify the required parameter 'slot_type' is set
        if ($slot_type === null || (is_array($slot_type) && count($slot_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slot_type when calling getItemsBySlotTypeV2ItemsBySlotTypeSlotTypeGet'
            );
        }




        $resourcePath = '/v2/items/by-slot-type/{slot_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($slot_type !== null) {
            $resourcePath = str_replace(
                '{' . 'slot_type' . '}',
                ObjectSerializer::toPathValue($slot_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByTypeV2ItemsByTypeTypeGet
     *
     * Get Items By Type
     *
     * @param  \OpenAPI\Client\Model\ItemTypeV2 $type type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getItemsByTypeV2ItemsByTypeTypeGet($type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'][0])
    {
        list($response) = $this->getItemsByTypeV2ItemsByTypeTypeGetWithHttpInfo($type, $language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getItemsByTypeV2ItemsByTypeTypeGetWithHttpInfo
     *
     * Get Items By Type
     *
     * @param  \OpenAPI\Client\Model\ItemTypeV2 $type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByTypeV2ItemsByTypeTypeGetWithHttpInfo($type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'][0])
    {
        $request = $this->getItemsByTypeV2ItemsByTypeTypeGetRequest($type, $language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getItemsByTypeV2ItemsByTypeTypeGetAsync
     *
     * Get Items By Type
     *
     * @param  \OpenAPI\Client\Model\ItemTypeV2 $type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByTypeV2ItemsByTypeTypeGetAsync($type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'][0])
    {
        return $this->getItemsByTypeV2ItemsByTypeTypeGetAsyncWithHttpInfo($type, $language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByTypeV2ItemsByTypeTypeGetAsyncWithHttpInfo
     *
     * Get Items By Type
     *
     * @param  \OpenAPI\Client\Model\ItemTypeV2 $type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByTypeV2ItemsByTypeTypeGetAsyncWithHttpInfo($type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]';
        $request = $this->getItemsByTypeV2ItemsByTypeTypeGetRequest($type, $language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByTypeV2ItemsByTypeTypeGet'
     *
     * @param  \OpenAPI\Client\Model\ItemTypeV2 $type (required)
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByTypeV2ItemsByTypeTypeGetRequest($type, $language = null, $client_version = null, string $contentType = self::contentTypes['getItemsByTypeV2ItemsByTypeTypeGet'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getItemsByTypeV2ItemsByTypeTypeGet'
            );
        }




        $resourcePath = '/v2/items/by-type/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsV2ItemsGet
     *
     * Get Items
     *
     * @param  \OpenAPI\Client\Model\Language|null $language language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsV2ItemsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getItemsV2ItemsGet($language = null, $client_version = null, string $contentType = self::contentTypes['getItemsV2ItemsGet'][0])
    {
        list($response) = $this->getItemsV2ItemsGetWithHttpInfo($language, $client_version, $contentType);
        return $response;
    }

    /**
     * Operation getItemsV2ItemsGetWithHttpInfo
     *
     * Get Items
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsV2ItemsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsV2ItemsGetWithHttpInfo($language = null, $client_version = null, string $contentType = self::contentTypes['getItemsV2ItemsGet'][0])
    {
        $request = $this->getItemsV2ItemsGetRequest($language, $client_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getItemsV2ItemsGetAsync
     *
     * Get Items
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsV2ItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsV2ItemsGetAsync($language = null, $client_version = null, string $contentType = self::contentTypes['getItemsV2ItemsGet'][0])
    {
        return $this->getItemsV2ItemsGetAsyncWithHttpInfo($language, $client_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsV2ItemsGetAsyncWithHttpInfo
     *
     * Get Items
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsV2ItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsV2ItemsGetAsyncWithHttpInfo($language = null, $client_version = null, string $contentType = self::contentTypes['getItemsV2ItemsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetItemsV2ItemsGet200ResponseInner[]';
        $request = $this->getItemsV2ItemsGetRequest($language, $client_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsV2ItemsGet'
     *
     * @param  \OpenAPI\Client\Model\Language|null $language (optional)
     * @param  \OpenAPI\Client\Model\ValidClientVersions|null $client_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsV2ItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsV2ItemsGetRequest($language = null, $client_version = null, string $contentType = self::contentTypes['getItemsV2ItemsGet'][0])
    {




        $resourcePath = '/v2/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'Language', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_version,
            'client_version', // param base name
            'ValidClientVersions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
