<?php
/**
 * RankImagesV2
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RankImagesV2 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RankImagesV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RankImagesV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'large' => 'string',
        'large_webp' => 'string',
        'large_subrank1' => 'string',
        'large_subrank1_webp' => 'string',
        'large_subrank2' => 'string',
        'large_subrank2_webp' => 'string',
        'large_subrank3' => 'string',
        'large_subrank3_webp' => 'string',
        'large_subrank4' => 'string',
        'large_subrank4_webp' => 'string',
        'large_subrank5' => 'string',
        'large_subrank5_webp' => 'string',
        'large_subrank6' => 'string',
        'large_subrank6_webp' => 'string',
        'small' => 'string',
        'small_webp' => 'string',
        'small_subrank1' => 'string',
        'small_subrank1_webp' => 'string',
        'small_subrank2' => 'string',
        'small_subrank2_webp' => 'string',
        'small_subrank3' => 'string',
        'small_subrank3_webp' => 'string',
        'small_subrank4' => 'string',
        'small_subrank4_webp' => 'string',
        'small_subrank5' => 'string',
        'small_subrank5_webp' => 'string',
        'small_subrank6' => 'string',
        'small_subrank6_webp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'large' => null,
        'large_webp' => null,
        'large_subrank1' => null,
        'large_subrank1_webp' => null,
        'large_subrank2' => null,
        'large_subrank2_webp' => null,
        'large_subrank3' => null,
        'large_subrank3_webp' => null,
        'large_subrank4' => null,
        'large_subrank4_webp' => null,
        'large_subrank5' => null,
        'large_subrank5_webp' => null,
        'large_subrank6' => null,
        'large_subrank6_webp' => null,
        'small' => null,
        'small_webp' => null,
        'small_subrank1' => null,
        'small_subrank1_webp' => null,
        'small_subrank2' => null,
        'small_subrank2_webp' => null,
        'small_subrank3' => null,
        'small_subrank3_webp' => null,
        'small_subrank4' => null,
        'small_subrank4_webp' => null,
        'small_subrank5' => null,
        'small_subrank5_webp' => null,
        'small_subrank6' => null,
        'small_subrank6_webp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'large' => true,
        'large_webp' => true,
        'large_subrank1' => true,
        'large_subrank1_webp' => true,
        'large_subrank2' => true,
        'large_subrank2_webp' => true,
        'large_subrank3' => true,
        'large_subrank3_webp' => true,
        'large_subrank4' => true,
        'large_subrank4_webp' => true,
        'large_subrank5' => true,
        'large_subrank5_webp' => true,
        'large_subrank6' => true,
        'large_subrank6_webp' => true,
        'small' => true,
        'small_webp' => true,
        'small_subrank1' => true,
        'small_subrank1_webp' => true,
        'small_subrank2' => true,
        'small_subrank2_webp' => true,
        'small_subrank3' => true,
        'small_subrank3_webp' => true,
        'small_subrank4' => true,
        'small_subrank4_webp' => true,
        'small_subrank5' => true,
        'small_subrank5_webp' => true,
        'small_subrank6' => true,
        'small_subrank6_webp' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'large' => 'large',
        'large_webp' => 'large_webp',
        'large_subrank1' => 'large_subrank1',
        'large_subrank1_webp' => 'large_subrank1_webp',
        'large_subrank2' => 'large_subrank2',
        'large_subrank2_webp' => 'large_subrank2_webp',
        'large_subrank3' => 'large_subrank3',
        'large_subrank3_webp' => 'large_subrank3_webp',
        'large_subrank4' => 'large_subrank4',
        'large_subrank4_webp' => 'large_subrank4_webp',
        'large_subrank5' => 'large_subrank5',
        'large_subrank5_webp' => 'large_subrank5_webp',
        'large_subrank6' => 'large_subrank6',
        'large_subrank6_webp' => 'large_subrank6_webp',
        'small' => 'small',
        'small_webp' => 'small_webp',
        'small_subrank1' => 'small_subrank1',
        'small_subrank1_webp' => 'small_subrank1_webp',
        'small_subrank2' => 'small_subrank2',
        'small_subrank2_webp' => 'small_subrank2_webp',
        'small_subrank3' => 'small_subrank3',
        'small_subrank3_webp' => 'small_subrank3_webp',
        'small_subrank4' => 'small_subrank4',
        'small_subrank4_webp' => 'small_subrank4_webp',
        'small_subrank5' => 'small_subrank5',
        'small_subrank5_webp' => 'small_subrank5_webp',
        'small_subrank6' => 'small_subrank6',
        'small_subrank6_webp' => 'small_subrank6_webp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'large' => 'setLarge',
        'large_webp' => 'setLargeWebp',
        'large_subrank1' => 'setLargeSubrank1',
        'large_subrank1_webp' => 'setLargeSubrank1Webp',
        'large_subrank2' => 'setLargeSubrank2',
        'large_subrank2_webp' => 'setLargeSubrank2Webp',
        'large_subrank3' => 'setLargeSubrank3',
        'large_subrank3_webp' => 'setLargeSubrank3Webp',
        'large_subrank4' => 'setLargeSubrank4',
        'large_subrank4_webp' => 'setLargeSubrank4Webp',
        'large_subrank5' => 'setLargeSubrank5',
        'large_subrank5_webp' => 'setLargeSubrank5Webp',
        'large_subrank6' => 'setLargeSubrank6',
        'large_subrank6_webp' => 'setLargeSubrank6Webp',
        'small' => 'setSmall',
        'small_webp' => 'setSmallWebp',
        'small_subrank1' => 'setSmallSubrank1',
        'small_subrank1_webp' => 'setSmallSubrank1Webp',
        'small_subrank2' => 'setSmallSubrank2',
        'small_subrank2_webp' => 'setSmallSubrank2Webp',
        'small_subrank3' => 'setSmallSubrank3',
        'small_subrank3_webp' => 'setSmallSubrank3Webp',
        'small_subrank4' => 'setSmallSubrank4',
        'small_subrank4_webp' => 'setSmallSubrank4Webp',
        'small_subrank5' => 'setSmallSubrank5',
        'small_subrank5_webp' => 'setSmallSubrank5Webp',
        'small_subrank6' => 'setSmallSubrank6',
        'small_subrank6_webp' => 'setSmallSubrank6Webp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'large' => 'getLarge',
        'large_webp' => 'getLargeWebp',
        'large_subrank1' => 'getLargeSubrank1',
        'large_subrank1_webp' => 'getLargeSubrank1Webp',
        'large_subrank2' => 'getLargeSubrank2',
        'large_subrank2_webp' => 'getLargeSubrank2Webp',
        'large_subrank3' => 'getLargeSubrank3',
        'large_subrank3_webp' => 'getLargeSubrank3Webp',
        'large_subrank4' => 'getLargeSubrank4',
        'large_subrank4_webp' => 'getLargeSubrank4Webp',
        'large_subrank5' => 'getLargeSubrank5',
        'large_subrank5_webp' => 'getLargeSubrank5Webp',
        'large_subrank6' => 'getLargeSubrank6',
        'large_subrank6_webp' => 'getLargeSubrank6Webp',
        'small' => 'getSmall',
        'small_webp' => 'getSmallWebp',
        'small_subrank1' => 'getSmallSubrank1',
        'small_subrank1_webp' => 'getSmallSubrank1Webp',
        'small_subrank2' => 'getSmallSubrank2',
        'small_subrank2_webp' => 'getSmallSubrank2Webp',
        'small_subrank3' => 'getSmallSubrank3',
        'small_subrank3_webp' => 'getSmallSubrank3Webp',
        'small_subrank4' => 'getSmallSubrank4',
        'small_subrank4_webp' => 'getSmallSubrank4Webp',
        'small_subrank5' => 'getSmallSubrank5',
        'small_subrank5_webp' => 'getSmallSubrank5Webp',
        'small_subrank6' => 'getSmallSubrank6',
        'small_subrank6_webp' => 'getSmallSubrank6Webp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('large', $data ?? [], null);
        $this->setIfExists('large_webp', $data ?? [], null);
        $this->setIfExists('large_subrank1', $data ?? [], null);
        $this->setIfExists('large_subrank1_webp', $data ?? [], null);
        $this->setIfExists('large_subrank2', $data ?? [], null);
        $this->setIfExists('large_subrank2_webp', $data ?? [], null);
        $this->setIfExists('large_subrank3', $data ?? [], null);
        $this->setIfExists('large_subrank3_webp', $data ?? [], null);
        $this->setIfExists('large_subrank4', $data ?? [], null);
        $this->setIfExists('large_subrank4_webp', $data ?? [], null);
        $this->setIfExists('large_subrank5', $data ?? [], null);
        $this->setIfExists('large_subrank5_webp', $data ?? [], null);
        $this->setIfExists('large_subrank6', $data ?? [], null);
        $this->setIfExists('large_subrank6_webp', $data ?? [], null);
        $this->setIfExists('small', $data ?? [], null);
        $this->setIfExists('small_webp', $data ?? [], null);
        $this->setIfExists('small_subrank1', $data ?? [], null);
        $this->setIfExists('small_subrank1_webp', $data ?? [], null);
        $this->setIfExists('small_subrank2', $data ?? [], null);
        $this->setIfExists('small_subrank2_webp', $data ?? [], null);
        $this->setIfExists('small_subrank3', $data ?? [], null);
        $this->setIfExists('small_subrank3_webp', $data ?? [], null);
        $this->setIfExists('small_subrank4', $data ?? [], null);
        $this->setIfExists('small_subrank4_webp', $data ?? [], null);
        $this->setIfExists('small_subrank5', $data ?? [], null);
        $this->setIfExists('small_subrank5_webp', $data ?? [], null);
        $this->setIfExists('small_subrank6', $data ?? [], null);
        $this->setIfExists('small_subrank6_webp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets large
     *
     * @return string|null
     */
    public function getLarge()
    {
        return $this->container['large'];
    }

    /**
     * Sets large
     *
     * @param string|null $large large
     *
     * @return self
     */
    public function setLarge($large)
    {
        if (is_null($large)) {
            array_push($this->openAPINullablesSetToNull, 'large');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large'] = $large;

        return $this;
    }

    /**
     * Gets large_webp
     *
     * @return string|null
     */
    public function getLargeWebp()
    {
        return $this->container['large_webp'];
    }

    /**
     * Sets large_webp
     *
     * @param string|null $large_webp large_webp
     *
     * @return self
     */
    public function setLargeWebp($large_webp)
    {
        if (is_null($large_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_webp'] = $large_webp;

        return $this;
    }

    /**
     * Gets large_subrank1
     *
     * @return string|null
     */
    public function getLargeSubrank1()
    {
        return $this->container['large_subrank1'];
    }

    /**
     * Sets large_subrank1
     *
     * @param string|null $large_subrank1 large_subrank1
     *
     * @return self
     */
    public function setLargeSubrank1($large_subrank1)
    {
        if (is_null($large_subrank1)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank1'] = $large_subrank1;

        return $this;
    }

    /**
     * Gets large_subrank1_webp
     *
     * @return string|null
     */
    public function getLargeSubrank1Webp()
    {
        return $this->container['large_subrank1_webp'];
    }

    /**
     * Sets large_subrank1_webp
     *
     * @param string|null $large_subrank1_webp large_subrank1_webp
     *
     * @return self
     */
    public function setLargeSubrank1Webp($large_subrank1_webp)
    {
        if (is_null($large_subrank1_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank1_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank1_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank1_webp'] = $large_subrank1_webp;

        return $this;
    }

    /**
     * Gets large_subrank2
     *
     * @return string|null
     */
    public function getLargeSubrank2()
    {
        return $this->container['large_subrank2'];
    }

    /**
     * Sets large_subrank2
     *
     * @param string|null $large_subrank2 large_subrank2
     *
     * @return self
     */
    public function setLargeSubrank2($large_subrank2)
    {
        if (is_null($large_subrank2)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank2'] = $large_subrank2;

        return $this;
    }

    /**
     * Gets large_subrank2_webp
     *
     * @return string|null
     */
    public function getLargeSubrank2Webp()
    {
        return $this->container['large_subrank2_webp'];
    }

    /**
     * Sets large_subrank2_webp
     *
     * @param string|null $large_subrank2_webp large_subrank2_webp
     *
     * @return self
     */
    public function setLargeSubrank2Webp($large_subrank2_webp)
    {
        if (is_null($large_subrank2_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank2_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank2_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank2_webp'] = $large_subrank2_webp;

        return $this;
    }

    /**
     * Gets large_subrank3
     *
     * @return string|null
     */
    public function getLargeSubrank3()
    {
        return $this->container['large_subrank3'];
    }

    /**
     * Sets large_subrank3
     *
     * @param string|null $large_subrank3 large_subrank3
     *
     * @return self
     */
    public function setLargeSubrank3($large_subrank3)
    {
        if (is_null($large_subrank3)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank3'] = $large_subrank3;

        return $this;
    }

    /**
     * Gets large_subrank3_webp
     *
     * @return string|null
     */
    public function getLargeSubrank3Webp()
    {
        return $this->container['large_subrank3_webp'];
    }

    /**
     * Sets large_subrank3_webp
     *
     * @param string|null $large_subrank3_webp large_subrank3_webp
     *
     * @return self
     */
    public function setLargeSubrank3Webp($large_subrank3_webp)
    {
        if (is_null($large_subrank3_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank3_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank3_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank3_webp'] = $large_subrank3_webp;

        return $this;
    }

    /**
     * Gets large_subrank4
     *
     * @return string|null
     */
    public function getLargeSubrank4()
    {
        return $this->container['large_subrank4'];
    }

    /**
     * Sets large_subrank4
     *
     * @param string|null $large_subrank4 large_subrank4
     *
     * @return self
     */
    public function setLargeSubrank4($large_subrank4)
    {
        if (is_null($large_subrank4)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank4'] = $large_subrank4;

        return $this;
    }

    /**
     * Gets large_subrank4_webp
     *
     * @return string|null
     */
    public function getLargeSubrank4Webp()
    {
        return $this->container['large_subrank4_webp'];
    }

    /**
     * Sets large_subrank4_webp
     *
     * @param string|null $large_subrank4_webp large_subrank4_webp
     *
     * @return self
     */
    public function setLargeSubrank4Webp($large_subrank4_webp)
    {
        if (is_null($large_subrank4_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank4_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank4_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank4_webp'] = $large_subrank4_webp;

        return $this;
    }

    /**
     * Gets large_subrank5
     *
     * @return string|null
     */
    public function getLargeSubrank5()
    {
        return $this->container['large_subrank5'];
    }

    /**
     * Sets large_subrank5
     *
     * @param string|null $large_subrank5 large_subrank5
     *
     * @return self
     */
    public function setLargeSubrank5($large_subrank5)
    {
        if (is_null($large_subrank5)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank5'] = $large_subrank5;

        return $this;
    }

    /**
     * Gets large_subrank5_webp
     *
     * @return string|null
     */
    public function getLargeSubrank5Webp()
    {
        return $this->container['large_subrank5_webp'];
    }

    /**
     * Sets large_subrank5_webp
     *
     * @param string|null $large_subrank5_webp large_subrank5_webp
     *
     * @return self
     */
    public function setLargeSubrank5Webp($large_subrank5_webp)
    {
        if (is_null($large_subrank5_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank5_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank5_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank5_webp'] = $large_subrank5_webp;

        return $this;
    }

    /**
     * Gets large_subrank6
     *
     * @return string|null
     */
    public function getLargeSubrank6()
    {
        return $this->container['large_subrank6'];
    }

    /**
     * Sets large_subrank6
     *
     * @param string|null $large_subrank6 large_subrank6
     *
     * @return self
     */
    public function setLargeSubrank6($large_subrank6)
    {
        if (is_null($large_subrank6)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank6'] = $large_subrank6;

        return $this;
    }

    /**
     * Gets large_subrank6_webp
     *
     * @return string|null
     */
    public function getLargeSubrank6Webp()
    {
        return $this->container['large_subrank6_webp'];
    }

    /**
     * Sets large_subrank6_webp
     *
     * @param string|null $large_subrank6_webp large_subrank6_webp
     *
     * @return self
     */
    public function setLargeSubrank6Webp($large_subrank6_webp)
    {
        if (is_null($large_subrank6_webp)) {
            array_push($this->openAPINullablesSetToNull, 'large_subrank6_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('large_subrank6_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['large_subrank6_webp'] = $large_subrank6_webp;

        return $this;
    }

    /**
     * Gets small
     *
     * @return string|null
     */
    public function getSmall()
    {
        return $this->container['small'];
    }

    /**
     * Sets small
     *
     * @param string|null $small small
     *
     * @return self
     */
    public function setSmall($small)
    {
        if (is_null($small)) {
            array_push($this->openAPINullablesSetToNull, 'small');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small'] = $small;

        return $this;
    }

    /**
     * Gets small_webp
     *
     * @return string|null
     */
    public function getSmallWebp()
    {
        return $this->container['small_webp'];
    }

    /**
     * Sets small_webp
     *
     * @param string|null $small_webp small_webp
     *
     * @return self
     */
    public function setSmallWebp($small_webp)
    {
        if (is_null($small_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_webp'] = $small_webp;

        return $this;
    }

    /**
     * Gets small_subrank1
     *
     * @return string|null
     */
    public function getSmallSubrank1()
    {
        return $this->container['small_subrank1'];
    }

    /**
     * Sets small_subrank1
     *
     * @param string|null $small_subrank1 small_subrank1
     *
     * @return self
     */
    public function setSmallSubrank1($small_subrank1)
    {
        if (is_null($small_subrank1)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank1'] = $small_subrank1;

        return $this;
    }

    /**
     * Gets small_subrank1_webp
     *
     * @return string|null
     */
    public function getSmallSubrank1Webp()
    {
        return $this->container['small_subrank1_webp'];
    }

    /**
     * Sets small_subrank1_webp
     *
     * @param string|null $small_subrank1_webp small_subrank1_webp
     *
     * @return self
     */
    public function setSmallSubrank1Webp($small_subrank1_webp)
    {
        if (is_null($small_subrank1_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank1_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank1_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank1_webp'] = $small_subrank1_webp;

        return $this;
    }

    /**
     * Gets small_subrank2
     *
     * @return string|null
     */
    public function getSmallSubrank2()
    {
        return $this->container['small_subrank2'];
    }

    /**
     * Sets small_subrank2
     *
     * @param string|null $small_subrank2 small_subrank2
     *
     * @return self
     */
    public function setSmallSubrank2($small_subrank2)
    {
        if (is_null($small_subrank2)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank2'] = $small_subrank2;

        return $this;
    }

    /**
     * Gets small_subrank2_webp
     *
     * @return string|null
     */
    public function getSmallSubrank2Webp()
    {
        return $this->container['small_subrank2_webp'];
    }

    /**
     * Sets small_subrank2_webp
     *
     * @param string|null $small_subrank2_webp small_subrank2_webp
     *
     * @return self
     */
    public function setSmallSubrank2Webp($small_subrank2_webp)
    {
        if (is_null($small_subrank2_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank2_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank2_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank2_webp'] = $small_subrank2_webp;

        return $this;
    }

    /**
     * Gets small_subrank3
     *
     * @return string|null
     */
    public function getSmallSubrank3()
    {
        return $this->container['small_subrank3'];
    }

    /**
     * Sets small_subrank3
     *
     * @param string|null $small_subrank3 small_subrank3
     *
     * @return self
     */
    public function setSmallSubrank3($small_subrank3)
    {
        if (is_null($small_subrank3)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank3'] = $small_subrank3;

        return $this;
    }

    /**
     * Gets small_subrank3_webp
     *
     * @return string|null
     */
    public function getSmallSubrank3Webp()
    {
        return $this->container['small_subrank3_webp'];
    }

    /**
     * Sets small_subrank3_webp
     *
     * @param string|null $small_subrank3_webp small_subrank3_webp
     *
     * @return self
     */
    public function setSmallSubrank3Webp($small_subrank3_webp)
    {
        if (is_null($small_subrank3_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank3_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank3_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank3_webp'] = $small_subrank3_webp;

        return $this;
    }

    /**
     * Gets small_subrank4
     *
     * @return string|null
     */
    public function getSmallSubrank4()
    {
        return $this->container['small_subrank4'];
    }

    /**
     * Sets small_subrank4
     *
     * @param string|null $small_subrank4 small_subrank4
     *
     * @return self
     */
    public function setSmallSubrank4($small_subrank4)
    {
        if (is_null($small_subrank4)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank4'] = $small_subrank4;

        return $this;
    }

    /**
     * Gets small_subrank4_webp
     *
     * @return string|null
     */
    public function getSmallSubrank4Webp()
    {
        return $this->container['small_subrank4_webp'];
    }

    /**
     * Sets small_subrank4_webp
     *
     * @param string|null $small_subrank4_webp small_subrank4_webp
     *
     * @return self
     */
    public function setSmallSubrank4Webp($small_subrank4_webp)
    {
        if (is_null($small_subrank4_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank4_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank4_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank4_webp'] = $small_subrank4_webp;

        return $this;
    }

    /**
     * Gets small_subrank5
     *
     * @return string|null
     */
    public function getSmallSubrank5()
    {
        return $this->container['small_subrank5'];
    }

    /**
     * Sets small_subrank5
     *
     * @param string|null $small_subrank5 small_subrank5
     *
     * @return self
     */
    public function setSmallSubrank5($small_subrank5)
    {
        if (is_null($small_subrank5)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank5'] = $small_subrank5;

        return $this;
    }

    /**
     * Gets small_subrank5_webp
     *
     * @return string|null
     */
    public function getSmallSubrank5Webp()
    {
        return $this->container['small_subrank5_webp'];
    }

    /**
     * Sets small_subrank5_webp
     *
     * @param string|null $small_subrank5_webp small_subrank5_webp
     *
     * @return self
     */
    public function setSmallSubrank5Webp($small_subrank5_webp)
    {
        if (is_null($small_subrank5_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank5_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank5_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank5_webp'] = $small_subrank5_webp;

        return $this;
    }

    /**
     * Gets small_subrank6
     *
     * @return string|null
     */
    public function getSmallSubrank6()
    {
        return $this->container['small_subrank6'];
    }

    /**
     * Sets small_subrank6
     *
     * @param string|null $small_subrank6 small_subrank6
     *
     * @return self
     */
    public function setSmallSubrank6($small_subrank6)
    {
        if (is_null($small_subrank6)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank6'] = $small_subrank6;

        return $this;
    }

    /**
     * Gets small_subrank6_webp
     *
     * @return string|null
     */
    public function getSmallSubrank6Webp()
    {
        return $this->container['small_subrank6_webp'];
    }

    /**
     * Sets small_subrank6_webp
     *
     * @param string|null $small_subrank6_webp small_subrank6_webp
     *
     * @return self
     */
    public function setSmallSubrank6Webp($small_subrank6_webp)
    {
        if (is_null($small_subrank6_webp)) {
            array_push($this->openAPINullablesSetToNull, 'small_subrank6_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_subrank6_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_subrank6_webp'] = $small_subrank6_webp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


