<?php
/**
 * RawWeaponInfoV2Input
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RawWeaponInfoV2Input Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RawWeaponInfoV2Input implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RawWeaponInfoV2-Input';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'm_b_can_zoom' => 'bool',
        'm_fl_bullet_damage' => 'float',
        'm_fl_bullet_gravity_scale' => 'float',
        'm_fl_bullet_inherit_shooter_velocity_scale' => 'float',
        'm_fl_bullet_lifetime' => 'float',
        'm_fl_bullet_radius' => 'float',
        'm_fl_bullet_radius_vs_world' => 'float',
        'm_fl_bullet_reflect_amount' => 'float',
        'm_fl_bullet_reflect_scale' => 'float',
        'm_fl_bullet_whiz_distance' => 'float',
        'm_fl_burst_shot_cooldown' => 'float',
        'm_fl_crit_bonus_against_npcs' => 'float',
        'm_fl_crit_bonus_end' => 'float',
        'm_fl_crit_bonus_end_range' => 'float',
        'm_fl_crit_bonus_start' => 'float',
        'm_fl_crit_bonus_start_range' => 'float',
        'm_fl_cycle_time' => 'float',
        'm_fl_intra_burst_cycle_time' => 'float',
        'm_fl_max_spin_cycle_time' => 'float',
        'm_fl_damage_falloff_bias' => 'float',
        'm_fl_damage_falloff_end_range' => 'float',
        'm_fl_damage_falloff_end_scale' => 'float',
        'm_fl_damage_falloff_start_range' => 'float',
        'm_fl_damage_falloff_start_scale' => 'float',
        'm_fl_horizontal_punch' => 'float',
        'm_fl_range' => 'float',
        'm_fl_recoil_recovery_delay_factor' => 'float',
        'm_fl_recoil_recovery_speed' => 'float',
        'm_fl_recoil_shot_index_recovery_time_factor' => 'float',
        'm_fl_recoil_speed' => 'float',
        'm_fl_reload_move_speed' => 'float',
        'm_fl_scatter_yaw_scale' => 'float',
        'm_aiming_shoot_spread_penalty' => '\OpenAPI\Client\Model\MAimingshootspreadpenalty',
        'm_standing_shoot_spread_penalty' => '\OpenAPI\Client\Model\MStandingshootspreadpenalty',
        'm_fl_shoot_move_speed_percent' => 'float',
        'm_fl_shoot_spread_penalty_decay' => 'float',
        'm_fl_shoot_spread_penalty_decay_delay' => 'float',
        'm_fl_shoot_spread_penalty_per_shot' => 'float',
        'm_fl_shooting_up_spread_penalty' => 'float',
        'm_fl_vertical_punch' => 'float',
        'm_fl_zoom_fov' => 'float',
        'm_fl_zoom_move_speed_percent' => 'float',
        'm_i_bullets' => 'int',
        'm_i_burst_shot_count' => 'int',
        'm_i_clip_size' => 'int',
        'm_fl_spread' => 'float',
        'm_fl_standing_spread' => 'float',
        'm_fl_low_ammo_indicator_threshold' => 'float',
        'm_fl_recoil_seed' => 'float',
        'm_fl_reload_duration' => 'float',
        'm_bullet_speed_curve' => '\OpenAPI\Client\Model\RawItemWeaponInfoBulletSpeedCurveV2Input',
        'm_horizontal_recoil' => '\OpenAPI\Client\Model\RawWeaponInfoHorizontalRecoilV2Input',
        'm_vertical_recoil' => '\OpenAPI\Client\Model\RawWeaponInfoVerticalRecoilV2Input'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'm_b_can_zoom' => null,
        'm_fl_bullet_damage' => null,
        'm_fl_bullet_gravity_scale' => null,
        'm_fl_bullet_inherit_shooter_velocity_scale' => null,
        'm_fl_bullet_lifetime' => null,
        'm_fl_bullet_radius' => null,
        'm_fl_bullet_radius_vs_world' => null,
        'm_fl_bullet_reflect_amount' => null,
        'm_fl_bullet_reflect_scale' => null,
        'm_fl_bullet_whiz_distance' => null,
        'm_fl_burst_shot_cooldown' => null,
        'm_fl_crit_bonus_against_npcs' => null,
        'm_fl_crit_bonus_end' => null,
        'm_fl_crit_bonus_end_range' => null,
        'm_fl_crit_bonus_start' => null,
        'm_fl_crit_bonus_start_range' => null,
        'm_fl_cycle_time' => null,
        'm_fl_intra_burst_cycle_time' => null,
        'm_fl_max_spin_cycle_time' => null,
        'm_fl_damage_falloff_bias' => null,
        'm_fl_damage_falloff_end_range' => null,
        'm_fl_damage_falloff_end_scale' => null,
        'm_fl_damage_falloff_start_range' => null,
        'm_fl_damage_falloff_start_scale' => null,
        'm_fl_horizontal_punch' => null,
        'm_fl_range' => null,
        'm_fl_recoil_recovery_delay_factor' => null,
        'm_fl_recoil_recovery_speed' => null,
        'm_fl_recoil_shot_index_recovery_time_factor' => null,
        'm_fl_recoil_speed' => null,
        'm_fl_reload_move_speed' => null,
        'm_fl_scatter_yaw_scale' => null,
        'm_aiming_shoot_spread_penalty' => null,
        'm_standing_shoot_spread_penalty' => null,
        'm_fl_shoot_move_speed_percent' => null,
        'm_fl_shoot_spread_penalty_decay' => null,
        'm_fl_shoot_spread_penalty_decay_delay' => null,
        'm_fl_shoot_spread_penalty_per_shot' => null,
        'm_fl_shooting_up_spread_penalty' => null,
        'm_fl_vertical_punch' => null,
        'm_fl_zoom_fov' => null,
        'm_fl_zoom_move_speed_percent' => null,
        'm_i_bullets' => null,
        'm_i_burst_shot_count' => null,
        'm_i_clip_size' => null,
        'm_fl_spread' => null,
        'm_fl_standing_spread' => null,
        'm_fl_low_ammo_indicator_threshold' => null,
        'm_fl_recoil_seed' => null,
        'm_fl_reload_duration' => null,
        'm_bullet_speed_curve' => null,
        'm_horizontal_recoil' => null,
        'm_vertical_recoil' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'm_b_can_zoom' => true,
        'm_fl_bullet_damage' => true,
        'm_fl_bullet_gravity_scale' => true,
        'm_fl_bullet_inherit_shooter_velocity_scale' => true,
        'm_fl_bullet_lifetime' => true,
        'm_fl_bullet_radius' => true,
        'm_fl_bullet_radius_vs_world' => true,
        'm_fl_bullet_reflect_amount' => true,
        'm_fl_bullet_reflect_scale' => true,
        'm_fl_bullet_whiz_distance' => true,
        'm_fl_burst_shot_cooldown' => true,
        'm_fl_crit_bonus_against_npcs' => true,
        'm_fl_crit_bonus_end' => true,
        'm_fl_crit_bonus_end_range' => true,
        'm_fl_crit_bonus_start' => true,
        'm_fl_crit_bonus_start_range' => true,
        'm_fl_cycle_time' => true,
        'm_fl_intra_burst_cycle_time' => true,
        'm_fl_max_spin_cycle_time' => true,
        'm_fl_damage_falloff_bias' => true,
        'm_fl_damage_falloff_end_range' => true,
        'm_fl_damage_falloff_end_scale' => true,
        'm_fl_damage_falloff_start_range' => true,
        'm_fl_damage_falloff_start_scale' => true,
        'm_fl_horizontal_punch' => true,
        'm_fl_range' => true,
        'm_fl_recoil_recovery_delay_factor' => true,
        'm_fl_recoil_recovery_speed' => true,
        'm_fl_recoil_shot_index_recovery_time_factor' => true,
        'm_fl_recoil_speed' => true,
        'm_fl_reload_move_speed' => true,
        'm_fl_scatter_yaw_scale' => true,
        'm_aiming_shoot_spread_penalty' => true,
        'm_standing_shoot_spread_penalty' => true,
        'm_fl_shoot_move_speed_percent' => true,
        'm_fl_shoot_spread_penalty_decay' => true,
        'm_fl_shoot_spread_penalty_decay_delay' => true,
        'm_fl_shoot_spread_penalty_per_shot' => true,
        'm_fl_shooting_up_spread_penalty' => true,
        'm_fl_vertical_punch' => true,
        'm_fl_zoom_fov' => true,
        'm_fl_zoom_move_speed_percent' => true,
        'm_i_bullets' => true,
        'm_i_burst_shot_count' => true,
        'm_i_clip_size' => true,
        'm_fl_spread' => true,
        'm_fl_standing_spread' => true,
        'm_fl_low_ammo_indicator_threshold' => true,
        'm_fl_recoil_seed' => true,
        'm_fl_reload_duration' => true,
        'm_bullet_speed_curve' => true,
        'm_horizontal_recoil' => true,
        'm_vertical_recoil' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'm_b_can_zoom' => 'm_bCanZoom',
        'm_fl_bullet_damage' => 'm_flBulletDamage',
        'm_fl_bullet_gravity_scale' => 'm_flBulletGravityScale',
        'm_fl_bullet_inherit_shooter_velocity_scale' => 'm_flBulletInheritShooterVelocityScale',
        'm_fl_bullet_lifetime' => 'm_flBulletLifetime',
        'm_fl_bullet_radius' => 'm_flBulletRadius',
        'm_fl_bullet_radius_vs_world' => 'm_flBulletRadiusVsWorld',
        'm_fl_bullet_reflect_amount' => 'm_flBulletReflectAmount',
        'm_fl_bullet_reflect_scale' => 'm_flBulletReflectScale',
        'm_fl_bullet_whiz_distance' => 'm_flBulletWhizDistance',
        'm_fl_burst_shot_cooldown' => 'm_flBurstShotCooldown',
        'm_fl_crit_bonus_against_npcs' => 'm_flCritBonusAgainstNpcs',
        'm_fl_crit_bonus_end' => 'm_flCritBonusEnd',
        'm_fl_crit_bonus_end_range' => 'm_flCritBonusEndRange',
        'm_fl_crit_bonus_start' => 'm_flCritBonusStart',
        'm_fl_crit_bonus_start_range' => 'm_flCritBonusStartRange',
        'm_fl_cycle_time' => 'm_flCycleTime',
        'm_fl_intra_burst_cycle_time' => 'm_flIntraBurstCycleTime',
        'm_fl_max_spin_cycle_time' => 'm_flMaxSpinCycleTime',
        'm_fl_damage_falloff_bias' => 'm_flDamageFalloffBias',
        'm_fl_damage_falloff_end_range' => 'm_flDamageFalloffEndRange',
        'm_fl_damage_falloff_end_scale' => 'm_flDamageFalloffEndScale',
        'm_fl_damage_falloff_start_range' => 'm_flDamageFalloffStartRange',
        'm_fl_damage_falloff_start_scale' => 'm_flDamageFalloffStartScale',
        'm_fl_horizontal_punch' => 'm_flHorizontalPunch',
        'm_fl_range' => 'm_flRange',
        'm_fl_recoil_recovery_delay_factor' => 'm_flRecoilRecoveryDelayFactor',
        'm_fl_recoil_recovery_speed' => 'm_flRecoilRecoverySpeed',
        'm_fl_recoil_shot_index_recovery_time_factor' => 'm_flRecoilShotIndexRecoveryTimeFactor',
        'm_fl_recoil_speed' => 'm_flRecoilSpeed',
        'm_fl_reload_move_speed' => 'm_flReloadMoveSpeed',
        'm_fl_scatter_yaw_scale' => 'm_flScatterYawScale',
        'm_aiming_shoot_spread_penalty' => 'm_AimingShootSpreadPenalty',
        'm_standing_shoot_spread_penalty' => 'm_StandingShootSpreadPenalty',
        'm_fl_shoot_move_speed_percent' => 'm_flShootMoveSpeedPercent',
        'm_fl_shoot_spread_penalty_decay' => 'm_flShootSpreadPenaltyDecay',
        'm_fl_shoot_spread_penalty_decay_delay' => 'm_flShootSpreadPenaltyDecayDelay',
        'm_fl_shoot_spread_penalty_per_shot' => 'm_flShootSpreadPenaltyPerShot',
        'm_fl_shooting_up_spread_penalty' => 'm_flShootingUpSpreadPenalty',
        'm_fl_vertical_punch' => 'm_flVerticalPunch',
        'm_fl_zoom_fov' => 'm_flZoomFov',
        'm_fl_zoom_move_speed_percent' => 'm_flZoomMoveSpeedPercent',
        'm_i_bullets' => 'm_iBullets',
        'm_i_burst_shot_count' => 'm_iBurstShotCount',
        'm_i_clip_size' => 'm_iClipSize',
        'm_fl_spread' => 'm_flSpread',
        'm_fl_standing_spread' => 'm_flStandingSpread',
        'm_fl_low_ammo_indicator_threshold' => 'm_flLowAmmoIndicatorThreshold',
        'm_fl_recoil_seed' => 'm_flRecoilSeed',
        'm_fl_reload_duration' => 'm_flReloadDuration',
        'm_bullet_speed_curve' => 'm_BulletSpeedCurve',
        'm_horizontal_recoil' => 'm_HorizontalRecoil',
        'm_vertical_recoil' => 'm_VerticalRecoil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'm_b_can_zoom' => 'setMBCanZoom',
        'm_fl_bullet_damage' => 'setMFlBulletDamage',
        'm_fl_bullet_gravity_scale' => 'setMFlBulletGravityScale',
        'm_fl_bullet_inherit_shooter_velocity_scale' => 'setMFlBulletInheritShooterVelocityScale',
        'm_fl_bullet_lifetime' => 'setMFlBulletLifetime',
        'm_fl_bullet_radius' => 'setMFlBulletRadius',
        'm_fl_bullet_radius_vs_world' => 'setMFlBulletRadiusVsWorld',
        'm_fl_bullet_reflect_amount' => 'setMFlBulletReflectAmount',
        'm_fl_bullet_reflect_scale' => 'setMFlBulletReflectScale',
        'm_fl_bullet_whiz_distance' => 'setMFlBulletWhizDistance',
        'm_fl_burst_shot_cooldown' => 'setMFlBurstShotCooldown',
        'm_fl_crit_bonus_against_npcs' => 'setMFlCritBonusAgainstNpcs',
        'm_fl_crit_bonus_end' => 'setMFlCritBonusEnd',
        'm_fl_crit_bonus_end_range' => 'setMFlCritBonusEndRange',
        'm_fl_crit_bonus_start' => 'setMFlCritBonusStart',
        'm_fl_crit_bonus_start_range' => 'setMFlCritBonusStartRange',
        'm_fl_cycle_time' => 'setMFlCycleTime',
        'm_fl_intra_burst_cycle_time' => 'setMFlIntraBurstCycleTime',
        'm_fl_max_spin_cycle_time' => 'setMFlMaxSpinCycleTime',
        'm_fl_damage_falloff_bias' => 'setMFlDamageFalloffBias',
        'm_fl_damage_falloff_end_range' => 'setMFlDamageFalloffEndRange',
        'm_fl_damage_falloff_end_scale' => 'setMFlDamageFalloffEndScale',
        'm_fl_damage_falloff_start_range' => 'setMFlDamageFalloffStartRange',
        'm_fl_damage_falloff_start_scale' => 'setMFlDamageFalloffStartScale',
        'm_fl_horizontal_punch' => 'setMFlHorizontalPunch',
        'm_fl_range' => 'setMFlRange',
        'm_fl_recoil_recovery_delay_factor' => 'setMFlRecoilRecoveryDelayFactor',
        'm_fl_recoil_recovery_speed' => 'setMFlRecoilRecoverySpeed',
        'm_fl_recoil_shot_index_recovery_time_factor' => 'setMFlRecoilShotIndexRecoveryTimeFactor',
        'm_fl_recoil_speed' => 'setMFlRecoilSpeed',
        'm_fl_reload_move_speed' => 'setMFlReloadMoveSpeed',
        'm_fl_scatter_yaw_scale' => 'setMFlScatterYawScale',
        'm_aiming_shoot_spread_penalty' => 'setMAimingShootSpreadPenalty',
        'm_standing_shoot_spread_penalty' => 'setMStandingShootSpreadPenalty',
        'm_fl_shoot_move_speed_percent' => 'setMFlShootMoveSpeedPercent',
        'm_fl_shoot_spread_penalty_decay' => 'setMFlShootSpreadPenaltyDecay',
        'm_fl_shoot_spread_penalty_decay_delay' => 'setMFlShootSpreadPenaltyDecayDelay',
        'm_fl_shoot_spread_penalty_per_shot' => 'setMFlShootSpreadPenaltyPerShot',
        'm_fl_shooting_up_spread_penalty' => 'setMFlShootingUpSpreadPenalty',
        'm_fl_vertical_punch' => 'setMFlVerticalPunch',
        'm_fl_zoom_fov' => 'setMFlZoomFov',
        'm_fl_zoom_move_speed_percent' => 'setMFlZoomMoveSpeedPercent',
        'm_i_bullets' => 'setMIBullets',
        'm_i_burst_shot_count' => 'setMIBurstShotCount',
        'm_i_clip_size' => 'setMIClipSize',
        'm_fl_spread' => 'setMFlSpread',
        'm_fl_standing_spread' => 'setMFlStandingSpread',
        'm_fl_low_ammo_indicator_threshold' => 'setMFlLowAmmoIndicatorThreshold',
        'm_fl_recoil_seed' => 'setMFlRecoilSeed',
        'm_fl_reload_duration' => 'setMFlReloadDuration',
        'm_bullet_speed_curve' => 'setMBulletSpeedCurve',
        'm_horizontal_recoil' => 'setMHorizontalRecoil',
        'm_vertical_recoil' => 'setMVerticalRecoil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'm_b_can_zoom' => 'getMBCanZoom',
        'm_fl_bullet_damage' => 'getMFlBulletDamage',
        'm_fl_bullet_gravity_scale' => 'getMFlBulletGravityScale',
        'm_fl_bullet_inherit_shooter_velocity_scale' => 'getMFlBulletInheritShooterVelocityScale',
        'm_fl_bullet_lifetime' => 'getMFlBulletLifetime',
        'm_fl_bullet_radius' => 'getMFlBulletRadius',
        'm_fl_bullet_radius_vs_world' => 'getMFlBulletRadiusVsWorld',
        'm_fl_bullet_reflect_amount' => 'getMFlBulletReflectAmount',
        'm_fl_bullet_reflect_scale' => 'getMFlBulletReflectScale',
        'm_fl_bullet_whiz_distance' => 'getMFlBulletWhizDistance',
        'm_fl_burst_shot_cooldown' => 'getMFlBurstShotCooldown',
        'm_fl_crit_bonus_against_npcs' => 'getMFlCritBonusAgainstNpcs',
        'm_fl_crit_bonus_end' => 'getMFlCritBonusEnd',
        'm_fl_crit_bonus_end_range' => 'getMFlCritBonusEndRange',
        'm_fl_crit_bonus_start' => 'getMFlCritBonusStart',
        'm_fl_crit_bonus_start_range' => 'getMFlCritBonusStartRange',
        'm_fl_cycle_time' => 'getMFlCycleTime',
        'm_fl_intra_burst_cycle_time' => 'getMFlIntraBurstCycleTime',
        'm_fl_max_spin_cycle_time' => 'getMFlMaxSpinCycleTime',
        'm_fl_damage_falloff_bias' => 'getMFlDamageFalloffBias',
        'm_fl_damage_falloff_end_range' => 'getMFlDamageFalloffEndRange',
        'm_fl_damage_falloff_end_scale' => 'getMFlDamageFalloffEndScale',
        'm_fl_damage_falloff_start_range' => 'getMFlDamageFalloffStartRange',
        'm_fl_damage_falloff_start_scale' => 'getMFlDamageFalloffStartScale',
        'm_fl_horizontal_punch' => 'getMFlHorizontalPunch',
        'm_fl_range' => 'getMFlRange',
        'm_fl_recoil_recovery_delay_factor' => 'getMFlRecoilRecoveryDelayFactor',
        'm_fl_recoil_recovery_speed' => 'getMFlRecoilRecoverySpeed',
        'm_fl_recoil_shot_index_recovery_time_factor' => 'getMFlRecoilShotIndexRecoveryTimeFactor',
        'm_fl_recoil_speed' => 'getMFlRecoilSpeed',
        'm_fl_reload_move_speed' => 'getMFlReloadMoveSpeed',
        'm_fl_scatter_yaw_scale' => 'getMFlScatterYawScale',
        'm_aiming_shoot_spread_penalty' => 'getMAimingShootSpreadPenalty',
        'm_standing_shoot_spread_penalty' => 'getMStandingShootSpreadPenalty',
        'm_fl_shoot_move_speed_percent' => 'getMFlShootMoveSpeedPercent',
        'm_fl_shoot_spread_penalty_decay' => 'getMFlShootSpreadPenaltyDecay',
        'm_fl_shoot_spread_penalty_decay_delay' => 'getMFlShootSpreadPenaltyDecayDelay',
        'm_fl_shoot_spread_penalty_per_shot' => 'getMFlShootSpreadPenaltyPerShot',
        'm_fl_shooting_up_spread_penalty' => 'getMFlShootingUpSpreadPenalty',
        'm_fl_vertical_punch' => 'getMFlVerticalPunch',
        'm_fl_zoom_fov' => 'getMFlZoomFov',
        'm_fl_zoom_move_speed_percent' => 'getMFlZoomMoveSpeedPercent',
        'm_i_bullets' => 'getMIBullets',
        'm_i_burst_shot_count' => 'getMIBurstShotCount',
        'm_i_clip_size' => 'getMIClipSize',
        'm_fl_spread' => 'getMFlSpread',
        'm_fl_standing_spread' => 'getMFlStandingSpread',
        'm_fl_low_ammo_indicator_threshold' => 'getMFlLowAmmoIndicatorThreshold',
        'm_fl_recoil_seed' => 'getMFlRecoilSeed',
        'm_fl_reload_duration' => 'getMFlReloadDuration',
        'm_bullet_speed_curve' => 'getMBulletSpeedCurve',
        'm_horizontal_recoil' => 'getMHorizontalRecoil',
        'm_vertical_recoil' => 'getMVerticalRecoil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('m_b_can_zoom', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_damage', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_gravity_scale', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_inherit_shooter_velocity_scale', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_lifetime', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_radius', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_radius_vs_world', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_reflect_amount', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_reflect_scale', $data ?? [], null);
        $this->setIfExists('m_fl_bullet_whiz_distance', $data ?? [], null);
        $this->setIfExists('m_fl_burst_shot_cooldown', $data ?? [], null);
        $this->setIfExists('m_fl_crit_bonus_against_npcs', $data ?? [], null);
        $this->setIfExists('m_fl_crit_bonus_end', $data ?? [], null);
        $this->setIfExists('m_fl_crit_bonus_end_range', $data ?? [], null);
        $this->setIfExists('m_fl_crit_bonus_start', $data ?? [], null);
        $this->setIfExists('m_fl_crit_bonus_start_range', $data ?? [], null);
        $this->setIfExists('m_fl_cycle_time', $data ?? [], null);
        $this->setIfExists('m_fl_intra_burst_cycle_time', $data ?? [], null);
        $this->setIfExists('m_fl_max_spin_cycle_time', $data ?? [], null);
        $this->setIfExists('m_fl_damage_falloff_bias', $data ?? [], null);
        $this->setIfExists('m_fl_damage_falloff_end_range', $data ?? [], null);
        $this->setIfExists('m_fl_damage_falloff_end_scale', $data ?? [], null);
        $this->setIfExists('m_fl_damage_falloff_start_range', $data ?? [], null);
        $this->setIfExists('m_fl_damage_falloff_start_scale', $data ?? [], null);
        $this->setIfExists('m_fl_horizontal_punch', $data ?? [], null);
        $this->setIfExists('m_fl_range', $data ?? [], null);
        $this->setIfExists('m_fl_recoil_recovery_delay_factor', $data ?? [], null);
        $this->setIfExists('m_fl_recoil_recovery_speed', $data ?? [], null);
        $this->setIfExists('m_fl_recoil_shot_index_recovery_time_factor', $data ?? [], null);
        $this->setIfExists('m_fl_recoil_speed', $data ?? [], null);
        $this->setIfExists('m_fl_reload_move_speed', $data ?? [], null);
        $this->setIfExists('m_fl_scatter_yaw_scale', $data ?? [], null);
        $this->setIfExists('m_aiming_shoot_spread_penalty', $data ?? [], null);
        $this->setIfExists('m_standing_shoot_spread_penalty', $data ?? [], null);
        $this->setIfExists('m_fl_shoot_move_speed_percent', $data ?? [], null);
        $this->setIfExists('m_fl_shoot_spread_penalty_decay', $data ?? [], null);
        $this->setIfExists('m_fl_shoot_spread_penalty_decay_delay', $data ?? [], null);
        $this->setIfExists('m_fl_shoot_spread_penalty_per_shot', $data ?? [], null);
        $this->setIfExists('m_fl_shooting_up_spread_penalty', $data ?? [], null);
        $this->setIfExists('m_fl_vertical_punch', $data ?? [], null);
        $this->setIfExists('m_fl_zoom_fov', $data ?? [], null);
        $this->setIfExists('m_fl_zoom_move_speed_percent', $data ?? [], null);
        $this->setIfExists('m_i_bullets', $data ?? [], null);
        $this->setIfExists('m_i_burst_shot_count', $data ?? [], null);
        $this->setIfExists('m_i_clip_size', $data ?? [], null);
        $this->setIfExists('m_fl_spread', $data ?? [], null);
        $this->setIfExists('m_fl_standing_spread', $data ?? [], null);
        $this->setIfExists('m_fl_low_ammo_indicator_threshold', $data ?? [], null);
        $this->setIfExists('m_fl_recoil_seed', $data ?? [], null);
        $this->setIfExists('m_fl_reload_duration', $data ?? [], null);
        $this->setIfExists('m_bullet_speed_curve', $data ?? [], null);
        $this->setIfExists('m_horizontal_recoil', $data ?? [], null);
        $this->setIfExists('m_vertical_recoil', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets m_b_can_zoom
     *
     * @return bool|null
     */
    public function getMBCanZoom()
    {
        return $this->container['m_b_can_zoom'];
    }

    /**
     * Sets m_b_can_zoom
     *
     * @param bool|null $m_b_can_zoom m_b_can_zoom
     *
     * @return self
     */
    public function setMBCanZoom($m_b_can_zoom)
    {
        if (is_null($m_b_can_zoom)) {
            array_push($this->openAPINullablesSetToNull, 'm_b_can_zoom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_b_can_zoom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_b_can_zoom'] = $m_b_can_zoom;

        return $this;
    }

    /**
     * Gets m_fl_bullet_damage
     *
     * @return float|null
     */
    public function getMFlBulletDamage()
    {
        return $this->container['m_fl_bullet_damage'];
    }

    /**
     * Sets m_fl_bullet_damage
     *
     * @param float|null $m_fl_bullet_damage m_fl_bullet_damage
     *
     * @return self
     */
    public function setMFlBulletDamage($m_fl_bullet_damage)
    {
        if (is_null($m_fl_bullet_damage)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_damage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_damage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_damage'] = $m_fl_bullet_damage;

        return $this;
    }

    /**
     * Gets m_fl_bullet_gravity_scale
     *
     * @return float|null
     */
    public function getMFlBulletGravityScale()
    {
        return $this->container['m_fl_bullet_gravity_scale'];
    }

    /**
     * Sets m_fl_bullet_gravity_scale
     *
     * @param float|null $m_fl_bullet_gravity_scale m_fl_bullet_gravity_scale
     *
     * @return self
     */
    public function setMFlBulletGravityScale($m_fl_bullet_gravity_scale)
    {
        if (is_null($m_fl_bullet_gravity_scale)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_gravity_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_gravity_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_gravity_scale'] = $m_fl_bullet_gravity_scale;

        return $this;
    }

    /**
     * Gets m_fl_bullet_inherit_shooter_velocity_scale
     *
     * @return float|null
     */
    public function getMFlBulletInheritShooterVelocityScale()
    {
        return $this->container['m_fl_bullet_inherit_shooter_velocity_scale'];
    }

    /**
     * Sets m_fl_bullet_inherit_shooter_velocity_scale
     *
     * @param float|null $m_fl_bullet_inherit_shooter_velocity_scale m_fl_bullet_inherit_shooter_velocity_scale
     *
     * @return self
     */
    public function setMFlBulletInheritShooterVelocityScale($m_fl_bullet_inherit_shooter_velocity_scale)
    {
        if (is_null($m_fl_bullet_inherit_shooter_velocity_scale)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_inherit_shooter_velocity_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_inherit_shooter_velocity_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_inherit_shooter_velocity_scale'] = $m_fl_bullet_inherit_shooter_velocity_scale;

        return $this;
    }

    /**
     * Gets m_fl_bullet_lifetime
     *
     * @return float|null
     */
    public function getMFlBulletLifetime()
    {
        return $this->container['m_fl_bullet_lifetime'];
    }

    /**
     * Sets m_fl_bullet_lifetime
     *
     * @param float|null $m_fl_bullet_lifetime m_fl_bullet_lifetime
     *
     * @return self
     */
    public function setMFlBulletLifetime($m_fl_bullet_lifetime)
    {
        if (is_null($m_fl_bullet_lifetime)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_lifetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_lifetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_lifetime'] = $m_fl_bullet_lifetime;

        return $this;
    }

    /**
     * Gets m_fl_bullet_radius
     *
     * @return float|null
     */
    public function getMFlBulletRadius()
    {
        return $this->container['m_fl_bullet_radius'];
    }

    /**
     * Sets m_fl_bullet_radius
     *
     * @param float|null $m_fl_bullet_radius m_fl_bullet_radius
     *
     * @return self
     */
    public function setMFlBulletRadius($m_fl_bullet_radius)
    {
        if (is_null($m_fl_bullet_radius)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_radius');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_radius', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_radius'] = $m_fl_bullet_radius;

        return $this;
    }

    /**
     * Gets m_fl_bullet_radius_vs_world
     *
     * @return float|null
     */
    public function getMFlBulletRadiusVsWorld()
    {
        return $this->container['m_fl_bullet_radius_vs_world'];
    }

    /**
     * Sets m_fl_bullet_radius_vs_world
     *
     * @param float|null $m_fl_bullet_radius_vs_world m_fl_bullet_radius_vs_world
     *
     * @return self
     */
    public function setMFlBulletRadiusVsWorld($m_fl_bullet_radius_vs_world)
    {
        if (is_null($m_fl_bullet_radius_vs_world)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_radius_vs_world');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_radius_vs_world', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_radius_vs_world'] = $m_fl_bullet_radius_vs_world;

        return $this;
    }

    /**
     * Gets m_fl_bullet_reflect_amount
     *
     * @return float|null
     */
    public function getMFlBulletReflectAmount()
    {
        return $this->container['m_fl_bullet_reflect_amount'];
    }

    /**
     * Sets m_fl_bullet_reflect_amount
     *
     * @param float|null $m_fl_bullet_reflect_amount m_fl_bullet_reflect_amount
     *
     * @return self
     */
    public function setMFlBulletReflectAmount($m_fl_bullet_reflect_amount)
    {
        if (is_null($m_fl_bullet_reflect_amount)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_reflect_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_reflect_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_reflect_amount'] = $m_fl_bullet_reflect_amount;

        return $this;
    }

    /**
     * Gets m_fl_bullet_reflect_scale
     *
     * @return float|null
     */
    public function getMFlBulletReflectScale()
    {
        return $this->container['m_fl_bullet_reflect_scale'];
    }

    /**
     * Sets m_fl_bullet_reflect_scale
     *
     * @param float|null $m_fl_bullet_reflect_scale m_fl_bullet_reflect_scale
     *
     * @return self
     */
    public function setMFlBulletReflectScale($m_fl_bullet_reflect_scale)
    {
        if (is_null($m_fl_bullet_reflect_scale)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_reflect_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_reflect_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_reflect_scale'] = $m_fl_bullet_reflect_scale;

        return $this;
    }

    /**
     * Gets m_fl_bullet_whiz_distance
     *
     * @return float|null
     */
    public function getMFlBulletWhizDistance()
    {
        return $this->container['m_fl_bullet_whiz_distance'];
    }

    /**
     * Sets m_fl_bullet_whiz_distance
     *
     * @param float|null $m_fl_bullet_whiz_distance m_fl_bullet_whiz_distance
     *
     * @return self
     */
    public function setMFlBulletWhizDistance($m_fl_bullet_whiz_distance)
    {
        if (is_null($m_fl_bullet_whiz_distance)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_bullet_whiz_distance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_bullet_whiz_distance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_bullet_whiz_distance'] = $m_fl_bullet_whiz_distance;

        return $this;
    }

    /**
     * Gets m_fl_burst_shot_cooldown
     *
     * @return float|null
     */
    public function getMFlBurstShotCooldown()
    {
        return $this->container['m_fl_burst_shot_cooldown'];
    }

    /**
     * Sets m_fl_burst_shot_cooldown
     *
     * @param float|null $m_fl_burst_shot_cooldown m_fl_burst_shot_cooldown
     *
     * @return self
     */
    public function setMFlBurstShotCooldown($m_fl_burst_shot_cooldown)
    {
        if (is_null($m_fl_burst_shot_cooldown)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_burst_shot_cooldown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_burst_shot_cooldown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_burst_shot_cooldown'] = $m_fl_burst_shot_cooldown;

        return $this;
    }

    /**
     * Gets m_fl_crit_bonus_against_npcs
     *
     * @return float|null
     */
    public function getMFlCritBonusAgainstNpcs()
    {
        return $this->container['m_fl_crit_bonus_against_npcs'];
    }

    /**
     * Sets m_fl_crit_bonus_against_npcs
     *
     * @param float|null $m_fl_crit_bonus_against_npcs m_fl_crit_bonus_against_npcs
     *
     * @return self
     */
    public function setMFlCritBonusAgainstNpcs($m_fl_crit_bonus_against_npcs)
    {
        if (is_null($m_fl_crit_bonus_against_npcs)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_crit_bonus_against_npcs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_crit_bonus_against_npcs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_crit_bonus_against_npcs'] = $m_fl_crit_bonus_against_npcs;

        return $this;
    }

    /**
     * Gets m_fl_crit_bonus_end
     *
     * @return float|null
     */
    public function getMFlCritBonusEnd()
    {
        return $this->container['m_fl_crit_bonus_end'];
    }

    /**
     * Sets m_fl_crit_bonus_end
     *
     * @param float|null $m_fl_crit_bonus_end m_fl_crit_bonus_end
     *
     * @return self
     */
    public function setMFlCritBonusEnd($m_fl_crit_bonus_end)
    {
        if (is_null($m_fl_crit_bonus_end)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_crit_bonus_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_crit_bonus_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_crit_bonus_end'] = $m_fl_crit_bonus_end;

        return $this;
    }

    /**
     * Gets m_fl_crit_bonus_end_range
     *
     * @return float|null
     */
    public function getMFlCritBonusEndRange()
    {
        return $this->container['m_fl_crit_bonus_end_range'];
    }

    /**
     * Sets m_fl_crit_bonus_end_range
     *
     * @param float|null $m_fl_crit_bonus_end_range m_fl_crit_bonus_end_range
     *
     * @return self
     */
    public function setMFlCritBonusEndRange($m_fl_crit_bonus_end_range)
    {
        if (is_null($m_fl_crit_bonus_end_range)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_crit_bonus_end_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_crit_bonus_end_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_crit_bonus_end_range'] = $m_fl_crit_bonus_end_range;

        return $this;
    }

    /**
     * Gets m_fl_crit_bonus_start
     *
     * @return float|null
     */
    public function getMFlCritBonusStart()
    {
        return $this->container['m_fl_crit_bonus_start'];
    }

    /**
     * Sets m_fl_crit_bonus_start
     *
     * @param float|null $m_fl_crit_bonus_start m_fl_crit_bonus_start
     *
     * @return self
     */
    public function setMFlCritBonusStart($m_fl_crit_bonus_start)
    {
        if (is_null($m_fl_crit_bonus_start)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_crit_bonus_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_crit_bonus_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_crit_bonus_start'] = $m_fl_crit_bonus_start;

        return $this;
    }

    /**
     * Gets m_fl_crit_bonus_start_range
     *
     * @return float|null
     */
    public function getMFlCritBonusStartRange()
    {
        return $this->container['m_fl_crit_bonus_start_range'];
    }

    /**
     * Sets m_fl_crit_bonus_start_range
     *
     * @param float|null $m_fl_crit_bonus_start_range m_fl_crit_bonus_start_range
     *
     * @return self
     */
    public function setMFlCritBonusStartRange($m_fl_crit_bonus_start_range)
    {
        if (is_null($m_fl_crit_bonus_start_range)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_crit_bonus_start_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_crit_bonus_start_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_crit_bonus_start_range'] = $m_fl_crit_bonus_start_range;

        return $this;
    }

    /**
     * Gets m_fl_cycle_time
     *
     * @return float|null
     */
    public function getMFlCycleTime()
    {
        return $this->container['m_fl_cycle_time'];
    }

    /**
     * Sets m_fl_cycle_time
     *
     * @param float|null $m_fl_cycle_time m_fl_cycle_time
     *
     * @return self
     */
    public function setMFlCycleTime($m_fl_cycle_time)
    {
        if (is_null($m_fl_cycle_time)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_cycle_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_cycle_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_cycle_time'] = $m_fl_cycle_time;

        return $this;
    }

    /**
     * Gets m_fl_intra_burst_cycle_time
     *
     * @return float|null
     */
    public function getMFlIntraBurstCycleTime()
    {
        return $this->container['m_fl_intra_burst_cycle_time'];
    }

    /**
     * Sets m_fl_intra_burst_cycle_time
     *
     * @param float|null $m_fl_intra_burst_cycle_time m_fl_intra_burst_cycle_time
     *
     * @return self
     */
    public function setMFlIntraBurstCycleTime($m_fl_intra_burst_cycle_time)
    {
        if (is_null($m_fl_intra_burst_cycle_time)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_intra_burst_cycle_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_intra_burst_cycle_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_intra_burst_cycle_time'] = $m_fl_intra_burst_cycle_time;

        return $this;
    }

    /**
     * Gets m_fl_max_spin_cycle_time
     *
     * @return float|null
     */
    public function getMFlMaxSpinCycleTime()
    {
        return $this->container['m_fl_max_spin_cycle_time'];
    }

    /**
     * Sets m_fl_max_spin_cycle_time
     *
     * @param float|null $m_fl_max_spin_cycle_time m_fl_max_spin_cycle_time
     *
     * @return self
     */
    public function setMFlMaxSpinCycleTime($m_fl_max_spin_cycle_time)
    {
        if (is_null($m_fl_max_spin_cycle_time)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_max_spin_cycle_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_max_spin_cycle_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_max_spin_cycle_time'] = $m_fl_max_spin_cycle_time;

        return $this;
    }

    /**
     * Gets m_fl_damage_falloff_bias
     *
     * @return float|null
     */
    public function getMFlDamageFalloffBias()
    {
        return $this->container['m_fl_damage_falloff_bias'];
    }

    /**
     * Sets m_fl_damage_falloff_bias
     *
     * @param float|null $m_fl_damage_falloff_bias m_fl_damage_falloff_bias
     *
     * @return self
     */
    public function setMFlDamageFalloffBias($m_fl_damage_falloff_bias)
    {
        if (is_null($m_fl_damage_falloff_bias)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_damage_falloff_bias');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_damage_falloff_bias', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_damage_falloff_bias'] = $m_fl_damage_falloff_bias;

        return $this;
    }

    /**
     * Gets m_fl_damage_falloff_end_range
     *
     * @return float|null
     */
    public function getMFlDamageFalloffEndRange()
    {
        return $this->container['m_fl_damage_falloff_end_range'];
    }

    /**
     * Sets m_fl_damage_falloff_end_range
     *
     * @param float|null $m_fl_damage_falloff_end_range m_fl_damage_falloff_end_range
     *
     * @return self
     */
    public function setMFlDamageFalloffEndRange($m_fl_damage_falloff_end_range)
    {
        if (is_null($m_fl_damage_falloff_end_range)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_damage_falloff_end_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_damage_falloff_end_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_damage_falloff_end_range'] = $m_fl_damage_falloff_end_range;

        return $this;
    }

    /**
     * Gets m_fl_damage_falloff_end_scale
     *
     * @return float|null
     */
    public function getMFlDamageFalloffEndScale()
    {
        return $this->container['m_fl_damage_falloff_end_scale'];
    }

    /**
     * Sets m_fl_damage_falloff_end_scale
     *
     * @param float|null $m_fl_damage_falloff_end_scale m_fl_damage_falloff_end_scale
     *
     * @return self
     */
    public function setMFlDamageFalloffEndScale($m_fl_damage_falloff_end_scale)
    {
        if (is_null($m_fl_damage_falloff_end_scale)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_damage_falloff_end_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_damage_falloff_end_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_damage_falloff_end_scale'] = $m_fl_damage_falloff_end_scale;

        return $this;
    }

    /**
     * Gets m_fl_damage_falloff_start_range
     *
     * @return float|null
     */
    public function getMFlDamageFalloffStartRange()
    {
        return $this->container['m_fl_damage_falloff_start_range'];
    }

    /**
     * Sets m_fl_damage_falloff_start_range
     *
     * @param float|null $m_fl_damage_falloff_start_range m_fl_damage_falloff_start_range
     *
     * @return self
     */
    public function setMFlDamageFalloffStartRange($m_fl_damage_falloff_start_range)
    {
        if (is_null($m_fl_damage_falloff_start_range)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_damage_falloff_start_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_damage_falloff_start_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_damage_falloff_start_range'] = $m_fl_damage_falloff_start_range;

        return $this;
    }

    /**
     * Gets m_fl_damage_falloff_start_scale
     *
     * @return float|null
     */
    public function getMFlDamageFalloffStartScale()
    {
        return $this->container['m_fl_damage_falloff_start_scale'];
    }

    /**
     * Sets m_fl_damage_falloff_start_scale
     *
     * @param float|null $m_fl_damage_falloff_start_scale m_fl_damage_falloff_start_scale
     *
     * @return self
     */
    public function setMFlDamageFalloffStartScale($m_fl_damage_falloff_start_scale)
    {
        if (is_null($m_fl_damage_falloff_start_scale)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_damage_falloff_start_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_damage_falloff_start_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_damage_falloff_start_scale'] = $m_fl_damage_falloff_start_scale;

        return $this;
    }

    /**
     * Gets m_fl_horizontal_punch
     *
     * @return float|null
     */
    public function getMFlHorizontalPunch()
    {
        return $this->container['m_fl_horizontal_punch'];
    }

    /**
     * Sets m_fl_horizontal_punch
     *
     * @param float|null $m_fl_horizontal_punch m_fl_horizontal_punch
     *
     * @return self
     */
    public function setMFlHorizontalPunch($m_fl_horizontal_punch)
    {
        if (is_null($m_fl_horizontal_punch)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_horizontal_punch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_horizontal_punch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_horizontal_punch'] = $m_fl_horizontal_punch;

        return $this;
    }

    /**
     * Gets m_fl_range
     *
     * @return float|null
     */
    public function getMFlRange()
    {
        return $this->container['m_fl_range'];
    }

    /**
     * Sets m_fl_range
     *
     * @param float|null $m_fl_range m_fl_range
     *
     * @return self
     */
    public function setMFlRange($m_fl_range)
    {
        if (is_null($m_fl_range)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_range'] = $m_fl_range;

        return $this;
    }

    /**
     * Gets m_fl_recoil_recovery_delay_factor
     *
     * @return float|null
     */
    public function getMFlRecoilRecoveryDelayFactor()
    {
        return $this->container['m_fl_recoil_recovery_delay_factor'];
    }

    /**
     * Sets m_fl_recoil_recovery_delay_factor
     *
     * @param float|null $m_fl_recoil_recovery_delay_factor m_fl_recoil_recovery_delay_factor
     *
     * @return self
     */
    public function setMFlRecoilRecoveryDelayFactor($m_fl_recoil_recovery_delay_factor)
    {
        if (is_null($m_fl_recoil_recovery_delay_factor)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_recoil_recovery_delay_factor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_recoil_recovery_delay_factor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_recoil_recovery_delay_factor'] = $m_fl_recoil_recovery_delay_factor;

        return $this;
    }

    /**
     * Gets m_fl_recoil_recovery_speed
     *
     * @return float|null
     */
    public function getMFlRecoilRecoverySpeed()
    {
        return $this->container['m_fl_recoil_recovery_speed'];
    }

    /**
     * Sets m_fl_recoil_recovery_speed
     *
     * @param float|null $m_fl_recoil_recovery_speed m_fl_recoil_recovery_speed
     *
     * @return self
     */
    public function setMFlRecoilRecoverySpeed($m_fl_recoil_recovery_speed)
    {
        if (is_null($m_fl_recoil_recovery_speed)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_recoil_recovery_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_recoil_recovery_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_recoil_recovery_speed'] = $m_fl_recoil_recovery_speed;

        return $this;
    }

    /**
     * Gets m_fl_recoil_shot_index_recovery_time_factor
     *
     * @return float|null
     */
    public function getMFlRecoilShotIndexRecoveryTimeFactor()
    {
        return $this->container['m_fl_recoil_shot_index_recovery_time_factor'];
    }

    /**
     * Sets m_fl_recoil_shot_index_recovery_time_factor
     *
     * @param float|null $m_fl_recoil_shot_index_recovery_time_factor m_fl_recoil_shot_index_recovery_time_factor
     *
     * @return self
     */
    public function setMFlRecoilShotIndexRecoveryTimeFactor($m_fl_recoil_shot_index_recovery_time_factor)
    {
        if (is_null($m_fl_recoil_shot_index_recovery_time_factor)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_recoil_shot_index_recovery_time_factor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_recoil_shot_index_recovery_time_factor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_recoil_shot_index_recovery_time_factor'] = $m_fl_recoil_shot_index_recovery_time_factor;

        return $this;
    }

    /**
     * Gets m_fl_recoil_speed
     *
     * @return float|null
     */
    public function getMFlRecoilSpeed()
    {
        return $this->container['m_fl_recoil_speed'];
    }

    /**
     * Sets m_fl_recoil_speed
     *
     * @param float|null $m_fl_recoil_speed m_fl_recoil_speed
     *
     * @return self
     */
    public function setMFlRecoilSpeed($m_fl_recoil_speed)
    {
        if (is_null($m_fl_recoil_speed)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_recoil_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_recoil_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_recoil_speed'] = $m_fl_recoil_speed;

        return $this;
    }

    /**
     * Gets m_fl_reload_move_speed
     *
     * @return float|null
     */
    public function getMFlReloadMoveSpeed()
    {
        return $this->container['m_fl_reload_move_speed'];
    }

    /**
     * Sets m_fl_reload_move_speed
     *
     * @param float|null $m_fl_reload_move_speed m_fl_reload_move_speed
     *
     * @return self
     */
    public function setMFlReloadMoveSpeed($m_fl_reload_move_speed)
    {
        if (is_null($m_fl_reload_move_speed)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_reload_move_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_reload_move_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_reload_move_speed'] = $m_fl_reload_move_speed;

        return $this;
    }

    /**
     * Gets m_fl_scatter_yaw_scale
     *
     * @return float|null
     */
    public function getMFlScatterYawScale()
    {
        return $this->container['m_fl_scatter_yaw_scale'];
    }

    /**
     * Sets m_fl_scatter_yaw_scale
     *
     * @param float|null $m_fl_scatter_yaw_scale m_fl_scatter_yaw_scale
     *
     * @return self
     */
    public function setMFlScatterYawScale($m_fl_scatter_yaw_scale)
    {
        if (is_null($m_fl_scatter_yaw_scale)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_scatter_yaw_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_scatter_yaw_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_scatter_yaw_scale'] = $m_fl_scatter_yaw_scale;

        return $this;
    }

    /**
     * Gets m_aiming_shoot_spread_penalty
     *
     * @return \OpenAPI\Client\Model\MAimingshootspreadpenalty|null
     */
    public function getMAimingShootSpreadPenalty()
    {
        return $this->container['m_aiming_shoot_spread_penalty'];
    }

    /**
     * Sets m_aiming_shoot_spread_penalty
     *
     * @param \OpenAPI\Client\Model\MAimingshootspreadpenalty|null $m_aiming_shoot_spread_penalty m_aiming_shoot_spread_penalty
     *
     * @return self
     */
    public function setMAimingShootSpreadPenalty($m_aiming_shoot_spread_penalty)
    {
        if (is_null($m_aiming_shoot_spread_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'm_aiming_shoot_spread_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_aiming_shoot_spread_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_aiming_shoot_spread_penalty'] = $m_aiming_shoot_spread_penalty;

        return $this;
    }

    /**
     * Gets m_standing_shoot_spread_penalty
     *
     * @return \OpenAPI\Client\Model\MStandingshootspreadpenalty|null
     */
    public function getMStandingShootSpreadPenalty()
    {
        return $this->container['m_standing_shoot_spread_penalty'];
    }

    /**
     * Sets m_standing_shoot_spread_penalty
     *
     * @param \OpenAPI\Client\Model\MStandingshootspreadpenalty|null $m_standing_shoot_spread_penalty m_standing_shoot_spread_penalty
     *
     * @return self
     */
    public function setMStandingShootSpreadPenalty($m_standing_shoot_spread_penalty)
    {
        if (is_null($m_standing_shoot_spread_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'm_standing_shoot_spread_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_standing_shoot_spread_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_standing_shoot_spread_penalty'] = $m_standing_shoot_spread_penalty;

        return $this;
    }

    /**
     * Gets m_fl_shoot_move_speed_percent
     *
     * @return float|null
     */
    public function getMFlShootMoveSpeedPercent()
    {
        return $this->container['m_fl_shoot_move_speed_percent'];
    }

    /**
     * Sets m_fl_shoot_move_speed_percent
     *
     * @param float|null $m_fl_shoot_move_speed_percent m_fl_shoot_move_speed_percent
     *
     * @return self
     */
    public function setMFlShootMoveSpeedPercent($m_fl_shoot_move_speed_percent)
    {
        if (is_null($m_fl_shoot_move_speed_percent)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_shoot_move_speed_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_shoot_move_speed_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_shoot_move_speed_percent'] = $m_fl_shoot_move_speed_percent;

        return $this;
    }

    /**
     * Gets m_fl_shoot_spread_penalty_decay
     *
     * @return float|null
     */
    public function getMFlShootSpreadPenaltyDecay()
    {
        return $this->container['m_fl_shoot_spread_penalty_decay'];
    }

    /**
     * Sets m_fl_shoot_spread_penalty_decay
     *
     * @param float|null $m_fl_shoot_spread_penalty_decay m_fl_shoot_spread_penalty_decay
     *
     * @return self
     */
    public function setMFlShootSpreadPenaltyDecay($m_fl_shoot_spread_penalty_decay)
    {
        if (is_null($m_fl_shoot_spread_penalty_decay)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_shoot_spread_penalty_decay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_shoot_spread_penalty_decay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_shoot_spread_penalty_decay'] = $m_fl_shoot_spread_penalty_decay;

        return $this;
    }

    /**
     * Gets m_fl_shoot_spread_penalty_decay_delay
     *
     * @return float|null
     */
    public function getMFlShootSpreadPenaltyDecayDelay()
    {
        return $this->container['m_fl_shoot_spread_penalty_decay_delay'];
    }

    /**
     * Sets m_fl_shoot_spread_penalty_decay_delay
     *
     * @param float|null $m_fl_shoot_spread_penalty_decay_delay m_fl_shoot_spread_penalty_decay_delay
     *
     * @return self
     */
    public function setMFlShootSpreadPenaltyDecayDelay($m_fl_shoot_spread_penalty_decay_delay)
    {
        if (is_null($m_fl_shoot_spread_penalty_decay_delay)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_shoot_spread_penalty_decay_delay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_shoot_spread_penalty_decay_delay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_shoot_spread_penalty_decay_delay'] = $m_fl_shoot_spread_penalty_decay_delay;

        return $this;
    }

    /**
     * Gets m_fl_shoot_spread_penalty_per_shot
     *
     * @return float|null
     */
    public function getMFlShootSpreadPenaltyPerShot()
    {
        return $this->container['m_fl_shoot_spread_penalty_per_shot'];
    }

    /**
     * Sets m_fl_shoot_spread_penalty_per_shot
     *
     * @param float|null $m_fl_shoot_spread_penalty_per_shot m_fl_shoot_spread_penalty_per_shot
     *
     * @return self
     */
    public function setMFlShootSpreadPenaltyPerShot($m_fl_shoot_spread_penalty_per_shot)
    {
        if (is_null($m_fl_shoot_spread_penalty_per_shot)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_shoot_spread_penalty_per_shot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_shoot_spread_penalty_per_shot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_shoot_spread_penalty_per_shot'] = $m_fl_shoot_spread_penalty_per_shot;

        return $this;
    }

    /**
     * Gets m_fl_shooting_up_spread_penalty
     *
     * @return float|null
     */
    public function getMFlShootingUpSpreadPenalty()
    {
        return $this->container['m_fl_shooting_up_spread_penalty'];
    }

    /**
     * Sets m_fl_shooting_up_spread_penalty
     *
     * @param float|null $m_fl_shooting_up_spread_penalty m_fl_shooting_up_spread_penalty
     *
     * @return self
     */
    public function setMFlShootingUpSpreadPenalty($m_fl_shooting_up_spread_penalty)
    {
        if (is_null($m_fl_shooting_up_spread_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_shooting_up_spread_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_shooting_up_spread_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_shooting_up_spread_penalty'] = $m_fl_shooting_up_spread_penalty;

        return $this;
    }

    /**
     * Gets m_fl_vertical_punch
     *
     * @return float|null
     */
    public function getMFlVerticalPunch()
    {
        return $this->container['m_fl_vertical_punch'];
    }

    /**
     * Sets m_fl_vertical_punch
     *
     * @param float|null $m_fl_vertical_punch m_fl_vertical_punch
     *
     * @return self
     */
    public function setMFlVerticalPunch($m_fl_vertical_punch)
    {
        if (is_null($m_fl_vertical_punch)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_vertical_punch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_vertical_punch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_vertical_punch'] = $m_fl_vertical_punch;

        return $this;
    }

    /**
     * Gets m_fl_zoom_fov
     *
     * @return float|null
     */
    public function getMFlZoomFov()
    {
        return $this->container['m_fl_zoom_fov'];
    }

    /**
     * Sets m_fl_zoom_fov
     *
     * @param float|null $m_fl_zoom_fov m_fl_zoom_fov
     *
     * @return self
     */
    public function setMFlZoomFov($m_fl_zoom_fov)
    {
        if (is_null($m_fl_zoom_fov)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_zoom_fov');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_zoom_fov', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_zoom_fov'] = $m_fl_zoom_fov;

        return $this;
    }

    /**
     * Gets m_fl_zoom_move_speed_percent
     *
     * @return float|null
     */
    public function getMFlZoomMoveSpeedPercent()
    {
        return $this->container['m_fl_zoom_move_speed_percent'];
    }

    /**
     * Sets m_fl_zoom_move_speed_percent
     *
     * @param float|null $m_fl_zoom_move_speed_percent m_fl_zoom_move_speed_percent
     *
     * @return self
     */
    public function setMFlZoomMoveSpeedPercent($m_fl_zoom_move_speed_percent)
    {
        if (is_null($m_fl_zoom_move_speed_percent)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_zoom_move_speed_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_zoom_move_speed_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_zoom_move_speed_percent'] = $m_fl_zoom_move_speed_percent;

        return $this;
    }

    /**
     * Gets m_i_bullets
     *
     * @return int|null
     */
    public function getMIBullets()
    {
        return $this->container['m_i_bullets'];
    }

    /**
     * Sets m_i_bullets
     *
     * @param int|null $m_i_bullets m_i_bullets
     *
     * @return self
     */
    public function setMIBullets($m_i_bullets)
    {
        if (is_null($m_i_bullets)) {
            array_push($this->openAPINullablesSetToNull, 'm_i_bullets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_i_bullets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_i_bullets'] = $m_i_bullets;

        return $this;
    }

    /**
     * Gets m_i_burst_shot_count
     *
     * @return int|null
     */
    public function getMIBurstShotCount()
    {
        return $this->container['m_i_burst_shot_count'];
    }

    /**
     * Sets m_i_burst_shot_count
     *
     * @param int|null $m_i_burst_shot_count m_i_burst_shot_count
     *
     * @return self
     */
    public function setMIBurstShotCount($m_i_burst_shot_count)
    {
        if (is_null($m_i_burst_shot_count)) {
            array_push($this->openAPINullablesSetToNull, 'm_i_burst_shot_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_i_burst_shot_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_i_burst_shot_count'] = $m_i_burst_shot_count;

        return $this;
    }

    /**
     * Gets m_i_clip_size
     *
     * @return int|null
     */
    public function getMIClipSize()
    {
        return $this->container['m_i_clip_size'];
    }

    /**
     * Sets m_i_clip_size
     *
     * @param int|null $m_i_clip_size m_i_clip_size
     *
     * @return self
     */
    public function setMIClipSize($m_i_clip_size)
    {
        if (is_null($m_i_clip_size)) {
            array_push($this->openAPINullablesSetToNull, 'm_i_clip_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_i_clip_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_i_clip_size'] = $m_i_clip_size;

        return $this;
    }

    /**
     * Gets m_fl_spread
     *
     * @return float|null
     */
    public function getMFlSpread()
    {
        return $this->container['m_fl_spread'];
    }

    /**
     * Sets m_fl_spread
     *
     * @param float|null $m_fl_spread m_fl_spread
     *
     * @return self
     */
    public function setMFlSpread($m_fl_spread)
    {
        if (is_null($m_fl_spread)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_spread');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_spread', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_spread'] = $m_fl_spread;

        return $this;
    }

    /**
     * Gets m_fl_standing_spread
     *
     * @return float|null
     */
    public function getMFlStandingSpread()
    {
        return $this->container['m_fl_standing_spread'];
    }

    /**
     * Sets m_fl_standing_spread
     *
     * @param float|null $m_fl_standing_spread m_fl_standing_spread
     *
     * @return self
     */
    public function setMFlStandingSpread($m_fl_standing_spread)
    {
        if (is_null($m_fl_standing_spread)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_standing_spread');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_standing_spread', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_standing_spread'] = $m_fl_standing_spread;

        return $this;
    }

    /**
     * Gets m_fl_low_ammo_indicator_threshold
     *
     * @return float|null
     */
    public function getMFlLowAmmoIndicatorThreshold()
    {
        return $this->container['m_fl_low_ammo_indicator_threshold'];
    }

    /**
     * Sets m_fl_low_ammo_indicator_threshold
     *
     * @param float|null $m_fl_low_ammo_indicator_threshold m_fl_low_ammo_indicator_threshold
     *
     * @return self
     */
    public function setMFlLowAmmoIndicatorThreshold($m_fl_low_ammo_indicator_threshold)
    {
        if (is_null($m_fl_low_ammo_indicator_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_low_ammo_indicator_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_low_ammo_indicator_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_low_ammo_indicator_threshold'] = $m_fl_low_ammo_indicator_threshold;

        return $this;
    }

    /**
     * Gets m_fl_recoil_seed
     *
     * @return float|null
     */
    public function getMFlRecoilSeed()
    {
        return $this->container['m_fl_recoil_seed'];
    }

    /**
     * Sets m_fl_recoil_seed
     *
     * @param float|null $m_fl_recoil_seed m_fl_recoil_seed
     *
     * @return self
     */
    public function setMFlRecoilSeed($m_fl_recoil_seed)
    {
        if (is_null($m_fl_recoil_seed)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_recoil_seed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_recoil_seed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_recoil_seed'] = $m_fl_recoil_seed;

        return $this;
    }

    /**
     * Gets m_fl_reload_duration
     *
     * @return float|null
     */
    public function getMFlReloadDuration()
    {
        return $this->container['m_fl_reload_duration'];
    }

    /**
     * Sets m_fl_reload_duration
     *
     * @param float|null $m_fl_reload_duration m_fl_reload_duration
     *
     * @return self
     */
    public function setMFlReloadDuration($m_fl_reload_duration)
    {
        if (is_null($m_fl_reload_duration)) {
            array_push($this->openAPINullablesSetToNull, 'm_fl_reload_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_fl_reload_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_fl_reload_duration'] = $m_fl_reload_duration;

        return $this;
    }

    /**
     * Gets m_bullet_speed_curve
     *
     * @return \OpenAPI\Client\Model\RawItemWeaponInfoBulletSpeedCurveV2Input|null
     */
    public function getMBulletSpeedCurve()
    {
        return $this->container['m_bullet_speed_curve'];
    }

    /**
     * Sets m_bullet_speed_curve
     *
     * @param \OpenAPI\Client\Model\RawItemWeaponInfoBulletSpeedCurveV2Input|null $m_bullet_speed_curve m_bullet_speed_curve
     *
     * @return self
     */
    public function setMBulletSpeedCurve($m_bullet_speed_curve)
    {
        if (is_null($m_bullet_speed_curve)) {
            array_push($this->openAPINullablesSetToNull, 'm_bullet_speed_curve');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_bullet_speed_curve', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_bullet_speed_curve'] = $m_bullet_speed_curve;

        return $this;
    }

    /**
     * Gets m_horizontal_recoil
     *
     * @return \OpenAPI\Client\Model\RawWeaponInfoHorizontalRecoilV2Input|null
     */
    public function getMHorizontalRecoil()
    {
        return $this->container['m_horizontal_recoil'];
    }

    /**
     * Sets m_horizontal_recoil
     *
     * @param \OpenAPI\Client\Model\RawWeaponInfoHorizontalRecoilV2Input|null $m_horizontal_recoil m_horizontal_recoil
     *
     * @return self
     */
    public function setMHorizontalRecoil($m_horizontal_recoil)
    {
        if (is_null($m_horizontal_recoil)) {
            array_push($this->openAPINullablesSetToNull, 'm_horizontal_recoil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_horizontal_recoil', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_horizontal_recoil'] = $m_horizontal_recoil;

        return $this;
    }

    /**
     * Gets m_vertical_recoil
     *
     * @return \OpenAPI\Client\Model\RawWeaponInfoVerticalRecoilV2Input|null
     */
    public function getMVerticalRecoil()
    {
        return $this->container['m_vertical_recoil'];
    }

    /**
     * Sets m_vertical_recoil
     *
     * @param \OpenAPI\Client\Model\RawWeaponInfoVerticalRecoilV2Input|null $m_vertical_recoil m_vertical_recoil
     *
     * @return self
     */
    public function setMVerticalRecoil($m_vertical_recoil)
    {
        if (is_null($m_vertical_recoil)) {
            array_push($this->openAPINullablesSetToNull, 'm_vertical_recoil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_vertical_recoil', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_vertical_recoil'] = $m_vertical_recoil;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


