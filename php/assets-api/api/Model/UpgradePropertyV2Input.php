<?php
/**
 * UpgradePropertyV2Input
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpgradePropertyV2Input Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpgradePropertyV2Input implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpgradePropertyV2-Input';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'm_str_value' => '\OpenAPI\Client\Model\MStrvalue',
        'm_b_can_set_token_override' => 'bool',
        'm_e_provided_property_type' => 'string',
        'm_str_css_class' => 'string',
        'm_e_stats_usage_flags' => '\OpenAPI\Client\Model\MEstatsusageflags',
        'm_b_is_negative_attribute' => 'bool',
        'm_str_disable_value' => 'string',
        'm_str_loc_token_override' => 'string',
        'm_e_display_units' => 'string',
        'scale_function' => '\OpenAPI\Client\Model\RawItemPropertyScaleFunctionSubclassV2Input',
        'prefix' => 'string',
        'label' => 'string',
        'postfix' => 'string',
        'postvalue_label' => 'string',
        'conditional' => 'string',
        'icon' => 'string',
        'tooltip_section' => '\OpenAPI\Client\Model\RawAbilitySectionTypeV2',
        'tooltip_is_elevated' => 'bool',
        'tooltip_is_important' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'm_str_value' => null,
        'm_b_can_set_token_override' => null,
        'm_e_provided_property_type' => null,
        'm_str_css_class' => null,
        'm_e_stats_usage_flags' => null,
        'm_b_is_negative_attribute' => null,
        'm_str_disable_value' => null,
        'm_str_loc_token_override' => null,
        'm_e_display_units' => null,
        'scale_function' => null,
        'prefix' => null,
        'label' => null,
        'postfix' => null,
        'postvalue_label' => null,
        'conditional' => null,
        'icon' => null,
        'tooltip_section' => null,
        'tooltip_is_elevated' => null,
        'tooltip_is_important' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'm_str_value' => true,
        'm_b_can_set_token_override' => true,
        'm_e_provided_property_type' => true,
        'm_str_css_class' => true,
        'm_e_stats_usage_flags' => true,
        'm_b_is_negative_attribute' => true,
        'm_str_disable_value' => true,
        'm_str_loc_token_override' => true,
        'm_e_display_units' => true,
        'scale_function' => true,
        'prefix' => true,
        'label' => true,
        'postfix' => true,
        'postvalue_label' => true,
        'conditional' => true,
        'icon' => true,
        'tooltip_section' => true,
        'tooltip_is_elevated' => true,
        'tooltip_is_important' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'm_str_value' => 'm_strValue',
        'm_b_can_set_token_override' => 'm_bCanSetTokenOverride',
        'm_e_provided_property_type' => 'm_eProvidedPropertyType',
        'm_str_css_class' => 'm_strCSSClass',
        'm_e_stats_usage_flags' => 'm_eStatsUsageFlags',
        'm_b_is_negative_attribute' => 'm_bIsNegativeAttribute',
        'm_str_disable_value' => 'm_strDisableValue',
        'm_str_loc_token_override' => 'm_strLocTokenOverride',
        'm_e_display_units' => 'm_eDisplayUnits',
        'scale_function' => 'scale_function',
        'prefix' => 'prefix',
        'label' => 'label',
        'postfix' => 'postfix',
        'postvalue_label' => 'postvalue_label',
        'conditional' => 'conditional',
        'icon' => 'icon',
        'tooltip_section' => 'tooltip_section',
        'tooltip_is_elevated' => 'tooltip_is_elevated',
        'tooltip_is_important' => 'tooltip_is_important'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'm_str_value' => 'setMStrValue',
        'm_b_can_set_token_override' => 'setMBCanSetTokenOverride',
        'm_e_provided_property_type' => 'setMEProvidedPropertyType',
        'm_str_css_class' => 'setMStrCssClass',
        'm_e_stats_usage_flags' => 'setMEStatsUsageFlags',
        'm_b_is_negative_attribute' => 'setMBIsNegativeAttribute',
        'm_str_disable_value' => 'setMStrDisableValue',
        'm_str_loc_token_override' => 'setMStrLocTokenOverride',
        'm_e_display_units' => 'setMEDisplayUnits',
        'scale_function' => 'setScaleFunction',
        'prefix' => 'setPrefix',
        'label' => 'setLabel',
        'postfix' => 'setPostfix',
        'postvalue_label' => 'setPostvalueLabel',
        'conditional' => 'setConditional',
        'icon' => 'setIcon',
        'tooltip_section' => 'setTooltipSection',
        'tooltip_is_elevated' => 'setTooltipIsElevated',
        'tooltip_is_important' => 'setTooltipIsImportant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'm_str_value' => 'getMStrValue',
        'm_b_can_set_token_override' => 'getMBCanSetTokenOverride',
        'm_e_provided_property_type' => 'getMEProvidedPropertyType',
        'm_str_css_class' => 'getMStrCssClass',
        'm_e_stats_usage_flags' => 'getMEStatsUsageFlags',
        'm_b_is_negative_attribute' => 'getMBIsNegativeAttribute',
        'm_str_disable_value' => 'getMStrDisableValue',
        'm_str_loc_token_override' => 'getMStrLocTokenOverride',
        'm_e_display_units' => 'getMEDisplayUnits',
        'scale_function' => 'getScaleFunction',
        'prefix' => 'getPrefix',
        'label' => 'getLabel',
        'postfix' => 'getPostfix',
        'postvalue_label' => 'getPostvalueLabel',
        'conditional' => 'getConditional',
        'icon' => 'getIcon',
        'tooltip_section' => 'getTooltipSection',
        'tooltip_is_elevated' => 'getTooltipIsElevated',
        'tooltip_is_important' => 'getTooltipIsImportant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('m_str_value', $data ?? [], null);
        $this->setIfExists('m_b_can_set_token_override', $data ?? [], null);
        $this->setIfExists('m_e_provided_property_type', $data ?? [], null);
        $this->setIfExists('m_str_css_class', $data ?? [], null);
        $this->setIfExists('m_e_stats_usage_flags', $data ?? [], null);
        $this->setIfExists('m_b_is_negative_attribute', $data ?? [], null);
        $this->setIfExists('m_str_disable_value', $data ?? [], null);
        $this->setIfExists('m_str_loc_token_override', $data ?? [], null);
        $this->setIfExists('m_e_display_units', $data ?? [], null);
        $this->setIfExists('scale_function', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('postfix', $data ?? [], null);
        $this->setIfExists('postvalue_label', $data ?? [], null);
        $this->setIfExists('conditional', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('tooltip_section', $data ?? [], null);
        $this->setIfExists('tooltip_is_elevated', $data ?? [], null);
        $this->setIfExists('tooltip_is_important', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets m_str_value
     *
     * @return \OpenAPI\Client\Model\MStrvalue|null
     */
    public function getMStrValue()
    {
        return $this->container['m_str_value'];
    }

    /**
     * Sets m_str_value
     *
     * @param \OpenAPI\Client\Model\MStrvalue|null $m_str_value m_str_value
     *
     * @return self
     */
    public function setMStrValue($m_str_value)
    {
        if (is_null($m_str_value)) {
            array_push($this->openAPINullablesSetToNull, 'm_str_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_str_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_str_value'] = $m_str_value;

        return $this;
    }

    /**
     * Gets m_b_can_set_token_override
     *
     * @return bool|null
     */
    public function getMBCanSetTokenOverride()
    {
        return $this->container['m_b_can_set_token_override'];
    }

    /**
     * Sets m_b_can_set_token_override
     *
     * @param bool|null $m_b_can_set_token_override m_b_can_set_token_override
     *
     * @return self
     */
    public function setMBCanSetTokenOverride($m_b_can_set_token_override)
    {
        if (is_null($m_b_can_set_token_override)) {
            array_push($this->openAPINullablesSetToNull, 'm_b_can_set_token_override');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_b_can_set_token_override', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_b_can_set_token_override'] = $m_b_can_set_token_override;

        return $this;
    }

    /**
     * Gets m_e_provided_property_type
     *
     * @return string|null
     */
    public function getMEProvidedPropertyType()
    {
        return $this->container['m_e_provided_property_type'];
    }

    /**
     * Sets m_e_provided_property_type
     *
     * @param string|null $m_e_provided_property_type m_e_provided_property_type
     *
     * @return self
     */
    public function setMEProvidedPropertyType($m_e_provided_property_type)
    {
        if (is_null($m_e_provided_property_type)) {
            array_push($this->openAPINullablesSetToNull, 'm_e_provided_property_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_e_provided_property_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_e_provided_property_type'] = $m_e_provided_property_type;

        return $this;
    }

    /**
     * Gets m_str_css_class
     *
     * @return string|null
     */
    public function getMStrCssClass()
    {
        return $this->container['m_str_css_class'];
    }

    /**
     * Sets m_str_css_class
     *
     * @param string|null $m_str_css_class m_str_css_class
     *
     * @return self
     */
    public function setMStrCssClass($m_str_css_class)
    {
        if (is_null($m_str_css_class)) {
            array_push($this->openAPINullablesSetToNull, 'm_str_css_class');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_str_css_class', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_str_css_class'] = $m_str_css_class;

        return $this;
    }

    /**
     * Gets m_e_stats_usage_flags
     *
     * @return \OpenAPI\Client\Model\MEstatsusageflags|null
     */
    public function getMEStatsUsageFlags()
    {
        return $this->container['m_e_stats_usage_flags'];
    }

    /**
     * Sets m_e_stats_usage_flags
     *
     * @param \OpenAPI\Client\Model\MEstatsusageflags|null $m_e_stats_usage_flags m_e_stats_usage_flags
     *
     * @return self
     */
    public function setMEStatsUsageFlags($m_e_stats_usage_flags)
    {
        if (is_null($m_e_stats_usage_flags)) {
            array_push($this->openAPINullablesSetToNull, 'm_e_stats_usage_flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_e_stats_usage_flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_e_stats_usage_flags'] = $m_e_stats_usage_flags;

        return $this;
    }

    /**
     * Gets m_b_is_negative_attribute
     *
     * @return bool|null
     */
    public function getMBIsNegativeAttribute()
    {
        return $this->container['m_b_is_negative_attribute'];
    }

    /**
     * Sets m_b_is_negative_attribute
     *
     * @param bool|null $m_b_is_negative_attribute m_b_is_negative_attribute
     *
     * @return self
     */
    public function setMBIsNegativeAttribute($m_b_is_negative_attribute)
    {
        if (is_null($m_b_is_negative_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'm_b_is_negative_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_b_is_negative_attribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_b_is_negative_attribute'] = $m_b_is_negative_attribute;

        return $this;
    }

    /**
     * Gets m_str_disable_value
     *
     * @return string|null
     */
    public function getMStrDisableValue()
    {
        return $this->container['m_str_disable_value'];
    }

    /**
     * Sets m_str_disable_value
     *
     * @param string|null $m_str_disable_value m_str_disable_value
     *
     * @return self
     */
    public function setMStrDisableValue($m_str_disable_value)
    {
        if (is_null($m_str_disable_value)) {
            array_push($this->openAPINullablesSetToNull, 'm_str_disable_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_str_disable_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_str_disable_value'] = $m_str_disable_value;

        return $this;
    }

    /**
     * Gets m_str_loc_token_override
     *
     * @return string|null
     */
    public function getMStrLocTokenOverride()
    {
        return $this->container['m_str_loc_token_override'];
    }

    /**
     * Sets m_str_loc_token_override
     *
     * @param string|null $m_str_loc_token_override m_str_loc_token_override
     *
     * @return self
     */
    public function setMStrLocTokenOverride($m_str_loc_token_override)
    {
        if (is_null($m_str_loc_token_override)) {
            array_push($this->openAPINullablesSetToNull, 'm_str_loc_token_override');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_str_loc_token_override', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_str_loc_token_override'] = $m_str_loc_token_override;

        return $this;
    }

    /**
     * Gets m_e_display_units
     *
     * @return string|null
     */
    public function getMEDisplayUnits()
    {
        return $this->container['m_e_display_units'];
    }

    /**
     * Sets m_e_display_units
     *
     * @param string|null $m_e_display_units m_e_display_units
     *
     * @return self
     */
    public function setMEDisplayUnits($m_e_display_units)
    {
        if (is_null($m_e_display_units)) {
            array_push($this->openAPINullablesSetToNull, 'm_e_display_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('m_e_display_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['m_e_display_units'] = $m_e_display_units;

        return $this;
    }

    /**
     * Gets scale_function
     *
     * @return \OpenAPI\Client\Model\RawItemPropertyScaleFunctionSubclassV2Input|null
     */
    public function getScaleFunction()
    {
        return $this->container['scale_function'];
    }

    /**
     * Sets scale_function
     *
     * @param \OpenAPI\Client\Model\RawItemPropertyScaleFunctionSubclassV2Input|null $scale_function scale_function
     *
     * @return self
     */
    public function setScaleFunction($scale_function)
    {
        if (is_null($scale_function)) {
            array_push($this->openAPINullablesSetToNull, 'scale_function');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scale_function', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scale_function'] = $scale_function;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets postfix
     *
     * @return string|null
     */
    public function getPostfix()
    {
        return $this->container['postfix'];
    }

    /**
     * Sets postfix
     *
     * @param string|null $postfix postfix
     *
     * @return self
     */
    public function setPostfix($postfix)
    {
        if (is_null($postfix)) {
            array_push($this->openAPINullablesSetToNull, 'postfix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postfix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postfix'] = $postfix;

        return $this;
    }

    /**
     * Gets postvalue_label
     *
     * @return string|null
     */
    public function getPostvalueLabel()
    {
        return $this->container['postvalue_label'];
    }

    /**
     * Sets postvalue_label
     *
     * @param string|null $postvalue_label postvalue_label
     *
     * @return self
     */
    public function setPostvalueLabel($postvalue_label)
    {
        if (is_null($postvalue_label)) {
            array_push($this->openAPINullablesSetToNull, 'postvalue_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postvalue_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postvalue_label'] = $postvalue_label;

        return $this;
    }

    /**
     * Gets conditional
     *
     * @return string|null
     */
    public function getConditional()
    {
        return $this->container['conditional'];
    }

    /**
     * Sets conditional
     *
     * @param string|null $conditional conditional
     *
     * @return self
     */
    public function setConditional($conditional)
    {
        if (is_null($conditional)) {
            array_push($this->openAPINullablesSetToNull, 'conditional');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conditional', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['conditional'] = $conditional;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            array_push($this->openAPINullablesSetToNull, 'icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets tooltip_section
     *
     * @return \OpenAPI\Client\Model\RawAbilitySectionTypeV2|null
     */
    public function getTooltipSection()
    {
        return $this->container['tooltip_section'];
    }

    /**
     * Sets tooltip_section
     *
     * @param \OpenAPI\Client\Model\RawAbilitySectionTypeV2|null $tooltip_section tooltip_section
     *
     * @return self
     */
    public function setTooltipSection($tooltip_section)
    {
        if (is_null($tooltip_section)) {
            array_push($this->openAPINullablesSetToNull, 'tooltip_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tooltip_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tooltip_section'] = $tooltip_section;

        return $this;
    }

    /**
     * Gets tooltip_is_elevated
     *
     * @return bool|null
     */
    public function getTooltipIsElevated()
    {
        return $this->container['tooltip_is_elevated'];
    }

    /**
     * Sets tooltip_is_elevated
     *
     * @param bool|null $tooltip_is_elevated tooltip_is_elevated
     *
     * @return self
     */
    public function setTooltipIsElevated($tooltip_is_elevated)
    {
        if (is_null($tooltip_is_elevated)) {
            array_push($this->openAPINullablesSetToNull, 'tooltip_is_elevated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tooltip_is_elevated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tooltip_is_elevated'] = $tooltip_is_elevated;

        return $this;
    }

    /**
     * Gets tooltip_is_important
     *
     * @return bool|null
     */
    public function getTooltipIsImportant()
    {
        return $this->container['tooltip_is_important'];
    }

    /**
     * Sets tooltip_is_important
     *
     * @param bool|null $tooltip_is_important tooltip_is_important
     *
     * @return self
     */
    public function setTooltipIsImportant($tooltip_is_important)
    {
        if (is_null($tooltip_is_important)) {
            array_push($this->openAPINullablesSetToNull, 'tooltip_is_important');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tooltip_is_important', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tooltip_is_important'] = $tooltip_is_important;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


