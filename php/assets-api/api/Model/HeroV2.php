<?php
/**
 * HeroV2
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeroV2 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeroV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeroV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'class_name' => 'string',
        'name' => 'string',
        'description' => '\OpenAPI\Client\Model\HeroDescriptionV2',
        'recommended_upgrades' => 'string[]',
        'recommended_ability_order' => 'string[]',
        'player_selectable' => 'bool',
        'disabled' => 'bool',
        'in_development' => 'bool',
        'needs_testing' => 'bool',
        'assigned_players_only' => 'bool',
        'tags' => 'string[]',
        'gun_tag' => 'string',
        'hideout_rich_presence' => 'string',
        'hero_type' => '\OpenAPI\Client\Model\HeroTypeV2',
        'prerelease_only' => 'bool',
        'limited_testing' => 'bool',
        'complexity' => 'int',
        'skin' => 'int',
        'images' => '\OpenAPI\Client\Model\HeroImagesV2',
        'items' => 'array<string,string>',
        'starting_stats' => '\OpenAPI\Client\Model\HeroStartingStatsV2',
        'item_slot_info' => 'array<string,\OpenAPI\Client\Model\RawHeroItemSlotInfoValueV2Output>',
        'physics' => '\OpenAPI\Client\Model\HeroPhysicsV2',
        'colors' => '\OpenAPI\Client\Model\HeroColorsV2',
        'shop_stat_display' => '\OpenAPI\Client\Model\HeroShopStatDisplayV2Output',
        'cost_bonuses' => 'array<string,\OpenAPI\Client\Model\RawHeroMapModCostBonusesV2Output[]>',
        'stats_display' => '\OpenAPI\Client\Model\RawHeroStatsDisplayV2Output',
        'hero_stats_ui' => '\OpenAPI\Client\Model\RawHeroStatsUIV2Output',
        'level_info' => 'array<string,\OpenAPI\Client\Model\HeroLevelInfoV2Output>',
        'scaling_stats' => 'array<string,\OpenAPI\Client\Model\RawHeroScalingStatV2Output>',
        'purchase_bonuses' => 'array<string,\OpenAPI\Client\Model\RawHeroPurchaseBonusV2Output[]>',
        'standard_level_up_upgrades' => 'array<string,float>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'class_name' => null,
        'name' => null,
        'description' => null,
        'recommended_upgrades' => null,
        'recommended_ability_order' => null,
        'player_selectable' => null,
        'disabled' => null,
        'in_development' => null,
        'needs_testing' => null,
        'assigned_players_only' => null,
        'tags' => null,
        'gun_tag' => null,
        'hideout_rich_presence' => null,
        'hero_type' => null,
        'prerelease_only' => null,
        'limited_testing' => null,
        'complexity' => null,
        'skin' => null,
        'images' => null,
        'items' => null,
        'starting_stats' => null,
        'item_slot_info' => null,
        'physics' => null,
        'colors' => null,
        'shop_stat_display' => null,
        'cost_bonuses' => null,
        'stats_display' => null,
        'hero_stats_ui' => null,
        'level_info' => null,
        'scaling_stats' => null,
        'purchase_bonuses' => null,
        'standard_level_up_upgrades' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'class_name' => false,
        'name' => false,
        'description' => false,
        'recommended_upgrades' => true,
        'recommended_ability_order' => true,
        'player_selectable' => false,
        'disabled' => false,
        'in_development' => false,
        'needs_testing' => false,
        'assigned_players_only' => false,
        'tags' => true,
        'gun_tag' => true,
        'hideout_rich_presence' => true,
        'hero_type' => true,
        'prerelease_only' => true,
        'limited_testing' => false,
        'complexity' => false,
        'skin' => false,
        'images' => false,
        'items' => false,
        'starting_stats' => false,
        'item_slot_info' => false,
        'physics' => false,
        'colors' => false,
        'shop_stat_display' => false,
        'cost_bonuses' => true,
        'stats_display' => false,
        'hero_stats_ui' => false,
        'level_info' => false,
        'scaling_stats' => false,
        'purchase_bonuses' => false,
        'standard_level_up_upgrades' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'class_name' => 'class_name',
        'name' => 'name',
        'description' => 'description',
        'recommended_upgrades' => 'recommended_upgrades',
        'recommended_ability_order' => 'recommended_ability_order',
        'player_selectable' => 'player_selectable',
        'disabled' => 'disabled',
        'in_development' => 'in_development',
        'needs_testing' => 'needs_testing',
        'assigned_players_only' => 'assigned_players_only',
        'tags' => 'tags',
        'gun_tag' => 'gun_tag',
        'hideout_rich_presence' => 'hideout_rich_presence',
        'hero_type' => 'hero_type',
        'prerelease_only' => 'prerelease_only',
        'limited_testing' => 'limited_testing',
        'complexity' => 'complexity',
        'skin' => 'skin',
        'images' => 'images',
        'items' => 'items',
        'starting_stats' => 'starting_stats',
        'item_slot_info' => 'item_slot_info',
        'physics' => 'physics',
        'colors' => 'colors',
        'shop_stat_display' => 'shop_stat_display',
        'cost_bonuses' => 'cost_bonuses',
        'stats_display' => 'stats_display',
        'hero_stats_ui' => 'hero_stats_ui',
        'level_info' => 'level_info',
        'scaling_stats' => 'scaling_stats',
        'purchase_bonuses' => 'purchase_bonuses',
        'standard_level_up_upgrades' => 'standard_level_up_upgrades'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'class_name' => 'setClassName',
        'name' => 'setName',
        'description' => 'setDescription',
        'recommended_upgrades' => 'setRecommendedUpgrades',
        'recommended_ability_order' => 'setRecommendedAbilityOrder',
        'player_selectable' => 'setPlayerSelectable',
        'disabled' => 'setDisabled',
        'in_development' => 'setInDevelopment',
        'needs_testing' => 'setNeedsTesting',
        'assigned_players_only' => 'setAssignedPlayersOnly',
        'tags' => 'setTags',
        'gun_tag' => 'setGunTag',
        'hideout_rich_presence' => 'setHideoutRichPresence',
        'hero_type' => 'setHeroType',
        'prerelease_only' => 'setPrereleaseOnly',
        'limited_testing' => 'setLimitedTesting',
        'complexity' => 'setComplexity',
        'skin' => 'setSkin',
        'images' => 'setImages',
        'items' => 'setItems',
        'starting_stats' => 'setStartingStats',
        'item_slot_info' => 'setItemSlotInfo',
        'physics' => 'setPhysics',
        'colors' => 'setColors',
        'shop_stat_display' => 'setShopStatDisplay',
        'cost_bonuses' => 'setCostBonuses',
        'stats_display' => 'setStatsDisplay',
        'hero_stats_ui' => 'setHeroStatsUi',
        'level_info' => 'setLevelInfo',
        'scaling_stats' => 'setScalingStats',
        'purchase_bonuses' => 'setPurchaseBonuses',
        'standard_level_up_upgrades' => 'setStandardLevelUpUpgrades'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'class_name' => 'getClassName',
        'name' => 'getName',
        'description' => 'getDescription',
        'recommended_upgrades' => 'getRecommendedUpgrades',
        'recommended_ability_order' => 'getRecommendedAbilityOrder',
        'player_selectable' => 'getPlayerSelectable',
        'disabled' => 'getDisabled',
        'in_development' => 'getInDevelopment',
        'needs_testing' => 'getNeedsTesting',
        'assigned_players_only' => 'getAssignedPlayersOnly',
        'tags' => 'getTags',
        'gun_tag' => 'getGunTag',
        'hideout_rich_presence' => 'getHideoutRichPresence',
        'hero_type' => 'getHeroType',
        'prerelease_only' => 'getPrereleaseOnly',
        'limited_testing' => 'getLimitedTesting',
        'complexity' => 'getComplexity',
        'skin' => 'getSkin',
        'images' => 'getImages',
        'items' => 'getItems',
        'starting_stats' => 'getStartingStats',
        'item_slot_info' => 'getItemSlotInfo',
        'physics' => 'getPhysics',
        'colors' => 'getColors',
        'shop_stat_display' => 'getShopStatDisplay',
        'cost_bonuses' => 'getCostBonuses',
        'stats_display' => 'getStatsDisplay',
        'hero_stats_ui' => 'getHeroStatsUi',
        'level_info' => 'getLevelInfo',
        'scaling_stats' => 'getScalingStats',
        'purchase_bonuses' => 'getPurchaseBonuses',
        'standard_level_up_upgrades' => 'getStandardLevelUpUpgrades'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('recommended_upgrades', $data ?? [], null);
        $this->setIfExists('recommended_ability_order', $data ?? [], null);
        $this->setIfExists('player_selectable', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('in_development', $data ?? [], null);
        $this->setIfExists('needs_testing', $data ?? [], null);
        $this->setIfExists('assigned_players_only', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('gun_tag', $data ?? [], null);
        $this->setIfExists('hideout_rich_presence', $data ?? [], null);
        $this->setIfExists('hero_type', $data ?? [], null);
        $this->setIfExists('prerelease_only', $data ?? [], null);
        $this->setIfExists('limited_testing', $data ?? [], null);
        $this->setIfExists('complexity', $data ?? [], null);
        $this->setIfExists('skin', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('starting_stats', $data ?? [], null);
        $this->setIfExists('item_slot_info', $data ?? [], null);
        $this->setIfExists('physics', $data ?? [], null);
        $this->setIfExists('colors', $data ?? [], null);
        $this->setIfExists('shop_stat_display', $data ?? [], null);
        $this->setIfExists('cost_bonuses', $data ?? [], null);
        $this->setIfExists('stats_display', $data ?? [], null);
        $this->setIfExists('hero_stats_ui', $data ?? [], null);
        $this->setIfExists('level_info', $data ?? [], null);
        $this->setIfExists('scaling_stats', $data ?? [], null);
        $this->setIfExists('purchase_bonuses', $data ?? [], null);
        $this->setIfExists('standard_level_up_upgrades', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['class_name'] === null) {
            $invalidProperties[] = "'class_name' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['player_selectable'] === null) {
            $invalidProperties[] = "'player_selectable' can't be null";
        }
        if ($this->container['disabled'] === null) {
            $invalidProperties[] = "'disabled' can't be null";
        }
        if ($this->container['in_development'] === null) {
            $invalidProperties[] = "'in_development' can't be null";
        }
        if ($this->container['needs_testing'] === null) {
            $invalidProperties[] = "'needs_testing' can't be null";
        }
        if ($this->container['assigned_players_only'] === null) {
            $invalidProperties[] = "'assigned_players_only' can't be null";
        }
        if ($this->container['limited_testing'] === null) {
            $invalidProperties[] = "'limited_testing' can't be null";
        }
        if ($this->container['complexity'] === null) {
            $invalidProperties[] = "'complexity' can't be null";
        }
        if ($this->container['skin'] === null) {
            $invalidProperties[] = "'skin' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['starting_stats'] === null) {
            $invalidProperties[] = "'starting_stats' can't be null";
        }
        if ($this->container['item_slot_info'] === null) {
            $invalidProperties[] = "'item_slot_info' can't be null";
        }
        if ($this->container['physics'] === null) {
            $invalidProperties[] = "'physics' can't be null";
        }
        if ($this->container['colors'] === null) {
            $invalidProperties[] = "'colors' can't be null";
        }
        if ($this->container['shop_stat_display'] === null) {
            $invalidProperties[] = "'shop_stat_display' can't be null";
        }
        if ($this->container['stats_display'] === null) {
            $invalidProperties[] = "'stats_display' can't be null";
        }
        if ($this->container['hero_stats_ui'] === null) {
            $invalidProperties[] = "'hero_stats_ui' can't be null";
        }
        if ($this->container['level_info'] === null) {
            $invalidProperties[] = "'level_info' can't be null";
        }
        if ($this->container['scaling_stats'] === null) {
            $invalidProperties[] = "'scaling_stats' can't be null";
        }
        if ($this->container['purchase_bonuses'] === null) {
            $invalidProperties[] = "'purchase_bonuses' can't be null";
        }
        if ($this->container['standard_level_up_upgrades'] === null) {
            $invalidProperties[] = "'standard_level_up_upgrades' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\HeroDescriptionV2
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\HeroDescriptionV2 $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets recommended_upgrades
     *
     * @return string[]|null
     */
    public function getRecommendedUpgrades()
    {
        return $this->container['recommended_upgrades'];
    }

    /**
     * Sets recommended_upgrades
     *
     * @param string[]|null $recommended_upgrades recommended_upgrades
     *
     * @return self
     */
    public function setRecommendedUpgrades($recommended_upgrades)
    {
        if (is_null($recommended_upgrades)) {
            array_push($this->openAPINullablesSetToNull, 'recommended_upgrades');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recommended_upgrades', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recommended_upgrades'] = $recommended_upgrades;

        return $this;
    }

    /**
     * Gets recommended_ability_order
     *
     * @return string[]|null
     */
    public function getRecommendedAbilityOrder()
    {
        return $this->container['recommended_ability_order'];
    }

    /**
     * Sets recommended_ability_order
     *
     * @param string[]|null $recommended_ability_order recommended_ability_order
     *
     * @return self
     */
    public function setRecommendedAbilityOrder($recommended_ability_order)
    {
        if (is_null($recommended_ability_order)) {
            array_push($this->openAPINullablesSetToNull, 'recommended_ability_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recommended_ability_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recommended_ability_order'] = $recommended_ability_order;

        return $this;
    }

    /**
     * Gets player_selectable
     *
     * @return bool
     */
    public function getPlayerSelectable()
    {
        return $this->container['player_selectable'];
    }

    /**
     * Sets player_selectable
     *
     * @param bool $player_selectable player_selectable
     *
     * @return self
     */
    public function setPlayerSelectable($player_selectable)
    {
        if (is_null($player_selectable)) {
            throw new \InvalidArgumentException('non-nullable player_selectable cannot be null');
        }
        $this->container['player_selectable'] = $player_selectable;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets in_development
     *
     * @return bool
     */
    public function getInDevelopment()
    {
        return $this->container['in_development'];
    }

    /**
     * Sets in_development
     *
     * @param bool $in_development in_development
     *
     * @return self
     */
    public function setInDevelopment($in_development)
    {
        if (is_null($in_development)) {
            throw new \InvalidArgumentException('non-nullable in_development cannot be null');
        }
        $this->container['in_development'] = $in_development;

        return $this;
    }

    /**
     * Gets needs_testing
     *
     * @return bool
     */
    public function getNeedsTesting()
    {
        return $this->container['needs_testing'];
    }

    /**
     * Sets needs_testing
     *
     * @param bool $needs_testing needs_testing
     *
     * @return self
     */
    public function setNeedsTesting($needs_testing)
    {
        if (is_null($needs_testing)) {
            throw new \InvalidArgumentException('non-nullable needs_testing cannot be null');
        }
        $this->container['needs_testing'] = $needs_testing;

        return $this;
    }

    /**
     * Gets assigned_players_only
     *
     * @return bool
     */
    public function getAssignedPlayersOnly()
    {
        return $this->container['assigned_players_only'];
    }

    /**
     * Sets assigned_players_only
     *
     * @param bool $assigned_players_only assigned_players_only
     *
     * @return self
     */
    public function setAssignedPlayersOnly($assigned_players_only)
    {
        if (is_null($assigned_players_only)) {
            throw new \InvalidArgumentException('non-nullable assigned_players_only cannot be null');
        }
        $this->container['assigned_players_only'] = $assigned_players_only;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets gun_tag
     *
     * @return string|null
     */
    public function getGunTag()
    {
        return $this->container['gun_tag'];
    }

    /**
     * Sets gun_tag
     *
     * @param string|null $gun_tag gun_tag
     *
     * @return self
     */
    public function setGunTag($gun_tag)
    {
        if (is_null($gun_tag)) {
            array_push($this->openAPINullablesSetToNull, 'gun_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gun_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gun_tag'] = $gun_tag;

        return $this;
    }

    /**
     * Gets hideout_rich_presence
     *
     * @return string|null
     */
    public function getHideoutRichPresence()
    {
        return $this->container['hideout_rich_presence'];
    }

    /**
     * Sets hideout_rich_presence
     *
     * @param string|null $hideout_rich_presence hideout_rich_presence
     *
     * @return self
     */
    public function setHideoutRichPresence($hideout_rich_presence)
    {
        if (is_null($hideout_rich_presence)) {
            array_push($this->openAPINullablesSetToNull, 'hideout_rich_presence');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hideout_rich_presence', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hideout_rich_presence'] = $hideout_rich_presence;

        return $this;
    }

    /**
     * Gets hero_type
     *
     * @return \OpenAPI\Client\Model\HeroTypeV2|null
     */
    public function getHeroType()
    {
        return $this->container['hero_type'];
    }

    /**
     * Sets hero_type
     *
     * @param \OpenAPI\Client\Model\HeroTypeV2|null $hero_type hero_type
     *
     * @return self
     */
    public function setHeroType($hero_type)
    {
        if (is_null($hero_type)) {
            array_push($this->openAPINullablesSetToNull, 'hero_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hero_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hero_type'] = $hero_type;

        return $this;
    }

    /**
     * Gets prerelease_only
     *
     * @return bool|null
     */
    public function getPrereleaseOnly()
    {
        return $this->container['prerelease_only'];
    }

    /**
     * Sets prerelease_only
     *
     * @param bool|null $prerelease_only prerelease_only
     *
     * @return self
     */
    public function setPrereleaseOnly($prerelease_only)
    {
        if (is_null($prerelease_only)) {
            array_push($this->openAPINullablesSetToNull, 'prerelease_only');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prerelease_only', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prerelease_only'] = $prerelease_only;

        return $this;
    }

    /**
     * Gets limited_testing
     *
     * @return bool
     */
    public function getLimitedTesting()
    {
        return $this->container['limited_testing'];
    }

    /**
     * Sets limited_testing
     *
     * @param bool $limited_testing limited_testing
     *
     * @return self
     */
    public function setLimitedTesting($limited_testing)
    {
        if (is_null($limited_testing)) {
            throw new \InvalidArgumentException('non-nullable limited_testing cannot be null');
        }
        $this->container['limited_testing'] = $limited_testing;

        return $this;
    }

    /**
     * Gets complexity
     *
     * @return int
     */
    public function getComplexity()
    {
        return $this->container['complexity'];
    }

    /**
     * Sets complexity
     *
     * @param int $complexity complexity
     *
     * @return self
     */
    public function setComplexity($complexity)
    {
        if (is_null($complexity)) {
            throw new \InvalidArgumentException('non-nullable complexity cannot be null');
        }
        $this->container['complexity'] = $complexity;

        return $this;
    }

    /**
     * Gets skin
     *
     * @return int
     */
    public function getSkin()
    {
        return $this->container['skin'];
    }

    /**
     * Sets skin
     *
     * @param int $skin skin
     *
     * @return self
     */
    public function setSkin($skin)
    {
        if (is_null($skin)) {
            throw new \InvalidArgumentException('non-nullable skin cannot be null');
        }
        $this->container['skin'] = $skin;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\HeroImagesV2
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\HeroImagesV2 $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets items
     *
     * @return array<string,string>
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param array<string,string> $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets starting_stats
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatsV2
     */
    public function getStartingStats()
    {
        return $this->container['starting_stats'];
    }

    /**
     * Sets starting_stats
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatsV2 $starting_stats starting_stats
     *
     * @return self
     */
    public function setStartingStats($starting_stats)
    {
        if (is_null($starting_stats)) {
            throw new \InvalidArgumentException('non-nullable starting_stats cannot be null');
        }
        $this->container['starting_stats'] = $starting_stats;

        return $this;
    }

    /**
     * Gets item_slot_info
     *
     * @return array<string,\OpenAPI\Client\Model\RawHeroItemSlotInfoValueV2Output>
     */
    public function getItemSlotInfo()
    {
        return $this->container['item_slot_info'];
    }

    /**
     * Sets item_slot_info
     *
     * @param array<string,\OpenAPI\Client\Model\RawHeroItemSlotInfoValueV2Output> $item_slot_info item_slot_info
     *
     * @return self
     */
    public function setItemSlotInfo($item_slot_info)
    {
        if (is_null($item_slot_info)) {
            throw new \InvalidArgumentException('non-nullable item_slot_info cannot be null');
        }
        $this->container['item_slot_info'] = $item_slot_info;

        return $this;
    }

    /**
     * Gets physics
     *
     * @return \OpenAPI\Client\Model\HeroPhysicsV2
     */
    public function getPhysics()
    {
        return $this->container['physics'];
    }

    /**
     * Sets physics
     *
     * @param \OpenAPI\Client\Model\HeroPhysicsV2 $physics physics
     *
     * @return self
     */
    public function setPhysics($physics)
    {
        if (is_null($physics)) {
            throw new \InvalidArgumentException('non-nullable physics cannot be null');
        }
        $this->container['physics'] = $physics;

        return $this;
    }

    /**
     * Gets colors
     *
     * @return \OpenAPI\Client\Model\HeroColorsV2
     */
    public function getColors()
    {
        return $this->container['colors'];
    }

    /**
     * Sets colors
     *
     * @param \OpenAPI\Client\Model\HeroColorsV2 $colors colors
     *
     * @return self
     */
    public function setColors($colors)
    {
        if (is_null($colors)) {
            throw new \InvalidArgumentException('non-nullable colors cannot be null');
        }
        $this->container['colors'] = $colors;

        return $this;
    }

    /**
     * Gets shop_stat_display
     *
     * @return \OpenAPI\Client\Model\HeroShopStatDisplayV2Output
     */
    public function getShopStatDisplay()
    {
        return $this->container['shop_stat_display'];
    }

    /**
     * Sets shop_stat_display
     *
     * @param \OpenAPI\Client\Model\HeroShopStatDisplayV2Output $shop_stat_display shop_stat_display
     *
     * @return self
     */
    public function setShopStatDisplay($shop_stat_display)
    {
        if (is_null($shop_stat_display)) {
            throw new \InvalidArgumentException('non-nullable shop_stat_display cannot be null');
        }
        $this->container['shop_stat_display'] = $shop_stat_display;

        return $this;
    }

    /**
     * Gets cost_bonuses
     *
     * @return array<string,\OpenAPI\Client\Model\RawHeroMapModCostBonusesV2Output[]>|null
     */
    public function getCostBonuses()
    {
        return $this->container['cost_bonuses'];
    }

    /**
     * Sets cost_bonuses
     *
     * @param array<string,\OpenAPI\Client\Model\RawHeroMapModCostBonusesV2Output[]>|null $cost_bonuses cost_bonuses
     *
     * @return self
     */
    public function setCostBonuses($cost_bonuses)
    {
        if (is_null($cost_bonuses)) {
            array_push($this->openAPINullablesSetToNull, 'cost_bonuses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_bonuses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_bonuses'] = $cost_bonuses;

        return $this;
    }

    /**
     * Gets stats_display
     *
     * @return \OpenAPI\Client\Model\RawHeroStatsDisplayV2Output
     */
    public function getStatsDisplay()
    {
        return $this->container['stats_display'];
    }

    /**
     * Sets stats_display
     *
     * @param \OpenAPI\Client\Model\RawHeroStatsDisplayV2Output $stats_display stats_display
     *
     * @return self
     */
    public function setStatsDisplay($stats_display)
    {
        if (is_null($stats_display)) {
            throw new \InvalidArgumentException('non-nullable stats_display cannot be null');
        }
        $this->container['stats_display'] = $stats_display;

        return $this;
    }

    /**
     * Gets hero_stats_ui
     *
     * @return \OpenAPI\Client\Model\RawHeroStatsUIV2Output
     */
    public function getHeroStatsUi()
    {
        return $this->container['hero_stats_ui'];
    }

    /**
     * Sets hero_stats_ui
     *
     * @param \OpenAPI\Client\Model\RawHeroStatsUIV2Output $hero_stats_ui hero_stats_ui
     *
     * @return self
     */
    public function setHeroStatsUi($hero_stats_ui)
    {
        if (is_null($hero_stats_ui)) {
            throw new \InvalidArgumentException('non-nullable hero_stats_ui cannot be null');
        }
        $this->container['hero_stats_ui'] = $hero_stats_ui;

        return $this;
    }

    /**
     * Gets level_info
     *
     * @return array<string,\OpenAPI\Client\Model\HeroLevelInfoV2Output>
     */
    public function getLevelInfo()
    {
        return $this->container['level_info'];
    }

    /**
     * Sets level_info
     *
     * @param array<string,\OpenAPI\Client\Model\HeroLevelInfoV2Output> $level_info level_info
     *
     * @return self
     */
    public function setLevelInfo($level_info)
    {
        if (is_null($level_info)) {
            throw new \InvalidArgumentException('non-nullable level_info cannot be null');
        }
        $this->container['level_info'] = $level_info;

        return $this;
    }

    /**
     * Gets scaling_stats
     *
     * @return array<string,\OpenAPI\Client\Model\RawHeroScalingStatV2Output>
     */
    public function getScalingStats()
    {
        return $this->container['scaling_stats'];
    }

    /**
     * Sets scaling_stats
     *
     * @param array<string,\OpenAPI\Client\Model\RawHeroScalingStatV2Output> $scaling_stats scaling_stats
     *
     * @return self
     */
    public function setScalingStats($scaling_stats)
    {
        if (is_null($scaling_stats)) {
            throw new \InvalidArgumentException('non-nullable scaling_stats cannot be null');
        }
        $this->container['scaling_stats'] = $scaling_stats;

        return $this;
    }

    /**
     * Gets purchase_bonuses
     *
     * @return array<string,\OpenAPI\Client\Model\RawHeroPurchaseBonusV2Output[]>
     */
    public function getPurchaseBonuses()
    {
        return $this->container['purchase_bonuses'];
    }

    /**
     * Sets purchase_bonuses
     *
     * @param array<string,\OpenAPI\Client\Model\RawHeroPurchaseBonusV2Output[]> $purchase_bonuses purchase_bonuses
     *
     * @return self
     */
    public function setPurchaseBonuses($purchase_bonuses)
    {
        if (is_null($purchase_bonuses)) {
            throw new \InvalidArgumentException('non-nullable purchase_bonuses cannot be null');
        }
        $this->container['purchase_bonuses'] = $purchase_bonuses;

        return $this;
    }

    /**
     * Gets standard_level_up_upgrades
     *
     * @return array<string,float>
     */
    public function getStandardLevelUpUpgrades()
    {
        return $this->container['standard_level_up_upgrades'];
    }

    /**
     * Sets standard_level_up_upgrades
     *
     * @param array<string,float> $standard_level_up_upgrades standard_level_up_upgrades
     *
     * @return self
     */
    public function setStandardLevelUpUpgrades($standard_level_up_upgrades)
    {
        if (is_null($standard_level_up_upgrades)) {
            throw new \InvalidArgumentException('non-nullable standard_level_up_upgrades cannot be null');
        }
        $this->container['standard_level_up_upgrades'] = $standard_level_up_upgrades;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


