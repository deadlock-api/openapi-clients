<?php
/**
 * AbilityV2Output
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AbilityV2Output Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AbilityV2Output implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AbilityV2-Output';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'class_name' => 'string',
        'name' => 'string',
        'start_trained' => 'bool',
        'image' => 'string',
        'image_webp' => 'string',
        'hero' => 'int',
        'heroes' => 'int[]',
        'update_time' => 'int',
        'properties' => 'array<string,\OpenAPI\Client\Model\ItemPropertyV2Output>',
        'weapon_info' => '\OpenAPI\Client\Model\RawItemWeaponInfoV2Output',
        'type' => 'string',
        'behaviours' => 'string[]',
        'description' => '\OpenAPI\Client\Model\AbilityDescriptionV2',
        'tooltip_details' => '\OpenAPI\Client\Model\AbilityTooltipDetailsV2Output',
        'upgrades' => '\OpenAPI\Client\Model\RawAbilityUpgradeV2Output[]',
        'ability_type' => '\OpenAPI\Client\Model\AbilityTypeV2',
        'boss_damage_scale' => 'float',
        'dependant_abilities' => 'string[]',
        'videos' => '\OpenAPI\Client\Model\AbilityVideosV2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'class_name' => null,
        'name' => null,
        'start_trained' => null,
        'image' => null,
        'image_webp' => null,
        'hero' => null,
        'heroes' => null,
        'update_time' => null,
        'properties' => null,
        'weapon_info' => null,
        'type' => null,
        'behaviours' => null,
        'description' => null,
        'tooltip_details' => null,
        'upgrades' => null,
        'ability_type' => null,
        'boss_damage_scale' => null,
        'dependant_abilities' => null,
        'videos' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'class_name' => false,
        'name' => false,
        'start_trained' => true,
        'image' => true,
        'image_webp' => true,
        'hero' => true,
        'heroes' => true,
        'update_time' => true,
        'properties' => true,
        'weapon_info' => true,
        'type' => false,
        'behaviours' => true,
        'description' => false,
        'tooltip_details' => true,
        'upgrades' => true,
        'ability_type' => true,
        'boss_damage_scale' => true,
        'dependant_abilities' => true,
        'videos' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'class_name' => 'class_name',
        'name' => 'name',
        'start_trained' => 'start_trained',
        'image' => 'image',
        'image_webp' => 'image_webp',
        'hero' => 'hero',
        'heroes' => 'heroes',
        'update_time' => 'update_time',
        'properties' => 'properties',
        'weapon_info' => 'weapon_info',
        'type' => 'type',
        'behaviours' => 'behaviours',
        'description' => 'description',
        'tooltip_details' => 'tooltip_details',
        'upgrades' => 'upgrades',
        'ability_type' => 'ability_type',
        'boss_damage_scale' => 'boss_damage_scale',
        'dependant_abilities' => 'dependant_abilities',
        'videos' => 'videos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'class_name' => 'setClassName',
        'name' => 'setName',
        'start_trained' => 'setStartTrained',
        'image' => 'setImage',
        'image_webp' => 'setImageWebp',
        'hero' => 'setHero',
        'heroes' => 'setHeroes',
        'update_time' => 'setUpdateTime',
        'properties' => 'setProperties',
        'weapon_info' => 'setWeaponInfo',
        'type' => 'setType',
        'behaviours' => 'setBehaviours',
        'description' => 'setDescription',
        'tooltip_details' => 'setTooltipDetails',
        'upgrades' => 'setUpgrades',
        'ability_type' => 'setAbilityType',
        'boss_damage_scale' => 'setBossDamageScale',
        'dependant_abilities' => 'setDependantAbilities',
        'videos' => 'setVideos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'class_name' => 'getClassName',
        'name' => 'getName',
        'start_trained' => 'getStartTrained',
        'image' => 'getImage',
        'image_webp' => 'getImageWebp',
        'hero' => 'getHero',
        'heroes' => 'getHeroes',
        'update_time' => 'getUpdateTime',
        'properties' => 'getProperties',
        'weapon_info' => 'getWeaponInfo',
        'type' => 'getType',
        'behaviours' => 'getBehaviours',
        'description' => 'getDescription',
        'tooltip_details' => 'getTooltipDetails',
        'upgrades' => 'getUpgrades',
        'ability_type' => 'getAbilityType',
        'boss_damage_scale' => 'getBossDamageScale',
        'dependant_abilities' => 'getDependantAbilities',
        'videos' => 'getVideos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ABILITY = 'ability';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ABILITY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('start_trained', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('image_webp', $data ?? [], null);
        $this->setIfExists('hero', $data ?? [], null);
        $this->setIfExists('heroes', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('weapon_info', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'ability');
        $this->setIfExists('behaviours', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('tooltip_details', $data ?? [], null);
        $this->setIfExists('upgrades', $data ?? [], null);
        $this->setIfExists('ability_type', $data ?? [], null);
        $this->setIfExists('boss_damage_scale', $data ?? [], null);
        $this->setIfExists('dependant_abilities', $data ?? [], null);
        $this->setIfExists('videos', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['class_name'] === null) {
            $invalidProperties[] = "'class_name' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_trained
     *
     * @return bool|null
     */
    public function getStartTrained()
    {
        return $this->container['start_trained'];
    }

    /**
     * Sets start_trained
     *
     * @param bool|null $start_trained start_trained
     *
     * @return self
     */
    public function setStartTrained($start_trained)
    {
        if (is_null($start_trained)) {
            array_push($this->openAPINullablesSetToNull, 'start_trained');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_trained', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_trained'] = $start_trained;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            array_push($this->openAPINullablesSetToNull, 'image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image_webp
     *
     * @return string|null
     */
    public function getImageWebp()
    {
        return $this->container['image_webp'];
    }

    /**
     * Sets image_webp
     *
     * @param string|null $image_webp image_webp
     *
     * @return self
     */
    public function setImageWebp($image_webp)
    {
        if (is_null($image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_webp'] = $image_webp;

        return $this;
    }

    /**
     * Gets hero
     *
     * @return int|null
     */
    public function getHero()
    {
        return $this->container['hero'];
    }

    /**
     * Sets hero
     *
     * @param int|null $hero hero
     *
     * @return self
     */
    public function setHero($hero)
    {
        if (is_null($hero)) {
            array_push($this->openAPINullablesSetToNull, 'hero');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hero', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hero'] = $hero;

        return $this;
    }

    /**
     * Gets heroes
     *
     * @return int[]|null
     */
    public function getHeroes()
    {
        return $this->container['heroes'];
    }

    /**
     * Sets heroes
     *
     * @param int[]|null $heroes heroes
     *
     * @return self
     */
    public function setHeroes($heroes)
    {
        if (is_null($heroes)) {
            array_push($this->openAPINullablesSetToNull, 'heroes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('heroes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['heroes'] = $heroes;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int|null $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            array_push($this->openAPINullablesSetToNull, 'update_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('update_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return array<string,\OpenAPI\Client\Model\ItemPropertyV2Output>|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param array<string,\OpenAPI\Client\Model\ItemPropertyV2Output>|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            array_push($this->openAPINullablesSetToNull, 'properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets weapon_info
     *
     * @return \OpenAPI\Client\Model\RawItemWeaponInfoV2Output|null
     */
    public function getWeaponInfo()
    {
        return $this->container['weapon_info'];
    }

    /**
     * Sets weapon_info
     *
     * @param \OpenAPI\Client\Model\RawItemWeaponInfoV2Output|null $weapon_info weapon_info
     *
     * @return self
     */
    public function setWeaponInfo($weapon_info)
    {
        if (is_null($weapon_info)) {
            array_push($this->openAPINullablesSetToNull, 'weapon_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weapon_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weapon_info'] = $weapon_info;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets behaviours
     *
     * @return string[]|null
     */
    public function getBehaviours()
    {
        return $this->container['behaviours'];
    }

    /**
     * Sets behaviours
     *
     * @param string[]|null $behaviours behaviours
     *
     * @return self
     */
    public function setBehaviours($behaviours)
    {
        if (is_null($behaviours)) {
            array_push($this->openAPINullablesSetToNull, 'behaviours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('behaviours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['behaviours'] = $behaviours;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\AbilityDescriptionV2
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\AbilityDescriptionV2 $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tooltip_details
     *
     * @return \OpenAPI\Client\Model\AbilityTooltipDetailsV2Output|null
     */
    public function getTooltipDetails()
    {
        return $this->container['tooltip_details'];
    }

    /**
     * Sets tooltip_details
     *
     * @param \OpenAPI\Client\Model\AbilityTooltipDetailsV2Output|null $tooltip_details tooltip_details
     *
     * @return self
     */
    public function setTooltipDetails($tooltip_details)
    {
        if (is_null($tooltip_details)) {
            array_push($this->openAPINullablesSetToNull, 'tooltip_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tooltip_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tooltip_details'] = $tooltip_details;

        return $this;
    }

    /**
     * Gets upgrades
     *
     * @return \OpenAPI\Client\Model\RawAbilityUpgradeV2Output[]|null
     */
    public function getUpgrades()
    {
        return $this->container['upgrades'];
    }

    /**
     * Sets upgrades
     *
     * @param \OpenAPI\Client\Model\RawAbilityUpgradeV2Output[]|null $upgrades upgrades
     *
     * @return self
     */
    public function setUpgrades($upgrades)
    {
        if (is_null($upgrades)) {
            array_push($this->openAPINullablesSetToNull, 'upgrades');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upgrades', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upgrades'] = $upgrades;

        return $this;
    }

    /**
     * Gets ability_type
     *
     * @return \OpenAPI\Client\Model\AbilityTypeV2|null
     */
    public function getAbilityType()
    {
        return $this->container['ability_type'];
    }

    /**
     * Sets ability_type
     *
     * @param \OpenAPI\Client\Model\AbilityTypeV2|null $ability_type ability_type
     *
     * @return self
     */
    public function setAbilityType($ability_type)
    {
        if (is_null($ability_type)) {
            array_push($this->openAPINullablesSetToNull, 'ability_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ability_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ability_type'] = $ability_type;

        return $this;
    }

    /**
     * Gets boss_damage_scale
     *
     * @return float|null
     */
    public function getBossDamageScale()
    {
        return $this->container['boss_damage_scale'];
    }

    /**
     * Sets boss_damage_scale
     *
     * @param float|null $boss_damage_scale boss_damage_scale
     *
     * @return self
     */
    public function setBossDamageScale($boss_damage_scale)
    {
        if (is_null($boss_damage_scale)) {
            array_push($this->openAPINullablesSetToNull, 'boss_damage_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boss_damage_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boss_damage_scale'] = $boss_damage_scale;

        return $this;
    }

    /**
     * Gets dependant_abilities
     *
     * @return string[]|null
     */
    public function getDependantAbilities()
    {
        return $this->container['dependant_abilities'];
    }

    /**
     * Sets dependant_abilities
     *
     * @param string[]|null $dependant_abilities dependant_abilities
     *
     * @return self
     */
    public function setDependantAbilities($dependant_abilities)
    {
        if (is_null($dependant_abilities)) {
            array_push($this->openAPINullablesSetToNull, 'dependant_abilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dependant_abilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dependant_abilities'] = $dependant_abilities;

        return $this;
    }

    /**
     * Gets videos
     *
     * @return \OpenAPI\Client\Model\AbilityVideosV2|null
     */
    public function getVideos()
    {
        return $this->container['videos'];
    }

    /**
     * Sets videos
     *
     * @param \OpenAPI\Client\Model\AbilityVideosV2|null $videos videos
     *
     * @return self
     */
    public function setVideos($videos)
    {
        if (is_null($videos)) {
            array_push($this->openAPINullablesSetToNull, 'videos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('videos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['videos'] = $videos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


