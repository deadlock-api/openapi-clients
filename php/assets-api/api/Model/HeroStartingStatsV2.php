<?php
/**
 * HeroStartingStatsV2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeroStartingStatsV2 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeroStartingStatsV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeroStartingStatsV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_move_speed' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'sprint_speed' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'crouch_speed' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'move_acceleration' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'light_melee_damage' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'heavy_melee_damage' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'max_health' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'weapon_power' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'reload_speed' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'weapon_power_scale' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'proc_build_up_rate_scale' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'stamina' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'base_health_regen' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'stamina_regen_per_second' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'ability_resource_max' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'ability_resource_regen_per_second' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'crit_damage_received_scale' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'tech_duration' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'tech_armor_damage_reduction' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'tech_range' => '\OpenAPI\Client\Model\HeroStartingStatV2',
        'bullet_armor_damage_reduction' => '\OpenAPI\Client\Model\HeroStartingStatV2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'max_move_speed' => null,
        'sprint_speed' => null,
        'crouch_speed' => null,
        'move_acceleration' => null,
        'light_melee_damage' => null,
        'heavy_melee_damage' => null,
        'max_health' => null,
        'weapon_power' => null,
        'reload_speed' => null,
        'weapon_power_scale' => null,
        'proc_build_up_rate_scale' => null,
        'stamina' => null,
        'base_health_regen' => null,
        'stamina_regen_per_second' => null,
        'ability_resource_max' => null,
        'ability_resource_regen_per_second' => null,
        'crit_damage_received_scale' => null,
        'tech_duration' => null,
        'tech_armor_damage_reduction' => null,
        'tech_range' => null,
        'bullet_armor_damage_reduction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'max_move_speed' => false,
        'sprint_speed' => false,
        'crouch_speed' => false,
        'move_acceleration' => false,
        'light_melee_damage' => false,
        'heavy_melee_damage' => false,
        'max_health' => false,
        'weapon_power' => false,
        'reload_speed' => false,
        'weapon_power_scale' => false,
        'proc_build_up_rate_scale' => false,
        'stamina' => false,
        'base_health_regen' => false,
        'stamina_regen_per_second' => false,
        'ability_resource_max' => false,
        'ability_resource_regen_per_second' => false,
        'crit_damage_received_scale' => false,
        'tech_duration' => false,
        'tech_armor_damage_reduction' => true,
        'tech_range' => false,
        'bullet_armor_damage_reduction' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_move_speed' => 'max_move_speed',
        'sprint_speed' => 'sprint_speed',
        'crouch_speed' => 'crouch_speed',
        'move_acceleration' => 'move_acceleration',
        'light_melee_damage' => 'light_melee_damage',
        'heavy_melee_damage' => 'heavy_melee_damage',
        'max_health' => 'max_health',
        'weapon_power' => 'weapon_power',
        'reload_speed' => 'reload_speed',
        'weapon_power_scale' => 'weapon_power_scale',
        'proc_build_up_rate_scale' => 'proc_build_up_rate_scale',
        'stamina' => 'stamina',
        'base_health_regen' => 'base_health_regen',
        'stamina_regen_per_second' => 'stamina_regen_per_second',
        'ability_resource_max' => 'ability_resource_max',
        'ability_resource_regen_per_second' => 'ability_resource_regen_per_second',
        'crit_damage_received_scale' => 'crit_damage_received_scale',
        'tech_duration' => 'tech_duration',
        'tech_armor_damage_reduction' => 'tech_armor_damage_reduction',
        'tech_range' => 'tech_range',
        'bullet_armor_damage_reduction' => 'bullet_armor_damage_reduction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_move_speed' => 'setMaxMoveSpeed',
        'sprint_speed' => 'setSprintSpeed',
        'crouch_speed' => 'setCrouchSpeed',
        'move_acceleration' => 'setMoveAcceleration',
        'light_melee_damage' => 'setLightMeleeDamage',
        'heavy_melee_damage' => 'setHeavyMeleeDamage',
        'max_health' => 'setMaxHealth',
        'weapon_power' => 'setWeaponPower',
        'reload_speed' => 'setReloadSpeed',
        'weapon_power_scale' => 'setWeaponPowerScale',
        'proc_build_up_rate_scale' => 'setProcBuildUpRateScale',
        'stamina' => 'setStamina',
        'base_health_regen' => 'setBaseHealthRegen',
        'stamina_regen_per_second' => 'setStaminaRegenPerSecond',
        'ability_resource_max' => 'setAbilityResourceMax',
        'ability_resource_regen_per_second' => 'setAbilityResourceRegenPerSecond',
        'crit_damage_received_scale' => 'setCritDamageReceivedScale',
        'tech_duration' => 'setTechDuration',
        'tech_armor_damage_reduction' => 'setTechArmorDamageReduction',
        'tech_range' => 'setTechRange',
        'bullet_armor_damage_reduction' => 'setBulletArmorDamageReduction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_move_speed' => 'getMaxMoveSpeed',
        'sprint_speed' => 'getSprintSpeed',
        'crouch_speed' => 'getCrouchSpeed',
        'move_acceleration' => 'getMoveAcceleration',
        'light_melee_damage' => 'getLightMeleeDamage',
        'heavy_melee_damage' => 'getHeavyMeleeDamage',
        'max_health' => 'getMaxHealth',
        'weapon_power' => 'getWeaponPower',
        'reload_speed' => 'getReloadSpeed',
        'weapon_power_scale' => 'getWeaponPowerScale',
        'proc_build_up_rate_scale' => 'getProcBuildUpRateScale',
        'stamina' => 'getStamina',
        'base_health_regen' => 'getBaseHealthRegen',
        'stamina_regen_per_second' => 'getStaminaRegenPerSecond',
        'ability_resource_max' => 'getAbilityResourceMax',
        'ability_resource_regen_per_second' => 'getAbilityResourceRegenPerSecond',
        'crit_damage_received_scale' => 'getCritDamageReceivedScale',
        'tech_duration' => 'getTechDuration',
        'tech_armor_damage_reduction' => 'getTechArmorDamageReduction',
        'tech_range' => 'getTechRange',
        'bullet_armor_damage_reduction' => 'getBulletArmorDamageReduction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('max_move_speed', $data ?? [], null);
        $this->setIfExists('sprint_speed', $data ?? [], null);
        $this->setIfExists('crouch_speed', $data ?? [], null);
        $this->setIfExists('move_acceleration', $data ?? [], null);
        $this->setIfExists('light_melee_damage', $data ?? [], null);
        $this->setIfExists('heavy_melee_damage', $data ?? [], null);
        $this->setIfExists('max_health', $data ?? [], null);
        $this->setIfExists('weapon_power', $data ?? [], null);
        $this->setIfExists('reload_speed', $data ?? [], null);
        $this->setIfExists('weapon_power_scale', $data ?? [], null);
        $this->setIfExists('proc_build_up_rate_scale', $data ?? [], null);
        $this->setIfExists('stamina', $data ?? [], null);
        $this->setIfExists('base_health_regen', $data ?? [], null);
        $this->setIfExists('stamina_regen_per_second', $data ?? [], null);
        $this->setIfExists('ability_resource_max', $data ?? [], null);
        $this->setIfExists('ability_resource_regen_per_second', $data ?? [], null);
        $this->setIfExists('crit_damage_received_scale', $data ?? [], null);
        $this->setIfExists('tech_duration', $data ?? [], null);
        $this->setIfExists('tech_armor_damage_reduction', $data ?? [], null);
        $this->setIfExists('tech_range', $data ?? [], null);
        $this->setIfExists('bullet_armor_damage_reduction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['max_move_speed'] === null) {
            $invalidProperties[] = "'max_move_speed' can't be null";
        }
        if ($this->container['sprint_speed'] === null) {
            $invalidProperties[] = "'sprint_speed' can't be null";
        }
        if ($this->container['crouch_speed'] === null) {
            $invalidProperties[] = "'crouch_speed' can't be null";
        }
        if ($this->container['move_acceleration'] === null) {
            $invalidProperties[] = "'move_acceleration' can't be null";
        }
        if ($this->container['light_melee_damage'] === null) {
            $invalidProperties[] = "'light_melee_damage' can't be null";
        }
        if ($this->container['heavy_melee_damage'] === null) {
            $invalidProperties[] = "'heavy_melee_damage' can't be null";
        }
        if ($this->container['max_health'] === null) {
            $invalidProperties[] = "'max_health' can't be null";
        }
        if ($this->container['weapon_power'] === null) {
            $invalidProperties[] = "'weapon_power' can't be null";
        }
        if ($this->container['reload_speed'] === null) {
            $invalidProperties[] = "'reload_speed' can't be null";
        }
        if ($this->container['weapon_power_scale'] === null) {
            $invalidProperties[] = "'weapon_power_scale' can't be null";
        }
        if ($this->container['proc_build_up_rate_scale'] === null) {
            $invalidProperties[] = "'proc_build_up_rate_scale' can't be null";
        }
        if ($this->container['stamina'] === null) {
            $invalidProperties[] = "'stamina' can't be null";
        }
        if ($this->container['base_health_regen'] === null) {
            $invalidProperties[] = "'base_health_regen' can't be null";
        }
        if ($this->container['stamina_regen_per_second'] === null) {
            $invalidProperties[] = "'stamina_regen_per_second' can't be null";
        }
        if ($this->container['ability_resource_max'] === null) {
            $invalidProperties[] = "'ability_resource_max' can't be null";
        }
        if ($this->container['ability_resource_regen_per_second'] === null) {
            $invalidProperties[] = "'ability_resource_regen_per_second' can't be null";
        }
        if ($this->container['crit_damage_received_scale'] === null) {
            $invalidProperties[] = "'crit_damage_received_scale' can't be null";
        }
        if ($this->container['tech_duration'] === null) {
            $invalidProperties[] = "'tech_duration' can't be null";
        }
        if ($this->container['tech_range'] === null) {
            $invalidProperties[] = "'tech_range' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_move_speed
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getMaxMoveSpeed()
    {
        return $this->container['max_move_speed'];
    }

    /**
     * Sets max_move_speed
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $max_move_speed max_move_speed
     *
     * @return self
     */
    public function setMaxMoveSpeed($max_move_speed)
    {
        if (is_null($max_move_speed)) {
            throw new \InvalidArgumentException('non-nullable max_move_speed cannot be null');
        }
        $this->container['max_move_speed'] = $max_move_speed;

        return $this;
    }

    /**
     * Gets sprint_speed
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getSprintSpeed()
    {
        return $this->container['sprint_speed'];
    }

    /**
     * Sets sprint_speed
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $sprint_speed sprint_speed
     *
     * @return self
     */
    public function setSprintSpeed($sprint_speed)
    {
        if (is_null($sprint_speed)) {
            throw new \InvalidArgumentException('non-nullable sprint_speed cannot be null');
        }
        $this->container['sprint_speed'] = $sprint_speed;

        return $this;
    }

    /**
     * Gets crouch_speed
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getCrouchSpeed()
    {
        return $this->container['crouch_speed'];
    }

    /**
     * Sets crouch_speed
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $crouch_speed crouch_speed
     *
     * @return self
     */
    public function setCrouchSpeed($crouch_speed)
    {
        if (is_null($crouch_speed)) {
            throw new \InvalidArgumentException('non-nullable crouch_speed cannot be null');
        }
        $this->container['crouch_speed'] = $crouch_speed;

        return $this;
    }

    /**
     * Gets move_acceleration
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getMoveAcceleration()
    {
        return $this->container['move_acceleration'];
    }

    /**
     * Sets move_acceleration
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $move_acceleration move_acceleration
     *
     * @return self
     */
    public function setMoveAcceleration($move_acceleration)
    {
        if (is_null($move_acceleration)) {
            throw new \InvalidArgumentException('non-nullable move_acceleration cannot be null');
        }
        $this->container['move_acceleration'] = $move_acceleration;

        return $this;
    }

    /**
     * Gets light_melee_damage
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getLightMeleeDamage()
    {
        return $this->container['light_melee_damage'];
    }

    /**
     * Sets light_melee_damage
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $light_melee_damage light_melee_damage
     *
     * @return self
     */
    public function setLightMeleeDamage($light_melee_damage)
    {
        if (is_null($light_melee_damage)) {
            throw new \InvalidArgumentException('non-nullable light_melee_damage cannot be null');
        }
        $this->container['light_melee_damage'] = $light_melee_damage;

        return $this;
    }

    /**
     * Gets heavy_melee_damage
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getHeavyMeleeDamage()
    {
        return $this->container['heavy_melee_damage'];
    }

    /**
     * Sets heavy_melee_damage
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $heavy_melee_damage heavy_melee_damage
     *
     * @return self
     */
    public function setHeavyMeleeDamage($heavy_melee_damage)
    {
        if (is_null($heavy_melee_damage)) {
            throw new \InvalidArgumentException('non-nullable heavy_melee_damage cannot be null');
        }
        $this->container['heavy_melee_damage'] = $heavy_melee_damage;

        return $this;
    }

    /**
     * Gets max_health
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getMaxHealth()
    {
        return $this->container['max_health'];
    }

    /**
     * Sets max_health
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $max_health max_health
     *
     * @return self
     */
    public function setMaxHealth($max_health)
    {
        if (is_null($max_health)) {
            throw new \InvalidArgumentException('non-nullable max_health cannot be null');
        }
        $this->container['max_health'] = $max_health;

        return $this;
    }

    /**
     * Gets weapon_power
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getWeaponPower()
    {
        return $this->container['weapon_power'];
    }

    /**
     * Sets weapon_power
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $weapon_power weapon_power
     *
     * @return self
     */
    public function setWeaponPower($weapon_power)
    {
        if (is_null($weapon_power)) {
            throw new \InvalidArgumentException('non-nullable weapon_power cannot be null');
        }
        $this->container['weapon_power'] = $weapon_power;

        return $this;
    }

    /**
     * Gets reload_speed
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getReloadSpeed()
    {
        return $this->container['reload_speed'];
    }

    /**
     * Sets reload_speed
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $reload_speed reload_speed
     *
     * @return self
     */
    public function setReloadSpeed($reload_speed)
    {
        if (is_null($reload_speed)) {
            throw new \InvalidArgumentException('non-nullable reload_speed cannot be null');
        }
        $this->container['reload_speed'] = $reload_speed;

        return $this;
    }

    /**
     * Gets weapon_power_scale
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getWeaponPowerScale()
    {
        return $this->container['weapon_power_scale'];
    }

    /**
     * Sets weapon_power_scale
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $weapon_power_scale weapon_power_scale
     *
     * @return self
     */
    public function setWeaponPowerScale($weapon_power_scale)
    {
        if (is_null($weapon_power_scale)) {
            throw new \InvalidArgumentException('non-nullable weapon_power_scale cannot be null');
        }
        $this->container['weapon_power_scale'] = $weapon_power_scale;

        return $this;
    }

    /**
     * Gets proc_build_up_rate_scale
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getProcBuildUpRateScale()
    {
        return $this->container['proc_build_up_rate_scale'];
    }

    /**
     * Sets proc_build_up_rate_scale
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $proc_build_up_rate_scale proc_build_up_rate_scale
     *
     * @return self
     */
    public function setProcBuildUpRateScale($proc_build_up_rate_scale)
    {
        if (is_null($proc_build_up_rate_scale)) {
            throw new \InvalidArgumentException('non-nullable proc_build_up_rate_scale cannot be null');
        }
        $this->container['proc_build_up_rate_scale'] = $proc_build_up_rate_scale;

        return $this;
    }

    /**
     * Gets stamina
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getStamina()
    {
        return $this->container['stamina'];
    }

    /**
     * Sets stamina
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $stamina stamina
     *
     * @return self
     */
    public function setStamina($stamina)
    {
        if (is_null($stamina)) {
            throw new \InvalidArgumentException('non-nullable stamina cannot be null');
        }
        $this->container['stamina'] = $stamina;

        return $this;
    }

    /**
     * Gets base_health_regen
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getBaseHealthRegen()
    {
        return $this->container['base_health_regen'];
    }

    /**
     * Sets base_health_regen
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $base_health_regen base_health_regen
     *
     * @return self
     */
    public function setBaseHealthRegen($base_health_regen)
    {
        if (is_null($base_health_regen)) {
            throw new \InvalidArgumentException('non-nullable base_health_regen cannot be null');
        }
        $this->container['base_health_regen'] = $base_health_regen;

        return $this;
    }

    /**
     * Gets stamina_regen_per_second
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getStaminaRegenPerSecond()
    {
        return $this->container['stamina_regen_per_second'];
    }

    /**
     * Sets stamina_regen_per_second
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $stamina_regen_per_second stamina_regen_per_second
     *
     * @return self
     */
    public function setStaminaRegenPerSecond($stamina_regen_per_second)
    {
        if (is_null($stamina_regen_per_second)) {
            throw new \InvalidArgumentException('non-nullable stamina_regen_per_second cannot be null');
        }
        $this->container['stamina_regen_per_second'] = $stamina_regen_per_second;

        return $this;
    }

    /**
     * Gets ability_resource_max
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getAbilityResourceMax()
    {
        return $this->container['ability_resource_max'];
    }

    /**
     * Sets ability_resource_max
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $ability_resource_max ability_resource_max
     *
     * @return self
     */
    public function setAbilityResourceMax($ability_resource_max)
    {
        if (is_null($ability_resource_max)) {
            throw new \InvalidArgumentException('non-nullable ability_resource_max cannot be null');
        }
        $this->container['ability_resource_max'] = $ability_resource_max;

        return $this;
    }

    /**
     * Gets ability_resource_regen_per_second
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getAbilityResourceRegenPerSecond()
    {
        return $this->container['ability_resource_regen_per_second'];
    }

    /**
     * Sets ability_resource_regen_per_second
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $ability_resource_regen_per_second ability_resource_regen_per_second
     *
     * @return self
     */
    public function setAbilityResourceRegenPerSecond($ability_resource_regen_per_second)
    {
        if (is_null($ability_resource_regen_per_second)) {
            throw new \InvalidArgumentException('non-nullable ability_resource_regen_per_second cannot be null');
        }
        $this->container['ability_resource_regen_per_second'] = $ability_resource_regen_per_second;

        return $this;
    }

    /**
     * Gets crit_damage_received_scale
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getCritDamageReceivedScale()
    {
        return $this->container['crit_damage_received_scale'];
    }

    /**
     * Sets crit_damage_received_scale
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $crit_damage_received_scale crit_damage_received_scale
     *
     * @return self
     */
    public function setCritDamageReceivedScale($crit_damage_received_scale)
    {
        if (is_null($crit_damage_received_scale)) {
            throw new \InvalidArgumentException('non-nullable crit_damage_received_scale cannot be null');
        }
        $this->container['crit_damage_received_scale'] = $crit_damage_received_scale;

        return $this;
    }

    /**
     * Gets tech_duration
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getTechDuration()
    {
        return $this->container['tech_duration'];
    }

    /**
     * Sets tech_duration
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $tech_duration tech_duration
     *
     * @return self
     */
    public function setTechDuration($tech_duration)
    {
        if (is_null($tech_duration)) {
            throw new \InvalidArgumentException('non-nullable tech_duration cannot be null');
        }
        $this->container['tech_duration'] = $tech_duration;

        return $this;
    }

    /**
     * Gets tech_armor_damage_reduction
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2|null
     */
    public function getTechArmorDamageReduction()
    {
        return $this->container['tech_armor_damage_reduction'];
    }

    /**
     * Sets tech_armor_damage_reduction
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2|null $tech_armor_damage_reduction tech_armor_damage_reduction
     *
     * @return self
     */
    public function setTechArmorDamageReduction($tech_armor_damage_reduction)
    {
        if (is_null($tech_armor_damage_reduction)) {
            array_push($this->openAPINullablesSetToNull, 'tech_armor_damage_reduction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tech_armor_damage_reduction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tech_armor_damage_reduction'] = $tech_armor_damage_reduction;

        return $this;
    }

    /**
     * Gets tech_range
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2
     */
    public function getTechRange()
    {
        return $this->container['tech_range'];
    }

    /**
     * Sets tech_range
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2 $tech_range tech_range
     *
     * @return self
     */
    public function setTechRange($tech_range)
    {
        if (is_null($tech_range)) {
            throw new \InvalidArgumentException('non-nullable tech_range cannot be null');
        }
        $this->container['tech_range'] = $tech_range;

        return $this;
    }

    /**
     * Gets bullet_armor_damage_reduction
     *
     * @return \OpenAPI\Client\Model\HeroStartingStatV2|null
     */
    public function getBulletArmorDamageReduction()
    {
        return $this->container['bullet_armor_damage_reduction'];
    }

    /**
     * Sets bullet_armor_damage_reduction
     *
     * @param \OpenAPI\Client\Model\HeroStartingStatV2|null $bullet_armor_damage_reduction bullet_armor_damage_reduction
     *
     * @return self
     */
    public function setBulletArmorDamageReduction($bullet_armor_damage_reduction)
    {
        if (is_null($bullet_armor_damage_reduction)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_armor_damage_reduction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_armor_damage_reduction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_armor_damage_reduction'] = $bullet_armor_damage_reduction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


