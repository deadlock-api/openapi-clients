<?php
/**
 * HeroImagesV2
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeroImagesV2 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeroImagesV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeroImagesV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'icon_hero_card' => 'string',
        'icon_hero_card_webp' => 'string',
        'icon_image_small' => 'string',
        'icon_image_small_webp' => 'string',
        'minimap_image' => 'string',
        'minimap_image_webp' => 'string',
        'selection_image' => 'string',
        'selection_image_webp' => 'string',
        'top_bar_image' => 'string',
        'top_bar_image_webp' => 'string',
        'top_bar_vertical_image' => 'string',
        'top_bar_vertical_image_webp' => 'string',
        'weapon_image' => 'string',
        'weapon_image_webp' => 'string',
        'background_image' => 'string',
        'background_image_webp' => 'string',
        'name_image' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'icon_hero_card' => null,
        'icon_hero_card_webp' => null,
        'icon_image_small' => null,
        'icon_image_small_webp' => null,
        'minimap_image' => null,
        'minimap_image_webp' => null,
        'selection_image' => null,
        'selection_image_webp' => null,
        'top_bar_image' => null,
        'top_bar_image_webp' => null,
        'top_bar_vertical_image' => null,
        'top_bar_vertical_image_webp' => null,
        'weapon_image' => null,
        'weapon_image_webp' => null,
        'background_image' => null,
        'background_image_webp' => null,
        'name_image' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'icon_hero_card' => true,
        'icon_hero_card_webp' => true,
        'icon_image_small' => true,
        'icon_image_small_webp' => true,
        'minimap_image' => true,
        'minimap_image_webp' => true,
        'selection_image' => true,
        'selection_image_webp' => true,
        'top_bar_image' => true,
        'top_bar_image_webp' => true,
        'top_bar_vertical_image' => true,
        'top_bar_vertical_image_webp' => true,
        'weapon_image' => true,
        'weapon_image_webp' => true,
        'background_image' => true,
        'background_image_webp' => true,
        'name_image' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icon_hero_card' => 'icon_hero_card',
        'icon_hero_card_webp' => 'icon_hero_card_webp',
        'icon_image_small' => 'icon_image_small',
        'icon_image_small_webp' => 'icon_image_small_webp',
        'minimap_image' => 'minimap_image',
        'minimap_image_webp' => 'minimap_image_webp',
        'selection_image' => 'selection_image',
        'selection_image_webp' => 'selection_image_webp',
        'top_bar_image' => 'top_bar_image',
        'top_bar_image_webp' => 'top_bar_image_webp',
        'top_bar_vertical_image' => 'top_bar_vertical_image',
        'top_bar_vertical_image_webp' => 'top_bar_vertical_image_webp',
        'weapon_image' => 'weapon_image',
        'weapon_image_webp' => 'weapon_image_webp',
        'background_image' => 'background_image',
        'background_image_webp' => 'background_image_webp',
        'name_image' => 'name_image'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icon_hero_card' => 'setIconHeroCard',
        'icon_hero_card_webp' => 'setIconHeroCardWebp',
        'icon_image_small' => 'setIconImageSmall',
        'icon_image_small_webp' => 'setIconImageSmallWebp',
        'minimap_image' => 'setMinimapImage',
        'minimap_image_webp' => 'setMinimapImageWebp',
        'selection_image' => 'setSelectionImage',
        'selection_image_webp' => 'setSelectionImageWebp',
        'top_bar_image' => 'setTopBarImage',
        'top_bar_image_webp' => 'setTopBarImageWebp',
        'top_bar_vertical_image' => 'setTopBarVerticalImage',
        'top_bar_vertical_image_webp' => 'setTopBarVerticalImageWebp',
        'weapon_image' => 'setWeaponImage',
        'weapon_image_webp' => 'setWeaponImageWebp',
        'background_image' => 'setBackgroundImage',
        'background_image_webp' => 'setBackgroundImageWebp',
        'name_image' => 'setNameImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icon_hero_card' => 'getIconHeroCard',
        'icon_hero_card_webp' => 'getIconHeroCardWebp',
        'icon_image_small' => 'getIconImageSmall',
        'icon_image_small_webp' => 'getIconImageSmallWebp',
        'minimap_image' => 'getMinimapImage',
        'minimap_image_webp' => 'getMinimapImageWebp',
        'selection_image' => 'getSelectionImage',
        'selection_image_webp' => 'getSelectionImageWebp',
        'top_bar_image' => 'getTopBarImage',
        'top_bar_image_webp' => 'getTopBarImageWebp',
        'top_bar_vertical_image' => 'getTopBarVerticalImage',
        'top_bar_vertical_image_webp' => 'getTopBarVerticalImageWebp',
        'weapon_image' => 'getWeaponImage',
        'weapon_image_webp' => 'getWeaponImageWebp',
        'background_image' => 'getBackgroundImage',
        'background_image_webp' => 'getBackgroundImageWebp',
        'name_image' => 'getNameImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('icon_hero_card', $data ?? [], null);
        $this->setIfExists('icon_hero_card_webp', $data ?? [], null);
        $this->setIfExists('icon_image_small', $data ?? [], null);
        $this->setIfExists('icon_image_small_webp', $data ?? [], null);
        $this->setIfExists('minimap_image', $data ?? [], null);
        $this->setIfExists('minimap_image_webp', $data ?? [], null);
        $this->setIfExists('selection_image', $data ?? [], null);
        $this->setIfExists('selection_image_webp', $data ?? [], null);
        $this->setIfExists('top_bar_image', $data ?? [], null);
        $this->setIfExists('top_bar_image_webp', $data ?? [], null);
        $this->setIfExists('top_bar_vertical_image', $data ?? [], null);
        $this->setIfExists('top_bar_vertical_image_webp', $data ?? [], null);
        $this->setIfExists('weapon_image', $data ?? [], null);
        $this->setIfExists('weapon_image_webp', $data ?? [], null);
        $this->setIfExists('background_image', $data ?? [], null);
        $this->setIfExists('background_image_webp', $data ?? [], null);
        $this->setIfExists('name_image', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icon_hero_card
     *
     * @return string|null
     */
    public function getIconHeroCard()
    {
        return $this->container['icon_hero_card'];
    }

    /**
     * Sets icon_hero_card
     *
     * @param string|null $icon_hero_card icon_hero_card
     *
     * @return self
     */
    public function setIconHeroCard($icon_hero_card)
    {
        if (is_null($icon_hero_card)) {
            array_push($this->openAPINullablesSetToNull, 'icon_hero_card');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_hero_card', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_hero_card'] = $icon_hero_card;

        return $this;
    }

    /**
     * Gets icon_hero_card_webp
     *
     * @return string|null
     */
    public function getIconHeroCardWebp()
    {
        return $this->container['icon_hero_card_webp'];
    }

    /**
     * Sets icon_hero_card_webp
     *
     * @param string|null $icon_hero_card_webp icon_hero_card_webp
     *
     * @return self
     */
    public function setIconHeroCardWebp($icon_hero_card_webp)
    {
        if (is_null($icon_hero_card_webp)) {
            array_push($this->openAPINullablesSetToNull, 'icon_hero_card_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_hero_card_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_hero_card_webp'] = $icon_hero_card_webp;

        return $this;
    }

    /**
     * Gets icon_image_small
     *
     * @return string|null
     */
    public function getIconImageSmall()
    {
        return $this->container['icon_image_small'];
    }

    /**
     * Sets icon_image_small
     *
     * @param string|null $icon_image_small icon_image_small
     *
     * @return self
     */
    public function setIconImageSmall($icon_image_small)
    {
        if (is_null($icon_image_small)) {
            array_push($this->openAPINullablesSetToNull, 'icon_image_small');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_image_small', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_image_small'] = $icon_image_small;

        return $this;
    }

    /**
     * Gets icon_image_small_webp
     *
     * @return string|null
     */
    public function getIconImageSmallWebp()
    {
        return $this->container['icon_image_small_webp'];
    }

    /**
     * Sets icon_image_small_webp
     *
     * @param string|null $icon_image_small_webp icon_image_small_webp
     *
     * @return self
     */
    public function setIconImageSmallWebp($icon_image_small_webp)
    {
        if (is_null($icon_image_small_webp)) {
            array_push($this->openAPINullablesSetToNull, 'icon_image_small_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_image_small_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_image_small_webp'] = $icon_image_small_webp;

        return $this;
    }

    /**
     * Gets minimap_image
     *
     * @return string|null
     */
    public function getMinimapImage()
    {
        return $this->container['minimap_image'];
    }

    /**
     * Sets minimap_image
     *
     * @param string|null $minimap_image minimap_image
     *
     * @return self
     */
    public function setMinimapImage($minimap_image)
    {
        if (is_null($minimap_image)) {
            array_push($this->openAPINullablesSetToNull, 'minimap_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimap_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimap_image'] = $minimap_image;

        return $this;
    }

    /**
     * Gets minimap_image_webp
     *
     * @return string|null
     */
    public function getMinimapImageWebp()
    {
        return $this->container['minimap_image_webp'];
    }

    /**
     * Sets minimap_image_webp
     *
     * @param string|null $minimap_image_webp minimap_image_webp
     *
     * @return self
     */
    public function setMinimapImageWebp($minimap_image_webp)
    {
        if (is_null($minimap_image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'minimap_image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimap_image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimap_image_webp'] = $minimap_image_webp;

        return $this;
    }

    /**
     * Gets selection_image
     *
     * @return string|null
     */
    public function getSelectionImage()
    {
        return $this->container['selection_image'];
    }

    /**
     * Sets selection_image
     *
     * @param string|null $selection_image selection_image
     *
     * @return self
     */
    public function setSelectionImage($selection_image)
    {
        if (is_null($selection_image)) {
            array_push($this->openAPINullablesSetToNull, 'selection_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selection_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selection_image'] = $selection_image;

        return $this;
    }

    /**
     * Gets selection_image_webp
     *
     * @return string|null
     */
    public function getSelectionImageWebp()
    {
        return $this->container['selection_image_webp'];
    }

    /**
     * Sets selection_image_webp
     *
     * @param string|null $selection_image_webp selection_image_webp
     *
     * @return self
     */
    public function setSelectionImageWebp($selection_image_webp)
    {
        if (is_null($selection_image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'selection_image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selection_image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selection_image_webp'] = $selection_image_webp;

        return $this;
    }

    /**
     * Gets top_bar_image
     *
     * @return string|null
     */
    public function getTopBarImage()
    {
        return $this->container['top_bar_image'];
    }

    /**
     * Sets top_bar_image
     *
     * @param string|null $top_bar_image top_bar_image
     *
     * @return self
     */
    public function setTopBarImage($top_bar_image)
    {
        if (is_null($top_bar_image)) {
            array_push($this->openAPINullablesSetToNull, 'top_bar_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_bar_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_bar_image'] = $top_bar_image;

        return $this;
    }

    /**
     * Gets top_bar_image_webp
     *
     * @return string|null
     */
    public function getTopBarImageWebp()
    {
        return $this->container['top_bar_image_webp'];
    }

    /**
     * Sets top_bar_image_webp
     *
     * @param string|null $top_bar_image_webp top_bar_image_webp
     *
     * @return self
     */
    public function setTopBarImageWebp($top_bar_image_webp)
    {
        if (is_null($top_bar_image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'top_bar_image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_bar_image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_bar_image_webp'] = $top_bar_image_webp;

        return $this;
    }

    /**
     * Gets top_bar_vertical_image
     *
     * @return string|null
     */
    public function getTopBarVerticalImage()
    {
        return $this->container['top_bar_vertical_image'];
    }

    /**
     * Sets top_bar_vertical_image
     *
     * @param string|null $top_bar_vertical_image top_bar_vertical_image
     *
     * @return self
     */
    public function setTopBarVerticalImage($top_bar_vertical_image)
    {
        if (is_null($top_bar_vertical_image)) {
            array_push($this->openAPINullablesSetToNull, 'top_bar_vertical_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_bar_vertical_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_bar_vertical_image'] = $top_bar_vertical_image;

        return $this;
    }

    /**
     * Gets top_bar_vertical_image_webp
     *
     * @return string|null
     */
    public function getTopBarVerticalImageWebp()
    {
        return $this->container['top_bar_vertical_image_webp'];
    }

    /**
     * Sets top_bar_vertical_image_webp
     *
     * @param string|null $top_bar_vertical_image_webp top_bar_vertical_image_webp
     *
     * @return self
     */
    public function setTopBarVerticalImageWebp($top_bar_vertical_image_webp)
    {
        if (is_null($top_bar_vertical_image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'top_bar_vertical_image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_bar_vertical_image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_bar_vertical_image_webp'] = $top_bar_vertical_image_webp;

        return $this;
    }

    /**
     * Gets weapon_image
     *
     * @return string|null
     */
    public function getWeaponImage()
    {
        return $this->container['weapon_image'];
    }

    /**
     * Sets weapon_image
     *
     * @param string|null $weapon_image weapon_image
     *
     * @return self
     */
    public function setWeaponImage($weapon_image)
    {
        if (is_null($weapon_image)) {
            array_push($this->openAPINullablesSetToNull, 'weapon_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weapon_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weapon_image'] = $weapon_image;

        return $this;
    }

    /**
     * Gets weapon_image_webp
     *
     * @return string|null
     */
    public function getWeaponImageWebp()
    {
        return $this->container['weapon_image_webp'];
    }

    /**
     * Sets weapon_image_webp
     *
     * @param string|null $weapon_image_webp weapon_image_webp
     *
     * @return self
     */
    public function setWeaponImageWebp($weapon_image_webp)
    {
        if (is_null($weapon_image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'weapon_image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weapon_image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weapon_image_webp'] = $weapon_image_webp;

        return $this;
    }

    /**
     * Gets background_image
     *
     * @return string|null
     */
    public function getBackgroundImage()
    {
        return $this->container['background_image'];
    }

    /**
     * Sets background_image
     *
     * @param string|null $background_image background_image
     *
     * @return self
     */
    public function setBackgroundImage($background_image)
    {
        if (is_null($background_image)) {
            array_push($this->openAPINullablesSetToNull, 'background_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_image'] = $background_image;

        return $this;
    }

    /**
     * Gets background_image_webp
     *
     * @return string|null
     */
    public function getBackgroundImageWebp()
    {
        return $this->container['background_image_webp'];
    }

    /**
     * Sets background_image_webp
     *
     * @param string|null $background_image_webp background_image_webp
     *
     * @return self
     */
    public function setBackgroundImageWebp($background_image_webp)
    {
        if (is_null($background_image_webp)) {
            array_push($this->openAPINullablesSetToNull, 'background_image_webp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_image_webp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_image_webp'] = $background_image_webp;

        return $this;
    }

    /**
     * Gets name_image
     *
     * @return string|null
     */
    public function getNameImage()
    {
        return $this->container['name_image'];
    }

    /**
     * Sets name_image
     *
     * @param string|null $name_image name_image
     *
     * @return self
     */
    public function setNameImage($name_image)
    {
        if (is_null($name_image)) {
            array_push($this->openAPINullablesSetToNull, 'name_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name_image'] = $name_image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


