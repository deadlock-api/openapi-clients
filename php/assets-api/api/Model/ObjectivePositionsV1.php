<?php
/**
 * ObjectivePositionsV1
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assets - Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjectivePositionsV1 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjectivePositionsV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ObjectivePositionsV1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'team0_core' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_core' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_titan' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_titan' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier2_1' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier2_2' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier2_3' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier2_4' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier2_1' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier2_2' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier2_3' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier2_4' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier1_1' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier1_2' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier1_3' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team0_tier1_4' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier1_1' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier1_2' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier1_3' => '\OpenAPI\Client\Model\ObjectivePositionV1',
        'team1_tier1_4' => '\OpenAPI\Client\Model\ObjectivePositionV1'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'team0_core' => null,
        'team1_core' => null,
        'team0_titan' => null,
        'team1_titan' => null,
        'team0_tier2_1' => null,
        'team0_tier2_2' => null,
        'team0_tier2_3' => null,
        'team0_tier2_4' => null,
        'team1_tier2_1' => null,
        'team1_tier2_2' => null,
        'team1_tier2_3' => null,
        'team1_tier2_4' => null,
        'team0_tier1_1' => null,
        'team0_tier1_2' => null,
        'team0_tier1_3' => null,
        'team0_tier1_4' => null,
        'team1_tier1_1' => null,
        'team1_tier1_2' => null,
        'team1_tier1_3' => null,
        'team1_tier1_4' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'team0_core' => false,
        'team1_core' => false,
        'team0_titan' => false,
        'team1_titan' => false,
        'team0_tier2_1' => false,
        'team0_tier2_2' => true,
        'team0_tier2_3' => false,
        'team0_tier2_4' => false,
        'team1_tier2_1' => false,
        'team1_tier2_2' => true,
        'team1_tier2_3' => false,
        'team1_tier2_4' => false,
        'team0_tier1_1' => false,
        'team0_tier1_2' => true,
        'team0_tier1_3' => false,
        'team0_tier1_4' => false,
        'team1_tier1_1' => false,
        'team1_tier1_2' => true,
        'team1_tier1_3' => false,
        'team1_tier1_4' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'team0_core' => 'team0_core',
        'team1_core' => 'team1_core',
        'team0_titan' => 'team0_titan',
        'team1_titan' => 'team1_titan',
        'team0_tier2_1' => 'team0_tier2_1',
        'team0_tier2_2' => 'team0_tier2_2',
        'team0_tier2_3' => 'team0_tier2_3',
        'team0_tier2_4' => 'team0_tier2_4',
        'team1_tier2_1' => 'team1_tier2_1',
        'team1_tier2_2' => 'team1_tier2_2',
        'team1_tier2_3' => 'team1_tier2_3',
        'team1_tier2_4' => 'team1_tier2_4',
        'team0_tier1_1' => 'team0_tier1_1',
        'team0_tier1_2' => 'team0_tier1_2',
        'team0_tier1_3' => 'team0_tier1_3',
        'team0_tier1_4' => 'team0_tier1_4',
        'team1_tier1_1' => 'team1_tier1_1',
        'team1_tier1_2' => 'team1_tier1_2',
        'team1_tier1_3' => 'team1_tier1_3',
        'team1_tier1_4' => 'team1_tier1_4'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'team0_core' => 'setTeam0Core',
        'team1_core' => 'setTeam1Core',
        'team0_titan' => 'setTeam0Titan',
        'team1_titan' => 'setTeam1Titan',
        'team0_tier2_1' => 'setTeam0Tier21',
        'team0_tier2_2' => 'setTeam0Tier22',
        'team0_tier2_3' => 'setTeam0Tier23',
        'team0_tier2_4' => 'setTeam0Tier24',
        'team1_tier2_1' => 'setTeam1Tier21',
        'team1_tier2_2' => 'setTeam1Tier22',
        'team1_tier2_3' => 'setTeam1Tier23',
        'team1_tier2_4' => 'setTeam1Tier24',
        'team0_tier1_1' => 'setTeam0Tier11',
        'team0_tier1_2' => 'setTeam0Tier12',
        'team0_tier1_3' => 'setTeam0Tier13',
        'team0_tier1_4' => 'setTeam0Tier14',
        'team1_tier1_1' => 'setTeam1Tier11',
        'team1_tier1_2' => 'setTeam1Tier12',
        'team1_tier1_3' => 'setTeam1Tier13',
        'team1_tier1_4' => 'setTeam1Tier14'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'team0_core' => 'getTeam0Core',
        'team1_core' => 'getTeam1Core',
        'team0_titan' => 'getTeam0Titan',
        'team1_titan' => 'getTeam1Titan',
        'team0_tier2_1' => 'getTeam0Tier21',
        'team0_tier2_2' => 'getTeam0Tier22',
        'team0_tier2_3' => 'getTeam0Tier23',
        'team0_tier2_4' => 'getTeam0Tier24',
        'team1_tier2_1' => 'getTeam1Tier21',
        'team1_tier2_2' => 'getTeam1Tier22',
        'team1_tier2_3' => 'getTeam1Tier23',
        'team1_tier2_4' => 'getTeam1Tier24',
        'team0_tier1_1' => 'getTeam0Tier11',
        'team0_tier1_2' => 'getTeam0Tier12',
        'team0_tier1_3' => 'getTeam0Tier13',
        'team0_tier1_4' => 'getTeam0Tier14',
        'team1_tier1_1' => 'getTeam1Tier11',
        'team1_tier1_2' => 'getTeam1Tier12',
        'team1_tier1_3' => 'getTeam1Tier13',
        'team1_tier1_4' => 'getTeam1Tier14'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('team0_core', $data ?? [], null);
        $this->setIfExists('team1_core', $data ?? [], null);
        $this->setIfExists('team0_titan', $data ?? [], null);
        $this->setIfExists('team1_titan', $data ?? [], null);
        $this->setIfExists('team0_tier2_1', $data ?? [], null);
        $this->setIfExists('team0_tier2_2', $data ?? [], null);
        $this->setIfExists('team0_tier2_3', $data ?? [], null);
        $this->setIfExists('team0_tier2_4', $data ?? [], null);
        $this->setIfExists('team1_tier2_1', $data ?? [], null);
        $this->setIfExists('team1_tier2_2', $data ?? [], null);
        $this->setIfExists('team1_tier2_3', $data ?? [], null);
        $this->setIfExists('team1_tier2_4', $data ?? [], null);
        $this->setIfExists('team0_tier1_1', $data ?? [], null);
        $this->setIfExists('team0_tier1_2', $data ?? [], null);
        $this->setIfExists('team0_tier1_3', $data ?? [], null);
        $this->setIfExists('team0_tier1_4', $data ?? [], null);
        $this->setIfExists('team1_tier1_1', $data ?? [], null);
        $this->setIfExists('team1_tier1_2', $data ?? [], null);
        $this->setIfExists('team1_tier1_3', $data ?? [], null);
        $this->setIfExists('team1_tier1_4', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['team0_core'] === null) {
            $invalidProperties[] = "'team0_core' can't be null";
        }
        if ($this->container['team1_core'] === null) {
            $invalidProperties[] = "'team1_core' can't be null";
        }
        if ($this->container['team0_titan'] === null) {
            $invalidProperties[] = "'team0_titan' can't be null";
        }
        if ($this->container['team1_titan'] === null) {
            $invalidProperties[] = "'team1_titan' can't be null";
        }
        if ($this->container['team0_tier2_1'] === null) {
            $invalidProperties[] = "'team0_tier2_1' can't be null";
        }
        if ($this->container['team0_tier2_3'] === null) {
            $invalidProperties[] = "'team0_tier2_3' can't be null";
        }
        if ($this->container['team0_tier2_4'] === null) {
            $invalidProperties[] = "'team0_tier2_4' can't be null";
        }
        if ($this->container['team1_tier2_1'] === null) {
            $invalidProperties[] = "'team1_tier2_1' can't be null";
        }
        if ($this->container['team1_tier2_3'] === null) {
            $invalidProperties[] = "'team1_tier2_3' can't be null";
        }
        if ($this->container['team1_tier2_4'] === null) {
            $invalidProperties[] = "'team1_tier2_4' can't be null";
        }
        if ($this->container['team0_tier1_1'] === null) {
            $invalidProperties[] = "'team0_tier1_1' can't be null";
        }
        if ($this->container['team0_tier1_3'] === null) {
            $invalidProperties[] = "'team0_tier1_3' can't be null";
        }
        if ($this->container['team0_tier1_4'] === null) {
            $invalidProperties[] = "'team0_tier1_4' can't be null";
        }
        if ($this->container['team1_tier1_1'] === null) {
            $invalidProperties[] = "'team1_tier1_1' can't be null";
        }
        if ($this->container['team1_tier1_3'] === null) {
            $invalidProperties[] = "'team1_tier1_3' can't be null";
        }
        if ($this->container['team1_tier1_4'] === null) {
            $invalidProperties[] = "'team1_tier1_4' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets team0_core
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Core()
    {
        return $this->container['team0_core'];
    }

    /**
     * Sets team0_core
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_core team0_core
     *
     * @return self
     */
    public function setTeam0Core($team0_core)
    {
        if (is_null($team0_core)) {
            throw new \InvalidArgumentException('non-nullable team0_core cannot be null');
        }
        $this->container['team0_core'] = $team0_core;

        return $this;
    }

    /**
     * Gets team1_core
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Core()
    {
        return $this->container['team1_core'];
    }

    /**
     * Sets team1_core
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_core team1_core
     *
     * @return self
     */
    public function setTeam1Core($team1_core)
    {
        if (is_null($team1_core)) {
            throw new \InvalidArgumentException('non-nullable team1_core cannot be null');
        }
        $this->container['team1_core'] = $team1_core;

        return $this;
    }

    /**
     * Gets team0_titan
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Titan()
    {
        return $this->container['team0_titan'];
    }

    /**
     * Sets team0_titan
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_titan team0_titan
     *
     * @return self
     */
    public function setTeam0Titan($team0_titan)
    {
        if (is_null($team0_titan)) {
            throw new \InvalidArgumentException('non-nullable team0_titan cannot be null');
        }
        $this->container['team0_titan'] = $team0_titan;

        return $this;
    }

    /**
     * Gets team1_titan
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Titan()
    {
        return $this->container['team1_titan'];
    }

    /**
     * Sets team1_titan
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_titan team1_titan
     *
     * @return self
     */
    public function setTeam1Titan($team1_titan)
    {
        if (is_null($team1_titan)) {
            throw new \InvalidArgumentException('non-nullable team1_titan cannot be null');
        }
        $this->container['team1_titan'] = $team1_titan;

        return $this;
    }

    /**
     * Gets team0_tier2_1
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Tier21()
    {
        return $this->container['team0_tier2_1'];
    }

    /**
     * Sets team0_tier2_1
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_tier2_1 team0_tier2_1
     *
     * @return self
     */
    public function setTeam0Tier21($team0_tier2_1)
    {
        if (is_null($team0_tier2_1)) {
            throw new \InvalidArgumentException('non-nullable team0_tier2_1 cannot be null');
        }
        $this->container['team0_tier2_1'] = $team0_tier2_1;

        return $this;
    }

    /**
     * Gets team0_tier2_2
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1|null
     */
    public function getTeam0Tier22()
    {
        return $this->container['team0_tier2_2'];
    }

    /**
     * Sets team0_tier2_2
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1|null $team0_tier2_2 team0_tier2_2
     *
     * @return self
     */
    public function setTeam0Tier22($team0_tier2_2)
    {
        if (is_null($team0_tier2_2)) {
            array_push($this->openAPINullablesSetToNull, 'team0_tier2_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('team0_tier2_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['team0_tier2_2'] = $team0_tier2_2;

        return $this;
    }

    /**
     * Gets team0_tier2_3
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Tier23()
    {
        return $this->container['team0_tier2_3'];
    }

    /**
     * Sets team0_tier2_3
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_tier2_3 team0_tier2_3
     *
     * @return self
     */
    public function setTeam0Tier23($team0_tier2_3)
    {
        if (is_null($team0_tier2_3)) {
            throw new \InvalidArgumentException('non-nullable team0_tier2_3 cannot be null');
        }
        $this->container['team0_tier2_3'] = $team0_tier2_3;

        return $this;
    }

    /**
     * Gets team0_tier2_4
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Tier24()
    {
        return $this->container['team0_tier2_4'];
    }

    /**
     * Sets team0_tier2_4
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_tier2_4 team0_tier2_4
     *
     * @return self
     */
    public function setTeam0Tier24($team0_tier2_4)
    {
        if (is_null($team0_tier2_4)) {
            throw new \InvalidArgumentException('non-nullable team0_tier2_4 cannot be null');
        }
        $this->container['team0_tier2_4'] = $team0_tier2_4;

        return $this;
    }

    /**
     * Gets team1_tier2_1
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Tier21()
    {
        return $this->container['team1_tier2_1'];
    }

    /**
     * Sets team1_tier2_1
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_tier2_1 team1_tier2_1
     *
     * @return self
     */
    public function setTeam1Tier21($team1_tier2_1)
    {
        if (is_null($team1_tier2_1)) {
            throw new \InvalidArgumentException('non-nullable team1_tier2_1 cannot be null');
        }
        $this->container['team1_tier2_1'] = $team1_tier2_1;

        return $this;
    }

    /**
     * Gets team1_tier2_2
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1|null
     */
    public function getTeam1Tier22()
    {
        return $this->container['team1_tier2_2'];
    }

    /**
     * Sets team1_tier2_2
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1|null $team1_tier2_2 team1_tier2_2
     *
     * @return self
     */
    public function setTeam1Tier22($team1_tier2_2)
    {
        if (is_null($team1_tier2_2)) {
            array_push($this->openAPINullablesSetToNull, 'team1_tier2_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('team1_tier2_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['team1_tier2_2'] = $team1_tier2_2;

        return $this;
    }

    /**
     * Gets team1_tier2_3
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Tier23()
    {
        return $this->container['team1_tier2_3'];
    }

    /**
     * Sets team1_tier2_3
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_tier2_3 team1_tier2_3
     *
     * @return self
     */
    public function setTeam1Tier23($team1_tier2_3)
    {
        if (is_null($team1_tier2_3)) {
            throw new \InvalidArgumentException('non-nullable team1_tier2_3 cannot be null');
        }
        $this->container['team1_tier2_3'] = $team1_tier2_3;

        return $this;
    }

    /**
     * Gets team1_tier2_4
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Tier24()
    {
        return $this->container['team1_tier2_4'];
    }

    /**
     * Sets team1_tier2_4
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_tier2_4 team1_tier2_4
     *
     * @return self
     */
    public function setTeam1Tier24($team1_tier2_4)
    {
        if (is_null($team1_tier2_4)) {
            throw new \InvalidArgumentException('non-nullable team1_tier2_4 cannot be null');
        }
        $this->container['team1_tier2_4'] = $team1_tier2_4;

        return $this;
    }

    /**
     * Gets team0_tier1_1
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Tier11()
    {
        return $this->container['team0_tier1_1'];
    }

    /**
     * Sets team0_tier1_1
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_tier1_1 team0_tier1_1
     *
     * @return self
     */
    public function setTeam0Tier11($team0_tier1_1)
    {
        if (is_null($team0_tier1_1)) {
            throw new \InvalidArgumentException('non-nullable team0_tier1_1 cannot be null');
        }
        $this->container['team0_tier1_1'] = $team0_tier1_1;

        return $this;
    }

    /**
     * Gets team0_tier1_2
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1|null
     */
    public function getTeam0Tier12()
    {
        return $this->container['team0_tier1_2'];
    }

    /**
     * Sets team0_tier1_2
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1|null $team0_tier1_2 team0_tier1_2
     *
     * @return self
     */
    public function setTeam0Tier12($team0_tier1_2)
    {
        if (is_null($team0_tier1_2)) {
            array_push($this->openAPINullablesSetToNull, 'team0_tier1_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('team0_tier1_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['team0_tier1_2'] = $team0_tier1_2;

        return $this;
    }

    /**
     * Gets team0_tier1_3
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Tier13()
    {
        return $this->container['team0_tier1_3'];
    }

    /**
     * Sets team0_tier1_3
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_tier1_3 team0_tier1_3
     *
     * @return self
     */
    public function setTeam0Tier13($team0_tier1_3)
    {
        if (is_null($team0_tier1_3)) {
            throw new \InvalidArgumentException('non-nullable team0_tier1_3 cannot be null');
        }
        $this->container['team0_tier1_3'] = $team0_tier1_3;

        return $this;
    }

    /**
     * Gets team0_tier1_4
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam0Tier14()
    {
        return $this->container['team0_tier1_4'];
    }

    /**
     * Sets team0_tier1_4
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team0_tier1_4 team0_tier1_4
     *
     * @return self
     */
    public function setTeam0Tier14($team0_tier1_4)
    {
        if (is_null($team0_tier1_4)) {
            throw new \InvalidArgumentException('non-nullable team0_tier1_4 cannot be null');
        }
        $this->container['team0_tier1_4'] = $team0_tier1_4;

        return $this;
    }

    /**
     * Gets team1_tier1_1
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Tier11()
    {
        return $this->container['team1_tier1_1'];
    }

    /**
     * Sets team1_tier1_1
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_tier1_1 team1_tier1_1
     *
     * @return self
     */
    public function setTeam1Tier11($team1_tier1_1)
    {
        if (is_null($team1_tier1_1)) {
            throw new \InvalidArgumentException('non-nullable team1_tier1_1 cannot be null');
        }
        $this->container['team1_tier1_1'] = $team1_tier1_1;

        return $this;
    }

    /**
     * Gets team1_tier1_2
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1|null
     */
    public function getTeam1Tier12()
    {
        return $this->container['team1_tier1_2'];
    }

    /**
     * Sets team1_tier1_2
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1|null $team1_tier1_2 team1_tier1_2
     *
     * @return self
     */
    public function setTeam1Tier12($team1_tier1_2)
    {
        if (is_null($team1_tier1_2)) {
            array_push($this->openAPINullablesSetToNull, 'team1_tier1_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('team1_tier1_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['team1_tier1_2'] = $team1_tier1_2;

        return $this;
    }

    /**
     * Gets team1_tier1_3
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Tier13()
    {
        return $this->container['team1_tier1_3'];
    }

    /**
     * Sets team1_tier1_3
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_tier1_3 team1_tier1_3
     *
     * @return self
     */
    public function setTeam1Tier13($team1_tier1_3)
    {
        if (is_null($team1_tier1_3)) {
            throw new \InvalidArgumentException('non-nullable team1_tier1_3 cannot be null');
        }
        $this->container['team1_tier1_3'] = $team1_tier1_3;

        return $this;
    }

    /**
     * Gets team1_tier1_4
     *
     * @return \OpenAPI\Client\Model\ObjectivePositionV1
     */
    public function getTeam1Tier14()
    {
        return $this->container['team1_tier1_4'];
    }

    /**
     * Sets team1_tier1_4
     *
     * @param \OpenAPI\Client\Model\ObjectivePositionV1 $team1_tier1_4 team1_tier1_4
     *
     * @return self
     */
    public function setTeam1Tier14($team1_tier1_4)
    {
        if (is_null($team1_tier1_4)) {
            throw new \InvalidArgumentException('non-nullable team1_tier1_4 cannot be null');
        }
        $this->container['team1_tier1_4'] = $team1_tier1_4;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


