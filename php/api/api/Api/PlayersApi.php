<?php
/**
 * PlayersApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PlayersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlayersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'card' => [
            'application/json',
        ],
        'enemyStats' => [
            'application/json',
        ],
        'matchHistory' => [
            'application/json',
        ],
        'mateStats' => [
            'application/json',
        ],
        'partyStats' => [
            'application/json',
        ],
        'playerHeroStats' => [
            'application/json',
        ],
        'steam' => [
            'application/json',
        ],
        'steamSearch' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation card
     *
     * Card
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['card'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlayerCard[]
     */
    public function card($account_id, string $contentType = self::contentTypes['card'][0])
    {
        list($response) = $this->cardWithHttpInfo($account_id, $contentType);
        return $response;
    }

    /**
     * Operation cardWithHttpInfo
     *
     * Card
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['card'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlayerCard[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cardWithHttpInfo($account_id, string $contentType = self::contentTypes['card'][0])
    {
        $request = $this->cardRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PlayerCard[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PlayerCard[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlayerCard[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cardAsync
     *
     * Card
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['card'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cardAsync($account_id, string $contentType = self::contentTypes['card'][0])
    {
        return $this->cardAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cardAsyncWithHttpInfo
     *
     * Card
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['card'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cardAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['card'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlayerCard[]';
        $request = $this->cardRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'card'
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['card'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cardRequest($account_id, string $contentType = self::contentTypes['card'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling card'
            );
        }
        if ($account_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$account_id" when calling PlayersApi.card, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/players/{account_id}/card';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enemyStats
     *
     * Enemy Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enemyStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EnemyStats[]
     */
    public function enemyStats($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, string $contentType = self::contentTypes['enemyStats'][0])
    {
        list($response) = $this->enemyStatsWithHttpInfo($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $contentType);
        return $response;
    }

    /**
     * Operation enemyStatsWithHttpInfo
     *
     * Enemy Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enemyStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EnemyStats[], HTTP status code, HTTP response headers (array of strings)
     */
    public function enemyStatsWithHttpInfo($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, string $contentType = self::contentTypes['enemyStats'][0])
    {
        $request = $this->enemyStatsRequest($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\EnemyStats[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\EnemyStats[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EnemyStats[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation enemyStatsAsync
     *
     * Enemy Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enemyStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enemyStatsAsync($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, string $contentType = self::contentTypes['enemyStats'][0])
    {
        return $this->enemyStatsAsyncWithHttpInfo($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enemyStatsAsyncWithHttpInfo
     *
     * Enemy Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enemyStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enemyStatsAsyncWithHttpInfo($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, string $contentType = self::contentTypes['enemyStats'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EnemyStats[]';
        $request = $this->enemyStatsRequest($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enemyStats'
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enemyStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enemyStatsRequest($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, string $contentType = self::contentTypes['enemyStats'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling enemyStats'
            );
        }
        if ($account_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$account_id" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        


        if ($min_duration_s !== null && $min_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.enemyStats, must be smaller than or equal to 7000.');
        }
        if ($min_duration_s !== null && $min_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_duration_s !== null && $max_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.enemyStats, must be smaller than or equal to 7000.');
        }
        if ($max_duration_s !== null && $max_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($min_average_badge !== null && $min_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.enemyStats, must be smaller than or equal to 116.');
        }
        if ($min_average_badge !== null && $min_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_average_badge !== null && $max_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.enemyStats, must be smaller than or equal to 116.');
        }
        if ($max_average_badge !== null && $max_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($min_match_id !== null && $min_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_match_id" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_match_id !== null && $max_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_match_id" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($min_matches_played !== null && $min_matches_played < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_matches_played" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_matches_played !== null && $max_matches_played < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_matches_played" when calling PlayersApi.enemyStats, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/players/{account_id}/enemy-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_unix_timestamp,
            'min_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_unix_timestamp,
            'max_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_duration_s,
            'min_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_duration_s,
            'max_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_average_badge,
            'min_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_average_badge,
            'max_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_match_id,
            'min_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_match_id,
            'max_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_matches_played,
            'min_matches_played', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_matches_played,
            'max_matches_played', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation matchHistory
     *
     * Match History
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  bool|null $force_refetch Refetch the match history from Steam, even if it is already cached in &#x60;ClickHouse&#x60;. Only use this if you are sure that the data in &#x60;ClickHouse&#x60; is outdated. Enabling this flag results in a strict rate limit. (optional)
     * @param  bool|null $only_stored_history Return only the already stored match history from &#x60;ClickHouse&#x60;. There is no rate limit for this option, so if you need a lot of data, you can use this option. This option is not compatible with &#x60;force_refetch&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlayerMatchHistoryEntry[]
     */
    public function matchHistory($account_id, $force_refetch = null, $only_stored_history = null, string $contentType = self::contentTypes['matchHistory'][0])
    {
        list($response) = $this->matchHistoryWithHttpInfo($account_id, $force_refetch, $only_stored_history, $contentType);
        return $response;
    }

    /**
     * Operation matchHistoryWithHttpInfo
     *
     * Match History
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  bool|null $force_refetch Refetch the match history from Steam, even if it is already cached in &#x60;ClickHouse&#x60;. Only use this if you are sure that the data in &#x60;ClickHouse&#x60; is outdated. Enabling this flag results in a strict rate limit. (optional)
     * @param  bool|null $only_stored_history Return only the already stored match history from &#x60;ClickHouse&#x60;. There is no rate limit for this option, so if you need a lot of data, you can use this option. This option is not compatible with &#x60;force_refetch&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlayerMatchHistoryEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function matchHistoryWithHttpInfo($account_id, $force_refetch = null, $only_stored_history = null, string $contentType = self::contentTypes['matchHistory'][0])
    {
        $request = $this->matchHistoryRequest($account_id, $force_refetch, $only_stored_history, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PlayerMatchHistoryEntry[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PlayerMatchHistoryEntry[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlayerMatchHistoryEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation matchHistoryAsync
     *
     * Match History
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  bool|null $force_refetch Refetch the match history from Steam, even if it is already cached in &#x60;ClickHouse&#x60;. Only use this if you are sure that the data in &#x60;ClickHouse&#x60; is outdated. Enabling this flag results in a strict rate limit. (optional)
     * @param  bool|null $only_stored_history Return only the already stored match history from &#x60;ClickHouse&#x60;. There is no rate limit for this option, so if you need a lot of data, you can use this option. This option is not compatible with &#x60;force_refetch&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchHistoryAsync($account_id, $force_refetch = null, $only_stored_history = null, string $contentType = self::contentTypes['matchHistory'][0])
    {
        return $this->matchHistoryAsyncWithHttpInfo($account_id, $force_refetch, $only_stored_history, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation matchHistoryAsyncWithHttpInfo
     *
     * Match History
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  bool|null $force_refetch Refetch the match history from Steam, even if it is already cached in &#x60;ClickHouse&#x60;. Only use this if you are sure that the data in &#x60;ClickHouse&#x60; is outdated. Enabling this flag results in a strict rate limit. (optional)
     * @param  bool|null $only_stored_history Return only the already stored match history from &#x60;ClickHouse&#x60;. There is no rate limit for this option, so if you need a lot of data, you can use this option. This option is not compatible with &#x60;force_refetch&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchHistoryAsyncWithHttpInfo($account_id, $force_refetch = null, $only_stored_history = null, string $contentType = self::contentTypes['matchHistory'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlayerMatchHistoryEntry[]';
        $request = $this->matchHistoryRequest($account_id, $force_refetch, $only_stored_history, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'matchHistory'
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  bool|null $force_refetch Refetch the match history from Steam, even if it is already cached in &#x60;ClickHouse&#x60;. Only use this if you are sure that the data in &#x60;ClickHouse&#x60; is outdated. Enabling this flag results in a strict rate limit. (optional)
     * @param  bool|null $only_stored_history Return only the already stored match history from &#x60;ClickHouse&#x60;. There is no rate limit for this option, so if you need a lot of data, you can use this option. This option is not compatible with &#x60;force_refetch&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function matchHistoryRequest($account_id, $force_refetch = null, $only_stored_history = null, string $contentType = self::contentTypes['matchHistory'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling matchHistory'
            );
        }
        if ($account_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$account_id" when calling PlayersApi.matchHistory, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/v1/players/{account_id}/match-history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_refetch,
            'force_refetch', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_stored_history,
            'only_stored_history', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mateStats
     *
     * Mate Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  bool|null $same_party Filter based on whether the mates were on the same party. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mateStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MateStats[]
     */
    public function mateStats($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, $same_party = true, string $contentType = self::contentTypes['mateStats'][0])
    {
        list($response) = $this->mateStatsWithHttpInfo($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $same_party, $contentType);
        return $response;
    }

    /**
     * Operation mateStatsWithHttpInfo
     *
     * Mate Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  bool|null $same_party Filter based on whether the mates were on the same party. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mateStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MateStats[], HTTP status code, HTTP response headers (array of strings)
     */
    public function mateStatsWithHttpInfo($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, $same_party = true, string $contentType = self::contentTypes['mateStats'][0])
    {
        $request = $this->mateStatsRequest($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $same_party, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MateStats[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\MateStats[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MateStats[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mateStatsAsync
     *
     * Mate Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  bool|null $same_party Filter based on whether the mates were on the same party. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mateStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mateStatsAsync($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, $same_party = true, string $contentType = self::contentTypes['mateStats'][0])
    {
        return $this->mateStatsAsyncWithHttpInfo($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $same_party, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mateStatsAsyncWithHttpInfo
     *
     * Mate Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  bool|null $same_party Filter based on whether the mates were on the same party. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mateStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mateStatsAsyncWithHttpInfo($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, $same_party = true, string $contentType = self::contentTypes['mateStats'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MateStats[]';
        $request = $this->mateStatsRequest($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $min_matches_played, $max_matches_played, $same_party, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mateStats'
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  int|null $min_matches_played Filter based on the number of matches played. (optional)
     * @param  int|null $max_matches_played Filter based on the number of matches played. (optional)
     * @param  bool|null $same_party Filter based on whether the mates were on the same party. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mateStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mateStatsRequest($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $min_matches_played = null, $max_matches_played = null, $same_party = true, string $contentType = self::contentTypes['mateStats'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling mateStats'
            );
        }
        if ($account_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$account_id" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        


        if ($min_duration_s !== null && $min_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.mateStats, must be smaller than or equal to 7000.');
        }
        if ($min_duration_s !== null && $min_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($max_duration_s !== null && $max_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.mateStats, must be smaller than or equal to 7000.');
        }
        if ($max_duration_s !== null && $max_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($min_average_badge !== null && $min_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.mateStats, must be smaller than or equal to 116.');
        }
        if ($min_average_badge !== null && $min_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($max_average_badge !== null && $max_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.mateStats, must be smaller than or equal to 116.');
        }
        if ($max_average_badge !== null && $max_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($min_match_id !== null && $min_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_match_id" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($max_match_id !== null && $max_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_match_id" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($min_matches_played !== null && $min_matches_played < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_matches_played" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        
        if ($max_matches_played !== null && $max_matches_played < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_matches_played" when calling PlayersApi.mateStats, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v1/players/{account_id}/mate-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_unix_timestamp,
            'min_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_unix_timestamp,
            'max_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_duration_s,
            'min_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_duration_s,
            'max_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_average_badge,
            'min_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_average_badge,
            'max_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_match_id,
            'min_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_match_id,
            'max_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_matches_played,
            'min_matches_played', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_matches_played,
            'max_matches_played', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $same_party,
            'same_party', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partyStats
     *
     * Party Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partyStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PartyStats[]
     */
    public function partyStats($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['partyStats'][0])
    {
        list($response) = $this->partyStatsWithHttpInfo($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType);
        return $response;
    }

    /**
     * Operation partyStatsWithHttpInfo
     *
     * Party Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partyStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PartyStats[], HTTP status code, HTTP response headers (array of strings)
     */
    public function partyStatsWithHttpInfo($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['partyStats'][0])
    {
        $request = $this->partyStatsRequest($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PartyStats[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PartyStats[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PartyStats[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation partyStatsAsync
     *
     * Party Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partyStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partyStatsAsync($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['partyStats'][0])
    {
        return $this->partyStatsAsyncWithHttpInfo($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partyStatsAsyncWithHttpInfo
     *
     * Party Stats
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partyStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partyStatsAsyncWithHttpInfo($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['partyStats'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PartyStats[]';
        $request = $this->partyStatsRequest($account_id, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partyStats'
     *
     * @param  int $account_id The players &#x60;SteamID3&#x60; (required)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partyStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function partyStatsRequest($account_id, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['partyStats'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling partyStats'
            );
        }
        if ($account_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$account_id" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        


        if ($min_duration_s !== null && $min_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.partyStats, must be smaller than or equal to 7000.');
        }
        if ($min_duration_s !== null && $min_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_duration_s !== null && $max_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.partyStats, must be smaller than or equal to 7000.');
        }
        if ($max_duration_s !== null && $max_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        
        if ($min_average_badge !== null && $min_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.partyStats, must be smaller than or equal to 116.');
        }
        if ($min_average_badge !== null && $min_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_average_badge !== null && $max_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.partyStats, must be smaller than or equal to 116.');
        }
        if ($max_average_badge !== null && $max_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        
        if ($min_match_id !== null && $min_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_match_id" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        
        if ($max_match_id !== null && $max_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_match_id" when calling PlayersApi.partyStats, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/players/{account_id}/party-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_unix_timestamp,
            'min_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_unix_timestamp,
            'max_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_duration_s,
            'min_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_duration_s,
            'max_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_average_badge,
            'min_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_average_badge,
            'max_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_match_id,
            'min_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_match_id,
            'max_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerHeroStats
     *
     * Hero Stats
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string|null $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_networth Filter players based on their net worth. (optional)
     * @param  int|null $max_networth Filter players based on their net worth. (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerHeroStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HeroStats[]
     */
    public function playerHeroStats($account_ids, $hero_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_networth = null, $max_networth = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['playerHeroStats'][0])
    {
        list($response) = $this->playerHeroStatsWithHttpInfo($account_ids, $hero_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_networth, $max_networth, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType);
        return $response;
    }

    /**
     * Operation playerHeroStatsWithHttpInfo
     *
     * Hero Stats
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string|null $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_networth Filter players based on their net worth. (optional)
     * @param  int|null $max_networth Filter players based on their net worth. (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerHeroStats'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HeroStats[], HTTP status code, HTTP response headers (array of strings)
     */
    public function playerHeroStatsWithHttpInfo($account_ids, $hero_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_networth = null, $max_networth = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['playerHeroStats'][0])
    {
        $request = $this->playerHeroStatsRequest($account_ids, $hero_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_networth, $max_networth, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HeroStats[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HeroStats[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HeroStats[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation playerHeroStatsAsync
     *
     * Hero Stats
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string|null $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_networth Filter players based on their net worth. (optional)
     * @param  int|null $max_networth Filter players based on their net worth. (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerHeroStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerHeroStatsAsync($account_ids, $hero_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_networth = null, $max_networth = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['playerHeroStats'][0])
    {
        return $this->playerHeroStatsAsyncWithHttpInfo($account_ids, $hero_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_networth, $max_networth, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerHeroStatsAsyncWithHttpInfo
     *
     * Hero Stats
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string|null $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_networth Filter players based on their net worth. (optional)
     * @param  int|null $max_networth Filter players based on their net worth. (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerHeroStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerHeroStatsAsyncWithHttpInfo($account_ids, $hero_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_networth = null, $max_networth = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['playerHeroStats'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HeroStats[]';
        $request = $this->playerHeroStatsRequest($account_ids, $hero_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_networth, $max_networth, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerHeroStats'
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string|null $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int|null $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int|null $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int|null $min_networth Filter players based on their net worth. (optional)
     * @param  int|null $max_networth Filter players based on their net worth. (optional)
     * @param  int|null $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int|null $min_match_id Filter matches based on their ID. (optional)
     * @param  int|null $max_match_id Filter matches based on their ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerHeroStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerHeroStatsRequest($account_ids, $hero_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_networth = null, $max_networth = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, string $contentType = self::contentTypes['playerHeroStats'][0])
    {

        // verify the required parameter 'account_ids' is set
        if ($account_ids === null || (is_array($account_ids) && count($account_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_ids when calling playerHeroStats'
            );
        }
        if (count($account_ids) > 1000) {
            throw new \InvalidArgumentException('invalid value for "$account_ids" when calling PlayersApi.playerHeroStats, number of items must be less than or equal to 1000.');
        }
        if (count($account_ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$account_ids" when calling PlayersApi.playerHeroStats, number of items must be greater than or equal to 1.');
        }
        



        if ($min_duration_s !== null && $min_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.playerHeroStats, must be smaller than or equal to 7000.');
        }
        if ($min_duration_s !== null && $min_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($max_duration_s !== null && $max_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.playerHeroStats, must be smaller than or equal to 7000.');
        }
        if ($max_duration_s !== null && $max_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($min_networth !== null && $min_networth < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_networth" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($max_networth !== null && $max_networth < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_networth" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($min_average_badge !== null && $min_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.playerHeroStats, must be smaller than or equal to 116.');
        }
        if ($min_average_badge !== null && $min_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($max_average_badge !== null && $max_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.playerHeroStats, must be smaller than or equal to 116.');
        }
        if ($max_average_badge !== null && $max_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($min_match_id !== null && $min_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_match_id" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        
        if ($max_match_id !== null && $max_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_match_id" when calling PlayersApi.playerHeroStats, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/players/hero-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'account_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hero_ids,
            'hero_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_unix_timestamp,
            'min_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_unix_timestamp,
            'max_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_duration_s,
            'min_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_duration_s,
            'max_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_networth,
            'min_networth', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_networth,
            'max_networth', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_average_badge,
            'min_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_average_badge,
            'max_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_match_id,
            'min_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_match_id,
            'max_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation steam
     *
     * Batch Steam Profile
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steam'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SteamProfile[]
     */
    public function steam($account_ids, string $contentType = self::contentTypes['steam'][0])
    {
        list($response) = $this->steamWithHttpInfo($account_ids, $contentType);
        return $response;
    }

    /**
     * Operation steamWithHttpInfo
     *
     * Batch Steam Profile
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steam'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SteamProfile[], HTTP status code, HTTP response headers (array of strings)
     */
    public function steamWithHttpInfo($account_ids, string $contentType = self::contentTypes['steam'][0])
    {
        $request = $this->steamRequest($account_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SteamProfile[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SteamProfile[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SteamProfile[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation steamAsync
     *
     * Batch Steam Profile
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function steamAsync($account_ids, string $contentType = self::contentTypes['steam'][0])
    {
        return $this->steamAsyncWithHttpInfo($account_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation steamAsyncWithHttpInfo
     *
     * Batch Steam Profile
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function steamAsyncWithHttpInfo($account_ids, string $contentType = self::contentTypes['steam'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SteamProfile[]';
        $request = $this->steamRequest($account_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'steam'
     *
     * @param  int[] $account_ids Comma separated list of account ids, Account IDs are in &#x60;SteamID3&#x60; format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function steamRequest($account_ids, string $contentType = self::contentTypes['steam'][0])
    {

        // verify the required parameter 'account_ids' is set
        if ($account_ids === null || (is_array($account_ids) && count($account_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_ids when calling steam'
            );
        }
        if (count($account_ids) > 1000) {
            throw new \InvalidArgumentException('invalid value for "$account_ids" when calling PlayersApi.steam, number of items must be less than or equal to 1000.');
        }
        if (count($account_ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$account_ids" when calling PlayersApi.steam, number of items must be greater than or equal to 1.');
        }
        

        $resourcePath = '/v1/players/steam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'account_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation steamSearch
     *
     * Steam Profile Search
     *
     * @param  string $search_query Search query for Steam profiles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steamSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SteamProfile[]
     */
    public function steamSearch($search_query, string $contentType = self::contentTypes['steamSearch'][0])
    {
        list($response) = $this->steamSearchWithHttpInfo($search_query, $contentType);
        return $response;
    }

    /**
     * Operation steamSearchWithHttpInfo
     *
     * Steam Profile Search
     *
     * @param  string $search_query Search query for Steam profiles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steamSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SteamProfile[], HTTP status code, HTTP response headers (array of strings)
     */
    public function steamSearchWithHttpInfo($search_query, string $contentType = self::contentTypes['steamSearch'][0])
    {
        $request = $this->steamSearchRequest($search_query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SteamProfile[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SteamProfile[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SteamProfile[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation steamSearchAsync
     *
     * Steam Profile Search
     *
     * @param  string $search_query Search query for Steam profiles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steamSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function steamSearchAsync($search_query, string $contentType = self::contentTypes['steamSearch'][0])
    {
        return $this->steamSearchAsyncWithHttpInfo($search_query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation steamSearchAsyncWithHttpInfo
     *
     * Steam Profile Search
     *
     * @param  string $search_query Search query for Steam profiles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steamSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function steamSearchAsyncWithHttpInfo($search_query, string $contentType = self::contentTypes['steamSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SteamProfile[]';
        $request = $this->steamSearchRequest($search_query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'steamSearch'
     *
     * @param  string $search_query Search query for Steam profiles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['steamSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function steamSearchRequest($search_query, string $contentType = self::contentTypes['steamSearch'][0])
    {

        // verify the required parameter 'search_query' is set
        if ($search_query === null || (is_array($search_query) && count($search_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_query when calling steamSearch'
            );
        }


        $resourcePath = '/v1/players/steam-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_query,
            'search_query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
