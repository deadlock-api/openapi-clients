<?php
/**
 * BuildsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BuildsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuildsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchBuilds' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchBuilds
     *
     * Search
     *
     * @param  int $min_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $min_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  int $max_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  string $sort_by The field to sort the builds by. (optional)
     * @param  int $start The index of the first build to return. (optional)
     * @param  int $limit The maximum number of builds to return. (optional, default to 100)
     * @param  string $sort_direction The direction to sort the builds in. (optional)
     * @param  string $search_name Search for builds with a name containing this string. (optional)
     * @param  string $search_description Search for builds with a description containing this string. (optional)
     * @param  bool $only_latest Only return the latest version of each build. (optional)
     * @param  int $language Filter builds by language. (optional)
     * @param  int $build_id Filter builds by ID. (optional)
     * @param  int $version Filter builds by version. (optional)
     * @param  int $hero_id Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int $tag Filter builds by tag. (optional)
     * @param  int $rollup_category Filter builds by rollup category. (optional)
     * @param  int $author_id The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchBuilds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Build[]
     */
    public function searchBuilds($min_unix_timestamp = null, $max_unix_timestamp = null, $min_published_unix_timestamp = null, $max_published_unix_timestamp = null, $sort_by = null, $start = null, $limit = 100, $sort_direction = null, $search_name = null, $search_description = null, $only_latest = null, $language = null, $build_id = null, $version = null, $hero_id = null, $tag = null, $rollup_category = null, $author_id = null, string $contentType = self::contentTypes['searchBuilds'][0])
    {
        list($response) = $this->searchBuildsWithHttpInfo($min_unix_timestamp, $max_unix_timestamp, $min_published_unix_timestamp, $max_published_unix_timestamp, $sort_by, $start, $limit, $sort_direction, $search_name, $search_description, $only_latest, $language, $build_id, $version, $hero_id, $tag, $rollup_category, $author_id, $contentType);
        return $response;
    }

    /**
     * Operation searchBuildsWithHttpInfo
     *
     * Search
     *
     * @param  int $min_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $min_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  int $max_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  string $sort_by The field to sort the builds by. (optional)
     * @param  int $start The index of the first build to return. (optional)
     * @param  int $limit The maximum number of builds to return. (optional, default to 100)
     * @param  string $sort_direction The direction to sort the builds in. (optional)
     * @param  string $search_name Search for builds with a name containing this string. (optional)
     * @param  string $search_description Search for builds with a description containing this string. (optional)
     * @param  bool $only_latest Only return the latest version of each build. (optional)
     * @param  int $language Filter builds by language. (optional)
     * @param  int $build_id Filter builds by ID. (optional)
     * @param  int $version Filter builds by version. (optional)
     * @param  int $hero_id Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int $tag Filter builds by tag. (optional)
     * @param  int $rollup_category Filter builds by rollup category. (optional)
     * @param  int $author_id The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchBuilds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Build[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchBuildsWithHttpInfo($min_unix_timestamp = null, $max_unix_timestamp = null, $min_published_unix_timestamp = null, $max_published_unix_timestamp = null, $sort_by = null, $start = null, $limit = 100, $sort_direction = null, $search_name = null, $search_description = null, $only_latest = null, $language = null, $build_id = null, $version = null, $hero_id = null, $tag = null, $rollup_category = null, $author_id = null, string $contentType = self::contentTypes['searchBuilds'][0])
    {
        $request = $this->searchBuildsRequest($min_unix_timestamp, $max_unix_timestamp, $min_published_unix_timestamp, $max_published_unix_timestamp, $sort_by, $start, $limit, $sort_direction, $search_name, $search_description, $only_latest, $language, $build_id, $version, $hero_id, $tag, $rollup_category, $author_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Build[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Build[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Build[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Build[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Build[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchBuildsAsync
     *
     * Search
     *
     * @param  int $min_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $min_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  int $max_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  string $sort_by The field to sort the builds by. (optional)
     * @param  int $start The index of the first build to return. (optional)
     * @param  int $limit The maximum number of builds to return. (optional, default to 100)
     * @param  string $sort_direction The direction to sort the builds in. (optional)
     * @param  string $search_name Search for builds with a name containing this string. (optional)
     * @param  string $search_description Search for builds with a description containing this string. (optional)
     * @param  bool $only_latest Only return the latest version of each build. (optional)
     * @param  int $language Filter builds by language. (optional)
     * @param  int $build_id Filter builds by ID. (optional)
     * @param  int $version Filter builds by version. (optional)
     * @param  int $hero_id Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int $tag Filter builds by tag. (optional)
     * @param  int $rollup_category Filter builds by rollup category. (optional)
     * @param  int $author_id The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchBuilds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBuildsAsync($min_unix_timestamp = null, $max_unix_timestamp = null, $min_published_unix_timestamp = null, $max_published_unix_timestamp = null, $sort_by = null, $start = null, $limit = 100, $sort_direction = null, $search_name = null, $search_description = null, $only_latest = null, $language = null, $build_id = null, $version = null, $hero_id = null, $tag = null, $rollup_category = null, $author_id = null, string $contentType = self::contentTypes['searchBuilds'][0])
    {
        return $this->searchBuildsAsyncWithHttpInfo($min_unix_timestamp, $max_unix_timestamp, $min_published_unix_timestamp, $max_published_unix_timestamp, $sort_by, $start, $limit, $sort_direction, $search_name, $search_description, $only_latest, $language, $build_id, $version, $hero_id, $tag, $rollup_category, $author_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchBuildsAsyncWithHttpInfo
     *
     * Search
     *
     * @param  int $min_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $min_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  int $max_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  string $sort_by The field to sort the builds by. (optional)
     * @param  int $start The index of the first build to return. (optional)
     * @param  int $limit The maximum number of builds to return. (optional, default to 100)
     * @param  string $sort_direction The direction to sort the builds in. (optional)
     * @param  string $search_name Search for builds with a name containing this string. (optional)
     * @param  string $search_description Search for builds with a description containing this string. (optional)
     * @param  bool $only_latest Only return the latest version of each build. (optional)
     * @param  int $language Filter builds by language. (optional)
     * @param  int $build_id Filter builds by ID. (optional)
     * @param  int $version Filter builds by version. (optional)
     * @param  int $hero_id Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int $tag Filter builds by tag. (optional)
     * @param  int $rollup_category Filter builds by rollup category. (optional)
     * @param  int $author_id The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchBuilds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBuildsAsyncWithHttpInfo($min_unix_timestamp = null, $max_unix_timestamp = null, $min_published_unix_timestamp = null, $max_published_unix_timestamp = null, $sort_by = null, $start = null, $limit = 100, $sort_direction = null, $search_name = null, $search_description = null, $only_latest = null, $language = null, $build_id = null, $version = null, $hero_id = null, $tag = null, $rollup_category = null, $author_id = null, string $contentType = self::contentTypes['searchBuilds'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Build[]';
        $request = $this->searchBuildsRequest($min_unix_timestamp, $max_unix_timestamp, $min_published_unix_timestamp, $max_published_unix_timestamp, $sort_by, $start, $limit, $sort_direction, $search_name, $search_description, $only_latest, $language, $build_id, $version, $hero_id, $tag, $rollup_category, $author_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchBuilds'
     *
     * @param  int $min_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter builds based on their &#x60;last_updated&#x60; time (Unix timestamp). (optional)
     * @param  int $min_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  int $max_published_unix_timestamp Filter builds based on their published time (Unix timestamp). (optional)
     * @param  string $sort_by The field to sort the builds by. (optional)
     * @param  int $start The index of the first build to return. (optional)
     * @param  int $limit The maximum number of builds to return. (optional, default to 100)
     * @param  string $sort_direction The direction to sort the builds in. (optional)
     * @param  string $search_name Search for builds with a name containing this string. (optional)
     * @param  string $search_description Search for builds with a description containing this string. (optional)
     * @param  bool $only_latest Only return the latest version of each build. (optional)
     * @param  int $language Filter builds by language. (optional)
     * @param  int $build_id Filter builds by ID. (optional)
     * @param  int $version Filter builds by version. (optional)
     * @param  int $hero_id Filter builds by hero ID. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  int $tag Filter builds by tag. (optional)
     * @param  int $rollup_category Filter builds by rollup category. (optional)
     * @param  int $author_id The author&#39;s &#x60;SteamID3&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchBuilds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchBuildsRequest($min_unix_timestamp = null, $max_unix_timestamp = null, $min_published_unix_timestamp = null, $max_published_unix_timestamp = null, $sort_by = null, $start = null, $limit = 100, $sort_direction = null, $search_name = null, $search_description = null, $only_latest = null, $language = null, $build_id = null, $version = null, $hero_id = null, $tag = null, $rollup_category = null, $author_id = null, string $contentType = self::contentTypes['searchBuilds'][0])
    {






        if ($start !== null && $start < 0) {
            throw new \InvalidArgumentException('invalid value for "$start" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        




        if ($language !== null && $language < 0) {
            throw new \InvalidArgumentException('invalid value for "$language" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($build_id !== null && $build_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$build_id" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($version !== null && $version < 0) {
            throw new \InvalidArgumentException('invalid value for "$version" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($hero_id !== null && $hero_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$hero_id" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($tag !== null && $tag < 0) {
            throw new \InvalidArgumentException('invalid value for "$tag" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($rollup_category !== null && $rollup_category < 0) {
            throw new \InvalidArgumentException('invalid value for "$rollup_category" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        
        if ($author_id !== null && $author_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$author_id" when calling BuildsApi.searchBuilds, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_unix_timestamp,
            'min_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_unix_timestamp,
            'max_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_published_unix_timestamp,
            'min_published_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_published_unix_timestamp,
            'max_published_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sort_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_direction,
            'sort_direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_name,
            'search_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_description,
            'search_description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_latest,
            'only_latest', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $build_id,
            'build_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hero_id,
            'hero_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rollup_category,
            'rollup_category', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $author_id,
            'author_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
