<?php
/**
 * MatchesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MatchesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MatchesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activeMatches' => [
            'application/json',
        ],
        'activeMatchesRaw' => [
            'application/json',
        ],
        'bulkMetadata' => [
            'application/json',
        ],
        'metadata' => [
            'application/json',
        ],
        'metadataRaw' => [
            'application/json',
        ],
        'recentlyFetched' => [
            'application/json',
        ],
        'salts' => [
            'application/json',
        ],
        'url' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activeMatches
     *
     * Active
     *
     * @param  int $account_id The account ID to filter active matches by (&#x60;SteamID3&#x60;) (optional) (deprecated)
     * @param  int[] $account_ids Comma separated list of account ids to include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatches'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ActiveMatch[]
     */
    public function activeMatches($account_id = null, $account_ids = null, string $contentType = self::contentTypes['activeMatches'][0])
    {
        list($response) = $this->activeMatchesWithHttpInfo($account_id, $account_ids, $contentType);
        return $response;
    }

    /**
     * Operation activeMatchesWithHttpInfo
     *
     * Active
     *
     * @param  int $account_id The account ID to filter active matches by (&#x60;SteamID3&#x60;) (optional) (deprecated)
     * @param  int[] $account_ids Comma separated list of account ids to include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatches'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ActiveMatch[], HTTP status code, HTTP response headers (array of strings)
     */
    public function activeMatchesWithHttpInfo($account_id = null, $account_ids = null, string $contentType = self::contentTypes['activeMatches'][0])
    {
        $request = $this->activeMatchesRequest($account_id, $account_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ActiveMatch[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ActiveMatch[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ActiveMatch[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ActiveMatch[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ActiveMatch[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activeMatchesAsync
     *
     * Active
     *
     * @param  int $account_id The account ID to filter active matches by (&#x60;SteamID3&#x60;) (optional) (deprecated)
     * @param  int[] $account_ids Comma separated list of account ids to include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activeMatchesAsync($account_id = null, $account_ids = null, string $contentType = self::contentTypes['activeMatches'][0])
    {
        return $this->activeMatchesAsyncWithHttpInfo($account_id, $account_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activeMatchesAsyncWithHttpInfo
     *
     * Active
     *
     * @param  int $account_id The account ID to filter active matches by (&#x60;SteamID3&#x60;) (optional) (deprecated)
     * @param  int[] $account_ids Comma separated list of account ids to include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activeMatchesAsyncWithHttpInfo($account_id = null, $account_ids = null, string $contentType = self::contentTypes['activeMatches'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ActiveMatch[]';
        $request = $this->activeMatchesRequest($account_id, $account_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activeMatches'
     *
     * @param  int $account_id The account ID to filter active matches by (&#x60;SteamID3&#x60;) (optional) (deprecated)
     * @param  int[] $account_ids Comma separated list of account ids to include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activeMatchesRequest($account_id = null, $account_ids = null, string $contentType = self::contentTypes['activeMatches'][0])
    {

        if ($account_id !== null && $account_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$account_id" when calling MatchesApi.activeMatches, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v1/matches/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'account_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation activeMatchesRaw
     *
     * Active as Protobuf
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatchesRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function activeMatchesRaw(string $contentType = self::contentTypes['activeMatchesRaw'][0])
    {
        list($response) = $this->activeMatchesRawWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation activeMatchesRawWithHttpInfo
     *
     * Active as Protobuf
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatchesRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function activeMatchesRawWithHttpInfo(string $contentType = self::contentTypes['activeMatchesRaw'][0])
    {
        $request = $this->activeMatchesRawRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activeMatchesRawAsync
     *
     * Active as Protobuf
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatchesRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activeMatchesRawAsync(string $contentType = self::contentTypes['activeMatchesRaw'][0])
    {
        return $this->activeMatchesRawAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activeMatchesRawAsyncWithHttpInfo
     *
     * Active as Protobuf
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatchesRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activeMatchesRawAsyncWithHttpInfo(string $contentType = self::contentTypes['activeMatchesRaw'][0])
    {
        $returnType = 'int[]';
        $request = $this->activeMatchesRawRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activeMatchesRaw'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activeMatchesRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activeMatchesRawRequest(string $contentType = self::contentTypes['activeMatchesRaw'][0])
    {


        $resourcePath = '/v1/matches/active/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkMetadata
     *
     * Bulk Metadata
     *
     * @param  bool $include_info Include match info in the response. (optional, default to true)
     * @param  bool $include_objectives Include objectives in the response. (optional)
     * @param  bool $include_mid_boss Include midboss in the response. (optional)
     * @param  bool $include_player_info Include player info in the response. (optional)
     * @param  bool $include_player_items Include player items in the response. (optional)
     * @param  bool $include_player_stats Include player stats in the response. (optional)
     * @param  bool $include_player_death_details Include player death details in the response. (optional)
     * @param  int[] $match_ids Comma separated list of match ids, limited by &#x60;limit&#x60; (optional)
     * @param  int $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $min_match_id Filter matches based on their ID. (optional)
     * @param  int $max_match_id Filter matches based on their ID. (optional)
     * @param  bool $is_high_skill_range_parties Filter matches based on whether they are in the high skill range. (optional)
     * @param  bool $is_low_pri_pool Filter matches based on whether they are in the low priority pool. (optional)
     * @param  bool $is_new_player_pool Filter matches based on whether they are in the new player pool. (optional)
     * @param  int[] $account_ids Filter matches by account IDs of players that participated in the match. (optional)
     * @param  string $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  string $order_by The field to order the results by. (optional)
     * @param  string $order_direction The direction to order the results by. (optional)
     * @param  int $limit The maximum number of matches to return. (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function bulkMetadata($include_info = true, $include_objectives = null, $include_mid_boss = null, $include_player_info = null, $include_player_items = null, $include_player_stats = null, $include_player_death_details = null, $match_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $is_high_skill_range_parties = null, $is_low_pri_pool = null, $is_new_player_pool = null, $account_ids = null, $hero_ids = null, $order_by = null, $order_direction = null, $limit = 1000, string $contentType = self::contentTypes['bulkMetadata'][0])
    {
        list($response) = $this->bulkMetadataWithHttpInfo($include_info, $include_objectives, $include_mid_boss, $include_player_info, $include_player_items, $include_player_stats, $include_player_death_details, $match_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $is_high_skill_range_parties, $is_low_pri_pool, $is_new_player_pool, $account_ids, $hero_ids, $order_by, $order_direction, $limit, $contentType);
        return $response;
    }

    /**
     * Operation bulkMetadataWithHttpInfo
     *
     * Bulk Metadata
     *
     * @param  bool $include_info Include match info in the response. (optional, default to true)
     * @param  bool $include_objectives Include objectives in the response. (optional)
     * @param  bool $include_mid_boss Include midboss in the response. (optional)
     * @param  bool $include_player_info Include player info in the response. (optional)
     * @param  bool $include_player_items Include player items in the response. (optional)
     * @param  bool $include_player_stats Include player stats in the response. (optional)
     * @param  bool $include_player_death_details Include player death details in the response. (optional)
     * @param  int[] $match_ids Comma separated list of match ids, limited by &#x60;limit&#x60; (optional)
     * @param  int $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $min_match_id Filter matches based on their ID. (optional)
     * @param  int $max_match_id Filter matches based on their ID. (optional)
     * @param  bool $is_high_skill_range_parties Filter matches based on whether they are in the high skill range. (optional)
     * @param  bool $is_low_pri_pool Filter matches based on whether they are in the low priority pool. (optional)
     * @param  bool $is_new_player_pool Filter matches based on whether they are in the new player pool. (optional)
     * @param  int[] $account_ids Filter matches by account IDs of players that participated in the match. (optional)
     * @param  string $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  string $order_by The field to order the results by. (optional)
     * @param  string $order_direction The direction to order the results by. (optional)
     * @param  int $limit The maximum number of matches to return. (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkMetadataWithHttpInfo($include_info = true, $include_objectives = null, $include_mid_boss = null, $include_player_info = null, $include_player_items = null, $include_player_stats = null, $include_player_death_details = null, $match_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $is_high_skill_range_parties = null, $is_low_pri_pool = null, $is_new_player_pool = null, $account_ids = null, $hero_ids = null, $order_by = null, $order_direction = null, $limit = 1000, string $contentType = self::contentTypes['bulkMetadata'][0])
    {
        $request = $this->bulkMetadataRequest($include_info, $include_objectives, $include_mid_boss, $include_player_info, $include_player_items, $include_player_stats, $include_player_death_details, $match_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $is_high_skill_range_parties, $is_low_pri_pool, $is_new_player_pool, $account_ids, $hero_ids, $order_by, $order_direction, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkMetadataAsync
     *
     * Bulk Metadata
     *
     * @param  bool $include_info Include match info in the response. (optional, default to true)
     * @param  bool $include_objectives Include objectives in the response. (optional)
     * @param  bool $include_mid_boss Include midboss in the response. (optional)
     * @param  bool $include_player_info Include player info in the response. (optional)
     * @param  bool $include_player_items Include player items in the response. (optional)
     * @param  bool $include_player_stats Include player stats in the response. (optional)
     * @param  bool $include_player_death_details Include player death details in the response. (optional)
     * @param  int[] $match_ids Comma separated list of match ids, limited by &#x60;limit&#x60; (optional)
     * @param  int $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $min_match_id Filter matches based on their ID. (optional)
     * @param  int $max_match_id Filter matches based on their ID. (optional)
     * @param  bool $is_high_skill_range_parties Filter matches based on whether they are in the high skill range. (optional)
     * @param  bool $is_low_pri_pool Filter matches based on whether they are in the low priority pool. (optional)
     * @param  bool $is_new_player_pool Filter matches based on whether they are in the new player pool. (optional)
     * @param  int[] $account_ids Filter matches by account IDs of players that participated in the match. (optional)
     * @param  string $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  string $order_by The field to order the results by. (optional)
     * @param  string $order_direction The direction to order the results by. (optional)
     * @param  int $limit The maximum number of matches to return. (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkMetadataAsync($include_info = true, $include_objectives = null, $include_mid_boss = null, $include_player_info = null, $include_player_items = null, $include_player_stats = null, $include_player_death_details = null, $match_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $is_high_skill_range_parties = null, $is_low_pri_pool = null, $is_new_player_pool = null, $account_ids = null, $hero_ids = null, $order_by = null, $order_direction = null, $limit = 1000, string $contentType = self::contentTypes['bulkMetadata'][0])
    {
        return $this->bulkMetadataAsyncWithHttpInfo($include_info, $include_objectives, $include_mid_boss, $include_player_info, $include_player_items, $include_player_stats, $include_player_death_details, $match_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $is_high_skill_range_parties, $is_low_pri_pool, $is_new_player_pool, $account_ids, $hero_ids, $order_by, $order_direction, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkMetadataAsyncWithHttpInfo
     *
     * Bulk Metadata
     *
     * @param  bool $include_info Include match info in the response. (optional, default to true)
     * @param  bool $include_objectives Include objectives in the response. (optional)
     * @param  bool $include_mid_boss Include midboss in the response. (optional)
     * @param  bool $include_player_info Include player info in the response. (optional)
     * @param  bool $include_player_items Include player items in the response. (optional)
     * @param  bool $include_player_stats Include player stats in the response. (optional)
     * @param  bool $include_player_death_details Include player death details in the response. (optional)
     * @param  int[] $match_ids Comma separated list of match ids, limited by &#x60;limit&#x60; (optional)
     * @param  int $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $min_match_id Filter matches based on their ID. (optional)
     * @param  int $max_match_id Filter matches based on their ID. (optional)
     * @param  bool $is_high_skill_range_parties Filter matches based on whether they are in the high skill range. (optional)
     * @param  bool $is_low_pri_pool Filter matches based on whether they are in the low priority pool. (optional)
     * @param  bool $is_new_player_pool Filter matches based on whether they are in the new player pool. (optional)
     * @param  int[] $account_ids Filter matches by account IDs of players that participated in the match. (optional)
     * @param  string $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  string $order_by The field to order the results by. (optional)
     * @param  string $order_direction The direction to order the results by. (optional)
     * @param  int $limit The maximum number of matches to return. (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkMetadataAsyncWithHttpInfo($include_info = true, $include_objectives = null, $include_mid_boss = null, $include_player_info = null, $include_player_items = null, $include_player_stats = null, $include_player_death_details = null, $match_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $is_high_skill_range_parties = null, $is_low_pri_pool = null, $is_new_player_pool = null, $account_ids = null, $hero_ids = null, $order_by = null, $order_direction = null, $limit = 1000, string $contentType = self::contentTypes['bulkMetadata'][0])
    {
        $returnType = 'int[]';
        $request = $this->bulkMetadataRequest($include_info, $include_objectives, $include_mid_boss, $include_player_info, $include_player_items, $include_player_stats, $include_player_death_details, $match_ids, $min_unix_timestamp, $max_unix_timestamp, $min_duration_s, $max_duration_s, $min_average_badge, $max_average_badge, $min_match_id, $max_match_id, $is_high_skill_range_parties, $is_low_pri_pool, $is_new_player_pool, $account_ids, $hero_ids, $order_by, $order_direction, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkMetadata'
     *
     * @param  bool $include_info Include match info in the response. (optional, default to true)
     * @param  bool $include_objectives Include objectives in the response. (optional)
     * @param  bool $include_mid_boss Include midboss in the response. (optional)
     * @param  bool $include_player_info Include player info in the response. (optional)
     * @param  bool $include_player_items Include player items in the response. (optional)
     * @param  bool $include_player_stats Include player stats in the response. (optional)
     * @param  bool $include_player_death_details Include player death details in the response. (optional)
     * @param  int[] $match_ids Comma separated list of match ids, limited by &#x60;limit&#x60; (optional)
     * @param  int $min_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $max_unix_timestamp Filter matches based on their start time (Unix timestamp). (optional)
     * @param  int $min_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $max_duration_s Filter matches based on their duration in seconds (up to 7000s). (optional)
     * @param  int $min_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $max_average_badge Filter matches based on the average badge level (0-116) of *both* teams involved. See more: &lt;https://assets.deadlock-api.com/v2/ranks&gt; (optional)
     * @param  int $min_match_id Filter matches based on their ID. (optional)
     * @param  int $max_match_id Filter matches based on their ID. (optional)
     * @param  bool $is_high_skill_range_parties Filter matches based on whether they are in the high skill range. (optional)
     * @param  bool $is_low_pri_pool Filter matches based on whether they are in the low priority pool. (optional)
     * @param  bool $is_new_player_pool Filter matches based on whether they are in the new player pool. (optional)
     * @param  int[] $account_ids Filter matches by account IDs of players that participated in the match. (optional)
     * @param  string $hero_ids Filter matches based on the hero IDs. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (optional)
     * @param  string $order_by The field to order the results by. (optional)
     * @param  string $order_direction The direction to order the results by. (optional)
     * @param  int $limit The maximum number of matches to return. (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkMetadataRequest($include_info = true, $include_objectives = null, $include_mid_boss = null, $include_player_info = null, $include_player_items = null, $include_player_stats = null, $include_player_death_details = null, $match_ids = null, $min_unix_timestamp = null, $max_unix_timestamp = null, $min_duration_s = null, $max_duration_s = null, $min_average_badge = null, $max_average_badge = null, $min_match_id = null, $max_match_id = null, $is_high_skill_range_parties = null, $is_low_pri_pool = null, $is_new_player_pool = null, $account_ids = null, $hero_ids = null, $order_by = null, $order_direction = null, $limit = 1000, string $contentType = self::contentTypes['bulkMetadata'][0])
    {











        if ($min_duration_s !== null && $min_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling MatchesApi.bulkMetadata, must be smaller than or equal to 7000.');
        }
        if ($min_duration_s !== null && $min_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_duration_s" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 0.');
        }
        
        if ($max_duration_s !== null && $max_duration_s > 7000) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling MatchesApi.bulkMetadata, must be smaller than or equal to 7000.');
        }
        if ($max_duration_s !== null && $max_duration_s < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_duration_s" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 0.');
        }
        
        if ($min_average_badge !== null && $min_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling MatchesApi.bulkMetadata, must be smaller than or equal to 116.');
        }
        if ($min_average_badge !== null && $min_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_average_badge" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 0.');
        }
        
        if ($max_average_badge !== null && $max_average_badge > 116) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling MatchesApi.bulkMetadata, must be smaller than or equal to 116.');
        }
        if ($max_average_badge !== null && $max_average_badge < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_average_badge" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 0.');
        }
        
        if ($min_match_id !== null && $min_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_match_id" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 0.');
        }
        
        if ($max_match_id !== null && $max_match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_match_id" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 0.');
        }
        







        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MatchesApi.bulkMetadata, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MatchesApi.bulkMetadata, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/matches/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_info,
            'include_info', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_objectives,
            'include_objectives', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_mid_boss,
            'include_mid_boss', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_player_info,
            'include_player_info', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_player_items,
            'include_player_items', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_player_stats,
            'include_player_stats', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_player_death_details,
            'include_player_death_details', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $match_ids,
            'match_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_unix_timestamp,
            'min_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_unix_timestamp,
            'max_unix_timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_duration_s,
            'min_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_duration_s,
            'max_duration_s', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_average_badge,
            'min_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_average_badge,
            'max_average_badge', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_match_id,
            'min_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_match_id,
            'max_match_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_high_skill_range_parties,
            'is_high_skill_range_parties', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_low_pri_pool,
            'is_low_pri_pool', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_new_player_pool,
            'is_new_player_pool', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'account_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hero_ids,
            'hero_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_direction,
            'order_direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation metadata
     *
     * Metadata
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function metadata($match_id, $is_custom = null, string $contentType = self::contentTypes['metadata'][0])
    {
        $this->metadataWithHttpInfo($match_id, $is_custom, $contentType);
    }

    /**
     * Operation metadataWithHttpInfo
     *
     * Metadata
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataWithHttpInfo($match_id, $is_custom = null, string $contentType = self::contentTypes['metadata'][0])
    {
        $request = $this->metadataRequest($match_id, $is_custom, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation metadataAsync
     *
     * Metadata
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataAsync($match_id, $is_custom = null, string $contentType = self::contentTypes['metadata'][0])
    {
        return $this->metadataAsyncWithHttpInfo($match_id, $is_custom, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation metadataAsyncWithHttpInfo
     *
     * Metadata
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataAsyncWithHttpInfo($match_id, $is_custom = null, string $contentType = self::contentTypes['metadata'][0])
    {
        $returnType = '';
        $request = $this->metadataRequest($match_id, $is_custom, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'metadata'
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function metadataRequest($match_id, $is_custom = null, string $contentType = self::contentTypes['metadata'][0])
    {

        // verify the required parameter 'match_id' is set
        if ($match_id === null || (is_array($match_id) && count($match_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_id when calling metadata'
            );
        }
        if ($match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$match_id" when calling MatchesApi.metadata, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v1/matches/{match_id}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_custom,
            'is_custom', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($match_id !== null) {
            $resourcePath = str_replace(
                '{' . 'match_id' . '}',
                ObjectSerializer::toPathValue($match_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation metadataRaw
     *
     * Metadata as Protobuf
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function metadataRaw($match_id, $is_custom = null, string $contentType = self::contentTypes['metadataRaw'][0])
    {
        list($response) = $this->metadataRawWithHttpInfo($match_id, $is_custom, $contentType);
        return $response;
    }

    /**
     * Operation metadataRawWithHttpInfo
     *
     * Metadata as Protobuf
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataRawWithHttpInfo($match_id, $is_custom = null, string $contentType = self::contentTypes['metadataRaw'][0])
    {
        $request = $this->metadataRawRequest($match_id, $is_custom, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation metadataRawAsync
     *
     * Metadata as Protobuf
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataRawAsync($match_id, $is_custom = null, string $contentType = self::contentTypes['metadataRaw'][0])
    {
        return $this->metadataRawAsyncWithHttpInfo($match_id, $is_custom, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation metadataRawAsyncWithHttpInfo
     *
     * Metadata as Protobuf
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataRawAsyncWithHttpInfo($match_id, $is_custom = null, string $contentType = self::contentTypes['metadataRaw'][0])
    {
        $returnType = 'int[]';
        $request = $this->metadataRawRequest($match_id, $is_custom, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'metadataRaw'
     *
     * @param  int $match_id The match ID (required)
     * @param  bool $is_custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function metadataRawRequest($match_id, $is_custom = null, string $contentType = self::contentTypes['metadataRaw'][0])
    {

        // verify the required parameter 'match_id' is set
        if ($match_id === null || (is_array($match_id) && count($match_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_id when calling metadataRaw'
            );
        }
        if ($match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$match_id" when calling MatchesApi.metadataRaw, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v1/matches/{match_id}/metadata/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_custom,
            'is_custom', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($match_id !== null) {
            $resourcePath = str_replace(
                '{' . 'match_id' . '}',
                ObjectSerializer::toPathValue($match_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recentlyFetched
     *
     * Recently Fetched
     *
     * @param  bool $player_ingested_only If true, only return matches that have been ingested by players. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recentlyFetched'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ClickhouseMatchInfo[]
     */
    public function recentlyFetched($player_ingested_only = null, string $contentType = self::contentTypes['recentlyFetched'][0])
    {
        list($response) = $this->recentlyFetchedWithHttpInfo($player_ingested_only, $contentType);
        return $response;
    }

    /**
     * Operation recentlyFetchedWithHttpInfo
     *
     * Recently Fetched
     *
     * @param  bool $player_ingested_only If true, only return matches that have been ingested by players. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recentlyFetched'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ClickhouseMatchInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recentlyFetchedWithHttpInfo($player_ingested_only = null, string $contentType = self::contentTypes['recentlyFetched'][0])
    {
        $request = $this->recentlyFetchedRequest($player_ingested_only, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ClickhouseMatchInfo[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ClickhouseMatchInfo[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ClickhouseMatchInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ClickhouseMatchInfo[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ClickhouseMatchInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recentlyFetchedAsync
     *
     * Recently Fetched
     *
     * @param  bool $player_ingested_only If true, only return matches that have been ingested by players. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recentlyFetched'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recentlyFetchedAsync($player_ingested_only = null, string $contentType = self::contentTypes['recentlyFetched'][0])
    {
        return $this->recentlyFetchedAsyncWithHttpInfo($player_ingested_only, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recentlyFetchedAsyncWithHttpInfo
     *
     * Recently Fetched
     *
     * @param  bool $player_ingested_only If true, only return matches that have been ingested by players. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recentlyFetched'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recentlyFetchedAsyncWithHttpInfo($player_ingested_only = null, string $contentType = self::contentTypes['recentlyFetched'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ClickhouseMatchInfo[]';
        $request = $this->recentlyFetchedRequest($player_ingested_only, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recentlyFetched'
     *
     * @param  bool $player_ingested_only If true, only return matches that have been ingested by players. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recentlyFetched'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recentlyFetchedRequest($player_ingested_only = null, string $contentType = self::contentTypes['recentlyFetched'][0])
    {



        $resourcePath = '/v1/matches/recently-fetched';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $player_ingested_only,
            'player_ingested_only', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salts
     *
     * Salts
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['salts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MatchSaltsResponse
     */
    public function salts($match_id, string $contentType = self::contentTypes['salts'][0])
    {
        list($response) = $this->saltsWithHttpInfo($match_id, $contentType);
        return $response;
    }

    /**
     * Operation saltsWithHttpInfo
     *
     * Salts
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['salts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MatchSaltsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saltsWithHttpInfo($match_id, string $contentType = self::contentTypes['salts'][0])
    {
        $request = $this->saltsRequest($match_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MatchSaltsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MatchSaltsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MatchSaltsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MatchSaltsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MatchSaltsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saltsAsync
     *
     * Salts
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['salts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saltsAsync($match_id, string $contentType = self::contentTypes['salts'][0])
    {
        return $this->saltsAsyncWithHttpInfo($match_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saltsAsyncWithHttpInfo
     *
     * Salts
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['salts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saltsAsyncWithHttpInfo($match_id, string $contentType = self::contentTypes['salts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MatchSaltsResponse';
        $request = $this->saltsRequest($match_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salts'
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['salts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saltsRequest($match_id, string $contentType = self::contentTypes['salts'][0])
    {

        // verify the required parameter 'match_id' is set
        if ($match_id === null || (is_array($match_id) && count($match_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_id when calling salts'
            );
        }
        if ($match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$match_id" when calling MatchesApi.salts, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/matches/{match_id}/salts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($match_id !== null) {
            $resourcePath = str_replace(
                '{' . 'match_id' . '}',
                ObjectSerializer::toPathValue($match_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation url
     *
     * Live Broadcast URL
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['url'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MatchSpectateResponse
     */
    public function url($match_id, string $contentType = self::contentTypes['url'][0])
    {
        list($response) = $this->urlWithHttpInfo($match_id, $contentType);
        return $response;
    }

    /**
     * Operation urlWithHttpInfo
     *
     * Live Broadcast URL
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['url'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MatchSpectateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function urlWithHttpInfo($match_id, string $contentType = self::contentTypes['url'][0])
    {
        $request = $this->urlRequest($match_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MatchSpectateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MatchSpectateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MatchSpectateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MatchSpectateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MatchSpectateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation urlAsync
     *
     * Live Broadcast URL
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['url'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function urlAsync($match_id, string $contentType = self::contentTypes['url'][0])
    {
        return $this->urlAsyncWithHttpInfo($match_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation urlAsyncWithHttpInfo
     *
     * Live Broadcast URL
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['url'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function urlAsyncWithHttpInfo($match_id, string $contentType = self::contentTypes['url'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MatchSpectateResponse';
        $request = $this->urlRequest($match_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'url'
     *
     * @param  int $match_id The match ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['url'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function urlRequest($match_id, string $contentType = self::contentTypes['url'][0])
    {

        // verify the required parameter 'match_id' is set
        if ($match_id === null || (is_array($match_id) && count($match_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_id when calling url'
            );
        }
        if ($match_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$match_id" when calling MatchesApi.url, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/matches/{match_id}/live/url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($match_id !== null) {
            $resourcePath = str_replace(
                '{' . 'match_id' . '}',
                ObjectSerializer::toPathValue($match_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
