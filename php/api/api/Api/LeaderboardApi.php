<?php
/**
 * LeaderboardApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LeaderboardApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LeaderboardApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'leaderboard' => [
            'application/json',
        ],
        'leaderboardHero' => [
            'application/json',
        ],
        'leaderboardHeroRaw' => [
            'application/json',
        ],
        'leaderboardRaw' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation leaderboard
     *
     * Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Leaderboard
     */
    public function leaderboard($region, string $contentType = self::contentTypes['leaderboard'][0])
    {
        list($response) = $this->leaderboardWithHttpInfo($region, $contentType);
        return $response;
    }

    /**
     * Operation leaderboardWithHttpInfo
     *
     * Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Leaderboard, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaderboardWithHttpInfo($region, string $contentType = self::contentTypes['leaderboard'][0])
    {
        $request = $this->leaderboardRequest($region, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Leaderboard',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Leaderboard',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Leaderboard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation leaderboardAsync
     *
     * Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardAsync($region, string $contentType = self::contentTypes['leaderboard'][0])
    {
        return $this->leaderboardAsyncWithHttpInfo($region, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaderboardAsyncWithHttpInfo
     *
     * Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardAsyncWithHttpInfo($region, string $contentType = self::contentTypes['leaderboard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Leaderboard';
        $request = $this->leaderboardRequest($region, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaderboard'
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaderboardRequest($region, string $contentType = self::contentTypes['leaderboard'][0])
    {

        // verify the required parameter 'region' is set
        if ($region === null || (is_array($region) && count($region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region when calling leaderboard'
            );
        }


        $resourcePath = '/v1/leaderboard/{region}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($region !== null) {
            $resourcePath = str_replace(
                '{' . 'region' . '}',
                ObjectSerializer::toPathValue($region),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaderboardHero
     *
     * Hero Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHero'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Leaderboard
     */
    public function leaderboardHero($region, $hero_id, string $contentType = self::contentTypes['leaderboardHero'][0])
    {
        list($response) = $this->leaderboardHeroWithHttpInfo($region, $hero_id, $contentType);
        return $response;
    }

    /**
     * Operation leaderboardHeroWithHttpInfo
     *
     * Hero Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHero'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Leaderboard, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaderboardHeroWithHttpInfo($region, $hero_id, string $contentType = self::contentTypes['leaderboardHero'][0])
    {
        $request = $this->leaderboardHeroRequest($region, $hero_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Leaderboard',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Leaderboard',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Leaderboard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation leaderboardHeroAsync
     *
     * Hero Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHero'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardHeroAsync($region, $hero_id, string $contentType = self::contentTypes['leaderboardHero'][0])
    {
        return $this->leaderboardHeroAsyncWithHttpInfo($region, $hero_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaderboardHeroAsyncWithHttpInfo
     *
     * Hero Leaderboard
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHero'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardHeroAsyncWithHttpInfo($region, $hero_id, string $contentType = self::contentTypes['leaderboardHero'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Leaderboard';
        $request = $this->leaderboardHeroRequest($region, $hero_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaderboardHero'
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHero'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaderboardHeroRequest($region, $hero_id, string $contentType = self::contentTypes['leaderboardHero'][0])
    {

        // verify the required parameter 'region' is set
        if ($region === null || (is_array($region) && count($region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region when calling leaderboardHero'
            );
        }

        // verify the required parameter 'hero_id' is set
        if ($hero_id === null || (is_array($hero_id) && count($hero_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hero_id when calling leaderboardHero'
            );
        }
        if ($hero_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$hero_id" when calling LeaderboardApi.leaderboardHero, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/leaderboard/{region}/{hero_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($region !== null) {
            $resourcePath = str_replace(
                '{' . 'region' . '}',
                ObjectSerializer::toPathValue($region),
                $resourcePath
            );
        }
        // path params
        if ($hero_id !== null) {
            $resourcePath = str_replace(
                '{' . 'hero_id' . '}',
                ObjectSerializer::toPathValue($hero_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaderboardHeroRaw
     *
     * Hero Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHeroRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function leaderboardHeroRaw($region, $hero_id, string $contentType = self::contentTypes['leaderboardHeroRaw'][0])
    {
        list($response) = $this->leaderboardHeroRawWithHttpInfo($region, $hero_id, $contentType);
        return $response;
    }

    /**
     * Operation leaderboardHeroRawWithHttpInfo
     *
     * Hero Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHeroRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function leaderboardHeroRawWithHttpInfo($region, $hero_id, string $contentType = self::contentTypes['leaderboardHeroRaw'][0])
    {
        $request = $this->leaderboardHeroRawRequest($region, $hero_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation leaderboardHeroRawAsync
     *
     * Hero Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHeroRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardHeroRawAsync($region, $hero_id, string $contentType = self::contentTypes['leaderboardHeroRaw'][0])
    {
        return $this->leaderboardHeroRawAsyncWithHttpInfo($region, $hero_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaderboardHeroRawAsyncWithHttpInfo
     *
     * Hero Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHeroRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardHeroRawAsyncWithHttpInfo($region, $hero_id, string $contentType = self::contentTypes['leaderboardHeroRaw'][0])
    {
        $returnType = 'int[]';
        $request = $this->leaderboardHeroRawRequest($region, $hero_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaderboardHeroRaw'
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  int $hero_id The hero ID to fetch the leaderboard for. See more: &lt;https://assets.deadlock-api.com/v2/heroes&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardHeroRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaderboardHeroRawRequest($region, $hero_id, string $contentType = self::contentTypes['leaderboardHeroRaw'][0])
    {

        // verify the required parameter 'region' is set
        if ($region === null || (is_array($region) && count($region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region when calling leaderboardHeroRaw'
            );
        }

        // verify the required parameter 'hero_id' is set
        if ($hero_id === null || (is_array($hero_id) && count($hero_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hero_id when calling leaderboardHeroRaw'
            );
        }
        if ($hero_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$hero_id" when calling LeaderboardApi.leaderboardHeroRaw, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v1/leaderboard/{region}/{hero_id}/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($region !== null) {
            $resourcePath = str_replace(
                '{' . 'region' . '}',
                ObjectSerializer::toPathValue($region),
                $resourcePath
            );
        }
        // path params
        if ($hero_id !== null) {
            $resourcePath = str_replace(
                '{' . 'hero_id' . '}',
                ObjectSerializer::toPathValue($hero_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaderboardRaw
     *
     * Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function leaderboardRaw($region, string $contentType = self::contentTypes['leaderboardRaw'][0])
    {
        list($response) = $this->leaderboardRawWithHttpInfo($region, $contentType);
        return $response;
    }

    /**
     * Operation leaderboardRawWithHttpInfo
     *
     * Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardRaw'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function leaderboardRawWithHttpInfo($region, string $contentType = self::contentTypes['leaderboardRaw'][0])
    {
        $request = $this->leaderboardRawRequest($region, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation leaderboardRawAsync
     *
     * Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardRawAsync($region, string $contentType = self::contentTypes['leaderboardRaw'][0])
    {
        return $this->leaderboardRawAsyncWithHttpInfo($region, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaderboardRawAsyncWithHttpInfo
     *
     * Leaderboard as Protobuf
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaderboardRawAsyncWithHttpInfo($region, string $contentType = self::contentTypes['leaderboardRaw'][0])
    {
        $returnType = 'int[]';
        $request = $this->leaderboardRawRequest($region, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaderboardRaw'
     *
     * @param  string $region The region to fetch the leaderboard for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaderboardRaw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaderboardRawRequest($region, string $contentType = self::contentTypes['leaderboardRaw'][0])
    {

        // verify the required parameter 'region' is set
        if ($region === null || (is_array($region) && count($region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region when calling leaderboardRaw'
            );
        }


        $resourcePath = '/v1/leaderboard/{region}/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($region !== null) {
            $resourcePath = str_replace(
                '{' . 'region' . '}',
                ObjectSerializer::toPathValue($region),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
