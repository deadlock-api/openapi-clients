<?php
/**
 * HeroSynergyStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeroSynergyStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeroSynergyStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeroSynergyStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assists1' => 'int',
        'assists2' => 'int',
        'creeps1' => 'int',
        'creeps2' => 'int',
        'deaths1' => 'int',
        'deaths2' => 'int',
        'denies1' => 'int',
        'denies2' => 'int',
        'hero_id1' => 'int',
        'hero_id2' => 'int',
        'kills1' => 'int',
        'kills2' => 'int',
        'last_hits1' => 'int',
        'last_hits2' => 'int',
        'matches_played' => 'int',
        'networth1' => 'int',
        'networth2' => 'int',
        'obj_damage1' => 'int',
        'obj_damage2' => 'int',
        'wins' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assists1' => 'int64',
        'assists2' => 'int64',
        'creeps1' => 'int64',
        'creeps2' => 'int64',
        'deaths1' => 'int64',
        'deaths2' => 'int64',
        'denies1' => 'int64',
        'denies2' => 'int64',
        'hero_id1' => 'int32',
        'hero_id2' => 'int32',
        'kills1' => 'int64',
        'kills2' => 'int64',
        'last_hits1' => 'int64',
        'last_hits2' => 'int64',
        'matches_played' => 'int64',
        'networth1' => 'int64',
        'networth2' => 'int64',
        'obj_damage1' => 'int64',
        'obj_damage2' => 'int64',
        'wins' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assists1' => false,
        'assists2' => false,
        'creeps1' => false,
        'creeps2' => false,
        'deaths1' => false,
        'deaths2' => false,
        'denies1' => false,
        'denies2' => false,
        'hero_id1' => false,
        'hero_id2' => false,
        'kills1' => false,
        'kills2' => false,
        'last_hits1' => false,
        'last_hits2' => false,
        'matches_played' => false,
        'networth1' => false,
        'networth2' => false,
        'obj_damage1' => false,
        'obj_damage2' => false,
        'wins' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assists1' => 'assists1',
        'assists2' => 'assists2',
        'creeps1' => 'creeps1',
        'creeps2' => 'creeps2',
        'deaths1' => 'deaths1',
        'deaths2' => 'deaths2',
        'denies1' => 'denies1',
        'denies2' => 'denies2',
        'hero_id1' => 'hero_id1',
        'hero_id2' => 'hero_id2',
        'kills1' => 'kills1',
        'kills2' => 'kills2',
        'last_hits1' => 'last_hits1',
        'last_hits2' => 'last_hits2',
        'matches_played' => 'matches_played',
        'networth1' => 'networth1',
        'networth2' => 'networth2',
        'obj_damage1' => 'obj_damage1',
        'obj_damage2' => 'obj_damage2',
        'wins' => 'wins'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assists1' => 'setAssists1',
        'assists2' => 'setAssists2',
        'creeps1' => 'setCreeps1',
        'creeps2' => 'setCreeps2',
        'deaths1' => 'setDeaths1',
        'deaths2' => 'setDeaths2',
        'denies1' => 'setDenies1',
        'denies2' => 'setDenies2',
        'hero_id1' => 'setHeroId1',
        'hero_id2' => 'setHeroId2',
        'kills1' => 'setKills1',
        'kills2' => 'setKills2',
        'last_hits1' => 'setLastHits1',
        'last_hits2' => 'setLastHits2',
        'matches_played' => 'setMatchesPlayed',
        'networth1' => 'setNetworth1',
        'networth2' => 'setNetworth2',
        'obj_damage1' => 'setObjDamage1',
        'obj_damage2' => 'setObjDamage2',
        'wins' => 'setWins'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assists1' => 'getAssists1',
        'assists2' => 'getAssists2',
        'creeps1' => 'getCreeps1',
        'creeps2' => 'getCreeps2',
        'deaths1' => 'getDeaths1',
        'deaths2' => 'getDeaths2',
        'denies1' => 'getDenies1',
        'denies2' => 'getDenies2',
        'hero_id1' => 'getHeroId1',
        'hero_id2' => 'getHeroId2',
        'kills1' => 'getKills1',
        'kills2' => 'getKills2',
        'last_hits1' => 'getLastHits1',
        'last_hits2' => 'getLastHits2',
        'matches_played' => 'getMatchesPlayed',
        'networth1' => 'getNetworth1',
        'networth2' => 'getNetworth2',
        'obj_damage1' => 'getObjDamage1',
        'obj_damage2' => 'getObjDamage2',
        'wins' => 'getWins'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('assists1', $data ?? [], null);
        $this->setIfExists('assists2', $data ?? [], null);
        $this->setIfExists('creeps1', $data ?? [], null);
        $this->setIfExists('creeps2', $data ?? [], null);
        $this->setIfExists('deaths1', $data ?? [], null);
        $this->setIfExists('deaths2', $data ?? [], null);
        $this->setIfExists('denies1', $data ?? [], null);
        $this->setIfExists('denies2', $data ?? [], null);
        $this->setIfExists('hero_id1', $data ?? [], null);
        $this->setIfExists('hero_id2', $data ?? [], null);
        $this->setIfExists('kills1', $data ?? [], null);
        $this->setIfExists('kills2', $data ?? [], null);
        $this->setIfExists('last_hits1', $data ?? [], null);
        $this->setIfExists('last_hits2', $data ?? [], null);
        $this->setIfExists('matches_played', $data ?? [], null);
        $this->setIfExists('networth1', $data ?? [], null);
        $this->setIfExists('networth2', $data ?? [], null);
        $this->setIfExists('obj_damage1', $data ?? [], null);
        $this->setIfExists('obj_damage2', $data ?? [], null);
        $this->setIfExists('wins', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['assists1'] === null) {
            $invalidProperties[] = "'assists1' can't be null";
        }
        if (($this->container['assists1'] < 0)) {
            $invalidProperties[] = "invalid value for 'assists1', must be bigger than or equal to 0.";
        }

        if ($this->container['assists2'] === null) {
            $invalidProperties[] = "'assists2' can't be null";
        }
        if (($this->container['assists2'] < 0)) {
            $invalidProperties[] = "invalid value for 'assists2', must be bigger than or equal to 0.";
        }

        if ($this->container['creeps1'] === null) {
            $invalidProperties[] = "'creeps1' can't be null";
        }
        if (($this->container['creeps1'] < 0)) {
            $invalidProperties[] = "invalid value for 'creeps1', must be bigger than or equal to 0.";
        }

        if ($this->container['creeps2'] === null) {
            $invalidProperties[] = "'creeps2' can't be null";
        }
        if (($this->container['creeps2'] < 0)) {
            $invalidProperties[] = "invalid value for 'creeps2', must be bigger than or equal to 0.";
        }

        if ($this->container['deaths1'] === null) {
            $invalidProperties[] = "'deaths1' can't be null";
        }
        if (($this->container['deaths1'] < 0)) {
            $invalidProperties[] = "invalid value for 'deaths1', must be bigger than or equal to 0.";
        }

        if ($this->container['deaths2'] === null) {
            $invalidProperties[] = "'deaths2' can't be null";
        }
        if (($this->container['deaths2'] < 0)) {
            $invalidProperties[] = "invalid value for 'deaths2', must be bigger than or equal to 0.";
        }

        if ($this->container['denies1'] === null) {
            $invalidProperties[] = "'denies1' can't be null";
        }
        if (($this->container['denies1'] < 0)) {
            $invalidProperties[] = "invalid value for 'denies1', must be bigger than or equal to 0.";
        }

        if ($this->container['denies2'] === null) {
            $invalidProperties[] = "'denies2' can't be null";
        }
        if (($this->container['denies2'] < 0)) {
            $invalidProperties[] = "invalid value for 'denies2', must be bigger than or equal to 0.";
        }

        if ($this->container['hero_id1'] === null) {
            $invalidProperties[] = "'hero_id1' can't be null";
        }
        if (($this->container['hero_id1'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_id1', must be bigger than or equal to 0.";
        }

        if ($this->container['hero_id2'] === null) {
            $invalidProperties[] = "'hero_id2' can't be null";
        }
        if (($this->container['hero_id2'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_id2', must be bigger than or equal to 0.";
        }

        if ($this->container['kills1'] === null) {
            $invalidProperties[] = "'kills1' can't be null";
        }
        if (($this->container['kills1'] < 0)) {
            $invalidProperties[] = "invalid value for 'kills1', must be bigger than or equal to 0.";
        }

        if ($this->container['kills2'] === null) {
            $invalidProperties[] = "'kills2' can't be null";
        }
        if (($this->container['kills2'] < 0)) {
            $invalidProperties[] = "invalid value for 'kills2', must be bigger than or equal to 0.";
        }

        if ($this->container['last_hits1'] === null) {
            $invalidProperties[] = "'last_hits1' can't be null";
        }
        if (($this->container['last_hits1'] < 0)) {
            $invalidProperties[] = "invalid value for 'last_hits1', must be bigger than or equal to 0.";
        }

        if ($this->container['last_hits2'] === null) {
            $invalidProperties[] = "'last_hits2' can't be null";
        }
        if (($this->container['last_hits2'] < 0)) {
            $invalidProperties[] = "invalid value for 'last_hits2', must be bigger than or equal to 0.";
        }

        if ($this->container['matches_played'] === null) {
            $invalidProperties[] = "'matches_played' can't be null";
        }
        if (($this->container['matches_played'] < 0)) {
            $invalidProperties[] = "invalid value for 'matches_played', must be bigger than or equal to 0.";
        }

        if ($this->container['networth1'] === null) {
            $invalidProperties[] = "'networth1' can't be null";
        }
        if (($this->container['networth1'] < 0)) {
            $invalidProperties[] = "invalid value for 'networth1', must be bigger than or equal to 0.";
        }

        if ($this->container['networth2'] === null) {
            $invalidProperties[] = "'networth2' can't be null";
        }
        if (($this->container['networth2'] < 0)) {
            $invalidProperties[] = "invalid value for 'networth2', must be bigger than or equal to 0.";
        }

        if ($this->container['obj_damage1'] === null) {
            $invalidProperties[] = "'obj_damage1' can't be null";
        }
        if (($this->container['obj_damage1'] < 0)) {
            $invalidProperties[] = "invalid value for 'obj_damage1', must be bigger than or equal to 0.";
        }

        if ($this->container['obj_damage2'] === null) {
            $invalidProperties[] = "'obj_damage2' can't be null";
        }
        if (($this->container['obj_damage2'] < 0)) {
            $invalidProperties[] = "invalid value for 'obj_damage2', must be bigger than or equal to 0.";
        }

        if ($this->container['wins'] === null) {
            $invalidProperties[] = "'wins' can't be null";
        }
        if (($this->container['wins'] < 0)) {
            $invalidProperties[] = "invalid value for 'wins', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assists1
     *
     * @return int
     */
    public function getAssists1()
    {
        return $this->container['assists1'];
    }

    /**
     * Sets assists1
     *
     * @param int $assists1 The number of assists by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setAssists1($assists1)
    {
        if (is_null($assists1)) {
            throw new \InvalidArgumentException('non-nullable assists1 cannot be null');
        }

        if (($assists1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $assists1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['assists1'] = $assists1;

        return $this;
    }

    /**
     * Gets assists2
     *
     * @return int
     */
    public function getAssists2()
    {
        return $this->container['assists2'];
    }

    /**
     * Sets assists2
     *
     * @param int $assists2 The number of assists by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setAssists2($assists2)
    {
        if (is_null($assists2)) {
            throw new \InvalidArgumentException('non-nullable assists2 cannot be null');
        }

        if (($assists2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $assists2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['assists2'] = $assists2;

        return $this;
    }

    /**
     * Gets creeps1
     *
     * @return int
     */
    public function getCreeps1()
    {
        return $this->container['creeps1'];
    }

    /**
     * Sets creeps1
     *
     * @param int $creeps1 The number of creeps killed by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setCreeps1($creeps1)
    {
        if (is_null($creeps1)) {
            throw new \InvalidArgumentException('non-nullable creeps1 cannot be null');
        }

        if (($creeps1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $creeps1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['creeps1'] = $creeps1;

        return $this;
    }

    /**
     * Gets creeps2
     *
     * @return int
     */
    public function getCreeps2()
    {
        return $this->container['creeps2'];
    }

    /**
     * Sets creeps2
     *
     * @param int $creeps2 The number of creeps killed by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setCreeps2($creeps2)
    {
        if (is_null($creeps2)) {
            throw new \InvalidArgumentException('non-nullable creeps2 cannot be null');
        }

        if (($creeps2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $creeps2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['creeps2'] = $creeps2;

        return $this;
    }

    /**
     * Gets deaths1
     *
     * @return int
     */
    public function getDeaths1()
    {
        return $this->container['deaths1'];
    }

    /**
     * Sets deaths1
     *
     * @param int $deaths1 The number of deaths by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setDeaths1($deaths1)
    {
        if (is_null($deaths1)) {
            throw new \InvalidArgumentException('non-nullable deaths1 cannot be null');
        }

        if (($deaths1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $deaths1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['deaths1'] = $deaths1;

        return $this;
    }

    /**
     * Gets deaths2
     *
     * @return int
     */
    public function getDeaths2()
    {
        return $this->container['deaths2'];
    }

    /**
     * Sets deaths2
     *
     * @param int $deaths2 The number of deaths by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setDeaths2($deaths2)
    {
        if (is_null($deaths2)) {
            throw new \InvalidArgumentException('non-nullable deaths2 cannot be null');
        }

        if (($deaths2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $deaths2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['deaths2'] = $deaths2;

        return $this;
    }

    /**
     * Gets denies1
     *
     * @return int
     */
    public function getDenies1()
    {
        return $this->container['denies1'];
    }

    /**
     * Sets denies1
     *
     * @param int $denies1 The number of denies by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setDenies1($denies1)
    {
        if (is_null($denies1)) {
            throw new \InvalidArgumentException('non-nullable denies1 cannot be null');
        }

        if (($denies1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $denies1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['denies1'] = $denies1;

        return $this;
    }

    /**
     * Gets denies2
     *
     * @return int
     */
    public function getDenies2()
    {
        return $this->container['denies2'];
    }

    /**
     * Sets denies2
     *
     * @param int $denies2 The number of denies by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setDenies2($denies2)
    {
        if (is_null($denies2)) {
            throw new \InvalidArgumentException('non-nullable denies2 cannot be null');
        }

        if (($denies2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $denies2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['denies2'] = $denies2;

        return $this;
    }

    /**
     * Gets hero_id1
     *
     * @return int
     */
    public function getHeroId1()
    {
        return $this->container['hero_id1'];
    }

    /**
     * Sets hero_id1
     *
     * @param int $hero_id1 The ID of the first hero in the pair.
     *
     * @return self
     */
    public function setHeroId1($hero_id1)
    {
        if (is_null($hero_id1)) {
            throw new \InvalidArgumentException('non-nullable hero_id1 cannot be null');
        }

        if (($hero_id1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_id1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['hero_id1'] = $hero_id1;

        return $this;
    }

    /**
     * Gets hero_id2
     *
     * @return int
     */
    public function getHeroId2()
    {
        return $this->container['hero_id2'];
    }

    /**
     * Sets hero_id2
     *
     * @param int $hero_id2 The ID of the second hero in the pair.
     *
     * @return self
     */
    public function setHeroId2($hero_id2)
    {
        if (is_null($hero_id2)) {
            throw new \InvalidArgumentException('non-nullable hero_id2 cannot be null');
        }

        if (($hero_id2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_id2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['hero_id2'] = $hero_id2;

        return $this;
    }

    /**
     * Gets kills1
     *
     * @return int
     */
    public function getKills1()
    {
        return $this->container['kills1'];
    }

    /**
     * Sets kills1
     *
     * @param int $kills1 The number of kills by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setKills1($kills1)
    {
        if (is_null($kills1)) {
            throw new \InvalidArgumentException('non-nullable kills1 cannot be null');
        }

        if (($kills1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $kills1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['kills1'] = $kills1;

        return $this;
    }

    /**
     * Gets kills2
     *
     * @return int
     */
    public function getKills2()
    {
        return $this->container['kills2'];
    }

    /**
     * Sets kills2
     *
     * @param int $kills2 The number of kills by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setKills2($kills2)
    {
        if (is_null($kills2)) {
            throw new \InvalidArgumentException('non-nullable kills2 cannot be null');
        }

        if (($kills2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $kills2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['kills2'] = $kills2;

        return $this;
    }

    /**
     * Gets last_hits1
     *
     * @return int
     */
    public function getLastHits1()
    {
        return $this->container['last_hits1'];
    }

    /**
     * Sets last_hits1
     *
     * @param int $last_hits1 The number of last hits by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setLastHits1($last_hits1)
    {
        if (is_null($last_hits1)) {
            throw new \InvalidArgumentException('non-nullable last_hits1 cannot be null');
        }

        if (($last_hits1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $last_hits1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['last_hits1'] = $last_hits1;

        return $this;
    }

    /**
     * Gets last_hits2
     *
     * @return int
     */
    public function getLastHits2()
    {
        return $this->container['last_hits2'];
    }

    /**
     * Sets last_hits2
     *
     * @param int $last_hits2 The number of last hits by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setLastHits2($last_hits2)
    {
        if (is_null($last_hits2)) {
            throw new \InvalidArgumentException('non-nullable last_hits2 cannot be null');
        }

        if (($last_hits2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $last_hits2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['last_hits2'] = $last_hits2;

        return $this;
    }

    /**
     * Gets matches_played
     *
     * @return int
     */
    public function getMatchesPlayed()
    {
        return $this->container['matches_played'];
    }

    /**
     * Sets matches_played
     *
     * @param int $matches_played The total number of matches played where `hero_id1` and `hero_id2` were on the same team, meeting the filter criteria.
     *
     * @return self
     */
    public function setMatchesPlayed($matches_played)
    {
        if (is_null($matches_played)) {
            throw new \InvalidArgumentException('non-nullable matches_played cannot be null');
        }

        if (($matches_played < 0)) {
            throw new \InvalidArgumentException('invalid value for $matches_played when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['matches_played'] = $matches_played;

        return $this;
    }

    /**
     * Gets networth1
     *
     * @return int
     */
    public function getNetworth1()
    {
        return $this->container['networth1'];
    }

    /**
     * Sets networth1
     *
     * @param int $networth1 The net worth of `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setNetworth1($networth1)
    {
        if (is_null($networth1)) {
            throw new \InvalidArgumentException('non-nullable networth1 cannot be null');
        }

        if (($networth1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $networth1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['networth1'] = $networth1;

        return $this;
    }

    /**
     * Gets networth2
     *
     * @return int
     */
    public function getNetworth2()
    {
        return $this->container['networth2'];
    }

    /**
     * Sets networth2
     *
     * @param int $networth2 The net worth of `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setNetworth2($networth2)
    {
        if (is_null($networth2)) {
            throw new \InvalidArgumentException('non-nullable networth2 cannot be null');
        }

        if (($networth2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $networth2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['networth2'] = $networth2;

        return $this;
    }

    /**
     * Gets obj_damage1
     *
     * @return int
     */
    public function getObjDamage1()
    {
        return $this->container['obj_damage1'];
    }

    /**
     * Sets obj_damage1
     *
     * @param int $obj_damage1 The amount of objective damage dealt by `hero_id1` when playing with `hero_id2`.
     *
     * @return self
     */
    public function setObjDamage1($obj_damage1)
    {
        if (is_null($obj_damage1)) {
            throw new \InvalidArgumentException('non-nullable obj_damage1 cannot be null');
        }

        if (($obj_damage1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $obj_damage1 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['obj_damage1'] = $obj_damage1;

        return $this;
    }

    /**
     * Gets obj_damage2
     *
     * @return int
     */
    public function getObjDamage2()
    {
        return $this->container['obj_damage2'];
    }

    /**
     * Sets obj_damage2
     *
     * @param int $obj_damage2 The amount of objective damage dealt by `hero_id2` when playing with `hero_id1`.
     *
     * @return self
     */
    public function setObjDamage2($obj_damage2)
    {
        if (is_null($obj_damage2)) {
            throw new \InvalidArgumentException('non-nullable obj_damage2 cannot be null');
        }

        if (($obj_damage2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $obj_damage2 when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['obj_damage2'] = $obj_damage2;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins The number of times the team won when both `hero_id1` and `hero_id2` were on the same team.
     *
     * @return self
     */
    public function setWins($wins)
    {
        if (is_null($wins)) {
            throw new \InvalidArgumentException('non-nullable wins cannot be null');
        }

        if (($wins < 0)) {
            throw new \InvalidArgumentException('invalid value for $wins when calling HeroSynergyStats., must be bigger than or equal to 0.');
        }

        $this->container['wins'] = $wins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


