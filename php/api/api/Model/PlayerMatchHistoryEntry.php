<?php
/**
 * PlayerMatchHistoryEntry
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlayerMatchHistoryEntry Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlayerMatchHistoryEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlayerMatchHistoryEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abandoned_time_s' => 'int',
        'account_id' => 'int',
        'denies' => 'int',
        'game_mode' => 'int',
        'hero_id' => 'int',
        'hero_level' => 'int',
        'last_hits' => 'int',
        'match_duration_s' => 'int',
        'match_id' => 'int',
        'match_mode' => 'int',
        'match_result' => 'int',
        'net_worth' => 'int',
        'objectives_mask_team0' => 'int',
        'objectives_mask_team1' => 'int',
        'player_assists' => 'int',
        'player_deaths' => 'int',
        'player_kills' => 'int',
        'player_team' => 'int',
        'start_time' => 'int',
        'team_abandoned' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abandoned_time_s' => 'int32',
        'account_id' => 'int32',
        'denies' => 'int32',
        'game_mode' => 'int32',
        'hero_id' => 'int32',
        'hero_level' => 'int32',
        'last_hits' => 'int32',
        'match_duration_s' => 'int32',
        'match_id' => 'int64',
        'match_mode' => 'int32',
        'match_result' => 'int32',
        'net_worth' => 'int32',
        'objectives_mask_team0' => 'int32',
        'objectives_mask_team1' => 'int32',
        'player_assists' => 'int32',
        'player_deaths' => 'int32',
        'player_kills' => 'int32',
        'player_team' => 'int32',
        'start_time' => 'int32',
        'team_abandoned' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abandoned_time_s' => true,
        'account_id' => false,
        'denies' => false,
        'game_mode' => false,
        'hero_id' => false,
        'hero_level' => false,
        'last_hits' => false,
        'match_duration_s' => false,
        'match_id' => false,
        'match_mode' => false,
        'match_result' => false,
        'net_worth' => false,
        'objectives_mask_team0' => false,
        'objectives_mask_team1' => false,
        'player_assists' => false,
        'player_deaths' => false,
        'player_kills' => false,
        'player_team' => false,
        'start_time' => false,
        'team_abandoned' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abandoned_time_s' => 'abandoned_time_s',
        'account_id' => 'account_id',
        'denies' => 'denies',
        'game_mode' => 'game_mode',
        'hero_id' => 'hero_id',
        'hero_level' => 'hero_level',
        'last_hits' => 'last_hits',
        'match_duration_s' => 'match_duration_s',
        'match_id' => 'match_id',
        'match_mode' => 'match_mode',
        'match_result' => 'match_result',
        'net_worth' => 'net_worth',
        'objectives_mask_team0' => 'objectives_mask_team0',
        'objectives_mask_team1' => 'objectives_mask_team1',
        'player_assists' => 'player_assists',
        'player_deaths' => 'player_deaths',
        'player_kills' => 'player_kills',
        'player_team' => 'player_team',
        'start_time' => 'start_time',
        'team_abandoned' => 'team_abandoned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abandoned_time_s' => 'setAbandonedTimeS',
        'account_id' => 'setAccountId',
        'denies' => 'setDenies',
        'game_mode' => 'setGameMode',
        'hero_id' => 'setHeroId',
        'hero_level' => 'setHeroLevel',
        'last_hits' => 'setLastHits',
        'match_duration_s' => 'setMatchDurationS',
        'match_id' => 'setMatchId',
        'match_mode' => 'setMatchMode',
        'match_result' => 'setMatchResult',
        'net_worth' => 'setNetWorth',
        'objectives_mask_team0' => 'setObjectivesMaskTeam0',
        'objectives_mask_team1' => 'setObjectivesMaskTeam1',
        'player_assists' => 'setPlayerAssists',
        'player_deaths' => 'setPlayerDeaths',
        'player_kills' => 'setPlayerKills',
        'player_team' => 'setPlayerTeam',
        'start_time' => 'setStartTime',
        'team_abandoned' => 'setTeamAbandoned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abandoned_time_s' => 'getAbandonedTimeS',
        'account_id' => 'getAccountId',
        'denies' => 'getDenies',
        'game_mode' => 'getGameMode',
        'hero_id' => 'getHeroId',
        'hero_level' => 'getHeroLevel',
        'last_hits' => 'getLastHits',
        'match_duration_s' => 'getMatchDurationS',
        'match_id' => 'getMatchId',
        'match_mode' => 'getMatchMode',
        'match_result' => 'getMatchResult',
        'net_worth' => 'getNetWorth',
        'objectives_mask_team0' => 'getObjectivesMaskTeam0',
        'objectives_mask_team1' => 'getObjectivesMaskTeam1',
        'player_assists' => 'getPlayerAssists',
        'player_deaths' => 'getPlayerDeaths',
        'player_kills' => 'getPlayerKills',
        'player_team' => 'getPlayerTeam',
        'start_time' => 'getStartTime',
        'team_abandoned' => 'getTeamAbandoned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('abandoned_time_s', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('denies', $data ?? [], null);
        $this->setIfExists('game_mode', $data ?? [], null);
        $this->setIfExists('hero_id', $data ?? [], null);
        $this->setIfExists('hero_level', $data ?? [], null);
        $this->setIfExists('last_hits', $data ?? [], null);
        $this->setIfExists('match_duration_s', $data ?? [], null);
        $this->setIfExists('match_id', $data ?? [], null);
        $this->setIfExists('match_mode', $data ?? [], null);
        $this->setIfExists('match_result', $data ?? [], null);
        $this->setIfExists('net_worth', $data ?? [], null);
        $this->setIfExists('objectives_mask_team0', $data ?? [], null);
        $this->setIfExists('objectives_mask_team1', $data ?? [], null);
        $this->setIfExists('player_assists', $data ?? [], null);
        $this->setIfExists('player_deaths', $data ?? [], null);
        $this->setIfExists('player_kills', $data ?? [], null);
        $this->setIfExists('player_team', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('team_abandoned', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['abandoned_time_s']) && ($this->container['abandoned_time_s'] < 0)) {
            $invalidProperties[] = "invalid value for 'abandoned_time_s', must be bigger than or equal to 0.";
        }

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if (($this->container['account_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'account_id', must be bigger than or equal to 0.";
        }

        if ($this->container['denies'] === null) {
            $invalidProperties[] = "'denies' can't be null";
        }
        if (($this->container['denies'] < 0)) {
            $invalidProperties[] = "invalid value for 'denies', must be bigger than or equal to 0.";
        }

        if ($this->container['game_mode'] === null) {
            $invalidProperties[] = "'game_mode' can't be null";
        }
        if ($this->container['hero_id'] === null) {
            $invalidProperties[] = "'hero_id' can't be null";
        }
        if (($this->container['hero_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_id', must be bigger than or equal to 0.";
        }

        if ($this->container['hero_level'] === null) {
            $invalidProperties[] = "'hero_level' can't be null";
        }
        if (($this->container['hero_level'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_level', must be bigger than or equal to 0.";
        }

        if ($this->container['last_hits'] === null) {
            $invalidProperties[] = "'last_hits' can't be null";
        }
        if (($this->container['last_hits'] < 0)) {
            $invalidProperties[] = "invalid value for 'last_hits', must be bigger than or equal to 0.";
        }

        if ($this->container['match_duration_s'] === null) {
            $invalidProperties[] = "'match_duration_s' can't be null";
        }
        if (($this->container['match_duration_s'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_duration_s', must be bigger than or equal to 0.";
        }

        if ($this->container['match_id'] === null) {
            $invalidProperties[] = "'match_id' can't be null";
        }
        if (($this->container['match_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_id', must be bigger than or equal to 0.";
        }

        if ($this->container['match_mode'] === null) {
            $invalidProperties[] = "'match_mode' can't be null";
        }
        if ($this->container['match_result'] === null) {
            $invalidProperties[] = "'match_result' can't be null";
        }
        if (($this->container['match_result'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_result', must be bigger than or equal to 0.";
        }

        if ($this->container['net_worth'] === null) {
            $invalidProperties[] = "'net_worth' can't be null";
        }
        if (($this->container['net_worth'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_worth', must be bigger than or equal to 0.";
        }

        if ($this->container['objectives_mask_team0'] === null) {
            $invalidProperties[] = "'objectives_mask_team0' can't be null";
        }
        if (($this->container['objectives_mask_team0'] < 0)) {
            $invalidProperties[] = "invalid value for 'objectives_mask_team0', must be bigger than or equal to 0.";
        }

        if ($this->container['objectives_mask_team1'] === null) {
            $invalidProperties[] = "'objectives_mask_team1' can't be null";
        }
        if (($this->container['objectives_mask_team1'] < 0)) {
            $invalidProperties[] = "invalid value for 'objectives_mask_team1', must be bigger than or equal to 0.";
        }

        if ($this->container['player_assists'] === null) {
            $invalidProperties[] = "'player_assists' can't be null";
        }
        if (($this->container['player_assists'] < 0)) {
            $invalidProperties[] = "invalid value for 'player_assists', must be bigger than or equal to 0.";
        }

        if ($this->container['player_deaths'] === null) {
            $invalidProperties[] = "'player_deaths' can't be null";
        }
        if (($this->container['player_deaths'] < 0)) {
            $invalidProperties[] = "invalid value for 'player_deaths', must be bigger than or equal to 0.";
        }

        if ($this->container['player_kills'] === null) {
            $invalidProperties[] = "'player_kills' can't be null";
        }
        if (($this->container['player_kills'] < 0)) {
            $invalidProperties[] = "invalid value for 'player_kills', must be bigger than or equal to 0.";
        }

        if ($this->container['player_team'] === null) {
            $invalidProperties[] = "'player_team' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if (($this->container['start_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'start_time', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abandoned_time_s
     *
     * @return int|null
     */
    public function getAbandonedTimeS()
    {
        return $this->container['abandoned_time_s'];
    }

    /**
     * Sets abandoned_time_s
     *
     * @param int|null $abandoned_time_s abandoned_time_s
     *
     * @return self
     */
    public function setAbandonedTimeS($abandoned_time_s)
    {
        if (is_null($abandoned_time_s)) {
            array_push($this->openAPINullablesSetToNull, 'abandoned_time_s');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abandoned_time_s', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($abandoned_time_s) && ($abandoned_time_s < 0)) {
            throw new \InvalidArgumentException('invalid value for $abandoned_time_s when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['abandoned_time_s'] = $abandoned_time_s;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }

        if (($account_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $account_id when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets denies
     *
     * @return int
     */
    public function getDenies()
    {
        return $this->container['denies'];
    }

    /**
     * Sets denies
     *
     * @param int $denies denies
     *
     * @return self
     */
    public function setDenies($denies)
    {
        if (is_null($denies)) {
            throw new \InvalidArgumentException('non-nullable denies cannot be null');
        }

        if (($denies < 0)) {
            throw new \InvalidArgumentException('invalid value for $denies when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['denies'] = $denies;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return int
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param int $game_mode game_mode
     *
     * @return self
     */
    public function setGameMode($game_mode)
    {
        if (is_null($game_mode)) {
            throw new \InvalidArgumentException('non-nullable game_mode cannot be null');
        }
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets hero_id
     *
     * @return int
     */
    public function getHeroId()
    {
        return $this->container['hero_id'];
    }

    /**
     * Sets hero_id
     *
     * @param int $hero_id See more: <https://assets.deadlock-api.com/v2/heroes>
     *
     * @return self
     */
    public function setHeroId($hero_id)
    {
        if (is_null($hero_id)) {
            throw new \InvalidArgumentException('non-nullable hero_id cannot be null');
        }

        if (($hero_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_id when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['hero_id'] = $hero_id;

        return $this;
    }

    /**
     * Gets hero_level
     *
     * @return int
     */
    public function getHeroLevel()
    {
        return $this->container['hero_level'];
    }

    /**
     * Sets hero_level
     *
     * @param int $hero_level hero_level
     *
     * @return self
     */
    public function setHeroLevel($hero_level)
    {
        if (is_null($hero_level)) {
            throw new \InvalidArgumentException('non-nullable hero_level cannot be null');
        }

        if (($hero_level < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_level when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['hero_level'] = $hero_level;

        return $this;
    }

    /**
     * Gets last_hits
     *
     * @return int
     */
    public function getLastHits()
    {
        return $this->container['last_hits'];
    }

    /**
     * Sets last_hits
     *
     * @param int $last_hits last_hits
     *
     * @return self
     */
    public function setLastHits($last_hits)
    {
        if (is_null($last_hits)) {
            throw new \InvalidArgumentException('non-nullable last_hits cannot be null');
        }

        if (($last_hits < 0)) {
            throw new \InvalidArgumentException('invalid value for $last_hits when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['last_hits'] = $last_hits;

        return $this;
    }

    /**
     * Gets match_duration_s
     *
     * @return int
     */
    public function getMatchDurationS()
    {
        return $this->container['match_duration_s'];
    }

    /**
     * Sets match_duration_s
     *
     * @param int $match_duration_s match_duration_s
     *
     * @return self
     */
    public function setMatchDurationS($match_duration_s)
    {
        if (is_null($match_duration_s)) {
            throw new \InvalidArgumentException('non-nullable match_duration_s cannot be null');
        }

        if (($match_duration_s < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_duration_s when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['match_duration_s'] = $match_duration_s;

        return $this;
    }

    /**
     * Gets match_id
     *
     * @return int
     */
    public function getMatchId()
    {
        return $this->container['match_id'];
    }

    /**
     * Sets match_id
     *
     * @param int $match_id match_id
     *
     * @return self
     */
    public function setMatchId($match_id)
    {
        if (is_null($match_id)) {
            throw new \InvalidArgumentException('non-nullable match_id cannot be null');
        }

        if (($match_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_id when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['match_id'] = $match_id;

        return $this;
    }

    /**
     * Gets match_mode
     *
     * @return int
     */
    public function getMatchMode()
    {
        return $this->container['match_mode'];
    }

    /**
     * Sets match_mode
     *
     * @param int $match_mode match_mode
     *
     * @return self
     */
    public function setMatchMode($match_mode)
    {
        if (is_null($match_mode)) {
            throw new \InvalidArgumentException('non-nullable match_mode cannot be null');
        }
        $this->container['match_mode'] = $match_mode;

        return $this;
    }

    /**
     * Gets match_result
     *
     * @return int
     */
    public function getMatchResult()
    {
        return $this->container['match_result'];
    }

    /**
     * Sets match_result
     *
     * @param int $match_result match_result
     *
     * @return self
     */
    public function setMatchResult($match_result)
    {
        if (is_null($match_result)) {
            throw new \InvalidArgumentException('non-nullable match_result cannot be null');
        }

        if (($match_result < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_result when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['match_result'] = $match_result;

        return $this;
    }

    /**
     * Gets net_worth
     *
     * @return int
     */
    public function getNetWorth()
    {
        return $this->container['net_worth'];
    }

    /**
     * Sets net_worth
     *
     * @param int $net_worth net_worth
     *
     * @return self
     */
    public function setNetWorth($net_worth)
    {
        if (is_null($net_worth)) {
            throw new \InvalidArgumentException('non-nullable net_worth cannot be null');
        }

        if (($net_worth < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_worth when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['net_worth'] = $net_worth;

        return $this;
    }

    /**
     * Gets objectives_mask_team0
     *
     * @return int
     */
    public function getObjectivesMaskTeam0()
    {
        return $this->container['objectives_mask_team0'];
    }

    /**
     * Sets objectives_mask_team0
     *
     * @param int $objectives_mask_team0 objectives_mask_team0
     *
     * @return self
     */
    public function setObjectivesMaskTeam0($objectives_mask_team0)
    {
        if (is_null($objectives_mask_team0)) {
            throw new \InvalidArgumentException('non-nullable objectives_mask_team0 cannot be null');
        }

        if (($objectives_mask_team0 < 0)) {
            throw new \InvalidArgumentException('invalid value for $objectives_mask_team0 when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['objectives_mask_team0'] = $objectives_mask_team0;

        return $this;
    }

    /**
     * Gets objectives_mask_team1
     *
     * @return int
     */
    public function getObjectivesMaskTeam1()
    {
        return $this->container['objectives_mask_team1'];
    }

    /**
     * Sets objectives_mask_team1
     *
     * @param int $objectives_mask_team1 objectives_mask_team1
     *
     * @return self
     */
    public function setObjectivesMaskTeam1($objectives_mask_team1)
    {
        if (is_null($objectives_mask_team1)) {
            throw new \InvalidArgumentException('non-nullable objectives_mask_team1 cannot be null');
        }

        if (($objectives_mask_team1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $objectives_mask_team1 when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['objectives_mask_team1'] = $objectives_mask_team1;

        return $this;
    }

    /**
     * Gets player_assists
     *
     * @return int
     */
    public function getPlayerAssists()
    {
        return $this->container['player_assists'];
    }

    /**
     * Sets player_assists
     *
     * @param int $player_assists player_assists
     *
     * @return self
     */
    public function setPlayerAssists($player_assists)
    {
        if (is_null($player_assists)) {
            throw new \InvalidArgumentException('non-nullable player_assists cannot be null');
        }

        if (($player_assists < 0)) {
            throw new \InvalidArgumentException('invalid value for $player_assists when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['player_assists'] = $player_assists;

        return $this;
    }

    /**
     * Gets player_deaths
     *
     * @return int
     */
    public function getPlayerDeaths()
    {
        return $this->container['player_deaths'];
    }

    /**
     * Sets player_deaths
     *
     * @param int $player_deaths player_deaths
     *
     * @return self
     */
    public function setPlayerDeaths($player_deaths)
    {
        if (is_null($player_deaths)) {
            throw new \InvalidArgumentException('non-nullable player_deaths cannot be null');
        }

        if (($player_deaths < 0)) {
            throw new \InvalidArgumentException('invalid value for $player_deaths when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['player_deaths'] = $player_deaths;

        return $this;
    }

    /**
     * Gets player_kills
     *
     * @return int
     */
    public function getPlayerKills()
    {
        return $this->container['player_kills'];
    }

    /**
     * Sets player_kills
     *
     * @param int $player_kills player_kills
     *
     * @return self
     */
    public function setPlayerKills($player_kills)
    {
        if (is_null($player_kills)) {
            throw new \InvalidArgumentException('non-nullable player_kills cannot be null');
        }

        if (($player_kills < 0)) {
            throw new \InvalidArgumentException('invalid value for $player_kills when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['player_kills'] = $player_kills;

        return $this;
    }

    /**
     * Gets player_team
     *
     * @return int
     */
    public function getPlayerTeam()
    {
        return $this->container['player_team'];
    }

    /**
     * Sets player_team
     *
     * @param int $player_team player_team
     *
     * @return self
     */
    public function setPlayerTeam($player_team)
    {
        if (is_null($player_team)) {
            throw new \InvalidArgumentException('non-nullable player_team cannot be null');
        }
        $this->container['player_team'] = $player_team;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }

        if (($start_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $start_time when calling PlayerMatchHistoryEntry., must be bigger than or equal to 0.');
        }

        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets team_abandoned
     *
     * @return bool|null
     */
    public function getTeamAbandoned()
    {
        return $this->container['team_abandoned'];
    }

    /**
     * Sets team_abandoned
     *
     * @param bool|null $team_abandoned team_abandoned
     *
     * @return self
     */
    public function setTeamAbandoned($team_abandoned)
    {
        if (is_null($team_abandoned)) {
            array_push($this->openAPINullablesSetToNull, 'team_abandoned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('team_abandoned', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['team_abandoned'] = $team_abandoned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


