<?php
/**
 * ActiveMatch
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActiveMatch Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActiveMatch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActiveMatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'compat_version' => 'int',
        'duration_s' => 'int',
        'game_mode' => 'int',
        'game_mode_parsed' => '\OpenAPI\Client\Model\ActiveMatchGameMode',
        'game_mode_version' => 'int',
        'lobby_id' => 'int',
        'match_id' => 'int',
        'match_mode' => 'int',
        'match_mode_parsed' => '\OpenAPI\Client\Model\ActiveMatchMode',
        'match_score' => 'int',
        'net_worth_team_0' => 'int',
        'net_worth_team_1' => 'int',
        'objectives_mask_team0' => 'int',
        'objectives_mask_team1' => 'int',
        'open_spectator_slots' => 'int',
        'players' => '\OpenAPI\Client\Model\ActiveMatchPlayer[]',
        'region_mode' => 'int',
        'region_mode_parsed' => '\OpenAPI\Client\Model\ActiveMatchRegionMode',
        'spectators' => 'int',
        'start_time' => 'int',
        'winning_team' => 'int',
        'winning_team_parsed' => '\OpenAPI\Client\Model\ActiveMatchTeam'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'compat_version' => 'int32',
        'duration_s' => 'int32',
        'game_mode' => 'int32',
        'game_mode_parsed' => null,
        'game_mode_version' => 'int32',
        'lobby_id' => 'int64',
        'match_id' => 'int64',
        'match_mode' => 'int32',
        'match_mode_parsed' => null,
        'match_score' => 'int32',
        'net_worth_team_0' => 'int32',
        'net_worth_team_1' => 'int32',
        'objectives_mask_team0' => 'int64',
        'objectives_mask_team1' => 'int64',
        'open_spectator_slots' => 'int32',
        'players' => null,
        'region_mode' => 'int32',
        'region_mode_parsed' => null,
        'spectators' => 'int32',
        'start_time' => 'int32',
        'winning_team' => 'int32',
        'winning_team_parsed' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'compat_version' => true,
        'duration_s' => true,
        'game_mode' => true,
        'game_mode_parsed' => true,
        'game_mode_version' => true,
        'lobby_id' => true,
        'match_id' => true,
        'match_mode' => true,
        'match_mode_parsed' => true,
        'match_score' => true,
        'net_worth_team_0' => true,
        'net_worth_team_1' => true,
        'objectives_mask_team0' => true,
        'objectives_mask_team1' => true,
        'open_spectator_slots' => true,
        'players' => false,
        'region_mode' => true,
        'region_mode_parsed' => true,
        'spectators' => true,
        'start_time' => true,
        'winning_team' => true,
        'winning_team_parsed' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'compat_version' => 'compat_version',
        'duration_s' => 'duration_s',
        'game_mode' => 'game_mode',
        'game_mode_parsed' => 'game_mode_parsed',
        'game_mode_version' => 'game_mode_version',
        'lobby_id' => 'lobby_id',
        'match_id' => 'match_id',
        'match_mode' => 'match_mode',
        'match_mode_parsed' => 'match_mode_parsed',
        'match_score' => 'match_score',
        'net_worth_team_0' => 'net_worth_team_0',
        'net_worth_team_1' => 'net_worth_team_1',
        'objectives_mask_team0' => 'objectives_mask_team0',
        'objectives_mask_team1' => 'objectives_mask_team1',
        'open_spectator_slots' => 'open_spectator_slots',
        'players' => 'players',
        'region_mode' => 'region_mode',
        'region_mode_parsed' => 'region_mode_parsed',
        'spectators' => 'spectators',
        'start_time' => 'start_time',
        'winning_team' => 'winning_team',
        'winning_team_parsed' => 'winning_team_parsed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'compat_version' => 'setCompatVersion',
        'duration_s' => 'setDurationS',
        'game_mode' => 'setGameMode',
        'game_mode_parsed' => 'setGameModeParsed',
        'game_mode_version' => 'setGameModeVersion',
        'lobby_id' => 'setLobbyId',
        'match_id' => 'setMatchId',
        'match_mode' => 'setMatchMode',
        'match_mode_parsed' => 'setMatchModeParsed',
        'match_score' => 'setMatchScore',
        'net_worth_team_0' => 'setNetWorthTeam0',
        'net_worth_team_1' => 'setNetWorthTeam1',
        'objectives_mask_team0' => 'setObjectivesMaskTeam0',
        'objectives_mask_team1' => 'setObjectivesMaskTeam1',
        'open_spectator_slots' => 'setOpenSpectatorSlots',
        'players' => 'setPlayers',
        'region_mode' => 'setRegionMode',
        'region_mode_parsed' => 'setRegionModeParsed',
        'spectators' => 'setSpectators',
        'start_time' => 'setStartTime',
        'winning_team' => 'setWinningTeam',
        'winning_team_parsed' => 'setWinningTeamParsed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'compat_version' => 'getCompatVersion',
        'duration_s' => 'getDurationS',
        'game_mode' => 'getGameMode',
        'game_mode_parsed' => 'getGameModeParsed',
        'game_mode_version' => 'getGameModeVersion',
        'lobby_id' => 'getLobbyId',
        'match_id' => 'getMatchId',
        'match_mode' => 'getMatchMode',
        'match_mode_parsed' => 'getMatchModeParsed',
        'match_score' => 'getMatchScore',
        'net_worth_team_0' => 'getNetWorthTeam0',
        'net_worth_team_1' => 'getNetWorthTeam1',
        'objectives_mask_team0' => 'getObjectivesMaskTeam0',
        'objectives_mask_team1' => 'getObjectivesMaskTeam1',
        'open_spectator_slots' => 'getOpenSpectatorSlots',
        'players' => 'getPlayers',
        'region_mode' => 'getRegionMode',
        'region_mode_parsed' => 'getRegionModeParsed',
        'spectators' => 'getSpectators',
        'start_time' => 'getStartTime',
        'winning_team' => 'getWinningTeam',
        'winning_team_parsed' => 'getWinningTeamParsed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('compat_version', $data ?? [], null);
        $this->setIfExists('duration_s', $data ?? [], null);
        $this->setIfExists('game_mode', $data ?? [], null);
        $this->setIfExists('game_mode_parsed', $data ?? [], null);
        $this->setIfExists('game_mode_version', $data ?? [], null);
        $this->setIfExists('lobby_id', $data ?? [], null);
        $this->setIfExists('match_id', $data ?? [], null);
        $this->setIfExists('match_mode', $data ?? [], null);
        $this->setIfExists('match_mode_parsed', $data ?? [], null);
        $this->setIfExists('match_score', $data ?? [], null);
        $this->setIfExists('net_worth_team_0', $data ?? [], null);
        $this->setIfExists('net_worth_team_1', $data ?? [], null);
        $this->setIfExists('objectives_mask_team0', $data ?? [], null);
        $this->setIfExists('objectives_mask_team1', $data ?? [], null);
        $this->setIfExists('open_spectator_slots', $data ?? [], null);
        $this->setIfExists('players', $data ?? [], null);
        $this->setIfExists('region_mode', $data ?? [], null);
        $this->setIfExists('region_mode_parsed', $data ?? [], null);
        $this->setIfExists('spectators', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('winning_team', $data ?? [], null);
        $this->setIfExists('winning_team_parsed', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['compat_version']) && ($this->container['compat_version'] < 0)) {
            $invalidProperties[] = "invalid value for 'compat_version', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['duration_s']) && ($this->container['duration_s'] < 0)) {
            $invalidProperties[] = "invalid value for 'duration_s', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['game_mode_version']) && ($this->container['game_mode_version'] < 0)) {
            $invalidProperties[] = "invalid value for 'game_mode_version', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lobby_id']) && ($this->container['lobby_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'lobby_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['match_id']) && ($this->container['match_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['match_score']) && ($this->container['match_score'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_score', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['net_worth_team_0']) && ($this->container['net_worth_team_0'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_worth_team_0', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['net_worth_team_1']) && ($this->container['net_worth_team_1'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_worth_team_1', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['objectives_mask_team0']) && ($this->container['objectives_mask_team0'] < 0)) {
            $invalidProperties[] = "invalid value for 'objectives_mask_team0', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['objectives_mask_team1']) && ($this->container['objectives_mask_team1'] < 0)) {
            $invalidProperties[] = "invalid value for 'objectives_mask_team1', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['open_spectator_slots']) && ($this->container['open_spectator_slots'] < 0)) {
            $invalidProperties[] = "invalid value for 'open_spectator_slots', must be bigger than or equal to 0.";
        }

        if ($this->container['players'] === null) {
            $invalidProperties[] = "'players' can't be null";
        }
        if (!is_null($this->container['spectators']) && ($this->container['spectators'] < 0)) {
            $invalidProperties[] = "invalid value for 'spectators', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['start_time']) && ($this->container['start_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'start_time', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets compat_version
     *
     * @return int|null
     */
    public function getCompatVersion()
    {
        return $this->container['compat_version'];
    }

    /**
     * Sets compat_version
     *
     * @param int|null $compat_version compat_version
     *
     * @return self
     */
    public function setCompatVersion($compat_version)
    {
        if (is_null($compat_version)) {
            array_push($this->openAPINullablesSetToNull, 'compat_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compat_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($compat_version) && ($compat_version < 0)) {
            throw new \InvalidArgumentException('invalid value for $compat_version when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['compat_version'] = $compat_version;

        return $this;
    }

    /**
     * Gets duration_s
     *
     * @return int|null
     */
    public function getDurationS()
    {
        return $this->container['duration_s'];
    }

    /**
     * Sets duration_s
     *
     * @param int|null $duration_s duration_s
     *
     * @return self
     */
    public function setDurationS($duration_s)
    {
        if (is_null($duration_s)) {
            array_push($this->openAPINullablesSetToNull, 'duration_s');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration_s', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($duration_s) && ($duration_s < 0)) {
            throw new \InvalidArgumentException('invalid value for $duration_s when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['duration_s'] = $duration_s;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return int|null
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param int|null $game_mode game_mode
     *
     * @return self
     */
    public function setGameMode($game_mode)
    {
        if (is_null($game_mode)) {
            array_push($this->openAPINullablesSetToNull, 'game_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('game_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets game_mode_parsed
     *
     * @return \OpenAPI\Client\Model\ActiveMatchGameMode|null
     */
    public function getGameModeParsed()
    {
        return $this->container['game_mode_parsed'];
    }

    /**
     * Sets game_mode_parsed
     *
     * @param \OpenAPI\Client\Model\ActiveMatchGameMode|null $game_mode_parsed game_mode_parsed
     *
     * @return self
     */
    public function setGameModeParsed($game_mode_parsed)
    {
        if (is_null($game_mode_parsed)) {
            array_push($this->openAPINullablesSetToNull, 'game_mode_parsed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('game_mode_parsed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['game_mode_parsed'] = $game_mode_parsed;

        return $this;
    }

    /**
     * Gets game_mode_version
     *
     * @return int|null
     */
    public function getGameModeVersion()
    {
        return $this->container['game_mode_version'];
    }

    /**
     * Sets game_mode_version
     *
     * @param int|null $game_mode_version game_mode_version
     *
     * @return self
     */
    public function setGameModeVersion($game_mode_version)
    {
        if (is_null($game_mode_version)) {
            array_push($this->openAPINullablesSetToNull, 'game_mode_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('game_mode_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($game_mode_version) && ($game_mode_version < 0)) {
            throw new \InvalidArgumentException('invalid value for $game_mode_version when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['game_mode_version'] = $game_mode_version;

        return $this;
    }

    /**
     * Gets lobby_id
     *
     * @return int|null
     */
    public function getLobbyId()
    {
        return $this->container['lobby_id'];
    }

    /**
     * Sets lobby_id
     *
     * @param int|null $lobby_id lobby_id
     *
     * @return self
     */
    public function setLobbyId($lobby_id)
    {
        if (is_null($lobby_id)) {
            array_push($this->openAPINullablesSetToNull, 'lobby_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lobby_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($lobby_id) && ($lobby_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $lobby_id when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['lobby_id'] = $lobby_id;

        return $this;
    }

    /**
     * Gets match_id
     *
     * @return int|null
     */
    public function getMatchId()
    {
        return $this->container['match_id'];
    }

    /**
     * Sets match_id
     *
     * @param int|null $match_id match_id
     *
     * @return self
     */
    public function setMatchId($match_id)
    {
        if (is_null($match_id)) {
            array_push($this->openAPINullablesSetToNull, 'match_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('match_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($match_id) && ($match_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_id when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['match_id'] = $match_id;

        return $this;
    }

    /**
     * Gets match_mode
     *
     * @return int|null
     */
    public function getMatchMode()
    {
        return $this->container['match_mode'];
    }

    /**
     * Sets match_mode
     *
     * @param int|null $match_mode match_mode
     *
     * @return self
     */
    public function setMatchMode($match_mode)
    {
        if (is_null($match_mode)) {
            array_push($this->openAPINullablesSetToNull, 'match_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('match_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['match_mode'] = $match_mode;

        return $this;
    }

    /**
     * Gets match_mode_parsed
     *
     * @return \OpenAPI\Client\Model\ActiveMatchMode|null
     */
    public function getMatchModeParsed()
    {
        return $this->container['match_mode_parsed'];
    }

    /**
     * Sets match_mode_parsed
     *
     * @param \OpenAPI\Client\Model\ActiveMatchMode|null $match_mode_parsed match_mode_parsed
     *
     * @return self
     */
    public function setMatchModeParsed($match_mode_parsed)
    {
        if (is_null($match_mode_parsed)) {
            array_push($this->openAPINullablesSetToNull, 'match_mode_parsed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('match_mode_parsed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['match_mode_parsed'] = $match_mode_parsed;

        return $this;
    }

    /**
     * Gets match_score
     *
     * @return int|null
     */
    public function getMatchScore()
    {
        return $this->container['match_score'];
    }

    /**
     * Sets match_score
     *
     * @param int|null $match_score match_score
     *
     * @return self
     */
    public function setMatchScore($match_score)
    {
        if (is_null($match_score)) {
            array_push($this->openAPINullablesSetToNull, 'match_score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('match_score', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($match_score) && ($match_score < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_score when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['match_score'] = $match_score;

        return $this;
    }

    /**
     * Gets net_worth_team_0
     *
     * @return int|null
     */
    public function getNetWorthTeam0()
    {
        return $this->container['net_worth_team_0'];
    }

    /**
     * Sets net_worth_team_0
     *
     * @param int|null $net_worth_team_0 net_worth_team_0
     *
     * @return self
     */
    public function setNetWorthTeam0($net_worth_team_0)
    {
        if (is_null($net_worth_team_0)) {
            array_push($this->openAPINullablesSetToNull, 'net_worth_team_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_worth_team_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($net_worth_team_0) && ($net_worth_team_0 < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_worth_team_0 when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['net_worth_team_0'] = $net_worth_team_0;

        return $this;
    }

    /**
     * Gets net_worth_team_1
     *
     * @return int|null
     */
    public function getNetWorthTeam1()
    {
        return $this->container['net_worth_team_1'];
    }

    /**
     * Sets net_worth_team_1
     *
     * @param int|null $net_worth_team_1 net_worth_team_1
     *
     * @return self
     */
    public function setNetWorthTeam1($net_worth_team_1)
    {
        if (is_null($net_worth_team_1)) {
            array_push($this->openAPINullablesSetToNull, 'net_worth_team_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_worth_team_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($net_worth_team_1) && ($net_worth_team_1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_worth_team_1 when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['net_worth_team_1'] = $net_worth_team_1;

        return $this;
    }

    /**
     * Gets objectives_mask_team0
     *
     * @return int|null
     */
    public function getObjectivesMaskTeam0()
    {
        return $this->container['objectives_mask_team0'];
    }

    /**
     * Sets objectives_mask_team0
     *
     * @param int|null $objectives_mask_team0 objectives_mask_team0
     *
     * @return self
     */
    public function setObjectivesMaskTeam0($objectives_mask_team0)
    {
        if (is_null($objectives_mask_team0)) {
            array_push($this->openAPINullablesSetToNull, 'objectives_mask_team0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('objectives_mask_team0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($objectives_mask_team0) && ($objectives_mask_team0 < 0)) {
            throw new \InvalidArgumentException('invalid value for $objectives_mask_team0 when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['objectives_mask_team0'] = $objectives_mask_team0;

        return $this;
    }

    /**
     * Gets objectives_mask_team1
     *
     * @return int|null
     */
    public function getObjectivesMaskTeam1()
    {
        return $this->container['objectives_mask_team1'];
    }

    /**
     * Sets objectives_mask_team1
     *
     * @param int|null $objectives_mask_team1 objectives_mask_team1
     *
     * @return self
     */
    public function setObjectivesMaskTeam1($objectives_mask_team1)
    {
        if (is_null($objectives_mask_team1)) {
            array_push($this->openAPINullablesSetToNull, 'objectives_mask_team1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('objectives_mask_team1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($objectives_mask_team1) && ($objectives_mask_team1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $objectives_mask_team1 when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['objectives_mask_team1'] = $objectives_mask_team1;

        return $this;
    }

    /**
     * Gets open_spectator_slots
     *
     * @return int|null
     */
    public function getOpenSpectatorSlots()
    {
        return $this->container['open_spectator_slots'];
    }

    /**
     * Sets open_spectator_slots
     *
     * @param int|null $open_spectator_slots open_spectator_slots
     *
     * @return self
     */
    public function setOpenSpectatorSlots($open_spectator_slots)
    {
        if (is_null($open_spectator_slots)) {
            array_push($this->openAPINullablesSetToNull, 'open_spectator_slots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_spectator_slots', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($open_spectator_slots) && ($open_spectator_slots < 0)) {
            throw new \InvalidArgumentException('invalid value for $open_spectator_slots when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['open_spectator_slots'] = $open_spectator_slots;

        return $this;
    }

    /**
     * Gets players
     *
     * @return \OpenAPI\Client\Model\ActiveMatchPlayer[]
     */
    public function getPlayers()
    {
        return $this->container['players'];
    }

    /**
     * Sets players
     *
     * @param \OpenAPI\Client\Model\ActiveMatchPlayer[] $players players
     *
     * @return self
     */
    public function setPlayers($players)
    {
        if (is_null($players)) {
            throw new \InvalidArgumentException('non-nullable players cannot be null');
        }
        $this->container['players'] = $players;

        return $this;
    }

    /**
     * Gets region_mode
     *
     * @return int|null
     */
    public function getRegionMode()
    {
        return $this->container['region_mode'];
    }

    /**
     * Sets region_mode
     *
     * @param int|null $region_mode region_mode
     *
     * @return self
     */
    public function setRegionMode($region_mode)
    {
        if (is_null($region_mode)) {
            array_push($this->openAPINullablesSetToNull, 'region_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['region_mode'] = $region_mode;

        return $this;
    }

    /**
     * Gets region_mode_parsed
     *
     * @return \OpenAPI\Client\Model\ActiveMatchRegionMode|null
     */
    public function getRegionModeParsed()
    {
        return $this->container['region_mode_parsed'];
    }

    /**
     * Sets region_mode_parsed
     *
     * @param \OpenAPI\Client\Model\ActiveMatchRegionMode|null $region_mode_parsed region_mode_parsed
     *
     * @return self
     */
    public function setRegionModeParsed($region_mode_parsed)
    {
        if (is_null($region_mode_parsed)) {
            array_push($this->openAPINullablesSetToNull, 'region_mode_parsed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region_mode_parsed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['region_mode_parsed'] = $region_mode_parsed;

        return $this;
    }

    /**
     * Gets spectators
     *
     * @return int|null
     */
    public function getSpectators()
    {
        return $this->container['spectators'];
    }

    /**
     * Sets spectators
     *
     * @param int|null $spectators spectators
     *
     * @return self
     */
    public function setSpectators($spectators)
    {
        if (is_null($spectators)) {
            array_push($this->openAPINullablesSetToNull, 'spectators');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spectators', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($spectators) && ($spectators < 0)) {
            throw new \InvalidArgumentException('invalid value for $spectators when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['spectators'] = $spectators;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int|null $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            array_push($this->openAPINullablesSetToNull, 'start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($start_time) && ($start_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $start_time when calling ActiveMatch., must be bigger than or equal to 0.');
        }

        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets winning_team
     *
     * @return int|null
     */
    public function getWinningTeam()
    {
        return $this->container['winning_team'];
    }

    /**
     * Sets winning_team
     *
     * @param int|null $winning_team winning_team
     *
     * @return self
     */
    public function setWinningTeam($winning_team)
    {
        if (is_null($winning_team)) {
            array_push($this->openAPINullablesSetToNull, 'winning_team');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('winning_team', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['winning_team'] = $winning_team;

        return $this;
    }

    /**
     * Gets winning_team_parsed
     *
     * @return \OpenAPI\Client\Model\ActiveMatchTeam|null
     */
    public function getWinningTeamParsed()
    {
        return $this->container['winning_team_parsed'];
    }

    /**
     * Sets winning_team_parsed
     *
     * @param \OpenAPI\Client\Model\ActiveMatchTeam|null $winning_team_parsed winning_team_parsed
     *
     * @return self
     */
    public function setWinningTeamParsed($winning_team_parsed)
    {
        if (is_null($winning_team_parsed)) {
            array_push($this->openAPINullablesSetToNull, 'winning_team_parsed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('winning_team_parsed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['winning_team_parsed'] = $winning_team_parsed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


