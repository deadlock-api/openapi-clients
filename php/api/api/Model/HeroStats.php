<?php
/**
 * HeroStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeroStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeroStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeroStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'accuracy' => 'float',
        'assists' => 'int',
        'assists_per_min' => 'float',
        'creeps_per_min' => 'float',
        'crit_shot_rate' => 'float',
        'damage_mitigated_per_min' => 'float',
        'damage_per_min' => 'float',
        'damage_per_soul' => 'float',
        'damage_taken_per_min' => 'float',
        'damage_taken_per_soul' => 'float',
        'deaths' => 'int',
        'deaths_per_min' => 'float',
        'denies_per_match' => 'float',
        'denies_per_min' => 'float',
        'ending_level' => 'float',
        'hero_id' => 'int',
        'kills' => 'int',
        'kills_per_min' => 'float',
        'last_hits_per_min' => 'float',
        'last_played' => 'int',
        'matches' => 'int[]',
        'matches_played' => 'int',
        'networth_per_min' => 'float',
        'obj_damage_per_min' => 'float',
        'obj_damage_per_soul' => 'float',
        'time_played' => 'int',
        'wins' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int32',
        'accuracy' => 'double',
        'assists' => 'int64',
        'assists_per_min' => 'double',
        'creeps_per_min' => 'double',
        'crit_shot_rate' => 'double',
        'damage_mitigated_per_min' => 'double',
        'damage_per_min' => 'double',
        'damage_per_soul' => 'double',
        'damage_taken_per_min' => 'double',
        'damage_taken_per_soul' => 'double',
        'deaths' => 'int64',
        'deaths_per_min' => 'double',
        'denies_per_match' => 'double',
        'denies_per_min' => 'double',
        'ending_level' => 'double',
        'hero_id' => 'int32',
        'kills' => 'int64',
        'kills_per_min' => 'double',
        'last_hits_per_min' => 'double',
        'last_played' => 'int32',
        'matches' => 'int64',
        'matches_played' => 'int64',
        'networth_per_min' => 'double',
        'obj_damage_per_min' => 'double',
        'obj_damage_per_soul' => 'double',
        'time_played' => 'int64',
        'wins' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'accuracy' => false,
        'assists' => false,
        'assists_per_min' => false,
        'creeps_per_min' => false,
        'crit_shot_rate' => false,
        'damage_mitigated_per_min' => false,
        'damage_per_min' => false,
        'damage_per_soul' => false,
        'damage_taken_per_min' => false,
        'damage_taken_per_soul' => false,
        'deaths' => false,
        'deaths_per_min' => false,
        'denies_per_match' => false,
        'denies_per_min' => false,
        'ending_level' => false,
        'hero_id' => false,
        'kills' => false,
        'kills_per_min' => false,
        'last_hits_per_min' => false,
        'last_played' => false,
        'matches' => false,
        'matches_played' => false,
        'networth_per_min' => false,
        'obj_damage_per_min' => false,
        'obj_damage_per_soul' => false,
        'time_played' => false,
        'wins' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'accuracy' => 'accuracy',
        'assists' => 'assists',
        'assists_per_min' => 'assists_per_min',
        'creeps_per_min' => 'creeps_per_min',
        'crit_shot_rate' => 'crit_shot_rate',
        'damage_mitigated_per_min' => 'damage_mitigated_per_min',
        'damage_per_min' => 'damage_per_min',
        'damage_per_soul' => 'damage_per_soul',
        'damage_taken_per_min' => 'damage_taken_per_min',
        'damage_taken_per_soul' => 'damage_taken_per_soul',
        'deaths' => 'deaths',
        'deaths_per_min' => 'deaths_per_min',
        'denies_per_match' => 'denies_per_match',
        'denies_per_min' => 'denies_per_min',
        'ending_level' => 'ending_level',
        'hero_id' => 'hero_id',
        'kills' => 'kills',
        'kills_per_min' => 'kills_per_min',
        'last_hits_per_min' => 'last_hits_per_min',
        'last_played' => 'last_played',
        'matches' => 'matches',
        'matches_played' => 'matches_played',
        'networth_per_min' => 'networth_per_min',
        'obj_damage_per_min' => 'obj_damage_per_min',
        'obj_damage_per_soul' => 'obj_damage_per_soul',
        'time_played' => 'time_played',
        'wins' => 'wins'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'accuracy' => 'setAccuracy',
        'assists' => 'setAssists',
        'assists_per_min' => 'setAssistsPerMin',
        'creeps_per_min' => 'setCreepsPerMin',
        'crit_shot_rate' => 'setCritShotRate',
        'damage_mitigated_per_min' => 'setDamageMitigatedPerMin',
        'damage_per_min' => 'setDamagePerMin',
        'damage_per_soul' => 'setDamagePerSoul',
        'damage_taken_per_min' => 'setDamageTakenPerMin',
        'damage_taken_per_soul' => 'setDamageTakenPerSoul',
        'deaths' => 'setDeaths',
        'deaths_per_min' => 'setDeathsPerMin',
        'denies_per_match' => 'setDeniesPerMatch',
        'denies_per_min' => 'setDeniesPerMin',
        'ending_level' => 'setEndingLevel',
        'hero_id' => 'setHeroId',
        'kills' => 'setKills',
        'kills_per_min' => 'setKillsPerMin',
        'last_hits_per_min' => 'setLastHitsPerMin',
        'last_played' => 'setLastPlayed',
        'matches' => 'setMatches',
        'matches_played' => 'setMatchesPlayed',
        'networth_per_min' => 'setNetworthPerMin',
        'obj_damage_per_min' => 'setObjDamagePerMin',
        'obj_damage_per_soul' => 'setObjDamagePerSoul',
        'time_played' => 'setTimePlayed',
        'wins' => 'setWins'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'accuracy' => 'getAccuracy',
        'assists' => 'getAssists',
        'assists_per_min' => 'getAssistsPerMin',
        'creeps_per_min' => 'getCreepsPerMin',
        'crit_shot_rate' => 'getCritShotRate',
        'damage_mitigated_per_min' => 'getDamageMitigatedPerMin',
        'damage_per_min' => 'getDamagePerMin',
        'damage_per_soul' => 'getDamagePerSoul',
        'damage_taken_per_min' => 'getDamageTakenPerMin',
        'damage_taken_per_soul' => 'getDamageTakenPerSoul',
        'deaths' => 'getDeaths',
        'deaths_per_min' => 'getDeathsPerMin',
        'denies_per_match' => 'getDeniesPerMatch',
        'denies_per_min' => 'getDeniesPerMin',
        'ending_level' => 'getEndingLevel',
        'hero_id' => 'getHeroId',
        'kills' => 'getKills',
        'kills_per_min' => 'getKillsPerMin',
        'last_hits_per_min' => 'getLastHitsPerMin',
        'last_played' => 'getLastPlayed',
        'matches' => 'getMatches',
        'matches_played' => 'getMatchesPlayed',
        'networth_per_min' => 'getNetworthPerMin',
        'obj_damage_per_min' => 'getObjDamagePerMin',
        'obj_damage_per_soul' => 'getObjDamagePerSoul',
        'time_played' => 'getTimePlayed',
        'wins' => 'getWins'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('accuracy', $data ?? [], null);
        $this->setIfExists('assists', $data ?? [], null);
        $this->setIfExists('assists_per_min', $data ?? [], null);
        $this->setIfExists('creeps_per_min', $data ?? [], null);
        $this->setIfExists('crit_shot_rate', $data ?? [], null);
        $this->setIfExists('damage_mitigated_per_min', $data ?? [], null);
        $this->setIfExists('damage_per_min', $data ?? [], null);
        $this->setIfExists('damage_per_soul', $data ?? [], null);
        $this->setIfExists('damage_taken_per_min', $data ?? [], null);
        $this->setIfExists('damage_taken_per_soul', $data ?? [], null);
        $this->setIfExists('deaths', $data ?? [], null);
        $this->setIfExists('deaths_per_min', $data ?? [], null);
        $this->setIfExists('denies_per_match', $data ?? [], null);
        $this->setIfExists('denies_per_min', $data ?? [], null);
        $this->setIfExists('ending_level', $data ?? [], null);
        $this->setIfExists('hero_id', $data ?? [], null);
        $this->setIfExists('kills', $data ?? [], null);
        $this->setIfExists('kills_per_min', $data ?? [], null);
        $this->setIfExists('last_hits_per_min', $data ?? [], null);
        $this->setIfExists('last_played', $data ?? [], null);
        $this->setIfExists('matches', $data ?? [], null);
        $this->setIfExists('matches_played', $data ?? [], null);
        $this->setIfExists('networth_per_min', $data ?? [], null);
        $this->setIfExists('obj_damage_per_min', $data ?? [], null);
        $this->setIfExists('obj_damage_per_soul', $data ?? [], null);
        $this->setIfExists('time_played', $data ?? [], null);
        $this->setIfExists('wins', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if (($this->container['account_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'account_id', must be bigger than or equal to 0.";
        }

        if ($this->container['accuracy'] === null) {
            $invalidProperties[] = "'accuracy' can't be null";
        }
        if ($this->container['assists'] === null) {
            $invalidProperties[] = "'assists' can't be null";
        }
        if (($this->container['assists'] < 0)) {
            $invalidProperties[] = "invalid value for 'assists', must be bigger than or equal to 0.";
        }

        if ($this->container['assists_per_min'] === null) {
            $invalidProperties[] = "'assists_per_min' can't be null";
        }
        if ($this->container['creeps_per_min'] === null) {
            $invalidProperties[] = "'creeps_per_min' can't be null";
        }
        if ($this->container['crit_shot_rate'] === null) {
            $invalidProperties[] = "'crit_shot_rate' can't be null";
        }
        if ($this->container['damage_mitigated_per_min'] === null) {
            $invalidProperties[] = "'damage_mitigated_per_min' can't be null";
        }
        if ($this->container['damage_per_min'] === null) {
            $invalidProperties[] = "'damage_per_min' can't be null";
        }
        if ($this->container['damage_per_soul'] === null) {
            $invalidProperties[] = "'damage_per_soul' can't be null";
        }
        if ($this->container['damage_taken_per_min'] === null) {
            $invalidProperties[] = "'damage_taken_per_min' can't be null";
        }
        if ($this->container['damage_taken_per_soul'] === null) {
            $invalidProperties[] = "'damage_taken_per_soul' can't be null";
        }
        if ($this->container['deaths'] === null) {
            $invalidProperties[] = "'deaths' can't be null";
        }
        if (($this->container['deaths'] < 0)) {
            $invalidProperties[] = "invalid value for 'deaths', must be bigger than or equal to 0.";
        }

        if ($this->container['deaths_per_min'] === null) {
            $invalidProperties[] = "'deaths_per_min' can't be null";
        }
        if ($this->container['denies_per_match'] === null) {
            $invalidProperties[] = "'denies_per_match' can't be null";
        }
        if ($this->container['denies_per_min'] === null) {
            $invalidProperties[] = "'denies_per_min' can't be null";
        }
        if ($this->container['ending_level'] === null) {
            $invalidProperties[] = "'ending_level' can't be null";
        }
        if ($this->container['hero_id'] === null) {
            $invalidProperties[] = "'hero_id' can't be null";
        }
        if (($this->container['hero_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_id', must be bigger than or equal to 0.";
        }

        if ($this->container['kills'] === null) {
            $invalidProperties[] = "'kills' can't be null";
        }
        if (($this->container['kills'] < 0)) {
            $invalidProperties[] = "invalid value for 'kills', must be bigger than or equal to 0.";
        }

        if ($this->container['kills_per_min'] === null) {
            $invalidProperties[] = "'kills_per_min' can't be null";
        }
        if ($this->container['last_hits_per_min'] === null) {
            $invalidProperties[] = "'last_hits_per_min' can't be null";
        }
        if ($this->container['last_played'] === null) {
            $invalidProperties[] = "'last_played' can't be null";
        }
        if (($this->container['last_played'] < 0)) {
            $invalidProperties[] = "invalid value for 'last_played', must be bigger than or equal to 0.";
        }

        if ($this->container['matches'] === null) {
            $invalidProperties[] = "'matches' can't be null";
        }
        if ($this->container['matches_played'] === null) {
            $invalidProperties[] = "'matches_played' can't be null";
        }
        if (($this->container['matches_played'] < 0)) {
            $invalidProperties[] = "invalid value for 'matches_played', must be bigger than or equal to 0.";
        }

        if ($this->container['networth_per_min'] === null) {
            $invalidProperties[] = "'networth_per_min' can't be null";
        }
        if ($this->container['obj_damage_per_min'] === null) {
            $invalidProperties[] = "'obj_damage_per_min' can't be null";
        }
        if ($this->container['obj_damage_per_soul'] === null) {
            $invalidProperties[] = "'obj_damage_per_soul' can't be null";
        }
        if ($this->container['time_played'] === null) {
            $invalidProperties[] = "'time_played' can't be null";
        }
        if (($this->container['time_played'] < 0)) {
            $invalidProperties[] = "invalid value for 'time_played', must be bigger than or equal to 0.";
        }

        if ($this->container['wins'] === null) {
            $invalidProperties[] = "'wins' can't be null";
        }
        if (($this->container['wins'] < 0)) {
            $invalidProperties[] = "invalid value for 'wins', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }

        if (($account_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $account_id when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return float
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param float $accuracy accuracy
     *
     * @return self
     */
    public function setAccuracy($accuracy)
    {
        if (is_null($accuracy)) {
            throw new \InvalidArgumentException('non-nullable accuracy cannot be null');
        }
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets assists
     *
     * @return int
     */
    public function getAssists()
    {
        return $this->container['assists'];
    }

    /**
     * Sets assists
     *
     * @param int $assists assists
     *
     * @return self
     */
    public function setAssists($assists)
    {
        if (is_null($assists)) {
            throw new \InvalidArgumentException('non-nullable assists cannot be null');
        }

        if (($assists < 0)) {
            throw new \InvalidArgumentException('invalid value for $assists when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['assists'] = $assists;

        return $this;
    }

    /**
     * Gets assists_per_min
     *
     * @return float
     */
    public function getAssistsPerMin()
    {
        return $this->container['assists_per_min'];
    }

    /**
     * Sets assists_per_min
     *
     * @param float $assists_per_min assists_per_min
     *
     * @return self
     */
    public function setAssistsPerMin($assists_per_min)
    {
        if (is_null($assists_per_min)) {
            throw new \InvalidArgumentException('non-nullable assists_per_min cannot be null');
        }
        $this->container['assists_per_min'] = $assists_per_min;

        return $this;
    }

    /**
     * Gets creeps_per_min
     *
     * @return float
     */
    public function getCreepsPerMin()
    {
        return $this->container['creeps_per_min'];
    }

    /**
     * Sets creeps_per_min
     *
     * @param float $creeps_per_min creeps_per_min
     *
     * @return self
     */
    public function setCreepsPerMin($creeps_per_min)
    {
        if (is_null($creeps_per_min)) {
            throw new \InvalidArgumentException('non-nullable creeps_per_min cannot be null');
        }
        $this->container['creeps_per_min'] = $creeps_per_min;

        return $this;
    }

    /**
     * Gets crit_shot_rate
     *
     * @return float
     */
    public function getCritShotRate()
    {
        return $this->container['crit_shot_rate'];
    }

    /**
     * Sets crit_shot_rate
     *
     * @param float $crit_shot_rate crit_shot_rate
     *
     * @return self
     */
    public function setCritShotRate($crit_shot_rate)
    {
        if (is_null($crit_shot_rate)) {
            throw new \InvalidArgumentException('non-nullable crit_shot_rate cannot be null');
        }
        $this->container['crit_shot_rate'] = $crit_shot_rate;

        return $this;
    }

    /**
     * Gets damage_mitigated_per_min
     *
     * @return float
     * @deprecated
     */
    public function getDamageMitigatedPerMin()
    {
        return $this->container['damage_mitigated_per_min'];
    }

    /**
     * Sets damage_mitigated_per_min
     *
     * @param float $damage_mitigated_per_min damage_mitigated_per_min
     *
     * @return self
     * @deprecated
     */
    public function setDamageMitigatedPerMin($damage_mitigated_per_min)
    {
        if (is_null($damage_mitigated_per_min)) {
            throw new \InvalidArgumentException('non-nullable damage_mitigated_per_min cannot be null');
        }
        $this->container['damage_mitigated_per_min'] = $damage_mitigated_per_min;

        return $this;
    }

    /**
     * Gets damage_per_min
     *
     * @return float
     */
    public function getDamagePerMin()
    {
        return $this->container['damage_per_min'];
    }

    /**
     * Sets damage_per_min
     *
     * @param float $damage_per_min damage_per_min
     *
     * @return self
     */
    public function setDamagePerMin($damage_per_min)
    {
        if (is_null($damage_per_min)) {
            throw new \InvalidArgumentException('non-nullable damage_per_min cannot be null');
        }
        $this->container['damage_per_min'] = $damage_per_min;

        return $this;
    }

    /**
     * Gets damage_per_soul
     *
     * @return float
     */
    public function getDamagePerSoul()
    {
        return $this->container['damage_per_soul'];
    }

    /**
     * Sets damage_per_soul
     *
     * @param float $damage_per_soul damage_per_soul
     *
     * @return self
     */
    public function setDamagePerSoul($damage_per_soul)
    {
        if (is_null($damage_per_soul)) {
            throw new \InvalidArgumentException('non-nullable damage_per_soul cannot be null');
        }
        $this->container['damage_per_soul'] = $damage_per_soul;

        return $this;
    }

    /**
     * Gets damage_taken_per_min
     *
     * @return float
     */
    public function getDamageTakenPerMin()
    {
        return $this->container['damage_taken_per_min'];
    }

    /**
     * Sets damage_taken_per_min
     *
     * @param float $damage_taken_per_min damage_taken_per_min
     *
     * @return self
     */
    public function setDamageTakenPerMin($damage_taken_per_min)
    {
        if (is_null($damage_taken_per_min)) {
            throw new \InvalidArgumentException('non-nullable damage_taken_per_min cannot be null');
        }
        $this->container['damage_taken_per_min'] = $damage_taken_per_min;

        return $this;
    }

    /**
     * Gets damage_taken_per_soul
     *
     * @return float
     */
    public function getDamageTakenPerSoul()
    {
        return $this->container['damage_taken_per_soul'];
    }

    /**
     * Sets damage_taken_per_soul
     *
     * @param float $damage_taken_per_soul damage_taken_per_soul
     *
     * @return self
     */
    public function setDamageTakenPerSoul($damage_taken_per_soul)
    {
        if (is_null($damage_taken_per_soul)) {
            throw new \InvalidArgumentException('non-nullable damage_taken_per_soul cannot be null');
        }
        $this->container['damage_taken_per_soul'] = $damage_taken_per_soul;

        return $this;
    }

    /**
     * Gets deaths
     *
     * @return int
     */
    public function getDeaths()
    {
        return $this->container['deaths'];
    }

    /**
     * Sets deaths
     *
     * @param int $deaths deaths
     *
     * @return self
     */
    public function setDeaths($deaths)
    {
        if (is_null($deaths)) {
            throw new \InvalidArgumentException('non-nullable deaths cannot be null');
        }

        if (($deaths < 0)) {
            throw new \InvalidArgumentException('invalid value for $deaths when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['deaths'] = $deaths;

        return $this;
    }

    /**
     * Gets deaths_per_min
     *
     * @return float
     */
    public function getDeathsPerMin()
    {
        return $this->container['deaths_per_min'];
    }

    /**
     * Sets deaths_per_min
     *
     * @param float $deaths_per_min deaths_per_min
     *
     * @return self
     */
    public function setDeathsPerMin($deaths_per_min)
    {
        if (is_null($deaths_per_min)) {
            throw new \InvalidArgumentException('non-nullable deaths_per_min cannot be null');
        }
        $this->container['deaths_per_min'] = $deaths_per_min;

        return $this;
    }

    /**
     * Gets denies_per_match
     *
     * @return float
     */
    public function getDeniesPerMatch()
    {
        return $this->container['denies_per_match'];
    }

    /**
     * Sets denies_per_match
     *
     * @param float $denies_per_match denies_per_match
     *
     * @return self
     */
    public function setDeniesPerMatch($denies_per_match)
    {
        if (is_null($denies_per_match)) {
            throw new \InvalidArgumentException('non-nullable denies_per_match cannot be null');
        }
        $this->container['denies_per_match'] = $denies_per_match;

        return $this;
    }

    /**
     * Gets denies_per_min
     *
     * @return float
     */
    public function getDeniesPerMin()
    {
        return $this->container['denies_per_min'];
    }

    /**
     * Sets denies_per_min
     *
     * @param float $denies_per_min denies_per_min
     *
     * @return self
     */
    public function setDeniesPerMin($denies_per_min)
    {
        if (is_null($denies_per_min)) {
            throw new \InvalidArgumentException('non-nullable denies_per_min cannot be null');
        }
        $this->container['denies_per_min'] = $denies_per_min;

        return $this;
    }

    /**
     * Gets ending_level
     *
     * @return float
     */
    public function getEndingLevel()
    {
        return $this->container['ending_level'];
    }

    /**
     * Sets ending_level
     *
     * @param float $ending_level ending_level
     *
     * @return self
     */
    public function setEndingLevel($ending_level)
    {
        if (is_null($ending_level)) {
            throw new \InvalidArgumentException('non-nullable ending_level cannot be null');
        }
        $this->container['ending_level'] = $ending_level;

        return $this;
    }

    /**
     * Gets hero_id
     *
     * @return int
     */
    public function getHeroId()
    {
        return $this->container['hero_id'];
    }

    /**
     * Sets hero_id
     *
     * @param int $hero_id See more: <https://assets.deadlock-api.com/v2/heroes>
     *
     * @return self
     */
    public function setHeroId($hero_id)
    {
        if (is_null($hero_id)) {
            throw new \InvalidArgumentException('non-nullable hero_id cannot be null');
        }

        if (($hero_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_id when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['hero_id'] = $hero_id;

        return $this;
    }

    /**
     * Gets kills
     *
     * @return int
     */
    public function getKills()
    {
        return $this->container['kills'];
    }

    /**
     * Sets kills
     *
     * @param int $kills kills
     *
     * @return self
     */
    public function setKills($kills)
    {
        if (is_null($kills)) {
            throw new \InvalidArgumentException('non-nullable kills cannot be null');
        }

        if (($kills < 0)) {
            throw new \InvalidArgumentException('invalid value for $kills when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['kills'] = $kills;

        return $this;
    }

    /**
     * Gets kills_per_min
     *
     * @return float
     */
    public function getKillsPerMin()
    {
        return $this->container['kills_per_min'];
    }

    /**
     * Sets kills_per_min
     *
     * @param float $kills_per_min kills_per_min
     *
     * @return self
     */
    public function setKillsPerMin($kills_per_min)
    {
        if (is_null($kills_per_min)) {
            throw new \InvalidArgumentException('non-nullable kills_per_min cannot be null');
        }
        $this->container['kills_per_min'] = $kills_per_min;

        return $this;
    }

    /**
     * Gets last_hits_per_min
     *
     * @return float
     */
    public function getLastHitsPerMin()
    {
        return $this->container['last_hits_per_min'];
    }

    /**
     * Sets last_hits_per_min
     *
     * @param float $last_hits_per_min last_hits_per_min
     *
     * @return self
     */
    public function setLastHitsPerMin($last_hits_per_min)
    {
        if (is_null($last_hits_per_min)) {
            throw new \InvalidArgumentException('non-nullable last_hits_per_min cannot be null');
        }
        $this->container['last_hits_per_min'] = $last_hits_per_min;

        return $this;
    }

    /**
     * Gets last_played
     *
     * @return int
     */
    public function getLastPlayed()
    {
        return $this->container['last_played'];
    }

    /**
     * Sets last_played
     *
     * @param int $last_played last_played
     *
     * @return self
     */
    public function setLastPlayed($last_played)
    {
        if (is_null($last_played)) {
            throw new \InvalidArgumentException('non-nullable last_played cannot be null');
        }

        if (($last_played < 0)) {
            throw new \InvalidArgumentException('invalid value for $last_played when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['last_played'] = $last_played;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return int[]
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param int[] $matches matches
     *
     * @return self
     */
    public function setMatches($matches)
    {
        if (is_null($matches)) {
            throw new \InvalidArgumentException('non-nullable matches cannot be null');
        }
        $this->container['matches'] = $matches;

        return $this;
    }

    /**
     * Gets matches_played
     *
     * @return int
     */
    public function getMatchesPlayed()
    {
        return $this->container['matches_played'];
    }

    /**
     * Sets matches_played
     *
     * @param int $matches_played matches_played
     *
     * @return self
     */
    public function setMatchesPlayed($matches_played)
    {
        if (is_null($matches_played)) {
            throw new \InvalidArgumentException('non-nullable matches_played cannot be null');
        }

        if (($matches_played < 0)) {
            throw new \InvalidArgumentException('invalid value for $matches_played when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['matches_played'] = $matches_played;

        return $this;
    }

    /**
     * Gets networth_per_min
     *
     * @return float
     */
    public function getNetworthPerMin()
    {
        return $this->container['networth_per_min'];
    }

    /**
     * Sets networth_per_min
     *
     * @param float $networth_per_min networth_per_min
     *
     * @return self
     */
    public function setNetworthPerMin($networth_per_min)
    {
        if (is_null($networth_per_min)) {
            throw new \InvalidArgumentException('non-nullable networth_per_min cannot be null');
        }
        $this->container['networth_per_min'] = $networth_per_min;

        return $this;
    }

    /**
     * Gets obj_damage_per_min
     *
     * @return float
     */
    public function getObjDamagePerMin()
    {
        return $this->container['obj_damage_per_min'];
    }

    /**
     * Sets obj_damage_per_min
     *
     * @param float $obj_damage_per_min obj_damage_per_min
     *
     * @return self
     */
    public function setObjDamagePerMin($obj_damage_per_min)
    {
        if (is_null($obj_damage_per_min)) {
            throw new \InvalidArgumentException('non-nullable obj_damage_per_min cannot be null');
        }
        $this->container['obj_damage_per_min'] = $obj_damage_per_min;

        return $this;
    }

    /**
     * Gets obj_damage_per_soul
     *
     * @return float
     */
    public function getObjDamagePerSoul()
    {
        return $this->container['obj_damage_per_soul'];
    }

    /**
     * Sets obj_damage_per_soul
     *
     * @param float $obj_damage_per_soul obj_damage_per_soul
     *
     * @return self
     */
    public function setObjDamagePerSoul($obj_damage_per_soul)
    {
        if (is_null($obj_damage_per_soul)) {
            throw new \InvalidArgumentException('non-nullable obj_damage_per_soul cannot be null');
        }
        $this->container['obj_damage_per_soul'] = $obj_damage_per_soul;

        return $this;
    }

    /**
     * Gets time_played
     *
     * @return int
     */
    public function getTimePlayed()
    {
        return $this->container['time_played'];
    }

    /**
     * Sets time_played
     *
     * @param int $time_played time_played
     *
     * @return self
     */
    public function setTimePlayed($time_played)
    {
        if (is_null($time_played)) {
            throw new \InvalidArgumentException('non-nullable time_played cannot be null');
        }

        if (($time_played < 0)) {
            throw new \InvalidArgumentException('invalid value for $time_played when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['time_played'] = $time_played;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins wins
     *
     * @return self
     */
    public function setWins($wins)
    {
        if (is_null($wins)) {
            throw new \InvalidArgumentException('non-nullable wins cannot be null');
        }

        if (($wins < 0)) {
            throw new \InvalidArgumentException('invalid value for $wins when calling HeroStats., must be bigger than or equal to 0.');
        }

        $this->container['wins'] = $wins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


