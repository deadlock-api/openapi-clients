<?php
/**
 * HeroCounterStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeroCounterStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeroCounterStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeroCounterStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assists' => 'int',
        'creeps' => 'int',
        'deaths' => 'int',
        'denies' => 'int',
        'enemy_assists' => 'int',
        'enemy_creeps' => 'int',
        'enemy_deaths' => 'int',
        'enemy_denies' => 'int',
        'enemy_hero_id' => 'int',
        'enemy_kills' => 'int',
        'enemy_last_hits' => 'int',
        'enemy_networth' => 'int',
        'enemy_obj_damage' => 'int',
        'hero_id' => 'int',
        'kills' => 'int',
        'last_hits' => 'int',
        'matches_played' => 'int',
        'networth' => 'int',
        'obj_damage' => 'int',
        'wins' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assists' => 'int64',
        'creeps' => 'int64',
        'deaths' => 'int64',
        'denies' => 'int64',
        'enemy_assists' => 'int64',
        'enemy_creeps' => 'int64',
        'enemy_deaths' => 'int64',
        'enemy_denies' => 'int64',
        'enemy_hero_id' => 'int32',
        'enemy_kills' => 'int64',
        'enemy_last_hits' => 'int64',
        'enemy_networth' => 'int64',
        'enemy_obj_damage' => 'int64',
        'hero_id' => 'int32',
        'kills' => 'int64',
        'last_hits' => 'int64',
        'matches_played' => 'int64',
        'networth' => 'int64',
        'obj_damage' => 'int64',
        'wins' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assists' => false,
        'creeps' => false,
        'deaths' => false,
        'denies' => false,
        'enemy_assists' => false,
        'enemy_creeps' => false,
        'enemy_deaths' => false,
        'enemy_denies' => false,
        'enemy_hero_id' => false,
        'enemy_kills' => false,
        'enemy_last_hits' => false,
        'enemy_networth' => false,
        'enemy_obj_damage' => false,
        'hero_id' => false,
        'kills' => false,
        'last_hits' => false,
        'matches_played' => false,
        'networth' => false,
        'obj_damage' => false,
        'wins' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assists' => 'assists',
        'creeps' => 'creeps',
        'deaths' => 'deaths',
        'denies' => 'denies',
        'enemy_assists' => 'enemy_assists',
        'enemy_creeps' => 'enemy_creeps',
        'enemy_deaths' => 'enemy_deaths',
        'enemy_denies' => 'enemy_denies',
        'enemy_hero_id' => 'enemy_hero_id',
        'enemy_kills' => 'enemy_kills',
        'enemy_last_hits' => 'enemy_last_hits',
        'enemy_networth' => 'enemy_networth',
        'enemy_obj_damage' => 'enemy_obj_damage',
        'hero_id' => 'hero_id',
        'kills' => 'kills',
        'last_hits' => 'last_hits',
        'matches_played' => 'matches_played',
        'networth' => 'networth',
        'obj_damage' => 'obj_damage',
        'wins' => 'wins'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assists' => 'setAssists',
        'creeps' => 'setCreeps',
        'deaths' => 'setDeaths',
        'denies' => 'setDenies',
        'enemy_assists' => 'setEnemyAssists',
        'enemy_creeps' => 'setEnemyCreeps',
        'enemy_deaths' => 'setEnemyDeaths',
        'enemy_denies' => 'setEnemyDenies',
        'enemy_hero_id' => 'setEnemyHeroId',
        'enemy_kills' => 'setEnemyKills',
        'enemy_last_hits' => 'setEnemyLastHits',
        'enemy_networth' => 'setEnemyNetworth',
        'enemy_obj_damage' => 'setEnemyObjDamage',
        'hero_id' => 'setHeroId',
        'kills' => 'setKills',
        'last_hits' => 'setLastHits',
        'matches_played' => 'setMatchesPlayed',
        'networth' => 'setNetworth',
        'obj_damage' => 'setObjDamage',
        'wins' => 'setWins'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assists' => 'getAssists',
        'creeps' => 'getCreeps',
        'deaths' => 'getDeaths',
        'denies' => 'getDenies',
        'enemy_assists' => 'getEnemyAssists',
        'enemy_creeps' => 'getEnemyCreeps',
        'enemy_deaths' => 'getEnemyDeaths',
        'enemy_denies' => 'getEnemyDenies',
        'enemy_hero_id' => 'getEnemyHeroId',
        'enemy_kills' => 'getEnemyKills',
        'enemy_last_hits' => 'getEnemyLastHits',
        'enemy_networth' => 'getEnemyNetworth',
        'enemy_obj_damage' => 'getEnemyObjDamage',
        'hero_id' => 'getHeroId',
        'kills' => 'getKills',
        'last_hits' => 'getLastHits',
        'matches_played' => 'getMatchesPlayed',
        'networth' => 'getNetworth',
        'obj_damage' => 'getObjDamage',
        'wins' => 'getWins'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('assists', $data ?? [], null);
        $this->setIfExists('creeps', $data ?? [], null);
        $this->setIfExists('deaths', $data ?? [], null);
        $this->setIfExists('denies', $data ?? [], null);
        $this->setIfExists('enemy_assists', $data ?? [], null);
        $this->setIfExists('enemy_creeps', $data ?? [], null);
        $this->setIfExists('enemy_deaths', $data ?? [], null);
        $this->setIfExists('enemy_denies', $data ?? [], null);
        $this->setIfExists('enemy_hero_id', $data ?? [], null);
        $this->setIfExists('enemy_kills', $data ?? [], null);
        $this->setIfExists('enemy_last_hits', $data ?? [], null);
        $this->setIfExists('enemy_networth', $data ?? [], null);
        $this->setIfExists('enemy_obj_damage', $data ?? [], null);
        $this->setIfExists('hero_id', $data ?? [], null);
        $this->setIfExists('kills', $data ?? [], null);
        $this->setIfExists('last_hits', $data ?? [], null);
        $this->setIfExists('matches_played', $data ?? [], null);
        $this->setIfExists('networth', $data ?? [], null);
        $this->setIfExists('obj_damage', $data ?? [], null);
        $this->setIfExists('wins', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['assists'] === null) {
            $invalidProperties[] = "'assists' can't be null";
        }
        if (($this->container['assists'] < 0)) {
            $invalidProperties[] = "invalid value for 'assists', must be bigger than or equal to 0.";
        }

        if ($this->container['creeps'] === null) {
            $invalidProperties[] = "'creeps' can't be null";
        }
        if (($this->container['creeps'] < 0)) {
            $invalidProperties[] = "invalid value for 'creeps', must be bigger than or equal to 0.";
        }

        if ($this->container['deaths'] === null) {
            $invalidProperties[] = "'deaths' can't be null";
        }
        if (($this->container['deaths'] < 0)) {
            $invalidProperties[] = "invalid value for 'deaths', must be bigger than or equal to 0.";
        }

        if ($this->container['denies'] === null) {
            $invalidProperties[] = "'denies' can't be null";
        }
        if (($this->container['denies'] < 0)) {
            $invalidProperties[] = "invalid value for 'denies', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_assists'] === null) {
            $invalidProperties[] = "'enemy_assists' can't be null";
        }
        if (($this->container['enemy_assists'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_assists', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_creeps'] === null) {
            $invalidProperties[] = "'enemy_creeps' can't be null";
        }
        if (($this->container['enemy_creeps'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_creeps', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_deaths'] === null) {
            $invalidProperties[] = "'enemy_deaths' can't be null";
        }
        if (($this->container['enemy_deaths'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_deaths', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_denies'] === null) {
            $invalidProperties[] = "'enemy_denies' can't be null";
        }
        if (($this->container['enemy_denies'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_denies', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_hero_id'] === null) {
            $invalidProperties[] = "'enemy_hero_id' can't be null";
        }
        if (($this->container['enemy_hero_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_hero_id', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_kills'] === null) {
            $invalidProperties[] = "'enemy_kills' can't be null";
        }
        if (($this->container['enemy_kills'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_kills', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_last_hits'] === null) {
            $invalidProperties[] = "'enemy_last_hits' can't be null";
        }
        if (($this->container['enemy_last_hits'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_last_hits', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_networth'] === null) {
            $invalidProperties[] = "'enemy_networth' can't be null";
        }
        if (($this->container['enemy_networth'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_networth', must be bigger than or equal to 0.";
        }

        if ($this->container['enemy_obj_damage'] === null) {
            $invalidProperties[] = "'enemy_obj_damage' can't be null";
        }
        if (($this->container['enemy_obj_damage'] < 0)) {
            $invalidProperties[] = "invalid value for 'enemy_obj_damage', must be bigger than or equal to 0.";
        }

        if ($this->container['hero_id'] === null) {
            $invalidProperties[] = "'hero_id' can't be null";
        }
        if (($this->container['hero_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_id', must be bigger than or equal to 0.";
        }

        if ($this->container['kills'] === null) {
            $invalidProperties[] = "'kills' can't be null";
        }
        if (($this->container['kills'] < 0)) {
            $invalidProperties[] = "invalid value for 'kills', must be bigger than or equal to 0.";
        }

        if ($this->container['last_hits'] === null) {
            $invalidProperties[] = "'last_hits' can't be null";
        }
        if (($this->container['last_hits'] < 0)) {
            $invalidProperties[] = "invalid value for 'last_hits', must be bigger than or equal to 0.";
        }

        if ($this->container['matches_played'] === null) {
            $invalidProperties[] = "'matches_played' can't be null";
        }
        if (($this->container['matches_played'] < 0)) {
            $invalidProperties[] = "invalid value for 'matches_played', must be bigger than or equal to 0.";
        }

        if ($this->container['networth'] === null) {
            $invalidProperties[] = "'networth' can't be null";
        }
        if (($this->container['networth'] < 0)) {
            $invalidProperties[] = "invalid value for 'networth', must be bigger than or equal to 0.";
        }

        if ($this->container['obj_damage'] === null) {
            $invalidProperties[] = "'obj_damage' can't be null";
        }
        if (($this->container['obj_damage'] < 0)) {
            $invalidProperties[] = "invalid value for 'obj_damage', must be bigger than or equal to 0.";
        }

        if ($this->container['wins'] === null) {
            $invalidProperties[] = "'wins' can't be null";
        }
        if (($this->container['wins'] < 0)) {
            $invalidProperties[] = "invalid value for 'wins', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assists
     *
     * @return int
     */
    public function getAssists()
    {
        return $this->container['assists'];
    }

    /**
     * Sets assists
     *
     * @param int $assists The number of assists by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setAssists($assists)
    {
        if (is_null($assists)) {
            throw new \InvalidArgumentException('non-nullable assists cannot be null');
        }

        if (($assists < 0)) {
            throw new \InvalidArgumentException('invalid value for $assists when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['assists'] = $assists;

        return $this;
    }

    /**
     * Gets creeps
     *
     * @return int
     */
    public function getCreeps()
    {
        return $this->container['creeps'];
    }

    /**
     * Sets creeps
     *
     * @param int $creeps The number of creeps killed by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setCreeps($creeps)
    {
        if (is_null($creeps)) {
            throw new \InvalidArgumentException('non-nullable creeps cannot be null');
        }

        if (($creeps < 0)) {
            throw new \InvalidArgumentException('invalid value for $creeps when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['creeps'] = $creeps;

        return $this;
    }

    /**
     * Gets deaths
     *
     * @return int
     */
    public function getDeaths()
    {
        return $this->container['deaths'];
    }

    /**
     * Sets deaths
     *
     * @param int $deaths The number of deaths by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setDeaths($deaths)
    {
        if (is_null($deaths)) {
            throw new \InvalidArgumentException('non-nullable deaths cannot be null');
        }

        if (($deaths < 0)) {
            throw new \InvalidArgumentException('invalid value for $deaths when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['deaths'] = $deaths;

        return $this;
    }

    /**
     * Gets denies
     *
     * @return int
     */
    public function getDenies()
    {
        return $this->container['denies'];
    }

    /**
     * Sets denies
     *
     * @param int $denies The number of denies by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setDenies($denies)
    {
        if (is_null($denies)) {
            throw new \InvalidArgumentException('non-nullable denies cannot be null');
        }

        if (($denies < 0)) {
            throw new \InvalidArgumentException('invalid value for $denies when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['denies'] = $denies;

        return $this;
    }

    /**
     * Gets enemy_assists
     *
     * @return int
     */
    public function getEnemyAssists()
    {
        return $this->container['enemy_assists'];
    }

    /**
     * Sets enemy_assists
     *
     * @param int $enemy_assists The number of assists by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyAssists($enemy_assists)
    {
        if (is_null($enemy_assists)) {
            throw new \InvalidArgumentException('non-nullable enemy_assists cannot be null');
        }

        if (($enemy_assists < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_assists when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_assists'] = $enemy_assists;

        return $this;
    }

    /**
     * Gets enemy_creeps
     *
     * @return int
     */
    public function getEnemyCreeps()
    {
        return $this->container['enemy_creeps'];
    }

    /**
     * Sets enemy_creeps
     *
     * @param int $enemy_creeps The number of creeps killed by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyCreeps($enemy_creeps)
    {
        if (is_null($enemy_creeps)) {
            throw new \InvalidArgumentException('non-nullable enemy_creeps cannot be null');
        }

        if (($enemy_creeps < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_creeps when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_creeps'] = $enemy_creeps;

        return $this;
    }

    /**
     * Gets enemy_deaths
     *
     * @return int
     */
    public function getEnemyDeaths()
    {
        return $this->container['enemy_deaths'];
    }

    /**
     * Sets enemy_deaths
     *
     * @param int $enemy_deaths The number of deaths by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyDeaths($enemy_deaths)
    {
        if (is_null($enemy_deaths)) {
            throw new \InvalidArgumentException('non-nullable enemy_deaths cannot be null');
        }

        if (($enemy_deaths < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_deaths when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_deaths'] = $enemy_deaths;

        return $this;
    }

    /**
     * Gets enemy_denies
     *
     * @return int
     */
    public function getEnemyDenies()
    {
        return $this->container['enemy_denies'];
    }

    /**
     * Sets enemy_denies
     *
     * @param int $enemy_denies The number of denies by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyDenies($enemy_denies)
    {
        if (is_null($enemy_denies)) {
            throw new \InvalidArgumentException('non-nullable enemy_denies cannot be null');
        }

        if (($enemy_denies < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_denies when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_denies'] = $enemy_denies;

        return $this;
    }

    /**
     * Gets enemy_hero_id
     *
     * @return int
     */
    public function getEnemyHeroId()
    {
        return $this->container['enemy_hero_id'];
    }

    /**
     * Sets enemy_hero_id
     *
     * @param int $enemy_hero_id The ID of the opposing hero. See more: <https://assets.deadlock-api.com/v2/heroes>
     *
     * @return self
     */
    public function setEnemyHeroId($enemy_hero_id)
    {
        if (is_null($enemy_hero_id)) {
            throw new \InvalidArgumentException('non-nullable enemy_hero_id cannot be null');
        }

        if (($enemy_hero_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_hero_id when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_hero_id'] = $enemy_hero_id;

        return $this;
    }

    /**
     * Gets enemy_kills
     *
     * @return int
     */
    public function getEnemyKills()
    {
        return $this->container['enemy_kills'];
    }

    /**
     * Sets enemy_kills
     *
     * @param int $enemy_kills The number of kills by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyKills($enemy_kills)
    {
        if (is_null($enemy_kills)) {
            throw new \InvalidArgumentException('non-nullable enemy_kills cannot be null');
        }

        if (($enemy_kills < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_kills when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_kills'] = $enemy_kills;

        return $this;
    }

    /**
     * Gets enemy_last_hits
     *
     * @return int
     */
    public function getEnemyLastHits()
    {
        return $this->container['enemy_last_hits'];
    }

    /**
     * Sets enemy_last_hits
     *
     * @param int $enemy_last_hits The number of last hits by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyLastHits($enemy_last_hits)
    {
        if (is_null($enemy_last_hits)) {
            throw new \InvalidArgumentException('non-nullable enemy_last_hits cannot be null');
        }

        if (($enemy_last_hits < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_last_hits when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_last_hits'] = $enemy_last_hits;

        return $this;
    }

    /**
     * Gets enemy_networth
     *
     * @return int
     */
    public function getEnemyNetworth()
    {
        return $this->container['enemy_networth'];
    }

    /**
     * Sets enemy_networth
     *
     * @param int $enemy_networth The net worth of `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyNetworth($enemy_networth)
    {
        if (is_null($enemy_networth)) {
            throw new \InvalidArgumentException('non-nullable enemy_networth cannot be null');
        }

        if (($enemy_networth < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_networth when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_networth'] = $enemy_networth;

        return $this;
    }

    /**
     * Gets enemy_obj_damage
     *
     * @return int
     */
    public function getEnemyObjDamage()
    {
        return $this->container['enemy_obj_damage'];
    }

    /**
     * Sets enemy_obj_damage
     *
     * @param int $enemy_obj_damage The amount of objective damage dealt by `enemy_hero_id` when facing `hero_id`.
     *
     * @return self
     */
    public function setEnemyObjDamage($enemy_obj_damage)
    {
        if (is_null($enemy_obj_damage)) {
            throw new \InvalidArgumentException('non-nullable enemy_obj_damage cannot be null');
        }

        if (($enemy_obj_damage < 0)) {
            throw new \InvalidArgumentException('invalid value for $enemy_obj_damage when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['enemy_obj_damage'] = $enemy_obj_damage;

        return $this;
    }

    /**
     * Gets hero_id
     *
     * @return int
     */
    public function getHeroId()
    {
        return $this->container['hero_id'];
    }

    /**
     * Sets hero_id
     *
     * @param int $hero_id The ID of the hero. See more: <https://assets.deadlock-api.com/v2/heroes>
     *
     * @return self
     */
    public function setHeroId($hero_id)
    {
        if (is_null($hero_id)) {
            throw new \InvalidArgumentException('non-nullable hero_id cannot be null');
        }

        if (($hero_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_id when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['hero_id'] = $hero_id;

        return $this;
    }

    /**
     * Gets kills
     *
     * @return int
     */
    public function getKills()
    {
        return $this->container['kills'];
    }

    /**
     * Sets kills
     *
     * @param int $kills The number of kills by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setKills($kills)
    {
        if (is_null($kills)) {
            throw new \InvalidArgumentException('non-nullable kills cannot be null');
        }

        if (($kills < 0)) {
            throw new \InvalidArgumentException('invalid value for $kills when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['kills'] = $kills;

        return $this;
    }

    /**
     * Gets last_hits
     *
     * @return int
     */
    public function getLastHits()
    {
        return $this->container['last_hits'];
    }

    /**
     * Sets last_hits
     *
     * @param int $last_hits The number of last hits by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setLastHits($last_hits)
    {
        if (is_null($last_hits)) {
            throw new \InvalidArgumentException('non-nullable last_hits cannot be null');
        }

        if (($last_hits < 0)) {
            throw new \InvalidArgumentException('invalid value for $last_hits when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['last_hits'] = $last_hits;

        return $this;
    }

    /**
     * Gets matches_played
     *
     * @return int
     */
    public function getMatchesPlayed()
    {
        return $this->container['matches_played'];
    }

    /**
     * Sets matches_played
     *
     * @param int $matches_played The total number of matches played between `hero_id` and `enemy_hero_id` that meet the filter criteria.
     *
     * @return self
     */
    public function setMatchesPlayed($matches_played)
    {
        if (is_null($matches_played)) {
            throw new \InvalidArgumentException('non-nullable matches_played cannot be null');
        }

        if (($matches_played < 0)) {
            throw new \InvalidArgumentException('invalid value for $matches_played when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['matches_played'] = $matches_played;

        return $this;
    }

    /**
     * Gets networth
     *
     * @return int
     */
    public function getNetworth()
    {
        return $this->container['networth'];
    }

    /**
     * Sets networth
     *
     * @param int $networth The net worth of `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setNetworth($networth)
    {
        if (is_null($networth)) {
            throw new \InvalidArgumentException('non-nullable networth cannot be null');
        }

        if (($networth < 0)) {
            throw new \InvalidArgumentException('invalid value for $networth when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['networth'] = $networth;

        return $this;
    }

    /**
     * Gets obj_damage
     *
     * @return int
     */
    public function getObjDamage()
    {
        return $this->container['obj_damage'];
    }

    /**
     * Sets obj_damage
     *
     * @param int $obj_damage The amount of objective damage dealt by `hero_id` when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setObjDamage($obj_damage)
    {
        if (is_null($obj_damage)) {
            throw new \InvalidArgumentException('non-nullable obj_damage cannot be null');
        }

        if (($obj_damage < 0)) {
            throw new \InvalidArgumentException('invalid value for $obj_damage when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['obj_damage'] = $obj_damage;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins The number of times `hero_id` won the match when facing `enemy_hero_id`.
     *
     * @return self
     */
    public function setWins($wins)
    {
        if (is_null($wins)) {
            throw new \InvalidArgumentException('non-nullable wins cannot be null');
        }

        if (($wins < 0)) {
            throw new \InvalidArgumentException('invalid value for $wins when calling HeroCounterStats., must be bigger than or equal to 0.');
        }

        $this->container['wins'] = $wins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


