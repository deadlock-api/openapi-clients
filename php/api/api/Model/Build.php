<?php
/**
 * Build
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Build implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hero_build' => '\OpenAPI\Client\Model\BuildHero',
        'num_favorites' => 'int',
        'num_ignores' => 'int',
        'num_reports' => 'int',
        'num_weekly_favorites' => 'int',
        'rollup_category' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hero_build' => null,
        'num_favorites' => 'int32',
        'num_ignores' => 'int32',
        'num_reports' => 'int32',
        'num_weekly_favorites' => 'int32',
        'rollup_category' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hero_build' => false,
        'num_favorites' => true,
        'num_ignores' => true,
        'num_reports' => true,
        'num_weekly_favorites' => true,
        'rollup_category' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hero_build' => 'hero_build',
        'num_favorites' => 'num_favorites',
        'num_ignores' => 'num_ignores',
        'num_reports' => 'num_reports',
        'num_weekly_favorites' => 'num_weekly_favorites',
        'rollup_category' => 'rollup_category'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hero_build' => 'setHeroBuild',
        'num_favorites' => 'setNumFavorites',
        'num_ignores' => 'setNumIgnores',
        'num_reports' => 'setNumReports',
        'num_weekly_favorites' => 'setNumWeeklyFavorites',
        'rollup_category' => 'setRollupCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hero_build' => 'getHeroBuild',
        'num_favorites' => 'getNumFavorites',
        'num_ignores' => 'getNumIgnores',
        'num_reports' => 'getNumReports',
        'num_weekly_favorites' => 'getNumWeeklyFavorites',
        'rollup_category' => 'getRollupCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('hero_build', $data ?? [], null);
        $this->setIfExists('num_favorites', $data ?? [], null);
        $this->setIfExists('num_ignores', $data ?? [], null);
        $this->setIfExists('num_reports', $data ?? [], null);
        $this->setIfExists('num_weekly_favorites', $data ?? [], null);
        $this->setIfExists('rollup_category', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['hero_build'] === null) {
            $invalidProperties[] = "'hero_build' can't be null";
        }
        if (!is_null($this->container['num_favorites']) && ($this->container['num_favorites'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_favorites', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['num_ignores']) && ($this->container['num_ignores'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_ignores', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['num_reports']) && ($this->container['num_reports'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_reports', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['num_weekly_favorites']) && ($this->container['num_weekly_favorites'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_weekly_favorites', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rollup_category']) && ($this->container['rollup_category'] < 0)) {
            $invalidProperties[] = "invalid value for 'rollup_category', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hero_build
     *
     * @return \OpenAPI\Client\Model\BuildHero
     */
    public function getHeroBuild()
    {
        return $this->container['hero_build'];
    }

    /**
     * Sets hero_build
     *
     * @param \OpenAPI\Client\Model\BuildHero $hero_build hero_build
     *
     * @return self
     */
    public function setHeroBuild($hero_build)
    {
        if (is_null($hero_build)) {
            throw new \InvalidArgumentException('non-nullable hero_build cannot be null');
        }
        $this->container['hero_build'] = $hero_build;

        return $this;
    }

    /**
     * Gets num_favorites
     *
     * @return int|null
     */
    public function getNumFavorites()
    {
        return $this->container['num_favorites'];
    }

    /**
     * Sets num_favorites
     *
     * @param int|null $num_favorites num_favorites
     *
     * @return self
     */
    public function setNumFavorites($num_favorites)
    {
        if (is_null($num_favorites)) {
            array_push($this->openAPINullablesSetToNull, 'num_favorites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('num_favorites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($num_favorites) && ($num_favorites < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_favorites when calling Build., must be bigger than or equal to 0.');
        }

        $this->container['num_favorites'] = $num_favorites;

        return $this;
    }

    /**
     * Gets num_ignores
     *
     * @return int|null
     */
    public function getNumIgnores()
    {
        return $this->container['num_ignores'];
    }

    /**
     * Sets num_ignores
     *
     * @param int|null $num_ignores num_ignores
     *
     * @return self
     */
    public function setNumIgnores($num_ignores)
    {
        if (is_null($num_ignores)) {
            array_push($this->openAPINullablesSetToNull, 'num_ignores');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('num_ignores', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($num_ignores) && ($num_ignores < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_ignores when calling Build., must be bigger than or equal to 0.');
        }

        $this->container['num_ignores'] = $num_ignores;

        return $this;
    }

    /**
     * Gets num_reports
     *
     * @return int|null
     */
    public function getNumReports()
    {
        return $this->container['num_reports'];
    }

    /**
     * Sets num_reports
     *
     * @param int|null $num_reports num_reports
     *
     * @return self
     */
    public function setNumReports($num_reports)
    {
        if (is_null($num_reports)) {
            array_push($this->openAPINullablesSetToNull, 'num_reports');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('num_reports', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($num_reports) && ($num_reports < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_reports when calling Build., must be bigger than or equal to 0.');
        }

        $this->container['num_reports'] = $num_reports;

        return $this;
    }

    /**
     * Gets num_weekly_favorites
     *
     * @return int|null
     */
    public function getNumWeeklyFavorites()
    {
        return $this->container['num_weekly_favorites'];
    }

    /**
     * Sets num_weekly_favorites
     *
     * @param int|null $num_weekly_favorites num_weekly_favorites
     *
     * @return self
     */
    public function setNumWeeklyFavorites($num_weekly_favorites)
    {
        if (is_null($num_weekly_favorites)) {
            array_push($this->openAPINullablesSetToNull, 'num_weekly_favorites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('num_weekly_favorites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($num_weekly_favorites) && ($num_weekly_favorites < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_weekly_favorites when calling Build., must be bigger than or equal to 0.');
        }

        $this->container['num_weekly_favorites'] = $num_weekly_favorites;

        return $this;
    }

    /**
     * Gets rollup_category
     *
     * @return int|null
     */
    public function getRollupCategory()
    {
        return $this->container['rollup_category'];
    }

    /**
     * Sets rollup_category
     *
     * @param int|null $rollup_category rollup_category
     *
     * @return self
     */
    public function setRollupCategory($rollup_category)
    {
        if (is_null($rollup_category)) {
            array_push($this->openAPINullablesSetToNull, 'rollup_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rollup_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($rollup_category) && ($rollup_category < 0)) {
            throw new \InvalidArgumentException('invalid value for $rollup_category when calling Build., must be bigger than or equal to 0.');
        }

        $this->container['rollup_category'] = $rollup_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


