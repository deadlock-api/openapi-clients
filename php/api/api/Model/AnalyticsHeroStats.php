<?php
/**
 * AnalyticsHeroStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock API
 *
 * ## Support the Deadlock API  Whether you're building your own database, developing data science projects, or enhancing your website with game and player analytics, the Deadlock API has the data you need.  Your sponsorship helps keep this resource open, free and future-proof for everyone. By supporting the Deadlock API, you will enable continued development, new features and reliable access for developers, analysts and streamers worldwide.  Help us continue to provide the data you need - sponsor the Deadlock API today!  **-> You can Sponsor the Deadlock API on [Patreon](https://www.patreon.com/c/user?u=68961896) or [GitHub](https://github.com/sponsors/raimannma)**  ## Disclaimer _deadlock-api.com is not endorsed by Valve and does not reflect the views or opinions of Valve or anyone officially involved in producing or managing Valve properties. Valve and all associated properties are trademarks or registered trademarks of Valve Corporation_
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalyticsHeroStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnalyticsHeroStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalyticsHeroStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bucket' => 'int',
        'hero_id' => 'int',
        'losses' => 'int',
        'matches' => 'int',
        'matches_per_bucket' => 'int',
        'players' => 'int',
        'total_assists' => 'int',
        'total_boss_damage' => 'int',
        'total_creep_damage' => 'int',
        'total_deaths' => 'int',
        'total_denies' => 'int',
        'total_kills' => 'int',
        'total_last_hits' => 'int',
        'total_max_health' => 'int',
        'total_net_worth' => 'int',
        'total_neutral_damage' => 'int',
        'total_player_damage' => 'int',
        'total_player_damage_taken' => 'int',
        'total_shots_hit' => 'int',
        'total_shots_missed' => 'int',
        'wins' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bucket' => 'int32',
        'hero_id' => 'int32',
        'losses' => 'int64',
        'matches' => 'int64',
        'matches_per_bucket' => 'int64',
        'players' => 'int64',
        'total_assists' => 'int64',
        'total_boss_damage' => 'int64',
        'total_creep_damage' => 'int64',
        'total_deaths' => 'int64',
        'total_denies' => 'int64',
        'total_kills' => 'int64',
        'total_last_hits' => 'int64',
        'total_max_health' => 'int64',
        'total_net_worth' => 'int64',
        'total_neutral_damage' => 'int64',
        'total_player_damage' => 'int64',
        'total_player_damage_taken' => 'int64',
        'total_shots_hit' => 'int64',
        'total_shots_missed' => 'int64',
        'wins' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bucket' => false,
        'hero_id' => false,
        'losses' => false,
        'matches' => false,
        'matches_per_bucket' => false,
        'players' => false,
        'total_assists' => false,
        'total_boss_damage' => false,
        'total_creep_damage' => false,
        'total_deaths' => false,
        'total_denies' => false,
        'total_kills' => false,
        'total_last_hits' => false,
        'total_max_health' => false,
        'total_net_worth' => false,
        'total_neutral_damage' => false,
        'total_player_damage' => false,
        'total_player_damage_taken' => false,
        'total_shots_hit' => false,
        'total_shots_missed' => false,
        'wins' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bucket' => 'bucket',
        'hero_id' => 'hero_id',
        'losses' => 'losses',
        'matches' => 'matches',
        'matches_per_bucket' => 'matches_per_bucket',
        'players' => 'players',
        'total_assists' => 'total_assists',
        'total_boss_damage' => 'total_boss_damage',
        'total_creep_damage' => 'total_creep_damage',
        'total_deaths' => 'total_deaths',
        'total_denies' => 'total_denies',
        'total_kills' => 'total_kills',
        'total_last_hits' => 'total_last_hits',
        'total_max_health' => 'total_max_health',
        'total_net_worth' => 'total_net_worth',
        'total_neutral_damage' => 'total_neutral_damage',
        'total_player_damage' => 'total_player_damage',
        'total_player_damage_taken' => 'total_player_damage_taken',
        'total_shots_hit' => 'total_shots_hit',
        'total_shots_missed' => 'total_shots_missed',
        'wins' => 'wins'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bucket' => 'setBucket',
        'hero_id' => 'setHeroId',
        'losses' => 'setLosses',
        'matches' => 'setMatches',
        'matches_per_bucket' => 'setMatchesPerBucket',
        'players' => 'setPlayers',
        'total_assists' => 'setTotalAssists',
        'total_boss_damage' => 'setTotalBossDamage',
        'total_creep_damage' => 'setTotalCreepDamage',
        'total_deaths' => 'setTotalDeaths',
        'total_denies' => 'setTotalDenies',
        'total_kills' => 'setTotalKills',
        'total_last_hits' => 'setTotalLastHits',
        'total_max_health' => 'setTotalMaxHealth',
        'total_net_worth' => 'setTotalNetWorth',
        'total_neutral_damage' => 'setTotalNeutralDamage',
        'total_player_damage' => 'setTotalPlayerDamage',
        'total_player_damage_taken' => 'setTotalPlayerDamageTaken',
        'total_shots_hit' => 'setTotalShotsHit',
        'total_shots_missed' => 'setTotalShotsMissed',
        'wins' => 'setWins'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bucket' => 'getBucket',
        'hero_id' => 'getHeroId',
        'losses' => 'getLosses',
        'matches' => 'getMatches',
        'matches_per_bucket' => 'getMatchesPerBucket',
        'players' => 'getPlayers',
        'total_assists' => 'getTotalAssists',
        'total_boss_damage' => 'getTotalBossDamage',
        'total_creep_damage' => 'getTotalCreepDamage',
        'total_deaths' => 'getTotalDeaths',
        'total_denies' => 'getTotalDenies',
        'total_kills' => 'getTotalKills',
        'total_last_hits' => 'getTotalLastHits',
        'total_max_health' => 'getTotalMaxHealth',
        'total_net_worth' => 'getTotalNetWorth',
        'total_neutral_damage' => 'getTotalNeutralDamage',
        'total_player_damage' => 'getTotalPlayerDamage',
        'total_player_damage_taken' => 'getTotalPlayerDamageTaken',
        'total_shots_hit' => 'getTotalShotsHit',
        'total_shots_missed' => 'getTotalShotsMissed',
        'wins' => 'getWins'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bucket', $data ?? [], null);
        $this->setIfExists('hero_id', $data ?? [], null);
        $this->setIfExists('losses', $data ?? [], null);
        $this->setIfExists('matches', $data ?? [], null);
        $this->setIfExists('matches_per_bucket', $data ?? [], null);
        $this->setIfExists('players', $data ?? [], null);
        $this->setIfExists('total_assists', $data ?? [], null);
        $this->setIfExists('total_boss_damage', $data ?? [], null);
        $this->setIfExists('total_creep_damage', $data ?? [], null);
        $this->setIfExists('total_deaths', $data ?? [], null);
        $this->setIfExists('total_denies', $data ?? [], null);
        $this->setIfExists('total_kills', $data ?? [], null);
        $this->setIfExists('total_last_hits', $data ?? [], null);
        $this->setIfExists('total_max_health', $data ?? [], null);
        $this->setIfExists('total_net_worth', $data ?? [], null);
        $this->setIfExists('total_neutral_damage', $data ?? [], null);
        $this->setIfExists('total_player_damage', $data ?? [], null);
        $this->setIfExists('total_player_damage_taken', $data ?? [], null);
        $this->setIfExists('total_shots_hit', $data ?? [], null);
        $this->setIfExists('total_shots_missed', $data ?? [], null);
        $this->setIfExists('wins', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bucket'] === null) {
            $invalidProperties[] = "'bucket' can't be null";
        }
        if (($this->container['bucket'] < 0)) {
            $invalidProperties[] = "invalid value for 'bucket', must be bigger than or equal to 0.";
        }

        if ($this->container['hero_id'] === null) {
            $invalidProperties[] = "'hero_id' can't be null";
        }
        if (($this->container['hero_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'hero_id', must be bigger than or equal to 0.";
        }

        if ($this->container['losses'] === null) {
            $invalidProperties[] = "'losses' can't be null";
        }
        if (($this->container['losses'] < 0)) {
            $invalidProperties[] = "invalid value for 'losses', must be bigger than or equal to 0.";
        }

        if ($this->container['matches'] === null) {
            $invalidProperties[] = "'matches' can't be null";
        }
        if (($this->container['matches'] < 0)) {
            $invalidProperties[] = "invalid value for 'matches', must be bigger than or equal to 0.";
        }

        if ($this->container['matches_per_bucket'] === null) {
            $invalidProperties[] = "'matches_per_bucket' can't be null";
        }
        if (($this->container['matches_per_bucket'] < 0)) {
            $invalidProperties[] = "invalid value for 'matches_per_bucket', must be bigger than or equal to 0.";
        }

        if ($this->container['players'] === null) {
            $invalidProperties[] = "'players' can't be null";
        }
        if (($this->container['players'] < 0)) {
            $invalidProperties[] = "invalid value for 'players', must be bigger than or equal to 0.";
        }

        if ($this->container['total_assists'] === null) {
            $invalidProperties[] = "'total_assists' can't be null";
        }
        if (($this->container['total_assists'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_assists', must be bigger than or equal to 0.";
        }

        if ($this->container['total_boss_damage'] === null) {
            $invalidProperties[] = "'total_boss_damage' can't be null";
        }
        if (($this->container['total_boss_damage'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_boss_damage', must be bigger than or equal to 0.";
        }

        if ($this->container['total_creep_damage'] === null) {
            $invalidProperties[] = "'total_creep_damage' can't be null";
        }
        if (($this->container['total_creep_damage'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_creep_damage', must be bigger than or equal to 0.";
        }

        if ($this->container['total_deaths'] === null) {
            $invalidProperties[] = "'total_deaths' can't be null";
        }
        if (($this->container['total_deaths'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_deaths', must be bigger than or equal to 0.";
        }

        if ($this->container['total_denies'] === null) {
            $invalidProperties[] = "'total_denies' can't be null";
        }
        if (($this->container['total_denies'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_denies', must be bigger than or equal to 0.";
        }

        if ($this->container['total_kills'] === null) {
            $invalidProperties[] = "'total_kills' can't be null";
        }
        if (($this->container['total_kills'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_kills', must be bigger than or equal to 0.";
        }

        if ($this->container['total_last_hits'] === null) {
            $invalidProperties[] = "'total_last_hits' can't be null";
        }
        if (($this->container['total_last_hits'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_last_hits', must be bigger than or equal to 0.";
        }

        if ($this->container['total_max_health'] === null) {
            $invalidProperties[] = "'total_max_health' can't be null";
        }
        if (($this->container['total_max_health'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_max_health', must be bigger than or equal to 0.";
        }

        if ($this->container['total_net_worth'] === null) {
            $invalidProperties[] = "'total_net_worth' can't be null";
        }
        if (($this->container['total_net_worth'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_net_worth', must be bigger than or equal to 0.";
        }

        if ($this->container['total_neutral_damage'] === null) {
            $invalidProperties[] = "'total_neutral_damage' can't be null";
        }
        if (($this->container['total_neutral_damage'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_neutral_damage', must be bigger than or equal to 0.";
        }

        if ($this->container['total_player_damage'] === null) {
            $invalidProperties[] = "'total_player_damage' can't be null";
        }
        if (($this->container['total_player_damage'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_player_damage', must be bigger than or equal to 0.";
        }

        if ($this->container['total_player_damage_taken'] === null) {
            $invalidProperties[] = "'total_player_damage_taken' can't be null";
        }
        if (($this->container['total_player_damage_taken'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_player_damage_taken', must be bigger than or equal to 0.";
        }

        if ($this->container['total_shots_hit'] === null) {
            $invalidProperties[] = "'total_shots_hit' can't be null";
        }
        if (($this->container['total_shots_hit'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_shots_hit', must be bigger than or equal to 0.";
        }

        if ($this->container['total_shots_missed'] === null) {
            $invalidProperties[] = "'total_shots_missed' can't be null";
        }
        if (($this->container['total_shots_missed'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_shots_missed', must be bigger than or equal to 0.";
        }

        if ($this->container['wins'] === null) {
            $invalidProperties[] = "'wins' can't be null";
        }
        if (($this->container['wins'] < 0)) {
            $invalidProperties[] = "invalid value for 'wins', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bucket
     *
     * @return int
     */
    public function getBucket()
    {
        return $this->container['bucket'];
    }

    /**
     * Sets bucket
     *
     * @param int $bucket bucket
     *
     * @return self
     */
    public function setBucket($bucket)
    {
        if (is_null($bucket)) {
            throw new \InvalidArgumentException('non-nullable bucket cannot be null');
        }

        if (($bucket < 0)) {
            throw new \InvalidArgumentException('invalid value for $bucket when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['bucket'] = $bucket;

        return $this;
    }

    /**
     * Gets hero_id
     *
     * @return int
     */
    public function getHeroId()
    {
        return $this->container['hero_id'];
    }

    /**
     * Sets hero_id
     *
     * @param int $hero_id See more: <https://assets.deadlock-api.com/v2/heroes>
     *
     * @return self
     */
    public function setHeroId($hero_id)
    {
        if (is_null($hero_id)) {
            throw new \InvalidArgumentException('non-nullable hero_id cannot be null');
        }

        if (($hero_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $hero_id when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['hero_id'] = $hero_id;

        return $this;
    }

    /**
     * Gets losses
     *
     * @return int
     */
    public function getLosses()
    {
        return $this->container['losses'];
    }

    /**
     * Sets losses
     *
     * @param int $losses losses
     *
     * @return self
     */
    public function setLosses($losses)
    {
        if (is_null($losses)) {
            throw new \InvalidArgumentException('non-nullable losses cannot be null');
        }

        if (($losses < 0)) {
            throw new \InvalidArgumentException('invalid value for $losses when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['losses'] = $losses;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return int
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param int $matches matches
     *
     * @return self
     */
    public function setMatches($matches)
    {
        if (is_null($matches)) {
            throw new \InvalidArgumentException('non-nullable matches cannot be null');
        }

        if (($matches < 0)) {
            throw new \InvalidArgumentException('invalid value for $matches when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['matches'] = $matches;

        return $this;
    }

    /**
     * Gets matches_per_bucket
     *
     * @return int
     */
    public function getMatchesPerBucket()
    {
        return $this->container['matches_per_bucket'];
    }

    /**
     * Sets matches_per_bucket
     *
     * @param int $matches_per_bucket matches_per_bucket
     *
     * @return self
     */
    public function setMatchesPerBucket($matches_per_bucket)
    {
        if (is_null($matches_per_bucket)) {
            throw new \InvalidArgumentException('non-nullable matches_per_bucket cannot be null');
        }

        if (($matches_per_bucket < 0)) {
            throw new \InvalidArgumentException('invalid value for $matches_per_bucket when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['matches_per_bucket'] = $matches_per_bucket;

        return $this;
    }

    /**
     * Gets players
     *
     * @return int
     */
    public function getPlayers()
    {
        return $this->container['players'];
    }

    /**
     * Sets players
     *
     * @param int $players players
     *
     * @return self
     */
    public function setPlayers($players)
    {
        if (is_null($players)) {
            throw new \InvalidArgumentException('non-nullable players cannot be null');
        }

        if (($players < 0)) {
            throw new \InvalidArgumentException('invalid value for $players when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['players'] = $players;

        return $this;
    }

    /**
     * Gets total_assists
     *
     * @return int
     */
    public function getTotalAssists()
    {
        return $this->container['total_assists'];
    }

    /**
     * Sets total_assists
     *
     * @param int $total_assists total_assists
     *
     * @return self
     */
    public function setTotalAssists($total_assists)
    {
        if (is_null($total_assists)) {
            throw new \InvalidArgumentException('non-nullable total_assists cannot be null');
        }

        if (($total_assists < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_assists when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_assists'] = $total_assists;

        return $this;
    }

    /**
     * Gets total_boss_damage
     *
     * @return int
     */
    public function getTotalBossDamage()
    {
        return $this->container['total_boss_damage'];
    }

    /**
     * Sets total_boss_damage
     *
     * @param int $total_boss_damage total_boss_damage
     *
     * @return self
     */
    public function setTotalBossDamage($total_boss_damage)
    {
        if (is_null($total_boss_damage)) {
            throw new \InvalidArgumentException('non-nullable total_boss_damage cannot be null');
        }

        if (($total_boss_damage < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_boss_damage when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_boss_damage'] = $total_boss_damage;

        return $this;
    }

    /**
     * Gets total_creep_damage
     *
     * @return int
     */
    public function getTotalCreepDamage()
    {
        return $this->container['total_creep_damage'];
    }

    /**
     * Sets total_creep_damage
     *
     * @param int $total_creep_damage total_creep_damage
     *
     * @return self
     */
    public function setTotalCreepDamage($total_creep_damage)
    {
        if (is_null($total_creep_damage)) {
            throw new \InvalidArgumentException('non-nullable total_creep_damage cannot be null');
        }

        if (($total_creep_damage < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_creep_damage when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_creep_damage'] = $total_creep_damage;

        return $this;
    }

    /**
     * Gets total_deaths
     *
     * @return int
     */
    public function getTotalDeaths()
    {
        return $this->container['total_deaths'];
    }

    /**
     * Sets total_deaths
     *
     * @param int $total_deaths total_deaths
     *
     * @return self
     */
    public function setTotalDeaths($total_deaths)
    {
        if (is_null($total_deaths)) {
            throw new \InvalidArgumentException('non-nullable total_deaths cannot be null');
        }

        if (($total_deaths < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_deaths when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_deaths'] = $total_deaths;

        return $this;
    }

    /**
     * Gets total_denies
     *
     * @return int
     */
    public function getTotalDenies()
    {
        return $this->container['total_denies'];
    }

    /**
     * Sets total_denies
     *
     * @param int $total_denies total_denies
     *
     * @return self
     */
    public function setTotalDenies($total_denies)
    {
        if (is_null($total_denies)) {
            throw new \InvalidArgumentException('non-nullable total_denies cannot be null');
        }

        if (($total_denies < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_denies when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_denies'] = $total_denies;

        return $this;
    }

    /**
     * Gets total_kills
     *
     * @return int
     */
    public function getTotalKills()
    {
        return $this->container['total_kills'];
    }

    /**
     * Sets total_kills
     *
     * @param int $total_kills total_kills
     *
     * @return self
     */
    public function setTotalKills($total_kills)
    {
        if (is_null($total_kills)) {
            throw new \InvalidArgumentException('non-nullable total_kills cannot be null');
        }

        if (($total_kills < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_kills when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_kills'] = $total_kills;

        return $this;
    }

    /**
     * Gets total_last_hits
     *
     * @return int
     */
    public function getTotalLastHits()
    {
        return $this->container['total_last_hits'];
    }

    /**
     * Sets total_last_hits
     *
     * @param int $total_last_hits total_last_hits
     *
     * @return self
     */
    public function setTotalLastHits($total_last_hits)
    {
        if (is_null($total_last_hits)) {
            throw new \InvalidArgumentException('non-nullable total_last_hits cannot be null');
        }

        if (($total_last_hits < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_last_hits when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_last_hits'] = $total_last_hits;

        return $this;
    }

    /**
     * Gets total_max_health
     *
     * @return int
     */
    public function getTotalMaxHealth()
    {
        return $this->container['total_max_health'];
    }

    /**
     * Sets total_max_health
     *
     * @param int $total_max_health total_max_health
     *
     * @return self
     */
    public function setTotalMaxHealth($total_max_health)
    {
        if (is_null($total_max_health)) {
            throw new \InvalidArgumentException('non-nullable total_max_health cannot be null');
        }

        if (($total_max_health < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_max_health when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_max_health'] = $total_max_health;

        return $this;
    }

    /**
     * Gets total_net_worth
     *
     * @return int
     */
    public function getTotalNetWorth()
    {
        return $this->container['total_net_worth'];
    }

    /**
     * Sets total_net_worth
     *
     * @param int $total_net_worth total_net_worth
     *
     * @return self
     */
    public function setTotalNetWorth($total_net_worth)
    {
        if (is_null($total_net_worth)) {
            throw new \InvalidArgumentException('non-nullable total_net_worth cannot be null');
        }

        if (($total_net_worth < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_net_worth when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_net_worth'] = $total_net_worth;

        return $this;
    }

    /**
     * Gets total_neutral_damage
     *
     * @return int
     */
    public function getTotalNeutralDamage()
    {
        return $this->container['total_neutral_damage'];
    }

    /**
     * Sets total_neutral_damage
     *
     * @param int $total_neutral_damage total_neutral_damage
     *
     * @return self
     */
    public function setTotalNeutralDamage($total_neutral_damage)
    {
        if (is_null($total_neutral_damage)) {
            throw new \InvalidArgumentException('non-nullable total_neutral_damage cannot be null');
        }

        if (($total_neutral_damage < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_neutral_damage when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_neutral_damage'] = $total_neutral_damage;

        return $this;
    }

    /**
     * Gets total_player_damage
     *
     * @return int
     */
    public function getTotalPlayerDamage()
    {
        return $this->container['total_player_damage'];
    }

    /**
     * Sets total_player_damage
     *
     * @param int $total_player_damage total_player_damage
     *
     * @return self
     */
    public function setTotalPlayerDamage($total_player_damage)
    {
        if (is_null($total_player_damage)) {
            throw new \InvalidArgumentException('non-nullable total_player_damage cannot be null');
        }

        if (($total_player_damage < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_player_damage when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_player_damage'] = $total_player_damage;

        return $this;
    }

    /**
     * Gets total_player_damage_taken
     *
     * @return int
     */
    public function getTotalPlayerDamageTaken()
    {
        return $this->container['total_player_damage_taken'];
    }

    /**
     * Sets total_player_damage_taken
     *
     * @param int $total_player_damage_taken total_player_damage_taken
     *
     * @return self
     */
    public function setTotalPlayerDamageTaken($total_player_damage_taken)
    {
        if (is_null($total_player_damage_taken)) {
            throw new \InvalidArgumentException('non-nullable total_player_damage_taken cannot be null');
        }

        if (($total_player_damage_taken < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_player_damage_taken when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_player_damage_taken'] = $total_player_damage_taken;

        return $this;
    }

    /**
     * Gets total_shots_hit
     *
     * @return int
     */
    public function getTotalShotsHit()
    {
        return $this->container['total_shots_hit'];
    }

    /**
     * Sets total_shots_hit
     *
     * @param int $total_shots_hit total_shots_hit
     *
     * @return self
     */
    public function setTotalShotsHit($total_shots_hit)
    {
        if (is_null($total_shots_hit)) {
            throw new \InvalidArgumentException('non-nullable total_shots_hit cannot be null');
        }

        if (($total_shots_hit < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_shots_hit when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_shots_hit'] = $total_shots_hit;

        return $this;
    }

    /**
     * Gets total_shots_missed
     *
     * @return int
     */
    public function getTotalShotsMissed()
    {
        return $this->container['total_shots_missed'];
    }

    /**
     * Sets total_shots_missed
     *
     * @param int $total_shots_missed total_shots_missed
     *
     * @return self
     */
    public function setTotalShotsMissed($total_shots_missed)
    {
        if (is_null($total_shots_missed)) {
            throw new \InvalidArgumentException('non-nullable total_shots_missed cannot be null');
        }

        if (($total_shots_missed < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_shots_missed when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['total_shots_missed'] = $total_shots_missed;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins wins
     *
     * @return self
     */
    public function setWins($wins)
    {
        if (is_null($wins)) {
            throw new \InvalidArgumentException('non-nullable wins cannot be null');
        }

        if (($wins < 0)) {
            throw new \InvalidArgumentException('invalid value for $wins when calling AnalyticsHeroStats., must be bigger than or equal to 0.');
        }

        $this->container['wins'] = $wins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


